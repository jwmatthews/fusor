"use strict";
/* jshint ignore:start */

/* jshint ignore:end */

define('fusor-ember-cli/adapters/application', ['exports', 'ember-data', 'ember', 'active-model-adapter'], function (exports, _emberData, _ember, _activeModelAdapter) {

  var token = _ember['default'].$('meta[name="csrf-token"]').attr('content');
  exports['default'] = _activeModelAdapter['default'].extend({
    namespace: 'api/v21',
    headers: {
      "X-CSRF-Token": token
    },
    shouldReloadRecord: function shouldReloadRecord(store, ticketSnapshot) {
      return true;
    },
    shouldReloadAll: function shouldReloadAll() {
      return true;
    },
    handleResponse: function handleResponse(status /*, headers, payload */) {
      if (status === 401) {
        this.eventBus.trigger('displayErrorModal', {
          errorMessage: 'It looks like your session has timed out.' + ' Try logging back in again to continue.',
          okayCallback: function okayCallback() {
            document.location.pathname = '/'; // Redirect to root
          }
        });
      }
      return this._super.apply(this, arguments);
    }
  });
});
define('fusor-ember-cli/adapters/deployment-plan', ['exports', 'fusor-ember-cli/adapters/application'], function (exports, _fusorEmberCliAdaptersApplication) {
  exports['default'] = _fusorEmberCliAdaptersApplication['default'].extend({

    // 'overcloud' is hard coded
    // ex. /fusor/api/openstack/deployments/:id/deployment_plans/overcloud
    urlForFindRecord: function urlForFindRecord(id, modelName, snapshot) {
      return '/fusor/api/openstack/deployments/' + id + '/deployment_plans/overcloud';
    },

    shouldReloadRecord: function shouldReloadRecord(store, snapshot) {
      return true;
    },

    // using queryrecord because findRecord won't stop caching
    urlForQueryRecord: function urlForQueryRecord(query, modelName) {
      if (query.deployment_id) {
        return '/fusor/api/openstack/deployments/' + query.deployment_id + '/deployment_plans/overcloud';
      }
      return this._super(query, modelName);
    }
  });
});
define('fusor-ember-cli/adapters/deployment', ['exports', 'fusor-ember-cli/adapters/application'], function (exports, _fusorEmberCliAdaptersApplication) {
  exports['default'] = _fusorEmberCliAdaptersApplication['default'].extend({
    namespace: 'fusor/api/v21'
  });
});
define('fusor-ember-cli/adapters/entitlement', ['exports', 'fusor-ember-cli/adapters/application'], function (exports, _fusorEmberCliAdaptersApplication) {
  exports['default'] = _fusorEmberCliAdaptersApplication['default'].extend({

    urlForQuery: function urlForQuery(query, modelName) {
      // Use consumer UUID to get entitlements
      // GET /customer_portal/consumers/#{CONSUMER['uuid']}/entitlements
      return '/customer_portal/consumers/' + query['uuid'] + '/entitlements';
    }

  });
});
define('fusor-ember-cli/adapters/flavor', ['exports', 'fusor-ember-cli/adapters/application'], function (exports, _fusorEmberCliAdaptersApplication) {
  exports['default'] = _fusorEmberCliAdaptersApplication['default'].extend({

    urlForQuery: function urlForQuery(query, modelName) {
      return '/fusor/api/openstack/deployments/' + query['deployment_id'] + '/flavors';
    }

  });
});
define('fusor-ember-cli/adapters/image', ['exports', 'fusor-ember-cli/adapters/application'], function (exports, _fusorEmberCliAdaptersApplication) {
  exports['default'] = _fusorEmberCliAdaptersApplication['default'].extend({

    urlForQuery: function urlForQuery(query, modelName) {
      return '/fusor/api/openstack/deployments/' + query['deployment_id'] + '/images';
    }

  });
});
define('fusor-ember-cli/adapters/ls-adapter', ['exports', 'ember-localstorage-adapter/adapters/ls-adapter'], function (exports, _emberLocalstorageAdapterAdaptersLsAdapter) {
  exports['default'] = _emberLocalstorageAdapterAdaptersLsAdapter['default'];
});
define('fusor-ember-cli/adapters/management-application', ['exports', 'fusor-ember-cli/adapters/application'], function (exports, _fusorEmberCliAdaptersApplication) {
  exports['default'] = _fusorEmberCliAdaptersApplication['default'].extend({

    namespace: '',
    urlForQuery: function urlForQuery(query, modelName) {
      // Use owner key to get consumers (subscription application manangers)
      // GET /customer_portal/owners/#{OWNER['key']}/consumers?type=satellite
      return '/customer_portal/owners/' + query['owner_key'] + '/consumers?type=satellite';
    }

  });
});
define('fusor-ember-cli/adapters/node', ['exports', 'fusor-ember-cli/adapters/application'], function (exports, _fusorEmberCliAdaptersApplication) {
  exports['default'] = _fusorEmberCliAdaptersApplication['default'].extend({

    urlForQuery: function urlForQuery(query, modelName) {
      return '/fusor/api/openstack/deployments/' + query['deployment_id'] + '/nodes';
    }

  });
});
define('fusor-ember-cli/adapters/openstack-deployment', ['exports', 'fusor-ember-cli/adapters/application'], function (exports, _fusorEmberCliAdaptersApplication) {
  exports['default'] = _fusorEmberCliAdaptersApplication['default'].extend({
    namespace: 'fusor/api/v21'
  });
});
define('fusor-ember-cli/adapters/pool', ['exports', 'fusor-ember-cli/adapters/application'], function (exports, _fusorEmberCliAdaptersApplication) {
  exports['default'] = _fusorEmberCliAdaptersApplication['default'].extend({

    namespace: '',
    urlForQuery: function urlForQuery(query, modelName) {
      // Use consumer UUID to get pools
      // GET /customer_portal/pools?consumer=' + consumerUUID + '&listall=false');
      return "/customer_portal/pools?consumer=" + query["uuid"] + "&listall=false";
    }

  });
});
define('fusor-ember-cli/adapters/session-portal', ['exports', 'ember-localstorage-adapter'], function (exports, _emberLocalstorageAdapter) {
  exports['default'] = _emberLocalstorageAdapter['default'].extend({
    namespace: 'rhci',
    shouldReloadAll: function shouldReloadAll() {
      return true;
    }
  });
});
define('fusor-ember-cli/adapters/subscription', ['exports', 'fusor-ember-cli/adapters/application'], function (exports, _fusorEmberCliAdaptersApplication) {
  exports['default'] = _fusorEmberCliAdaptersApplication['default'].extend({
    namespace: 'fusor/api/v21'
  });
});
define('fusor-ember-cli/app', ['exports', 'ember', 'ember/resolver', 'ember/load-initializers', 'fusor-ember-cli/config/environment'], function (exports, _ember, _emberResolver, _emberLoadInitializers, _fusorEmberCliConfigEnvironment) {

  var App;

  _ember['default'].MODEL_FACTORY_INJECTIONS = true;

  App = _ember['default'].Application.extend({
    modulePrefix: _fusorEmberCliConfigEnvironment['default'].modulePrefix,
    podModulePrefix: _fusorEmberCliConfigEnvironment['default'].podModulePrefix,
    Resolver: _emberResolver['default']
  });

  (0, _emberLoadInitializers['default'])(App, _fusorEmberCliConfigEnvironment['default'].modulePrefix);

  // Instantiate and expose global event bus
  App.EventBus = _ember['default'].Object.extend(_ember['default'].Evented).create();

  exports['default'] = App;
});
define('fusor-ember-cli/components/abandon-deployment-modal', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({

    actions: {
      closeModal: function closeModal() {
        this.set('openModal', false);
      },
      executeAbandonment: function executeAbandonment() {
        this.set('openModal', false);
        this.get('targetObject').send('executeAbandonment');
      }
    }

  });
});
define('fusor-ember-cli/components/accordion-item', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    isOpen: false,

    classNames: ['accordion-item'],

    actions: {
      openItem: function openItem() {
        this.set('isOpen', this.toggleProperty('isOpen'));
      }
    }
  });
});
define('fusor-ember-cli/components/active-link', ['exports', 'ember-cli-active-link-wrapper/components/active-link'], function (exports, _emberCliActiveLinkWrapperComponentsActiveLink) {
  exports['default'] = _emberCliActiveLinkWrapperComponentsActiveLink['default'];
});
define('fusor-ember-cli/components/add-node-registration', ['exports', 'ember', 'fusor-ember-cli/mixins/osp-node-form-mixin'], function (exports, _ember, _fusorEmberCliMixinsOspNodeFormMixin) {
  exports['default'] = _ember['default'].Component.extend(_fusorEmberCliMixinsOspNodeFormMixin['default'], {
    isNewNodeMethodManual: true,
    resetErrorsMessageKey: 'add-node-registration.text-f:resetErrors',

    addNodeTitle: _ember['default'].computed('nodeInfo.address', function () {
      return "Add Node(s) to " + this.get('nodeInfo.address');
    }),

    nodeDriverHumanized: _ember['default'].computed('nodeInfo.driver', function () {
      var driver = this.get('drivers').findBy('value', this.get('nodeInfo.driver'));
      if (driver) {
        return driver.label;
      }
    }),

    disableNewNodesSubmit: _ember['default'].computed.not('isValidNewNodeManual'),

    onOpenModal: _ember['default'].observer('openModal', function () {
      if (this.get('openModal')) {
        _ember['default'].run.once(this, 'initInfo');
      }
    }),

    actions: {
      cancelAddNodes: function cancelAddNodes() {
        this.set('openModal', false);
      },
      submitAddNodes: function submitAddNodes() {
        this.prepManualNodeInfo();
        this.sendAction('submitAddNodes', this.get('nodeInfo'));
        this.set('openModal', false);
      }
    },

    initInfo: function initInfo() {
      this.eventBus.trigger(this.get('resetErrorsMessageKey'));
      this.set('manualMacAddresses', '');
    }
  });
});
define('fusor-ember-cli/components/app-version', ['exports', 'ember-cli-app-version/components/app-version', 'fusor-ember-cli/config/environment'], function (exports, _emberCliAppVersionComponentsAppVersion, _fusorEmberCliConfigEnvironment) {
  var _config$APP = _fusorEmberCliConfigEnvironment['default'].APP;
  var name = _config$APP.name;
  var version = _config$APP.version;
  exports['default'] = _emberCliAppVersionComponentsAppVersion['default'].extend({
    version: version,
    name: name
  });
});
define('fusor-ember-cli/components/auto-node-registration-mac-address', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({

    hostNumber: _ember['default'].computed('index', 'indexOffset', function () {
      var index = this.get('index');
      var indexOffset = this.get('indexOffset');
      return indexOffset ? index + indexOffset + 1 : index + 1;
    }),

    deselected: _ember['default'].computed.not('host.selected'),

    readyStatusClass: _ember['default'].computed('host.selected', 'host.value', function () {
      if (!this.get('host.selected')) {
        return 'new-node-detect-deselected';
      }

      if (_ember['default'].isPresent(this.get('host.value'))) {
        return 'new-node-detect-ready';
      }

      return 'new-node-detect-invalid';
    }),

    isInvalid: _ember['default'].computed('host.selected', 'host.value', function () {
      return this.get('host.selected') && !_ember['default'].isPresent(this.get('host.value'));
    }),

    selectId: _ember['default'].computed('hostNumber', function () {
      return 'autoDetectNodeMacAddressSelect' + this.get('hostNumber');
    }),

    multipleMacAddresses: _ember['default'].computed('host.macAddresses', function () {
      return this.get('host.macAddresses.length') > 1;
    })
  });
});
define('fusor-ember-cli/components/base-f', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({

    didInsertElement: function didInsertElement() {
      var $component = this.$();
      return $component.find('[data-toggle="popover"]').popover({
        html: false,
        trigger: 'focus hover',
        title: this.get('label'),
        placement: 'right',
        content: this.get('helpText')
      });
    },

    willDestroyElement: function willDestroyElement() {
      return _ember['default'].$('[data-toggle="popover"]').popover('destroy');
    },

    labelClassSize: _ember['default'].computed(function () {
      return this.getWithDefault('labelSize', 'col-lg-2 col-md-3 col-sm-5');
    }),

    inputClassSize: _ember['default'].computed(function () {
      return this.getWithDefault('inputSize', 'col-lg-4 col-md-6 col-sm-6');
    }),

    showUnits: _ember['default'].computed('unitsLabel', function () {
      return !_ember['default'].isBlank(this.get('unitsLabel'));
    }),

    showHelpPopover: _ember['default'].computed('helpText', function () {
      return !_ember['default'].isBlank(this.get('helpText'));
    }),

    unitsClassSize: _ember['default'].computed(function () {
      return this.getWithDefault('unitsSize', 'col-md-2');
    }),

    actions: {
      doNothing: function doNothing() {
        return false;
      }
    }
  });
});
define('fusor-ember-cli/components/base-popover', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    didInsertElement: function didInsertElement() {
      return _ember['default'].$('[data-toggle=popover]').popover();
    },

    willDestroyElement: function willDestroyElement() {
      return _ember['default'].$('[data-toggle=popover]').popover('destroy');
    }

  });
});
define('fusor-ember-cli/components/basic-dropdown/content', ['exports', 'ember-basic-dropdown/components/basic-dropdown/content'], function (exports, _emberBasicDropdownComponentsBasicDropdownContent) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberBasicDropdownComponentsBasicDropdownContent['default'];
    }
  });
});
define('fusor-ember-cli/components/basic-dropdown', ['exports', 'ember-basic-dropdown/components/basic-dropdown'], function (exports, _emberBasicDropdownComponentsBasicDropdown) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberBasicDropdownComponentsBasicDropdown['default'];
    }
  });
});
define('fusor-ember-cli/components/bootstrap-switch', ['exports', 'ember-bootstrap-switch/components/bootstrap-switch'], function (exports, _emberBootstrapSwitchComponentsBootstrapSwitch) {
  exports['default'] = _emberBootstrapSwitchComponentsBootstrapSwitch['default'];
});
define('fusor-ember-cli/components/bs-switch', ['exports', 'ember-bootstrap-switch/components/bootstrap-switch'], function (exports, _emberBootstrapSwitchComponentsBootstrapSwitch) {
  exports['default'] = _emberBootstrapSwitchComponentsBootstrapSwitch['default'];
});
define('fusor-ember-cli/components/button-f', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    tagName: 'button',
    classNames: ['btn btn-primary next-button'],
    attributeBindings: ['disabled'],
    click: function click() {
      this.sendAction();
    }
  });
});
define('fusor-ember-cli/components/button-selection', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({

    classNames: ['button-selection'],

    classNameBindings: ['buttonSelectionSelected', 'buttonDisabled'],

    buttonSelectionSelected: _ember['default'].computed('value', 'groupValue', 'customFocused', function () {
      return this.get('value') === this.get('groupValue') && !this.get('customFocused');
    }),

    buttonDisabled: _ember['default'].computed('disabled', function () {
      return this.get('disabled');
    }),

    cssId: _ember['default'].computed('buttonType', 'value', function () {
      return this.get('buttonType') + '-' + this.get('value');
    }),

    click: function click() {
      if (!this.get('disabled')) {
        this.sendAction('changed', this.get('value'));
      }
    }

  });
});
define('fusor-ember-cli/components/cancel-back-next', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({

    bottomBar: true,
    classNameBindings: ['bottomBar:row', 'bottomBar:cancel-back-next-row:cancel-back-next-container'],

    dataQciBackButton: _ember['default'].computed('backRouteName', function () {
      return 'back-' + this.get('backRouteName');
    }),

    dataQciNextButton: _ember['default'].computed('nextRouteName', function () {
      return 'next-' + this.get('nextRouteName');
    }),

    dataQciCancelButton: _ember['default'].computed('nextRouteName', function () {
      return 'cancel-' + this.get('nextRouteName');
    }),

    actions: {
      openCancelDeploymentModal: function openCancelDeploymentModal() {
        this.set('openModal', true);
      },

      saveAndCancelDeployment: function saveAndCancelDeployment() {
        this.get('targetObject').send('saveAndCancelDeployment');
        this.set('openModal', false);
      },

      cancelAndDeleteDeployment: function cancelAndDeleteDeployment() {
        this.get('targetObject').send('cancelAndDeleteDeployment');
        this.set('openModal', false);
      },

      cancelAndRollbackNewDeployment: function cancelAndRollbackNewDeployment() {
        this.get('targetObject').send('cancelAndRollbackNewDeployment');
      }
    }

  });
});
define('fusor-ember-cli/components/cancel-deployment-modal', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({

    title: _ember['default'].computed('deploymentName', function () {
      var deploymentName = this.get('deploymentName');

      if (_ember['default'].isPresent(deploymentName)) {
        return 'Cancel QCI Deployment - ' + deploymentName;
      }

      return 'Cancel QCI Deployment';
    }),

    actions: {

      saveAndCancelDeployment: function saveAndCancelDeployment() {
        this.set('openModal', false);
        this.get('targetObject').send('saveAndCancelDeployment');
      },

      cancelAndDeleteDeployment: function cancelAndDeleteDeployment() {
        this.set('openModal', false);
        this.get('targetObject').send('cancelAndDeleteDeployment');
      },

      cancelAndRollbackNewDeployment: function cancelAndRollbackNewDeployment() {
        this.set('openModal', false);
        this.get('targetObject').send('cancelAndRollbackNewDeployment');
      },

      closeModal: function closeModal() {
        this.set('openModal', false);
      }

    }

  });
});
define('fusor-ember-cli/components/column-name', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    arrowIcon: _ember['default'].computed('col_name', 'sort_by', 'dir', function () {
      var col_name = this.get('col_name');
      var sort_by = this.get('sort_by');
      var dir = this.get('dir') ? this.get('dir').toUpperCase() : '';
      if (col_name === sort_by) {
        if (dir === 'DESC') {
          return '▼';
        } else if (dir === 'ASC') {
          return '▲';
        }
      }
    })
  });
});
define('fusor-ember-cli/components/content-mirror-f', ['exports', 'ember', 'fusor-ember-cli/components/text-f', 'ic-ajax'], function (exports, _ember, _fusorEmberCliComponentsTextF, _icAjax) {

  var CDN_VERIFY_TIMEOUT = 3000;

  exports['default'] = _fusorEmberCliComponentsTextF['default'].extend({
    responseCounter: 0,
    validationTrigger: null,
    isVerifyingContentMirror: false,
    dirty: false,

    didInsertElement: function didInsertElement() {
      if (this.get('cdnUrl')) {
        this.queueValidation();
      }
    },

    contentMirrorObserver: _ember['default'].observer('cdnUrl', function () {
      this.queueValidation();
    }),

    queueValidation: function queueValidation() {
      var _this = this;

      if (this.get('isVerifyingContentMirror') === false) {
        this.setIsVerifyingContentMirror(true);
      }

      this.set('dirty', true);
      var validationTrigger = this.get('validationTrigger');

      if (validationTrigger) {
        _ember['default'].run.cancel(validationTrigger);
      }

      this.set('validationTrigger', _ember['default'].run.later(this, function () {
        return _this.onValidate();
      }, CDN_VERIFY_TIMEOUT));
    },

    onValidate: function onValidate() {
      var _this2 = this;

      var cdnUrl = this.get('cdnUrl');
      var protocolCheckRx = /^https?:\/\//;
      var whitespaceCheckRx = /\s/;

      if (whitespaceCheckRx.test(cdnUrl)) {
        this.setIsVerifyingContentMirror(false);
        this.setContentMirrorValidation(false, 'URL contains whitespace');
        return;
      }

      if (!protocolCheckRx.test(cdnUrl)) {
        this.setIsVerifyingContentMirror(false);
        this.setContentMirrorValidation(false, 'Missing http protocol');
        return;
      }

      // Guard against race condition of newer responses returning faster
      // than old responses that could result in valid content mirrors
      // being marked invalid, or vice versa
      var responseCounter = this.get('responseCounter') + 1;
      this.set('responseCounter', responseCounter);

      var token = _ember['default'].$('meta[name="csrf-token"]').attr('content');
      var deploymentId = this.get('deploymentId');

      var shouldUpdate = function shouldUpdate() {
        return responseCounter === _this2.get('responseCounter') && !_this2.get('dirty');
      };

      this.set('dirty', false);
      this.set('validationTrigger', null);

      (0, _icAjax['default'])({
        url: '/fusor/api/v21/deployments/' + deploymentId + '/validate_cdn',
        headers: {
          "Accept": "application/json",
          "X-CSRF-Token": token
        },
        data: {
          cdn_url: encodeURIComponent(cdnUrl)
        }
      }).then(function (res) {
        // If the response is not the newest response local responseCounter
        // will be less than the responseCounter member field),
        // we want throw away the result since we know a more accurate
        // result is incoming or already has updated our state
        if (shouldUpdate()) {
          _this2.setContentMirrorValidation(res.cdn_url_code === '200');
        }
      })['catch'](function (err) {
        if (shouldUpdate()) {
          _this2.setContentMirrorValidation(false);
        }
      })['finally'](function () {
        if (shouldUpdate()) {
          _this2.setIsVerifyingContentMirror(false);
        }
      });
    },

    setContentMirrorValidation: function setContentMirrorValidation(isValid, validationMsg) {
      this.set('isContentMirrorValid', isValid);

      if (isValid) {
        if (!validationMsg) {
          this.set('contentMirrorValidationMsg', 'Content mirror verified');
        }
        this.sendAction('mirrorStatusUpdate', this.get('MirrorStatus').VALID);
      } else {
        if (!validationMsg) {
          this.set('contentMirrorValidationMsg', 'Invalid content mirror');
        }
        this.sendAction('mirrorStatusUpdate', this.get('MirrorStatus').INVALID);
      }

      if (validationMsg) {
        this.set('contentMirrorValidationMsg', validationMsg);
      }
    },
    setIsVerifyingContentMirror: function setIsVerifyingContentMirror(isVerifying) {
      this.set('isVerifyingContentMirror', isVerifying);

      if (isVerifying) {
        this.sendAction('mirrorStatusUpdate', this.get('MirrorStatus').VALIDATING);
      }
    }
  });
});
define('fusor-ember-cli/components/continue-deployment-modal', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({

    title: _ember['default'].computed('deployment.name', function () {
      return "Continue QCI Deployment - " + this.get('deployment.name');
    }),

    actions: {
      installDeployment: function installDeployment() {
        this.set('openModal', false);
        this.sendAction('installDeployment', this.get('deployment'));
      },

      cancelModal: function cancelModal() {
        this.set('openModal', false);
      }
    }

  });
});
define('fusor-ember-cli/components/debug-info', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({

    isOpen: false,

    click: function click() {
      this.set('isOpen', this.toggleProperty('isOpen'));
    }

  });
});
define('fusor-ember-cli/components/delete-deployment-button', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    tagName: 'span',

    click: function click() {
      this.sendAction('action', this.get('deployment'));
    }

  });
});
define('fusor-ember-cli/components/delete-deployment-modal', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({

    title: _ember['default'].computed('deployment.name', function () {
      return "Delete QCI Deployment - " + this.get('deployment.name');
    }),

    actions: {
      deleteDeployment: function deleteDeployment() {
        this.set('openModal', false);
        this.sendAction('deleteDeployment', this.get('deployment'));
      },

      cancelModal: function cancelModal() {
        this.set('openModal', false);
      }
    }

  });
});
define('fusor-ember-cli/components/delete-node-confirmation', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({

    deleteNodeTitle: _ember['default'].computed('nodeToDeleteLabel', function () {
      return 'Delete Node ' + this.get('nodeToDeleteLabel');
    }),

    actions: {
      addMacAddress: function addMacAddress() {
        this.sendAction('addMacAddress');
      },
      cancelDeleteNode: function cancelDeleteNode() {
        this.set('openModal', false);
      },
      confirmDeleteNode: function confirmDeleteNode() {
        this.sendAction('confirmDeleteNode');
        this.set('openModal', false);
      }
    }

  });
});
define('fusor-ember-cli/components/deployment-role', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    roleAssigned: _ember['default'].computed('profile', function () {
      return _ember['default'].isPresent(this.get('profile'));
    }),

    assignedClass: _ember['default'].computed('role-assigned', function () {
      return this.get('roleAssigned') ? 'role-assigned' : 'role-unassigned';
    }),

    hasAssignedNodes: _ember['default'].computed('roleNodeCount', function () {
      return this.get('role.count') >= 1;
    }),

    multipleAssignedNodes: _ember['default'].computed('roleNodeCount', function () {
      return this.get('role.count') >= 2;
    }),

    availableOptions: _ember['default'].computed('role.count', function () {
      var avail = [];
      var maxNodes = Math.max(this.get('nodeCount'), this.get('role.count'));

      for (var i = 0; i <= maxNodes; i++) {
        avail.pushObject(i);
      }

      return avail;
    }),

    actions: {
      editRole: function editRole() {
        this.sendAction('edit', this.get('role'));
      },

      removeRole: function removeRole() {
        this.sendAction('remove', this.get('role'));
      }
    }
  });
});
define('fusor-ember-cli/components/draggable-object-target', ['exports', 'ember-drag-drop/components/draggable-object-target'], function (exports, _emberDragDropComponentsDraggableObjectTarget) {
  exports['default'] = _emberDragDropComponentsDraggableObjectTarget['default'];
});
define('fusor-ember-cli/components/draggable-object', ['exports', 'ember-drag-drop/components/draggable-object'], function (exports, _emberDragDropComponentsDraggableObject) {
  exports['default'] = _emberDragDropComponentsDraggableObject['default'];
});
define('fusor-ember-cli/components/edit-deployment-role', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({

    editRoleTitle: _ember['default'].computed('editedRole.label', function () {
      return "Edit Deployment Role - " + this.get('editedRole.label');
    }),

    profileOptions: _ember['default'].computed('profiles.[]', function () {
      var options = [_ember['default'].Object.create({ name: 'baremetal' })];
      var profiles = this.get('profiles');
      if (profiles) {
        this.get('profiles').forEach(function (profile) {
          return options.pushObject(profile);
        });
      }
      return options;
    }),

    matchingNodeCount: _ember['default'].computed('editedRoleProfile', 'nodes.[]', 'profiles.[]', function () {
      var profiles = this.get('profiles');
      if (!profiles) {
        return 0;
      }

      var profile = profiles.findBy('name', this.get('editedRoleProfile'));
      if (!profile) {
        return 0;
      }

      return profile.matchingNodeCount(this.get('nodes'));
    }),

    roleNodeCountOptions: _ember['default'].computed('matchingNodeCount', function () {
      var options = [];
      var maxNodes = this.get('matchingNodeCount');

      for (var i = 0; i <= maxNodes; i++) {
        options.pushObject(i);
      }

      return options;
    }),

    actions: {
      doShowSettings: function doShowSettings() {
        this.sendAction('doShowSettings');
      },
      doShowConfig: function doShowConfig() {
        this.sendAction('doShowConfig');
      },
      cancelEditRole: function cancelEditRole() {
        this.set('openModal', false);
      },
      saveRole: function saveRole() {
        this.sendAction('saveRole');
      }
    }

  });
});
define('fusor-ember-cli/components/edit-global-service-config', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({

    actions: {
      cancelGlobalServiceConfig: function cancelGlobalServiceConfig() {
        this.sendAction('cancelGlobalServiceConfig');
      },
      saveGlobalServiceConfig: function saveGlobalServiceConfig() {
        this.sendAction('saveGlobalServiceConfig');
      }
    }

  });
});
define('fusor-ember-cli/components/ember-wormhole', ['exports', 'ember-wormhole/components/ember-wormhole'], function (exports, _emberWormholeComponentsEmberWormhole) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberWormholeComponentsEmberWormhole['default'];
    }
  });
});
define('fusor-ember-cli/components/env-path-list-item', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    tagName: 'li',
    classNames: ['path-list-item', 'list_item_active'],

    isChecked: _ember['default'].computed('selectedEnvironment', 'env', function () {
      return this.get('selectedEnvironment') === this.get('env');
    }),

    bgColor: _ember['default'].computed('isChecked', 'disabled', 'isSelectable', function () {
      if (this.get('isSelectable')) {
        if (this.get('isChecked') && this.get('disabled')) {
          return 'env_path_disabled';
        } else if (this.get('isChecked')) {
          return 'env_path_active';
        } else {
          return null;
        }
      }
    }),

    isLibrary: _ember['default'].computed('env', 'libraryEnv', function () {
      return this.get('env') === this.get('libraryEnv');
    }),

    isNonSelectableLibrary: _ember['default'].computed('isLibrary', 'isSelectable', function () {
      return this.get('isLibrary') && !this.get('isSelectable');
    }),

    envCssId: _ember['default'].computed('env', function () {
      return 'env_' + this.get('env.id');
    }),

    click: function click() {
      if (!this.get('disabled') && this.get('isSelectable')) {
        this.sendAction('action', this.get('env'));
      }
    }

  });
});
define('fusor-ember-cli/components/error-message', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({

    click: function click() {
      this.set('errorMsg', null);
    }

  });
});
define('fusor-ember-cli/components/error-modal', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    openModal: false,
    errorMessage: '',
    okayCallback: null,
    didInsertElement: function didInsertElement() {
      var _this = this;

      _ember['default'].run.scheduleOnce('afterRender', function () {
        return _this.send('startListening');
      });
    },
    actions: {
      okay: function okay() {
        this.set('openModal', false);
        var okcb = this.get('okayCallback');
        if (okcb) {
          okcb();
        }
      },
      startListening: function startListening() {
        var _this2 = this;

        this.eventBus.on('displayErrorModal', function (e) {
          // Reset stale okayCallback
          if (_this2.get('okayCallback')) {
            _this2.set('okayCallback', null);
          }

          _this2.set('errorMessage', e.errorMessage);
          if (e.okayCallback) {
            _this2.set('okayCallback', e.okayCallback);
          }
          _this2.set('openModal', true);
        });
      },
      stopListening: function stopListening() {
        this.eventBus.off('displayErrorModal');
      }
    }
  });
});
define('fusor-ember-cli/components/file-upload-form', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    selectedFile: null,

    formId: _ember['default'].computed(function () {
      return this.getWithDefault('fileChooserFormId', 'fileChooserForm');
    }),
    inputId: _ember['default'].computed(function () {
      return this.getWithDefault('fileChooserFormId', 'fileChooserInput');
    }),
    acceptValue: _ember['default'].computed(function () {
      return this.getWithDefault('accept', '*');
    }),
    getFileInput: function getFileInput() {
      var idValue = this.get('inputId');
      return this.$('#' + idValue)[0];
    },
    actions: {
      fileChosen: function fileChosen() {
        var fileInput = this.getFileInput();
        this.set('selectedFile', fileInput.files[0]);
      },
      doUpload: function doUpload() {
        var fileInput = this.getFileInput();
        this.sendAction('doUpload', this.get('selectedFile'), fileInput);
      },
      doCancel: function doCancel() {
        var fileInput = this.getFileInput();
        this.sendAction('doCancel', fileInput);
      }
    }
  });
});
define('fusor-ember-cli/components/host-type-icon', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({

    didInsertElement: function didInsertElement() {
      return _ember['default'].$('[data-toggle="tooltip"]').tooltip({ placement: 'right' });
    },

    willDestroyElement: function willDestroyElement() {
      return _ember['default'].$('[data-toggle="tooltip"]').tooltip('destroy');
    }

  });
});
define('fusor-ember-cli/components/hypervisor-name', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({

    namePlusDomain: _ember['default'].computed('host', 'hypervisorDomain', function () {
      if (this.get("host.is_discovered")) {
        return this.get("host.name") + "." + this.get('hypervisorDomain');
      } else {
        // name is fqdn for managed host
        return this.get("host.name");
      }
    })

  });
});
define('fusor-ember-cli/components/labeled-radio-button', ['exports', 'ember-radio-button/components/labeled-radio-button'], function (exports, _emberRadioButtonComponentsLabeledRadioButton) {
  exports['default'] = _emberRadioButtonComponentsLabeledRadioButton['default'];
});
define('fusor-ember-cli/components/log-entry', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({

    tagName: 'p',

    classNames: ['log-entry'],
    classNameBindings: ['levelClass'],

    levelClass: _ember['default'].computed('entry.level', function () {
      var level = this.get('entry.level');

      if (!level) {
        return null;
      }

      return 'log-entry-level-' + level.toLowerCase();
    })
  });
});
define('fusor-ember-cli/components/markdown-to-html', ['exports', 'ember-cli-showdown/components/markdown-to-html'], function (exports, _emberCliShowdownComponentsMarkdownToHtml) {
  exports['default'] = _emberCliShowdownComponentsMarkdownToHtml['default'];
});
define('fusor-ember-cli/components/naming-scheme-modal', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({

    onOpenModal: _ember['default'].observer('openModal', function () {
      if (this.get('openModal')) {
        var customPreprendName = this.get('customPreprendName');
        this.set('origCustomPreprendName', customPreprendName);
      }
    }),

    isFreeform: _ember['default'].computed('hostNamingScheme', function () {
      return this.get('hostNamingScheme') === 'Freeform';
    }),

    isMac: _ember['default'].computed('hostNamingScheme', function () {
      return this.get('hostNamingScheme') === 'MAC address';
    }),

    isCustomScheme: _ember['default'].computed('hostNamingScheme', function () {
      return this.get('hostNamingScheme') === 'Custom scheme';
    }),

    isHypervisorN: _ember['default'].computed('hostNamingScheme', function () {
      return this.get('hostNamingScheme') === 'hypervisorN';
    }),

    invalidCustomPrefix: _ember['default'].computed('hostNamingScheme', 'customPreprendName', function () {
      if (this.get('hostNamingScheme') !== 'Custom scheme') {
        return false;
      } else {
        return !this.get('customPrefixValidator').isValid(this.get('customPreprendName'));
      }
    }),

    customPreprendNameTrimmed: _ember['default'].computed('customPreprendName', function () {
      var name = this.get('customPreprendName');
      return name ? name.trim() : name;
    }),

    actions: {
      saveNamingScheme: function saveNamingScheme() {
        this.set('openModal', false);
        this.sendAction('saveNamingScheme');
      },

      cancelNamingScheme: function cancelNamingScheme() {
        this.set('openModal', false);
        this.set('customPreprendName', this.get('origCustomPreprendName'));
        this.set('origCustomPreprendName', null);
        this.sendAction('cancelNamingScheme');
      },
      setSelectValue: function setSelectValue(fieldName, selectionValue) {
        // this just sets hostNamingScheme on the modal component
        this.set(fieldName, selectionValue);
        // this triggers the action to update hostNamingScheme on the deployment modal
        this.sendAction('setSelectValue', fieldName, selectionValue);
      }

    }
  });
});
define('fusor-ember-cli/components/new-environment-modal', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({

    envLabelName: _ember['default'].computed('name', function () {
      if (this.get('name')) {
        var label = this.get('name').trim();
        return label.replace(/[^A-Z0-9]/ig, "_");
      }
    }),

    fields_env: {},

    isValidEnvName: _ember['default'].computed('name', function () {
      return this.get('envNameValidator') && this.get('envNameValidator').isValid(this.get('name'));
    }),
    invalidEnvName: _ember['default'].computed.not('isValidEnvName'),

    actions: {
      createEnvironment: function createEnvironment() {
        this.set('openModal', false); //this closes it
        this.set('fields_env.name', this.get('name'));
        this.set('fields_env.label', this.get('envLabelName'));
        this.set('fields_env.description', this.get('description'));
        this.sendAction('createEnvironment', this.get('fields_env'));
      }
    }
  });
});
define('fusor-ember-cli/components/new-node-registration-mac-address', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    label: _ember['default'].computed('index', function () {
      return this.get('index') === 0 ? 'MAC Address' : '';
    }),

    cssId: _ember['default'].computed('index', function () {
      return this.get('prefix') + 'ManualMacInput' + this.get('index');
    })
  });
});
define('fusor-ember-cli/components/new-node-registration', ['exports', 'ember', 'ic-ajax', 'fusor-ember-cli/mixins/osp-node-form-mixin', 'fusor-ember-cli/utils/validators'], function (exports, _ember, _icAjax, _fusorEmberCliMixinsOspNodeFormMixin, _fusorEmberCliUtilsValidators) {
  exports['default'] = _ember['default'].Component.extend(_fusorEmberCliMixinsOspNodeFormMixin['default'], {
    presenceValidator: _fusorEmberCliUtilsValidators.PresenceValidator.create({}),
    resetErrorsMessageKey: 'new-node-registration.text-f:resetErrors',

    step: 1,
    detectNodesRequestNum: 0,
    csvInfo: [],
    csvErrors: [],

    newNodeTitle: _ember['default'].computed('isStep1', function () {
      if (this.get('isStep1')) {
        return "Register Nodes";
      } else {
        return "Node Auto-detection";
      }
    }),

    isStep1: _ember['default'].computed('step', function () {
      return this.get('step') === 1;
    }),

    isStep2: _ember['default'].computed('step', function () {
      return this.get('step') === 2;
    }),

    isNewNodeMethodSpecify: _ember['default'].computed('registerNodesRadio', function () {
      return this.get('registerNodesRadio') === 'specify';
    }),

    isNewNodeMethodAuto: _ember['default'].computed('isNewNodeMethodSpecify', 'registerNodesAuto', function () {
      return this.get('isNewNodeMethodSpecify') && this.get('registerNodesAuto');
    }),

    isNewNodeMethodManual: _ember['default'].computed('isNewNodeMethodSpecify', 'registerNodesAuto', function () {
      return this.get('isNewNodeMethodSpecify') && !this.get('registerNodesAuto');
    }),

    isNewNodeMethodCSV: _ember['default'].computed('registerNodesRadio', function () {
      return this.get('registerNodesRadio') === 'csv_upload';
    }),

    isPxeSsh: _ember['default'].computed('nodeInfo.driver', function () {
      return this.get('nodeInfo.driver') === 'pxe_ssh';
    }),

    isIpmi: _ember['default'].computed('nodeInfo.driver', function () {
      return this.get('nodeInfo.driver') === 'pxe_ipmitool';
    }),

    hasCsvInfo: _ember['default'].computed('csvInfo.[]', function () {
      return _ember['default'].isPresent(this.get('csvInfo'));
    }),

    csvMacList: _ember['default'].computed('csvInfo.@each.ipAddress', 'csvInfo.@each.macAddresses', function () {
      var csvInfo = this.get('csvInfo');

      if (_ember['default'].isEmpty(csvInfo)) {
        return [];
      }

      return csvInfo.map(function (csvNode) {
        return csvNode.get('macAddresses')[0].get('value');
      });
    }),

    hasCsvErrors: _ember['default'].computed('csvErrors.[]', function () {
      return _ember['default'].isPresent(this.get('csvErrors'));
    }),

    hasAutoDetectedNodes: _ember['default'].computed('autoDetectedNodes.[]', function () {
      return this.get('autoDetectedNodes.length') > 0;
    }),

    noNodesDetected: _ember['default'].computed('hasAutoDetectedNodes', 'detectNodesCanceled', function () {
      return !this.get('hasAutoDetectedNodes') && !this.get('detectNodesCanceled');
    }),

    numAutoDetectedNodesInvalidCount: _ember['default'].computed('autoDetectedNodes.@each.value', 'autoDetectedNodes.@each.selected', function () {
      return this.countAutoDetectedNodes(function (node) {
        return node.get('selected') && _ember['default'].isBlank(node.get('value'));
      });
    }),

    hasInvalidAutoDetectedNodes: _ember['default'].computed('numAutoDetectedNodesInvalidCount', function () {
      return this.get('numAutoDetectedNodesInvalidCount') > 0;
    }),

    numAutoDetectedNodesValidCount: _ember['default'].computed('autoDetectedNodes.@each.value', 'autoDetectedNodes.@each.selected', function () {
      return this.countAutoDetectedNodes(function (node) {
        return node.get('selected') && _ember['default'].isPresent(node.get('value'));
      });
    }),

    countAutoDetectedNodes: function countAutoDetectedNodes(matchFn) {
      return this.get('autoDetectedNodes').reduce(function (prev, node) {
        return prev + (matchFn(node) ? 1 : 0);
      }, 0);
    },

    hasValidAutoDetectedNodes: _ember['default'].computed('numAutoDetectedNodesValidCount', function () {
      return this.get('numAutoDetectedNodesValidCount') > 0;
    }),

    selectedVendor: _ember['default'].computed('isIpmi', 'ipmiVendor', 'virtVendor', function () {
      return this.get('isIpmi') ? this.get('ipmiVendor') : this.get('virtVendor');
    }),

    isValidAutoDetectInfo: _ember['default'].computed('isNewNodeMethodAuto', 'isValidConnectionInfo', 'selectedVendor', function () {
      return this.get('isNewNodeMethodAuto') && this.get('isValidConnectionInfo') && _ember['default'].isPresent(this.get('selectedVendor'));
    }),

    isValidNewNodeAuto: _ember['default'].computed('isValidAutoDetectInfo', 'hasInvalidAutoDetectedNodes', 'hasValidAutoDetectedNodes', function () {
      if (!this.get('isValidAutoDetectInfo')) {
        return false;
      }

      var macAddresses = this.get('nodeInfo.macAddresses');
      if (!macAddresses) {
        return false;
      }

      return this.get('hasValidAutoDetectedNodes') && !this.get('hasInvalidAutoDetectedNodes');
    }),

    isValidNewNodeCsv: _ember['default'].computed('hasCsvInfo', 'hasCsvErrors', function () {
      return this.get('hasCsvInfo') && !this.get('hasCsvErrors');
    }),

    hasValidNodesForRegistration: _ember['default'].computed('isValidNewNodeAuto', 'isValidNewNodeCsv', 'isValidNewNodeManual', function () {
      return this.get('isValidNewNodeAuto') || this.get('isValidNewNodeCsv') || this.get('isValidNewNodeManual');
    }),

    disableDetectNodesSubmit: _ember['default'].computed.not('isValidAutoDetectInfo'),

    disableNewNodesSubmit: _ember['default'].computed.not('hasValidNodesForRegistration'),

    onOpenModal: _ember['default'].observer('openModal', function () {
      if (this.get('openModal')) {
        _ember['default'].run.once(this, 'initInfo');
      }
    }),

    actions: {
      backStep: function backStep() {
        this.set('step', 1);
      },

      addMacAddress: function addMacAddress() {
        this.get('nodeInfo.macAddresses').pushObject(_ember['default'].Object.create({ value: '' }));
      },

      submitRegisterNodes: function submitRegisterNodes() {
        var _this = this;

        if (this.get('isNewNodeMethodManual')) {
          this.prepManualNodeInfo();
          this.sendAction('submitRegisterNodes', this.get('nodeInfo'));
        } else if (this.get('isNewNodeMethodCSV')) {
          this.get('csvInfo').forEach(function (nodeInfo) {
            return _this.sendAction('submitRegisterNodes', nodeInfo);
          });
        } else if (this.get('isNewNodeMethodAuto')) {
          this.prepAutoDetectNodeInfo();
          this.sendAction('submitRegisterNodes', this.get('nodeInfo'));
        }
        this.set('openModal', false);
      },

      cancelRegisterNodes: function cancelRegisterNodes() {
        this.set('openModal', false);
      },

      csvFileChosen: function csvFileChosen() {
        this.parseCsvFile(this.getCSVFileInput());
      },

      submitDetectNodes: function submitDetectNodes() {
        this.detectNodes();
        this.set('step', 2);
      },

      cancelDetectNodes: function cancelDetectNodes() {
        this.set('detectNodesCanceled', true);
        this.set('autoDetectNodesInProgress', false);
        this.set('detectNodesRequestNum', this.get('detectNodesRequestNum') + 1);
        this.set('autoDetectedNodes', []);
        this.set('autoDetectedNodesErrorMsg', null);
      }
    },

    initInfo: function initInfo() {
      this.eventBus.trigger(this.get('resetErrorsMessageKey'));
      this.set('registerNodesRadio', 'specify');
      this.set('registerNodesAuto', false);
      this.set('step', 1);

      this.set('nodeInfo', _ember['default'].Object.create({
        vendor: null,
        driver: null,
        address: null,
        username: null,
        password: null,
        macAddresses: []
      }));

      this.set('csvInfo', []);
      this.set('csvErrors', []);
      this.set('manualMacAddresses', '');
      this.set('autoDetectedNodes', []);
      this.set('autoDetectedNodesErrorMsg', []);
    },

    detectNodes: function detectNodes() {
      var _this2 = this;

      var nodeInfo = this.get('nodeInfo');
      var detectNodesRequestNum = this.get('detectNodesRequestNum') + 1;

      nodeInfo.set('address', nodeInfo.get('address').trim());
      nodeInfo.set('username', nodeInfo.get('username').trim());
      nodeInfo.set('vendor', this.get('selectedVendor'));

      this.set('autoDetectedNodes', []);
      this.set('autoDetectedNodesErrorMsg', []);
      this.set('detectNodesRequestNum', detectNodesRequestNum);

      var driverParams = {
        driver: nodeInfo.get('driver'),
        vendor: nodeInfo.get('vendor'),
        hostname: nodeInfo.get('address'),
        username: nodeInfo.get('username'),
        password: nodeInfo.get('password')
      };

      var url = '/fusor/api/openstack/deployments/' + this.get('deployment.id') + '/node_mac_addresses';

      this.set('detectNodesCanceled', false);
      this.set('autoDetectNodesInProgress', true);

      return (0, _icAjax['default'])({
        url: url,
        type: 'POST', //GET would expose password in a query param
        headers: {
          "Accept": "application/json",
          "Content-Type": "application/json",
          "X-CSRF-Token": _ember['default'].$('meta[name="csrf-token"]').attr('content')
        },
        data: JSON.stringify(driverParams)
      }).then(function (result) {
        if (detectNodesRequestNum === _this2.get('detectNodesRequestNum')) {
          _this2.updateAutoDetectedNodes(result.nodes);
          _this2.set('autoDetectNodesInProgress', false);
        }
      })['catch'](function (error) {
        console.log(error);
        if (detectNodesRequestNum === _this2.get('detectNodesRequestNum')) {
          _this2.set('detectNodesErrorMsg', 'Unable to detect nodes. Failed with status code ' + error.jqXHR.status + '.');
          _this2.set('autoDetectNodesInProgress', false);
        }
      });
    },

    updateAutoDetectedNodes: function updateAutoDetectedNodes(hostArray) {
      var _this3 = this;

      var autoDetectedNodesErrorMsg = null;
      var autoDetectedNodesMultiMac = [];
      var autoDetectedNodesSingleMac = [];
      var usedMacs = this.getPortMacAddresses();

      if (hostArray.length === 1 && _ember['default'].isEmpty(hostArray[0].mac_addresses)) {
        autoDetectedNodesErrorMsg = hostArray[0].hostname;
      }

      hostArray.forEach(function (hostHash) {
        var host = _ember['default'].Object.create({
          name: hostHash.hostname,
          macAddresses: hostHash.mac_addresses,
          selected: false
        });

        if (!_this3.autoDetectedNodeIsValid(host, usedMacs)) {
          return;
        }

        if (host.get('macAddresses.length') === 1) {
          host.set('value', host.get('macAddresses')[0]);
          autoDetectedNodesSingleMac.pushObject(host);
        } else if (host.get('macAddresses.length') > 1) {
          host.set('value', '');
          autoDetectedNodesMultiMac.pushObject(host);
        }
      });

      this.set('autoDetectedNodesErrorMsg', autoDetectedNodesErrorMsg);
      this.set('autoDetectedNodes', autoDetectedNodesMultiMac.concat(autoDetectedNodesSingleMac));
    },

    autoDetectedNodeIsValid: function autoDetectedNodeIsValid(host, usedMacs) {
      var hostMacs = host.get('macAddresses');

      if (!hostMacs) {
        return false;
      }

      for (var i = 0; i < hostMacs.length; i++) {
        if (usedMacs.contains(hostMacs[i])) {
          return false;
        }
      }

      return true;
    },

    prepAutoDetectNodeInfo: function prepAutoDetectNodeInfo() {
      var nodeInfo = this.get('nodeInfo');
      var macAddresses = this.get('autoDetectedNodes').filter(function (node) {
        return node.get('selected');
      });

      nodeInfo.set('macAddresses', macAddresses);
      nodeInfo.set('vendor', this.get('selectedVendor'));
    },

    getCSVFileInput: function getCSVFileInput() {
      return _ember['default'].$('#csvUploadInput')[0];
    },

    updloadCsvFile: function updloadCsvFile() {
      var uploadfile = this.getCSVFileInput();
      uploadfile.click();
    },

    parseCsvFile: function parseCsvFile(fileInput) {
      var csvInfo = [];
      var csvErrors = [];
      var controller = this;
      var file = fileInput.files[0];
      var macAddressValidator = _fusorEmberCliUtilsValidators.MacAddressValidator.create({});
      var usedMacs = this.getPortMacAddresses();

      if (file) {
        (function () {
          var reader = new FileReader();
          reader.onload = function () {
            var text = reader.result;
            var csvArray;

            try {
              csvArray = _ember['default'].$.csv.toArrays(text);
            } catch (e) {
              console.log(e);
              controller.set('csvInfo', []);
              controller.set('csvErrors', [e.message]);
              return;
            }

            csvArray.forEach(function (row, rowIndex) {
              if (!Array.isArray(row) || row.length < 5) {
                csvErrors.pushObject('Row ' + (rowIndex + 1) + ' Invalid row');
                return;
              }

              if (row.length < 5) {
                csvErrors.pushObject('Row ' + (rowIndex + 1) + ' does not have enough fields (' + row.length + ')');
                return;
              }

              if (rowIndex === 0 && _ember['default'].isPresent(row[0]) && row[0].toLowerCase().indexOf('driver') >= 0) {
                return; //skip header row if present
              }

              var csvNode = _ember['default'].Object.create({});
              var errorsFound = false;

              if (row[0].toLowerCase().indexOf('ssh') >= 0) {
                csvNode.set('driver', 'pxe_ssh');
              } else if (row[0].toLowerCase().indexOf('ipmi') >= 0) {
                csvNode.set('driver', 'pxe_ipmitool');
              } else {
                csvErrors.pushObject('Row ' + (rowIndex + 1) + ', Column 1: "' + row[0] + '" is not a valid driver value');
                errorsFound = true;
              }

              if (controller.get('hostAddressValidator').isValid(row[1])) {
                csvNode.set('address', row[1]);
              } else {
                csvErrors.pushObject('Row ' + (rowIndex + 1) + ', Column 2: "' + row[1] + '" is not a valid host address');
                errorsFound = true;
              }

              if (_ember['default'].isPresent(row[2])) {
                csvNode.set('username', row[2]);
              } else {
                csvErrors.pushObject('Row ' + (rowIndex + 1) + ', Column 3: "' + row[2] + '" is not a valid username');
                errorsFound = true;
              }

              if (_ember['default'].isPresent(row[3])) {
                csvNode.set('password', row[3]);
              } else {
                csvErrors.pushObject('Row ' + (rowIndex + 1) + ', Column 4: "' + row[3] + '" is not a valid password');
                errorsFound = true;
              }

              if (_ember['default'].isBlank(row[4]) || macAddressValidator.isInvalid(row[4])) {
                csvErrors.pushObject('Row ' + (rowIndex + 1) + ', Column 5 "' + row[4] + '" is not a valid MAC address');
                errorsFound = true;
              } else if (usedMacs.contains(row[4].trim())) {
                csvErrors.pushObject('Row ' + (rowIndex + 1) + ', Column 5 "' + row[4] + '" is not an available MAC address');
                errorsFound = true;
              } else {
                csvNode.set('macAddresses', [_ember['default'].Object.create({ value: row[4] })]);
              }

              if (!errorsFound) {
                csvInfo.pushObject(csvNode);
                usedMacs.push(row[4].trim());
              }
            });

            controller.set('csvInfo', csvInfo);
            controller.set('csvErrors', csvErrors);
          };

          reader.onloadend = function () {
            if (reader.error) {
              console.log(reader.error.message);
              controller.set('csvErrors', [reader.error.message]);
            }
          };

          reader.readAsText(file);
        })();
      }
    }
  });
});
define('fusor-ember-cli/components/new-satellite-modal', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({

    onOpenModal: _ember['default'].observer('openModal', function () {
      if (this.get('openModal')) {
        this.set('newSatelliteName', null);
      }
    }),

    actions: {
      createSatellite: function createSatellite() {
        this.set('openModal', false);
        this.sendAction('createSatellite', this.get('newSatelliteName'));
      }
    }

  });
});
define('fusor-ember-cli/components/node-details-block', ['exports', 'ember', 'fusor-ember-cli/utils/validators'], function (exports, _ember, _fusorEmberCliUtilsValidators) {
  exports['default'] = _ember['default'].Component.extend({
    positiveIntegerValidator: _fusorEmberCliUtilsValidators.AllValidator.create({
      validators: [_fusorEmberCliUtilsValidators.IntegerValidator.create({}), _fusorEmberCliUtilsValidators.NumberValidator.create({ min: 1 })]
    }),
    numNodesDisplay: _ember['default'].computed('numNodes', 'positiveIntegerValidator', function () {
      var numNodes = this.get('numNodes');
      var validator = this.get('positiveIntegerValidator');
      return validator.isValid(numNodes) ? numNodes : '?';
    })
  });
});
define('fusor-ember-cli/components/node-details', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({

    tagName: 'div',
    classNames: ['node-details'],

    isEditMode: false,

    customEditLabel: _ember['default'].computed('isEditMode', function () {
      return this.get('isEditMode') ? "Finish Editing" : "Custom Edit";
    }),

    actions: {
      editOseNodeDetails: function editOseNodeDetails() {
        this.toggleProperty('isEditMode');
      }
    }

  });
});
define('fusor-ember-cli/components/node-profile', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    assignMenuOpenClass: '',
    nodes: [],

    assignedRoles: _ember['default'].computed('roles.[]', 'roles.@each.flavor', 'profile.name', function () {
      var _this = this;

      return this.get('roles').filter(function (role) {
        return role.get('flavor') === _this.get('profile.name');
      });
    }),

    unassignedRoles: _ember['default'].computed('roles.@each.flavor', function () {
      return this.get('roles').filter(function (role) {
        return !role.isAssigned();
      });
    }),

    matchingNodeCount: _ember['default'].computed('profile', 'nodes.[]', function () {
      return this.get('profile').matchingNodeCount(this.get('nodes'));
    }),

    hideAssignMenu: function hideAssignMenu() {
      this.set('assignMenuOpenClass', '');
    },

    assignClass: _ember['default'].computed('doAssign', function () {
      return this.doAssign ? '' : 'nodes-coalescing';
    }),

    actions: {
      showAssignMenu: function showAssignMenu() {
        if (!this.get('allRolesAssigned')) {
          this.set('assignMenuOpenClass', 'open');
        }
      },

      assignRole: function assignRole(role) {
        this.sendAction('assignRole', role, this.get('profile'));
        if ((role.get('name') === 'Compute' || role.get('name') == 'Controller') && !role.get('count')) {
          role.set('count', 1);
        }

        if (this.get('matchingNodeCount') < role.get('count')) {
          role.set('count', this.get('matchingNodeCount'));
          this.sendAction('roleCountUpdated', role);
        }
      },

      editRole: function editRole(role) {
        this.sendAction('editRole', role);
      },

      removeRole: function removeRole(role) {
        this.sendAction('unassignRole', role);
      }
    },

    didInsertElement: function didInsertElement() {
      var self = this;
      _ember['default'].$('body').on('click', function () {
        try {
          self.hideAssignMenu();
        } catch (error) {
          // do nothing
        }
      });
    }
  });
});
define('fusor-ember-cli/components/object-bin', ['exports', 'ember-drag-drop/components/object-bin'], function (exports, _emberDragDropComponentsObjectBin) {
  exports['default'] = _emberDragDropComponentsObjectBin['default'];
});
define('fusor-ember-cli/components/ose-env-summary', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({

    tagName: 'div',
    classNames: ['ose-env-summary'],

    resourcesAvailableToolTip: _ember['default'].computed('cfmeVcpu', 'cfmeRam', 'cfmeDisk', function () {
      return this.get('cfmeVcpu') + ' vCPUs, ' + this.get('cfmeRam') + 'GB RAM, ' + this.get('cfmeDisk') + 'GB Disk reserved for CloudForms';
    })
  });
});
define('fusor-ember-cli/components/ose-host-review-link', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    linkLabel: _ember['default'].computed('_infoObj', function () {
      var info = this.get('_infoObj');
      var labelPrefix = info.get('labelPrefix');
      var hostId = info.get('hostId');

      return labelPrefix + ' ' + hostId;
    }),
    linkValue: _ember['default'].computed('oseHost', function () {
      return 'https://' + this.get('oseHost.name') + ':8443';
    }),
    isWorkerNode: _ember['default'].computed('_infoObj', function () {
      var info = this.get('_infoObj');
      return info.get('labelPrefix') === 'Node';
    }),
    // Internal
    _infoObj: _ember['default'].computed('oseHost', function () {
      var extractionRegex = /ose-(master|node)(\d+)\./;
      var hostName = this.get('oseHost.name');
      var match = hostName.match(extractionRegex);

      if (!match) {
        throw "ASSERTION FAILED: Failed to extract regex from host name.";
      }

      return _ember['default'].Object.create({
        labelPrefix: match[1] === 'master' ? 'Master' : 'Node',
        hostId: match[2]
      });
    })
  });
});
define('fusor-ember-cli/components/ose-node-detail-line', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({

    tagName: 'div',
    classNames: ['row', 'ose-node-line'],

    cssId: _ember['default'].computed('typeNode', 'label', function () {
      return this.get('typeNode') + '-' + this.get('label').underscore();
    })

  });
});
define('fusor-ember-cli/components/ose-summary-needed-available', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({

    tagName: 'div',
    classNames: ['row env-summary-needed-available'],

    percentProgress: _ember['default'].computed('needed', 'available', function () {
      return parseInt(parseInt(this.get('needed')) / parseInt(this.get('available')) * 100);
    }),

    percentProgressMax: _ember['default'].computed('percentProgress', function () {
      var percentProgress = this.get('percentProgress') > 100 ? 100 : this.get('percentProgress');
      return parseInt(percentProgress);
    }),

    styleWidth: _ember['default'].computed('percentProgressMax', function () {
      return _ember['default'].String.htmlSafe('width: ' + this.get('percentProgressMax') + '%;');
    }),

    progressBarClass: _ember['default'].computed('percentProgress', function () {
      var percent = this.get('percentProgress');
      if (percent < 100) {
        return 'progress-bar progress-bar-gray';
      } else if (percent === 100) {
        return 'progress-bar progress-bar-black';
      } else if (percent > 100) {
        return 'progress-bar progress-bar-danger';
      } else {
        return 'progress-bar';
      }
    }),

    fontColorClass: _ember['default'].computed('percentProgress', function () {
      if (this.get('percentProgress') > 99) {
        return 'white';
      } else {
        return 'black';
      }
    }),

    isMaxAmount: _ember['default'].computed('percentProgress', function () {
      return this.get('percentProgress') === 100;
    }),

    isOverCapacity: _ember['default'].computed('percentProgress', function () {
      return this.get('percentProgress') > 100;
    }),

    helpText: _ember['default'].computed('isOverCapacity', 'isMaxAmount', function () {
      if (this.get('isOverCapacity')) {
        return "Too much " + this.get('label') + " assigned";
      } else if (this.get('isMaxAmount')) {
        return "Maximum amount of " + this.get('label') + " assigned";
      }
    }),

    showSubstractTooltip: _ember['default'].computed('label', 'substractCfme', function () {
      return this.get('label') === 'Disk' && this.get('substractCfme');
    })

  });
});
define('fusor-ember-cli/components/osp-node-manager', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({

    isAddNewNodeDisabled: false,
    autoNodes: [],
    manualNodes: [],

    safeLabel: _ember['default'].computed('nodeManager.address', function () {
      var label = this.get('nodeManager.address');
      return label ? label.replace(/[^A-Z0-9]/ig, '') : '';
    }),

    isEditable: _ember['default'].computed('nodeManager.nodes.[]', function () {
      return _ember['default'].isEmpty(this.get('nodeManager.nodes'));
    }),

    isValidLogin: _ember['default'].computed('nodeManager.driver', 'nodeManager.address', 'nodeManager.username', 'nodeManager.password', function () {
      return _ember['default'].isPresent(this.get('nodeManager.driver')) && _ember['default'].isPresent(this.get('nodeManager.address')) && _ember['default'].isPresent(this.get('nodeManager.username')) && _ember['default'].isPresent(this.get('nodeManager.password'));
    }),

    isAutoDetectDisabled: _ember['default'].computed.not('isValidLogin'),
    isNodeListDisabled: _ember['default'].computed.not('isValidLogin'),

    nodeCount: _ember['default'].computed('nodeManager.nodes.@each.properties', function () {
      return this.get('nodeManager.nodes').reduce(function (prev, node) {
        return prev + (node.get('ready') ? 1 : 0);
      }, 0);
    }),

    nodesPendingRegistration: _ember['default'].computed('autoNodes.[]', 'manualNodes.[]', function () {
      return this.get('autoNodes.length') > 0 || this.get('manualNodes.length') > 0;
    }),

    cpuRange: _ember['default'].computed('nodeManager.nodes.@each.properties.cpus', function () {
      var minCPUs = null,
          maxCPUs = null;
      var nodes = this.get('nodeManager.nodes');

      if (nodes) {
        nodes.forEach(function (node) {
          var nodeCPUs = parseInt(node.get('properties.cpus'), 10);
          if (nodeCPUs) {
            minCPUs = minCPUs ? Math.min(minCPUs, nodeCPUs) : nodeCPUs;
            maxCPUs = maxCPUs ? Math.max(maxCPUs, nodeCPUs) : nodeCPUs;
          }
        });
      }

      if (minCPUs === maxCPUs) {
        return _ember['default'].isPresent(minCPUs) ? '' + minCPUs : '??';
      }

      return minCPUs + ' - ' + maxCPUs;
    }),

    memRange: _ember['default'].computed('nodeManager.nodes.@each.properties.memory_mb', function () {
      var minMem = null,
          maxMem = null;
      var nodes = this.get('nodeManager.nodes');

      if (nodes) {
        nodes.forEach(function (node) {
          var memoryMB = parseInt(node.get('properties.memory_mb'), 10);
          if (memoryMB) {
            memoryMB = Math.floor(memoryMB / 1024);
            minMem = minMem ? Math.min(minMem, memoryMB) : memoryMB;
            maxMem = maxMem ? Math.max(maxMem, memoryMB) : memoryMB;
          }
        });
      }

      if (minMem === maxMem) {
        return _ember['default'].isPresent(minMem) ? minMem + ' GB' : '??';
      }

      return minMem + ' GB - ' + maxMem + ' GB';
    }),

    storageRange: _ember['default'].computed('nodeManager.nodes.@each.properties.local_gb', function () {
      var minStorage = null,
          maxStorage = null;
      var nodes = this.get('nodeManager.nodes');

      if (nodes) {
        nodes.forEach(function (node) {
          var localGB = parseInt(node.get('properties.local_gb'), 10);
          if (localGB) {
            minStorage = minStorage ? Math.min(minStorage, localGB) : localGB;
            maxStorage = maxStorage ? Math.max(maxStorage, localGB) : localGB;
          }
        });
      }

      if (minStorage === maxStorage) {
        return _ember['default'].isPresent(minStorage) ? minStorage + ' GB' : '??';
      }

      return minStorage + ' GB - ' + maxStorage + ' GB';
    }),

    actions: {
      onAddNode: function onAddNode() {
        this.sendAction('addNodes', this.get('nodeManager'));
      },

      deleteNode: function deleteNode(node, nodeLabel) {
        this.sendAction('deleteNode', node, nodeLabel);
      }
    }

  });
});
define('fusor-ember-cli/components/osp-node', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({

    classNames: ['row osp-node-row'],

    label: _ember['default'].computed('node', 'ports', function () {
      var node = this.get('node');
      var macAddress = node ? node.getMacAddress(this.get('ports')) : null;
      return macAddress || node.get('id');
    }),

    safeLabel: _ember['default'].computed('label', function () {
      var label = this.get('label');
      return label ? label.replace(/[^A-Z0-9]/ig, '') : '';
    }),

    status: _ember['default'].computed('node', function () {
      if (this.get('node.last_error')) {
        return 'Error';
      }

      if (_ember['default'].isPresent(this.get('node.provision_state'))) {
        return 'node.provision_state';
      }

      return 'Free';
    }),

    foremanTask: _ember['default'].computed('node', 'introspectionTasks.[]', 'foremanTasks.[]', function () {
      return this.get('node').getForemanTask(this.get('introspectionTasks'), this.get('foremanTasks'));
    }),

    isNodeDeleting: _ember['default'].computed.alias('node.deleteInProgress'),

    isNodeReady: _ember['default'].computed('node.properties.cpu', 'node.properties.memory_mb', 'node.properties.local_gb', function () {
      return this.get('node.ready');
    }),

    isNodeInspecting: _ember['default'].computed('node.ready', 'foremanTask', 'foremanTask.state', 'foremanTask.result', function () {
      return !this.get('node.ready') && this.get('foremanTask') && this.get('foremanTask.state') === 'running' && this.get('foremanTask.result') === 'pending';
    }),

    isNodeError: _ember['default'].computed('isNodeReady', 'isNodeInspecting', 'foremanTask', 'foremanTask.result', 'foremanTask.humanized_errors', function () {
      if (this.get('isNodeReady') || this.get('isNodeInspecting')) {
        return false;
      }

      return this.get('foremanTask.result') === 'error' || _ember['default'].isPresent(this.get('foremanTask.humanized_errors'));
    }),

    isDeleteDisabled: _ember['default'].computed('disabled', 'isNodeDeleting', function () {
      return this.get('disabled') || this.get('isNodeDeleting');
    }),

    extraInfo: _ember['default'].computed('isNodeDeleting', function () {
      if (this.get('isNodeDeleting')) {
        return 'Deleting...';
      }
      return '';
    }),

    progressWidth: _ember['default'].computed('foremanTask.progress', 'isNodeDeleting', function () {
      if (this.get('isNodeDeleting')) {
        return 'width: 100%;';
      }

      var progressPercent = Math.floor((parseFloat(this.get('foremanTask.progress')) || 0) * 100);
      return _ember['default'].String.htmlSafe('width: ' + progressPercent + '%;');
    }),

    progressBarClass: _ember['default'].computed('isNodeError', 'isNodeDeleting', function () {
      if (this.get('isNodeDeleting')) {
        return 'progress-bar osp-node-progress-bar osp-node-progress-bar-deleting';
      } else if (this.get('isNodeError')) {
        return 'progress-bar progress-bar-danger osp-node-progress-bar';
      }
      return 'progress-bar osp-node-progress-bar';
    }),

    actions: {
      onDeleteClicked: function onDeleteClicked() {
        this.sendAction('deleteNode', this.get('node'), this.get('label'));
      }
    }

  });
});
define('fusor-ember-cli/components/pagination-footer', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({

    prevPage: _ember['default'].computed('pageNumber', function () {
      return parseInt(this.get('pageNumber')) - 1;
    }),

    nextPage: _ember['default'].computed('nextPage', function () {
      return parseInt(this.get('pageNumber')) + 1;
    }),

    disablePrevPage: _ember['default'].computed('pageNumber', function () {
      return parseInt(this.get('pageNumber')) === 1 || _ember['default'].isBlank(this.get('pageNumber'));
    }),

    disableNextPage: _ember['default'].computed('pageNumber', 'totalPages', function () {
      return parseInt(this.get('pageNumber')) === parseInt(this.get('totalPages'));
    }),

    entriesFrom: _ember['default'].computed('pageNumber', 'totalPages', 'totalCnt', function () {
      return parseInt(this.get('pageNumber')) * 20 - 19;
    }),

    entriesTo: _ember['default'].computed('pageNumber', 'totalPages', 'totalCnt', function () {
      if (parseInt(this.get('pageNumber')) === parseInt(this.get('totalPages'))) {
        return this.get('totalCnt');
      } else {
        return parseInt(this.get('pageNumber')) * 20;
      }
    }),

    showPagination: _ember['default'].computed('totalPages', function () {
      return parseInt(this.get('totalPages')) > 1;
    }),

    displayingEntries: _ember['default'].computed('totalCnt', 'totalPages', 'entriesFrom', 'entriesTo', function () {
      if (parseInt(this.get('totalCnt') === 0)) {
        return 'No entries found';
      } else if (parseInt(this.get('totalPages')) < 2) {
        return ('Displaying <strong>all ' + this.get('totalCnt') + '</strong> entries').htmlSafe();
      } else {
        return ('Displaying entries <strong>' + this.get('entriesFrom') + ' - ' + this.get('entriesTo') + '</strong> of <strong>' + this.get('totalCnt') + '</strong> in total').htmlSafe();
      }
    })

  });
});
define('fusor-ember-cli/components/pf-modal-base', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({

    openCloseModal: _ember['default'].observer('openModal', function () {
      if (this.get('openModal')) {
        _ember['default'].$('#' + this.get('idModal')).modal({
          backdrop: 'static',
          keyboard: false
        });
      } else {
        _ember['default'].$('#' + this.get('idModal')).modal('hide');
      }
    }),

    closeXActionName: _ember['default'].computed('closeXAction', function () {
      return this.getWithDefault('closeXAction', 'closeModal');
    }),

    actions: {
      closeModal: function closeModal() {
        this.set('openModal', false);
      },

      cancelNamingScheme: function cancelNamingScheme() {
        this.sendAction('closeXAction');
      }

    }

  });
});
define('fusor-ember-cli/components/pf-modal-body', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({});
});
define('fusor-ember-cli/components/pf-modal-footer', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({});
});
define('fusor-ember-cli/components/power-select/before-options', ['exports', 'ember-power-select/components/power-select/before-options'], function (exports, _emberPowerSelectComponentsPowerSelectBeforeOptions) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberPowerSelectComponentsPowerSelectBeforeOptions['default'];
    }
  });
});
define('fusor-ember-cli/components/power-select/options', ['exports', 'ember-power-select/components/power-select/options'], function (exports, _emberPowerSelectComponentsPowerSelectOptions) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberPowerSelectComponentsPowerSelectOptions['default'];
    }
  });
});
define('fusor-ember-cli/components/power-select/trigger', ['exports', 'ember-power-select/components/power-select/trigger'], function (exports, _emberPowerSelectComponentsPowerSelectTrigger) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberPowerSelectComponentsPowerSelectTrigger['default'];
    }
  });
});
define('fusor-ember-cli/components/power-select-multiple/trigger', ['exports', 'ember-power-select/components/power-select-multiple/trigger'], function (exports, _emberPowerSelectComponentsPowerSelectMultipleTrigger) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberPowerSelectComponentsPowerSelectMultipleTrigger['default'];
    }
  });
});
define('fusor-ember-cli/components/power-select-multiple', ['exports', 'ember-power-select/components/power-select-multiple'], function (exports, _emberPowerSelectComponentsPowerSelectMultiple) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberPowerSelectComponentsPowerSelectMultiple['default'];
    }
  });
});
define('fusor-ember-cli/components/power-select', ['exports', 'ember-power-select/components/power-select'], function (exports, _emberPowerSelectComponentsPowerSelect) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberPowerSelectComponentsPowerSelect['default'];
    }
  });
});
define('fusor-ember-cli/components/progress-bar-satellite', ['exports', 'ember', 'fusor-ember-cli/components/progress-bar'], function (exports, _ember, _fusorEmberCliComponentsProgressBar) {

  var TASK_WEIGHT = {
    // Say configure host groups is 5% of the total satellite depl progress
    configureHostGroups: 0.05,
    manageContent: 0.95
  };

  exports['default'] = _fusorEmberCliComponentsProgressBar['default'].extend({
    // Keeps external interface specfiic but aliases manageContentTask
    // to task so inherited behavior expecting 'task' works unaltered
    task: _ember['default'].computed.alias('manageContentTask'),

    hasConfigureHostGroupsError: _ember['default'].computed('configureHostGroupsTask.result', function () {
      return this.get('configureHostGroupsTask.result') === 'error';
    }),

    hasManageContentError: _ember['default'].computed('manageContentTask.result', function () {
      return this.get('manageContentTask.result') === 'error';
    }),

    hasConfigureHostGroupsWarning: _ember['default'].computed('configureHostGroupsTask.result', function () {
      return this.get('configureHostGroupsTask.result') === 'warning';
    }),

    hasManageContentWarning: _ember['default'].computed('manageContentTask.result', function () {
      return this.get('manageContentTask.result') === 'warning';
    }),

    progressBarMsg: _ember['default'].computed('deploymentStatus', 'manageContentTask.result', 'isFinished', 'isStopped', 'isSatelliteProgressBar', 'hasConfigureHostGroupsError', function () {
      return this.get('hasConfigureHostGroupsError') ? 'Error' : this._super();
    }),

    isError: _ember['default'].computed('manageContentTask.result', 'hasConfigureHostGroupsError', function () {
      return this.get('hasConfigureHostGroupsError') || this._super();
    }),

    isStopped: _ember['default'].computed('hasConfigureHostGroupsError', 'hasConfigureHostGroupsWarning', 'configureHostGroupsTask.state', 'hasManageContentError', 'hasManageContentWarning', 'manageContentTask.state', function () {
      var mcUnexpectedResult = this.get('hasManageContentError') || this.get('hasManageContentWarning');
      var mcState = this.get('manageContentTask.state');
      var mcStopped = mcState === 'stopped' || mcState === 'paused';

      var chgUnexpectedResult = this.get('hasConfigureHostGroupsError') || this.get('hasConfigureHostGroupsWarning');
      var chgState = this.get('configureHostGroupsTask.state');
      var chgStopped = chgState === 'stopped' || chgState === 'paused';

      var isStopped = mcStopped && mcUnexpectedResult && chgStopped && chgUnexpectedResult;

      return isStopped;
    }),

    progressBarClass: _ember['default'].computed('manageContentTask.result', 'hasConfigureHostGroupsError', function () {
      var progressBarClass = 'progress-bar';

      if (this.get('hasManageContentError') || this.get('hasConfigureHostGroupsError')) {
        progressBarClass += ' progress-bar-danger';
      } else if (this.get('hasManageContentWarning') || this.get('hasConfigureHostGroupsWarning')) {
        progressBarClass += ' progress-bar-warning';
      } else if (this.get('valueProgress') === 100.0) {
        progressBarClass += ' progress-bar-success';
      }

      return progressBarClass;
    }),

    valueProgress: _ember['default'].computed('manageContentTask.progress', 'configureHostGroupsTask.progress', 'manageContentTask.state', 'configureHostGroupsTask.state', function () {
      var mcProgress = this.get('manageContentTask.progress') || 0;
      var chgProgress = this.get('configureHostGroupsTask.progress') || 0;
      var mcState = this.get('manageContentTask.state');
      var chgState = this.get('configureHostGroupsTask.state');

      var retVal = 0;

      var progressComplete = mcProgress === 1 && chgProgress === 1;
      if (progressComplete || this.get('isError')) {
        retVal = 1.0;
      } else if (mcState || chgState) {
        // Discount progress by task weight
        retVal = mcProgress * TASK_WEIGHT.manageContent + chgProgress * TASK_WEIGHT.configureHostGroups;
      }

      return retVal * 100;
    })
  });
});
define('fusor-ember-cli/components/progress-bar', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({

    tagName: 'div',
    classNames: ['row'],

    valueProgress: _ember['default'].computed('task.progress', function () {
      if (this.get('task.state') === 'planning') {
        return 0.1;
      } else if (this.get('task.state')) {
        return this.get('task.progress') * 100;
      } else {
        return 0;
      }
    }),

    percentProgress: _ember['default'].computed('valueProgress', function () {
      return this.get('valueProgress').toFixed(1);
    }),

    percentProgressInt: _ember['default'].computed('valueProgress', function () {
      return this.get('valueProgress').toFixed(0);
    }),

    styleWidth: _ember['default'].computed('percentProgressInt', function () {
      return _ember['default'].String.htmlSafe('width: ' + this.get('percentProgressInt') + '%;');
    }),

    progressBarClass: _ember['default'].computed('task.result', function () {
      var result = this.get('task.result');
      if (result === 'success') {
        return 'progress-bar progress-bar-success';
      } else if (result === 'error') {
        return 'progress-bar progress-bar-danger';
      } else if (result === 'warning') {
        return 'progress-bar progress-bar-warning';
      } else {
        return 'progress-bar';
      }
    }),

    deploymentStatus: _ember['default'].computed('valueProgress', function () {
      var valueProgress = this.get('valueProgress');
      if (valueProgress) {
        if (valueProgress === 100) {
          return 'Finished';
        } else {
          return 'In Process';
        }
      } else {
        return 'Waiting for content';
      }
    }),

    isSpin: _ember['default'].computed('deploymentStatus', 'task.result', function () {
      return this.get('deploymentStatus') === 'In Process' && this.get('task.result') === 'pending';
    }),

    progressBarMsg: _ember['default'].computed('deploymentStatus', 'task.result', 'isFinished', 'isStopped', 'isSatelliteProgressBar', function () {
      if (this.get('deploymentStatus') === 'In Process' && this.get('task.result') === 'pending') {
        if (this.get('isSatelliteProgressBar')) {
          return "Syncing content";
        } else if (this.get('isNodeProgressBar')) {
          return "Registering Node";
        } else if (this.get('isStopped')) {
          return "Task is stopped";
        } else {
          return "Installing components";
        }
      } else if (this.get('task.result') === 'error') {
        return "Error";
      } else if (this.get('task.result') === 'warning') {
        return "Warning";
      } else if (!this.get('isStarted')) {
        return "Waiting for content";
      } else if (this.get('isFinished')) {
        if (this.get('isSatelliteProgressBar')) {
          return "Sync content and setup successful";
        } else {
          if (this.get('isNodeProgressBar')) {
            return "Node registration successful";
          } else {
            return "Deployment successful";
          }
        }
      }
    }),

    isFinished: _ember['default'].computed('valueProgress', function () {
      return this.get('valueProgress') === 100;
    }),

    isStarted: _ember['default'].computed('valueProgress', function () {
      return this.get('valueProgress') > 0;
    }),

    isError: _ember['default'].computed('task.result', function () {
      return this.get('task.result') === 'error';
    }),

    isStopped: _ember['default'].computed('task.state', function () {
      return this.get('task.state') === 'stopped' || this.get('task.state') === 'paused';
    }),

    hasHumanizedErrors: _ember['default'].computed('task.humanized_errors', function () {
      return _ember['default'].isPresent(this.get('task.humanized_errors'));
    }),

    hostErrorInfo: _ember['default'].computed('task.humanized_errors', function () {
      var error = this.get('task.humanized_errors'),
          host = '';

      if (error.match(/Failed to provision/)) {
        host = error.match(/host '(.*)'\./)[1];

        return "Please check the host logs or <a href='/hosts/" + host + "/reports'>puppet reports</a>.";
      }
    })

  });
});
define('fusor-ember-cli/components/radio-button-input', ['exports', 'ember-radio-button/components/radio-button-input'], function (exports, _emberRadioButtonComponentsRadioButtonInput) {
  exports['default'] = _emberRadioButtonComponentsRadioButtonInput['default'];
});
define('fusor-ember-cli/components/radio-button', ['exports', 'ember-radio-button/components/radio-button'], function (exports, _emberRadioButtonComponentsRadioButton) {
  exports['default'] = _emberRadioButtonComponentsRadioButton['default'];
});
define('fusor-ember-cli/components/range-text-f', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({

    typeInput: _ember['default'].computed('type', function () {
      return this.get('type') ? this.get('type') : 'text';
    }),

    actions: {
      showErrors: function showErrors() {
        this.set("showError", true);
      }
    }

  });
});
define('fusor-ember-cli/components/review-link', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({

    // all these values can be overwritten
    isRequired: false,
    isDefault: false,
    useYieldInstead: false,
    isExternalURL: false,
    validationMessage: 'required field',
    defaultMessage: 'default',

    eyeIcon: 'fa-eye',
    isEyeOpen: true,

    showValidationMessage: _ember['default'].computed('isRequired', 'value', function () {
      return this.get('isRequired') && _ember['default'].isBlank(this.get('value'));
    }),

    showDefaultMessage: _ember['default'].computed('isDefault', 'value', function () {
      return this.get('isDefault') && _ember['default'].isBlank(this.get('value'));
    }),

    valueFormatted: _ember['default'].computed('isPassword', 'isEyeOpen', 'value', function () {
      if (this.get('isPassword') && this.get('isEyeOpen') && _ember['default'].isPresent(this.get('value'))) {
        return '********';
      } else {
        return this.get('value');
      }
    }),

    dataQci: _ember['default'].computed('label', function () {
      return this.get('label').underscore();
    }),

    isNotALink: _ember['default'].computed('isExternalURL', 'routeName', function () {
      return _ember['default'].isBlank(this.get('routeName')) && !this.get('isExternalURL');
    }),

    title: 'Alternative IP Address',
    helpTextIpAddress: _ember['default'].computed('ipAddress', function () {
      return '<a href=' + this.get('ipAddress') + ' target="_blank">' + this.get('ipAddress') + '</a>';
    }),

    didInsertElement: function didInsertElement() {
      return _ember['default'].$('[data-toggle="popover"]').popover({ html: true,
        trigger: 'click hover',
        title: this.get('title'),
        placement: 'right'
      });
    },

    willDestroyElement: function willDestroyElement() {
      return _ember['default'].$('[data-toggle="popover"]').popover('destroy');
    },

    actions: {
      showPassword: function showPassword() {
        this.set('isEyeOpen', this.toggleProperty('isEyeOpen'));
        if (this.get('isEyeOpen')) {
          this.set('eyeIcon', "fa-eye");
        } else {
          this.set('eyeIcon', "fa-eye-slash");
        }
      },

      doNothing: function doNothing() {
        return false;
      }

    }

  });
});
define('fusor-ember-cli/components/rhci-item', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    classNames: ['row', 'rhci-item'],
    classNameBindings: ['isChecked:rhci-item-selected']
  });
});
define('fusor-ember-cli/components/rhci-start', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({

    classNames: ['rhci-start-block'],

    setIsDisabledCfmeAndOpenshift: _ember['default'].observer('isRhev', 'isOpenStack', function () {
      if (this.get('isRhev')) {
        this.set('isDisabledOpenShift', false);
        this.set('isDisabledCfme', false);
      } else if (this.get('isOpenStack')) {
        this.set('isDisabledOpenShift', true);
        this.set('isDisabledCfme', false);
        this.set('isOpenShift', false);
      } else {
        this.set('isOpenShift', false);
        this.set('isCloudForms', false);
        this.set('isDisabledOpenShift', true);
        this.set('isDisabledCfme', true);
      }
    }),

    // tagline names
    taglineRhev: "for Traditional Workloads",
    taglineOpenStack: "for Cloud Workloads",
    taglineCloudForms: "for Hybrid Cloud Management",
    taglineOpenShift: "for Private Platform as a Service",

    // desc
    descRhev: 'Complete enterprise virtualization management for servers and desktops on the same infrastructure',
    descOpenStack: 'Flexible, secure foundations to build a massively scalable private or public cloud',
    descCloudForms: 'Manage your virtual, private, and hybrid cloud infrastructures',
    descOpenShift: 'Develop, host, and scale applications in a cloud environment',

    actions: {
      saveAndCancelDeployment: function saveAndCancelDeployment() {
        this.get('targetObject').send('saveAndCancelDeployment');
      },

      cancelAndDeleteDeployment: function cancelAndDeleteDeployment() {
        this.get('targetObject').send('cancelAndDeleteDeployment');
      },

      cancelAndRollbackNewDeployment: function cancelAndRollbackNewDeployment() {
        this.get('targetObject').send('cancelAndRollbackNewDeployment');
      }
    }
  });
});
define('fusor-ember-cli/components/rhci-wizard', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    classNames: ['col-md-12', 'page-header', 'page-header-rhci']
  });
});
define('fusor-ember-cli/components/select-f', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({});
});
define('fusor-ember-cli/components/select-req-f', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({

    isInvalid: _ember['default'].computed.not('isValid'),

    validationMessages: _ember['default'].computed('value', function () {
      return ['must select an option'];
    }),

    hasError: _ember['default'].computed('showValidationError', 'errors.name', 'isInvalid', function () {
      return this.get('showValidationError') && this.get('isInvalid');
    }),

    showValidationError: false // Sane default if not bound to external property
  });
});
define('fusor-ember-cli/components/select-simple-f', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    actions: {
      setValue: function setValue(name) {
        this.sendAction('action', this.get('fieldName'), name);
      }
    }
  });
});
define('fusor-ember-cli/components/simple-text-f', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({

    typeInput: _ember['default'].computed('type', function () {
      return this.get('type') ? this.get('type') : 'text';
    }),

    isValid: _ember['default'].computed('value', 'validator', 'errors.name', 'validIsRequiredAndBlank', function () {
      if (_ember['default'].isPresent(this.get('errors.name')) || this.get('validIsRequiredAndBlank')) {
        return false;
      }

      var validator = this.get('validator');
      return validator ? validator.isValid(this.get('value')) : true;
    }),

    isInvalid: _ember['default'].computed.not('isValid'),

    hasError: _ember['default'].computed('showValidationError', 'errors.name', 'isInvalid', function () {
      return this.get('showValidationError') && this.get('isInvalid');
    }),

    validationMessages: _ember['default'].computed('value', 'validator', 'validIsRequiredAndBlank', function () {
      if (this.get('validIsRequiredAndBlank')) {
        return ['This field cannot be blank.'];
      }

      var validator = this.get('validator');
      return validator ? validator.getMessages(this.get('value')) : [];
    }),

    actions: {
      showValidationErrors: function showValidationErrors() {
        this.set("showValidationError", true);
      },

      resetValidationErrors: function resetValidationErrors() {
        this.set("showValidationError", false);
      }
    }
  });
});
define('fusor-ember-cli/components/sortable-objects', ['exports', 'ember-drag-drop/components/sortable-objects'], function (exports, _emberDragDropComponentsSortableObjects) {
  exports['default'] = _emberDragDropComponentsSortableObjects['default'];
});
define('fusor-ember-cli/components/step-number', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    tagName: 'span',
    classNames: ['badge'],
    classNameBindings: ['badgeInverse'],
    badgeInverse: false
  });
});
define('fusor-ember-cli/components/text-f', ['exports', 'ember', 'fusor-ember-cli/mixins/validated-input-mixin'], function (exports, _ember, _fusorEmberCliMixinsValidatedInputMixin) {
  exports['default'] = _ember['default'].Component.extend(_fusorEmberCliMixinsValidatedInputMixin['default'], {

    typeInput: _ember['default'].computed('type', function () {
      return this.get('type') ? this.get('type') : 'text';
    }),

    cssFormClass: _ember['default'].computed('preText', 'postText', function () {
      if (_ember['default'].isEmpty(this.get('preText')) && _ember['default'].isEmpty(this.get('postText'))) {
        return 'form-control';
      }
    }),

    isPassword: _ember['default'].computed('type', function () {
      return this.get('type') === 'password';
    }),

    setOrigValue: _ember['default'].on('didInsertElement', function () {
      this.set('origValue', this.get('value'));
    }),

    eyeIcon: 'fa-eye',
    isEyeOpen: true,

    actions: {
      showPassword: function showPassword() {
        this.set('isEyeOpen', this.toggleProperty('isEyeOpen'));
        if (this.get('isEyeOpen')) {
          this.set('typeInput', 'password');
          this.set('eyeIcon', "fa-eye");
        } else {
          this.set('typeInput', 'text');
          this.set('eyeIcon', "fa-eye-slash");
        }
      }
    }
  });
});
define("fusor-ember-cli/components/textarea-f-alt", ["exports", "ember", "fusor-ember-cli/mixins/textarea-f-mixin"], function (exports, _ember, _fusorEmberCliMixinsTextareaFMixin) {
  exports["default"] = _ember["default"].Component.extend(_fusorEmberCliMixinsTextareaFMixin["default"], {});
});
define("fusor-ember-cli/components/textarea-f-alt2", ["exports", "ember", "fusor-ember-cli/mixins/textarea-f-mixin"], function (exports, _ember, _fusorEmberCliMixinsTextareaFMixin) {
  exports["default"] = _ember["default"].Component.extend(_fusorEmberCliMixinsTextareaFMixin["default"], {});
});
define('fusor-ember-cli/components/textarea-f', ['exports', 'ember', 'fusor-ember-cli/mixins/textarea-f-mixin'], function (exports, _ember, _fusorEmberCliMixinsTextareaFMixin) {
  exports['default'] = _ember['default'].Component.extend(_fusorEmberCliMixinsTextareaFMixin['default'], {

    rowsPassed: _ember['default'].computed('rows', function () {
      if (this.get('rows')) {
        if (this.get('rows') > 0) {
          return true;
        }
      }
    })
  });
});
define('fusor-ember-cli/components/tool-tip', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({

    tagName: 'span',

    attributeBindings: ['dataToggle:data-toggle', 'title'],
    dataToggle: 'tooltip',

    hasImage: _ember['default'].computed.notEmpty('srcImage'),

    hasFaIcon: _ember['default'].computed.notEmpty('faIcon'),

    didInsertElement: function didInsertElement() {
      return _ember['default'].$('[data-toggle="tooltip"]').tooltip({ placement: 'top' });
    },

    willDestroyElement: function willDestroyElement() {
      return _ember['default'].$('[data-toggle="tooltip"]').tooltip('destroy');
    }

  });
});
define('fusor-ember-cli/components/tr-deployment', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({

    tagName: 'tr',

    classNames: ['deployment-row'],

    isStarted: _ember['default'].computed('deployment.foreman_task_uuid', function () {
      return !!this.get('deployment.foreman_task_uuid');
    }),

    isComplete: _ember['default'].computed('foremanTask', 'foremanTask.progress', function () {
      return this.get('foremanTask.progress') === '1';
    }),

    foremanTask: _ember['default'].computed('deployment.foreman_task_uuid', function () {
      var foremanTaskUuid = this.get('deployment.foreman_task_uuid');

      if (!foremanTaskUuid) {
        return null;
      }

      return this.get('targetObject.store').findRecord('foreman-task', foremanTaskUuid);
    }),

    isError: _ember['default'].computed('foremanTask.result', function () {
      return this.get('foremanTask.result') === 'error';
    }),

    isSuccessful: _ember['default'].computed('foremanTask.result', function () {
      return this.get('foremanTask.result') === 'success';
    }),

    canDelete: _ember['default'].computed('isStarted', 'isError', 'isSuccessful', function () {
      return !this.get('isStarted') || this.get('isSuccessful') || this.get('isError');
    }),

    routeNameForEdit: _ember['default'].computed('isComplete', 'isStarted', function () {
      if (this.get('isComplete')) {
        return 'review.summary';
      } else if (this.get('isStarted')) {
        return 'review.progress.overview';
      } else {
        return 'deployment';
      }
    }),

    actions: {
      openDeploymentModal: function openDeploymentModal(item) {
        this.get('targetObject').set('deploymentInModal', item);
        this.get('targetObject').set('openModal', true);
      }
    }

  });
});
define('fusor-ember-cli/components/tr-engine', ['exports', 'ember', 'fusor-ember-cli/mixins/tr-engine-hypervisor-mixin'], function (exports, _ember, _fusorEmberCliMixinsTrEngineHypervisorMixin) {
  exports['default'] = _ember['default'].Component.extend(_fusorEmberCliMixinsTrEngineHypervisorMixin['default'], {

    isSelectedAsEngine: _ember['default'].computed('host', 'selectedRhevEngineHost', function () {
      if (this.get('selectedRhevEngineHost')) {
        return this.get('selectedRhevEngineHost.id') === this.get('host.id');
      }
    }),

    isChecked: _ember['default'].computed('isSelectedAsEngine', function () {
      return this.get('isSelectedAsEngine');
    }),

    actions: {
      engineHostChanged: function engineHostChanged(host) {
        this.sendAction("action", host, this.get('isInvalidHostname'));
      }
    }
  });
});
define('fusor-ember-cli/components/tr-hypervisor', ['exports', 'ember', 'fusor-ember-cli/mixins/tr-engine-hypervisor-mixin'], function (exports, _ember, _fusorEmberCliMixinsTrEngineHypervisorMixin) {
  exports['default'] = _ember['default'].Component.extend(_fusorEmberCliMixinsTrEngineHypervisorMixin['default'], {
    didInsertElement: function didInsertElement() {
      this.updateCheckbox();
    },

    isChecked: _ember['default'].computed.alias('isSelectedAsHypervisor'),

    observeHostName: _ember['default'].observer('isSelectedAsHypervisor', 'customPreprendName', 'isCustomScheme', 'isHypervisorN', 'isFreeform', 'isMac', function () {
      if (this.get('isSelectedAsHypervisor')) {
        if (this.get('isCustomScheme') && this.get('customPreprendName')) {
          this.get('host').set('name', this.get('customPreprendName').trim() + this.get('num'));
        } else if (this.get('isHypervisorN')) {
          this.get('host').set('name', 'hypervisor' + this.get('num'));
        } else if (this.get('isMac')) {
          this.get('host').set('name', 'mac' + this.get('host').get('mac').replace(/:/g, ''));
        } else {
          this.get('host').set('name', this.get('host.name'));
        }
        this.send('saveHostname');
      }
    }),

    checkboxObserver: _ember['default'].observer('isSelectedAsHypervisor', function () {
      var _this = this;

      _ember['default'].run.once(this, function () {
        var isSelected = _this.get('isSelectedAsHypervisor');
        var host = _this.get('host');
        var hostFound = _this.get('model').contains(host);

        if (isSelected && !hostFound) {
          _this.get('model').addObject(host);
        } else if (!isSelected && hostFound) {
          _this.get('model').removeObject(host);
        }
      });
    }),

    modelObserver: _ember['default'].observer('model.[]', function () {
      var _this2 = this;

      _ember['default'].run.once(this, function () {
        _this2.updateCheckbox();
      });
    }),

    updateCheckbox: function updateCheckbox() {
      var originalState = this.get('isSelectedAsHypervisor');
      var selectedIds = this.get('selectedIds');
      var isSelectedAsHypervisor = selectedIds && selectedIds.contains(this.get('host.id'));

      if (originalState !== isSelectedAsHypervisor) {
        this.set('isSelectedAsHypervisor', isSelectedAsHypervisor);
      }
    }
  });
});
define('fusor-ember-cli/components/tr-management-app', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({

    tagName: 'tr',

    classNameBindings: ['bgColor'],

    isChecked: _ember['default'].computed('consumerUUID', 'managementApp.id', function () {
      return this.get('consumerUUID') === this.get('managementApp.id');
    }),

    bgColor: _ember['default'].computed('isChecked', function () {
      if (this.get('isChecked')) {
        return 'white-on-blue';
      }
    }),

    dataQci: _ember['default'].computed('managementApp', function () {
      return this.get('managementApp.name').underscore();
    }),

    actions: {
      changeManagementApp: function changeManagementApp() {
        this.sendAction('action', this.get('managementApp'));
      }
    }

  });
});
define('fusor-ember-cli/components/tr-subscription-manifest', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    tagName: 'tr',

    qtyColumn: _ember['default'].computed('isDisconnected', 'subscription.quantity_to_add', 'subscription.quantity_attached', 'subscription.qtySumAttached', function () {
      if (this.get('subscription.quantity_to_add') > 0) {
        return this.get('subscription.quantity_attached') + ' + ' + this.get('subscription.quantity_to_add') + ' = ' + this.get('subscription.qtySumAttached');
      } else {
        return this.get('subscription.quantity_attached');
      }
    })
  });
});
define('fusor-ember-cli/components/tr-subscription-saved', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({

    tagName: 'tr',

    classNames: ['white-on-blue']

  });
});
define('fusor-ember-cli/components/tr-subscription', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({

    tagName: 'tr',

    classNameBindings: ['bgColor'],

    systemType: _ember['default'].computed('subscription.type', function () {
      if (this.get('subscription.type') === "NORMAL") {
        return 'Physical';
      } else {
        return this.get('subscription.type');
      }
    }),

    bgColor: _ember['default'].computed('isChecked', function () {
      if (this.get('isChecked')) {
        return 'white-on-blue';
      }
    }),

    subCssId: _ember['default'].computed('subscription', function () {
      return 'sub_checkbox_' + this.get('subscription.id');
    }),

    attachCssId: _ember['default'].computed('subscription', function () {
      return 'qty_attach_' + this.get('subscription.id');
    }),

    isQtyValid: _ember['default'].computed('subscription.qtyAvailable', 'subscription.qtyToAttach', function () {
      if (this.get('subscription.qtyToAttach') >= 0 && this.get('subscription.qtyAvailable') > 0) {
        return this.get('subscription.qtyToAttach') <= this.get('subscription.qtyAvailable');
      }
    }),
    isQtyInValid: _ember['default'].computed.not('isQtyValid'),

    disableQty: _ember['default'].computed('subscription.qtyAvailable', function () {
      return this.get('subscription.qtyAvailable') === 0;
    }),

    setIsSelectedSubscription: _ember['default'].on('didInsertElement', function () {
      // model is subscriptions added
      // this.get('subscription') is actually a pool
      var self = this;
      this.get('model').forEach(function (sub) {
        // update for matching subscription only
        if (sub.get('contract_number') == self.get('subscription.contractNumber')) {
          var hasQtyToAdd = sub.get('quantity_to_add') > 0;
          self.get('subscription').set('isSelectedSubscription', hasQtyToAdd);
          self.get('subscription').set('qtyToAttach', sub.get('quantity_to_add'));
        }
      });
    }),

    saveSubAfterCheck: _ember['default'].observer('subscription.isSelectedSubscription', function () {
      if (this.get('subscription.isSelectedSubscription')) {
        if (this.get('subscription.qtyToAttach') > 0) {
          // nothing - don't want to change subscription.qtyToAttach
        } else {
            this.set('subscription.qtyToAttach', 0);
          }
      } else {
        // Zero out and save if unchecked
        var hasPostiveQty = this.get('subscription.qtyToAttach') > 0;
        if (hasPostiveQty) {
          this.set('subscription.qtyToAttach', 0);
          var pool = this.get('subscription');
          this.sendAction('saveSubscription', pool, this.get('subscription.qtyToAttach'));
        }
      }
    }),

    isChecked: _ember['default'].computed.alias('subscription.isSelectedSubscription'),

    actions: {
      setValidQty: function setValidQty() {
        if (this.get('isQtyInValid')) {
          this.set('subscription.qtyToAttach', this.get('subscription.qtyAvailable'));
        }
        var pool = this.get('subscription');
        this.sendAction('saveSubscription', pool, this.get('subscription.qtyToAttach'));
      }
    }

  });
});
define('fusor-ember-cli/components/tr-task', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({

    tagName: 'tr',

    actionNameAndRepository: _ember['default'].computed('task.humanized_name', 'task.repository', function () {
      return this.get('task.humanized_name') + ' ' + (this.get('task.repository') || '');
    }),

    isError: _ember['default'].computed('task.result', function () {
      return this.get('task.result') === 'error';
    }),

    textBold: _ember['default'].computed('isError', function () {
      if (this.get('isError')) {
        return 'bold';
      }
    }),

    textColor: _ember['default'].computed('isError', function () {
      if (this.get('isError')) {
        return 'errorForValidation';
      }
    }),

    percentProgress: _ember['default'].computed('task.progress', function () {
      return (this.get('task.progress') * 100).toFixed(0) + '%';
    })

  });
});
define('fusor-ember-cli/components/wizard-item', ['exports', 'ember', 'ember-cli-active-link-wrapper/mixins/active-link'], function (exports, _ember, _emberCliActiveLinkWrapperMixinsActiveLink) {
  exports['default'] = _ember['default'].Component.extend(_emberCliActiveLinkWrapperMixinsActiveLink['default'], {
    tagName: 'li',

    classNameBindings: ['completed'],

    attributeBindings: ['dataToggle:data-toggle', 'dataPlacement:data-placement', 'title'],

    dataToggle: "tooltip",
    dataPlacement: "top",
    title: _ember['default'].computed('fullname', function () {
      return this.get('fullname');
    }),

    completed: _ember['default'].computed('isDisabled', 'active', function () {
      return !this.get('isDisabled') && !this.get('active');
    })

    // // code borrowed addon ember-cli-active-link-wrapper
    // // github.com/alexspeller/ember-cli-active-link-wrapper/blob/master/addon/components/active-link.js
    // childLinkViews: [],

    // active: Ember.computed('childLinkViews.@each.active', function() {
    //   return Ember.A(this.get('childLinkViews')).isAny('active');
    // }),

    // didRender: function() {
    //   Ember.run.schedule('afterRender', this, function() {
    //     var childLinkElements = this.$('a.ember-view');

    //     var childLinkViews = childLinkElements.toArray().map(view =>
    //       this._viewRegistry[view.id]
    //     );

    //     this.set('childLinkViews', childLinkViews);
    //   });
    // },

  });
});
define('fusor-ember-cli/components/wizard-step', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({

    minHeightStyle: _ember['default'].computed('minHeight', function () {
      return _ember['default'].String.htmlSafe('min-height: ' + this.get('minHeight') + 'px;');
    }),

    resizeWizard: _ember['default'].on('didInsertElement', function () {
      var self = this;
      this.resizeHandler = (function () {
        // Rob's jquery code for resizing in
        // https://github.com/patternfly/rcue-rdom/blob/master/html/assign-roles-rhci.html
        var documentHeight = 0;
        var navbarOuterHeight = 0;
        var navbarInnerHeight = 0;
        var pageheaderrhciHeight = 0;
        var rowHeight = 0;
        if (_ember['default'].$('.sidebar-pf').length > 0 && matchMedia('only screen and (min-width: 768px)').matches) {
          documentHeight = _ember['default'].$(document).height();
          navbarOuterHeight = _ember['default'].$('.navbar-outer').outerHeight();
          navbarInnerHeight = _ember['default'].$('.navbar-inner').outerHeight();
          pageheaderrhciHeight = _ember['default'].$('.page-header-rhci').outerHeight();
          rowHeight = documentHeight - navbarInnerHeight - navbarOuterHeight - pageheaderrhciHeight;
        }

        // set height of attribute in controller
        return self.set('minHeight', rowHeight);
      }).bind(this);

      _ember['default'].$(window).on('resize', this.resizeHandler);
      this.resizeHandler();
    }),

    removeResize: _ember['default'].on('willDestroyElement', function () {
      _ember['default'].$(window).off('resize', this.resizeHandler);
    })

  });
});
define('fusor-ember-cli/components/x-option', ['exports', 'emberx-select/components/x-option'], function (exports, _emberxSelectComponentsXOption) {
  exports['default'] = _emberxSelectComponentsXOption['default'];
});
define('fusor-ember-cli/components/x-select', ['exports', 'emberx-select/components/x-select'], function (exports, _emberxSelectComponentsXSelect) {
  exports['default'] = _emberxSelectComponentsXSelect['default'];
});
define('fusor-ember-cli/controllers/application', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Controller.extend({
    deploymentController: _ember['default'].inject.controller('deployment'),

    deployAsPlugin: true,
    isEmberCliMode: _ember['default'].computed.not('deployAsPlugin'),
    isUpstream: false,

    isContainer: _ember['default'].computed.alias("isUpstream"),

    isLoggedIn: true, //Ember.computed.alias("session.isAuthenticated"),

    loginUsername: _ember['default'].computed.alias("session.currentUser.login"),

    nameRHCI: _ember['default'].computed.alias("deploymentController.nameRHCI"),
    nameRhev: _ember['default'].computed.alias("deploymentController.nameRhev"),
    nameOpenStack: _ember['default'].computed.alias("deploymentController.nameOpenStack"),
    nameCloudForms: _ember['default'].computed.alias("deploymentController.nameCloudForms"),
    nameSatellite: _ember['default'].computed.alias("deploymentController.nameSatellite"),
    logoPath: _ember['default'].computed.alias("deploymentController.logoPath"),

    actions: {
      invalidate: function invalidate() {
        return this.transitionTo('login');
      },

      signOut: function signOut() {
        return this.transitionTo('login');
      }
    }

  });
});
define('fusor-ember-cli/controllers/array', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Controller;
});
define('fusor-ember-cli/controllers/cloudforms/cfme-configuration', ['exports', 'ember', 'fusor-ember-cli/mixins/needs-deployment-mixin', 'fusor-ember-cli/utils/validators'], function (exports, _ember, _fusorEmberCliMixinsNeedsDeploymentMixin, _fusorEmberCliUtilsValidators) {
  exports['default'] = _ember['default'].Controller.extend(_fusorEmberCliMixinsNeedsDeploymentMixin['default'], {

    cfmeRootPassword: _ember['default'].computed.alias("deploymentController.model.cfme_root_password"),
    cfmeAdminPassword: _ember['default'].computed.alias("deploymentController.model.cfme_admin_password"),
    cfmeDbPassword: _ember['default'].computed.alias("deploymentController.model.cfme_db_password"),
    confirmCfmeRootPassword: _ember['default'].computed.alias("deploymentController.confirmCfmeRootPassword"),
    confirmCfmeAdminPassword: _ember['default'].computed.alias("deploymentController.confirmCfmeAdminPassword"),
    confirmCfmeDbPassword: _ember['default'].computed.alias("deploymentController.confirmCfmeDbPassword"),

    isSubscriptions: _ember['default'].computed.alias("deploymentController.isSubscriptions"),

    nextRouteNameAfterCFME: _ember['default'].computed('isSubscriptions', function () {
      if (this.get('isSubscriptions')) {
        return 'subscriptions';
      } else {
        return 'review';
      }
    }),

    passwordValidator: _fusorEmberCliUtilsValidators.RequiredPasswordValidator.create({}),

    confirmCfmeRootPasswordValidator: _ember['default'].computed('cfmeRootPassword', function () {
      return _fusorEmberCliUtilsValidators.EqualityValidator.create({ equals: this.get('cfmeRootPassword') });
    }),

    confirmCfmeAdminPasswordValidator: _ember['default'].computed('cfmeAdminPassword', function () {
      return _fusorEmberCliUtilsValidators.EqualityValidator.create({ equals: this.get('cfmeAdminPassword') });
    }),

    confirmCfmeDbPasswordValidator: _ember['default'].computed('cfmeDbPassword', function () {
      return _fusorEmberCliUtilsValidators.EqualityValidator.create({ equals: this.get('cfmeDbPassword') });
    }),

    hasCFRootPassword: _ember['default'].computed('cfmeRootPassword', function () {
      return this.get('passwordValidator').isValid(this.get('cfmeRootPassword'));
    }),
    hasNoCFRootPassword: _ember['default'].computed.not("hasCFRootPassword"),

    hasCFAdminPassword: _ember['default'].computed('cfmeAdminPassword', function () {
      return this.get('passwordValidator').isValid(this.get('cfmeAdminPassword'));
    }),
    hasNoCFAdminPassword: _ember['default'].computed.not("hasCFAdminPassword"),

    hasCFDbPassword: _ember['default'].computed('cfmeDbPassword', function () {
      return this.get('passwordValidator').isValid(this.get('cfmeDbPassword'));
    }),
    hasNoCFDbPassword: _ember['default'].computed.not("hasCFDbPassword"),

    isValidCfmeConfiguration: _ember['default'].computed('cfmeRootPassword', 'confirmCfmeRootPassword', 'cfmeAdminPassword', 'confirmCfmeAdminPassword', 'cfmeDbPassword', 'confirmCfmeDbPassword', function () {
      return this.get('hasCFRootPassword') && this.get('hasCFAdminPassword') && this.get('cfmeRootPassword') === this.get('confirmCfmeRootPassword') && this.get('cfmeAdminPassword') === this.get('confirmCfmeAdminPassword') && this.get('cfmeDbPassword') === this.get('confirmCfmeDbPassword');
    }),

    disableNextCfmeConfiguration: _ember['default'].computed.not("isValidCfmeConfiguration")

  });
});
define('fusor-ember-cli/controllers/cloudforms', ['exports', 'ember', 'fusor-ember-cli/mixins/needs-deployment-mixin'], function (exports, _ember, _fusorEmberCliMixinsNeedsDeploymentMixin) {
  exports['default'] = _ember['default'].Controller.extend(_fusorEmberCliMixinsNeedsDeploymentMixin['default'], {

    cfmeConfigurationController: _ember['default'].inject.controller('cloudforms.cfme-configuration'),

    stepNumberCloudForms: _ember['default'].computed.alias("deploymentController.stepNumberCloudForms"),
    isValidCfmeConfiguration: _ember['default'].computed.alias("cfmeConfigurationController.isValidCfmeConfiguration"),

    isValidCfmeInstallLocation: _ember['default'].computed.notEmpty('deploymentController.model.cfme_install_loc'),

    isInvalidCfmeInstallLocation: _ember['default'].computed.not("isValidCfmeInstallLocation"),
    disableTabCFConfiguration: _ember['default'].computed.alias("isInvalidCfmeInstallLocation"),

    validCloudforms: _ember['default'].computed('isValidCfmeInstallLocation', 'isValidCfmeConfiguration', function () {
      return this.get('isValidCfmeInstallLocation') && this.get('isValidCfmeConfiguration');
    }),

    notValidCloudforms: _ember['default'].computed.not("validCloudforms")

  });
});
define("fusor-ember-cli/controllers/configure-environment", ["exports", "ember", "fusor-ember-cli/mixins/configure-environment-mixin", "fusor-ember-cli/mixins/needs-deployment-mixin", "fusor-ember-cli/utils/validators"], function (exports, _ember, _fusorEmberCliMixinsConfigureEnvironmentMixin, _fusorEmberCliMixinsNeedsDeploymentMixin, _fusorEmberCliUtilsValidators) {
  exports["default"] = _ember["default"].Controller.extend(_fusorEmberCliMixinsConfigureEnvironmentMixin["default"], _fusorEmberCliMixinsNeedsDeploymentMixin["default"], {

    satelliteTabRouteName: _ember["default"].computed.alias("deploymentController.satelliteTabRouteName"),
    isStarted: _ember["default"].computed.alias("deploymentController.isStarted"),

    selectedOrganization: _ember["default"].computed.alias("deploymentController.model.organization"),

    step2RouteName: _ember["default"].computed.alias("deploymentController.step2RouteName"),

    nullifyLifecycleEnvIfSelected: _ember["default"].observer('useDefaultOrgViewForEnv', function () {
      this.set('showAlertMessage', false);
      if (this.get('useDefaultOrgViewForEnv')) {
        this.set('selectedEnvironment', null);
        this.get('deploymentController.model').set('lifecycle_environment', null);
      }
    }),

    hasLifecycleEnvironment: _ember["default"].computed.alias("deploymentController.hasLifecycleEnvironment"),
    hasNoLifecycleEnvironment: _ember["default"].computed.alias("deploymentController.hasNoLifecycleEnvironment"),
    disableNextOnLifecycleEnvironment: _ember["default"].computed.alias("deploymentController.disableNextOnLifecycleEnvironment"),
    openModal: false,

    deployment: _ember["default"].computed.alias("deploymentController.model"),

    envNameValidator: _fusorEmberCliUtilsValidators.PresenceValidator.create({}),

    actions: {
      selectEnvironment: function selectEnvironment(environment) {
        this.set('showAlertMessage', false);
        this.set('selectedEnvironment', environment);
        this.get('deploymentController.model').set('lifecycle_environment', environment);
        this.get('deploymentController').set('errorMsg', null);
        this.set('errorMsg', null);
      },

      createEnvironment: function createEnvironment(fields_env) {
        var self = this;
        this.set('showAlertMessage', false);

        var nameAlreadyExists = self.get('lifecycleEnvironments').findBy('name', fields_env.name);
        if (nameAlreadyExists) {
          self.get('deploymentController').set('errorMsg', fields_env.name + ' is not a unique name. Environment not saved.');
        }

        var selectedOrganization = this.get('selectedOrganization');
        this.set('fields_env', fields_env);
        this.set('fields_env.organization', selectedOrganization);

        var library = this.get('libraryEnv');
        // assign library to prior db attribute
        this.set('fields_env.prior', library.get('id'));
        var environment = this.store.createRecord('lifecycle-environment', this.get('fields_env'));
        environment.save().then(function (result) {
          //success
          self.get('lifecycleEnvironments').addObject(result._internalModel);
          self.set('selectedEnvironment', environment);
          self.get('deploymentController.model').set('lifecycle_environment', environment);
          self.get('deploymentController').set('errorMsg', null);
          self.set('showAlertMessage', true);
        }, function (error) {
          var errorMsg = 'error saving environment' + error;
          self.get('deploymentController').set('errorMsg', errorMsg);
          self.set('errorMsg', errorMsg);
        });
      }
    }

  });
});
define("fusor-ember-cli/controllers/deployment/start", ["exports", "ember", "fusor-ember-cli/mixins/start-controller-mixin", "fusor-ember-cli/mixins/needs-deployment-mixin"], function (exports, _ember, _fusorEmberCliMixinsStartControllerMixin, _fusorEmberCliMixinsNeedsDeploymentMixin) {
  exports["default"] = _ember["default"].Controller.extend(_fusorEmberCliMixinsStartControllerMixin["default"], _fusorEmberCliMixinsNeedsDeploymentMixin["default"], {
    isNew: false
  });
});
define("fusor-ember-cli/controllers/deployment-new/satellite/configure-environment", ["exports", "ember", "fusor-ember-cli/mixins/configure-environment-mixin", "fusor-ember-cli/mixins/needs-deployment-new-mixin", "fusor-ember-cli/utils/validators"], function (exports, _ember, _fusorEmberCliMixinsConfigureEnvironmentMixin, _fusorEmberCliMixinsNeedsDeploymentNewMixin, _fusorEmberCliUtilsValidators) {
  exports["default"] = _ember["default"].Controller.extend(_fusorEmberCliMixinsConfigureEnvironmentMixin["default"], _fusorEmberCliMixinsNeedsDeploymentNewMixin["default"], {

    satelliteTabRouteName: _ember["default"].computed.alias("deploymentNewController.satelliteTabRouteName"),

    selectedOrganization: _ember["default"].computed.alias("deploymentNewController.model.organization"),

    step2RouteName: _ember["default"].computed.alias("deploymentNewController.step2RouteName"),

    nullifyLifecycleEnvIfSelected: _ember["default"].observer('useDefaultOrgViewForEnv', function () {
      this.set('showAlertMessage', false);
      if (this.get('useDefaultOrgViewForEnv')) {
        this.set('selectedEnvironment', null);
        this.get('deploymentNewController.model').set('lifecycle_environment', null);
      }
    }),

    hasLifecycleEnvironment: _ember["default"].computed.alias("deploymentNewController.hasLifecycleEnvironment"),
    hasNoLifecycleEnvironment: _ember["default"].computed.alias("deploymentNewController.hasNoLifecycleEnvironment"),
    disableNextOnLifecycleEnvironment: _ember["default"].computed.alias("deploymentNewController.disableNextOnLifecycleEnvironment"),
    openNewEnvironmentModal: false,

    deployment: _ember["default"].computed.alias("deploymentNewController"),

    envNameValidator: _fusorEmberCliUtilsValidators.PresenceValidator.create({}),

    actions: {
      selectEnvironment: function selectEnvironment(environment) {
        this.set('showAlertMessage', false);
        this.set('selectedEnvironment', environment);
        return this.get('deploymentNewController.model').set('lifecycle_environment', environment);
      },

      createEnvironment: function createEnvironment(fields_env) {
        var self = this;

        var nameAlreadyExists = self.get('lifecycleEnvironments').findBy('name', fields_env.name);
        if (nameAlreadyExists) {
          return self.get('deploymentNewController').set('errorMsg', fields_env.name + ' is not a unique name. Environment not saved.');
        }

        var selectedOrganization = this.get('selectedOrganization');
        this.set('fields_env', fields_env);
        this.set('fields_env.organization', selectedOrganization);

        var library = this.get('libraryEnv');
        // assign library to prior db attribute
        this.set('fields_env.prior', library.get('id'));
        var environment = this.store.createRecord('lifecycle-environment', this.get('fields_env'));
        environment.save().then(function (result) {
          //success
          self.get('lifecycleEnvironments').addObject(result._internalModel);
          self.set('selectedEnvironment', environment);
          self.get('deploymentNewController.model').set('lifecycle_environment', environment);
          self.get('deploymentNewController').set('errorMsg', null);
          return self.set('showAlertMessage', true);
        }, function (error) {
          self.get('deploymentNewController').set('errorMsg', 'error saving environment' + error);
        });
      }
    }

  });
});
define("fusor-ember-cli/controllers/deployment-new/satellite/index", ["exports", "ember", "fusor-ember-cli/mixins/needs-deployment-new-mixin", "fusor-ember-cli/mixins/validates-deployment-name-mixin", "fusor-ember-cli/mixins/common-password-mixin"], function (exports, _ember, _fusorEmberCliMixinsNeedsDeploymentNewMixin, _fusorEmberCliMixinsValidatesDeploymentNameMixin, _fusorEmberCliMixinsCommonPasswordMixin) {
  exports["default"] = _ember["default"].Controller.extend(_fusorEmberCliMixinsNeedsDeploymentNewMixin["default"], _fusorEmberCliMixinsValidatesDeploymentNameMixin["default"], _fusorEmberCliMixinsCommonPasswordMixin["default"], {

    deploymentNewController: _ember["default"].inject.controller('deployment-new'),

    name: _ember["default"].computed.alias("deploymentNewController.name"),
    description: _ember["default"].computed.alias("deploymentNewController.description"),

    lifecycleEnvironmentTabRouteName: _ember["default"].computed.alias("deploymentNewController.lifecycleEnvironmentTabRouteName"),

    idSatName: 'deployment_new_sat_name',
    idSatDesc: 'deployment_new_sat_desc',

    backRouteNameOnSatIndex: _ember["default"].computed.alias("deploymentNewController.backRouteNameOnSatIndex"),

    isRhev: _ember["default"].computed.alias('deploymentNewController.isRhev'),
    isOpenStack: _ember["default"].computed.alias("deploymentNewController.isOpenStack"),
    isCloudForms: _ember["default"].computed.alias("deploymentNewController.isCloudForms"),
    isOpenShift: _ember["default"].computed.alias("deploymentNewController.isOpenShift"),

    isValidDeploymentName: _ember["default"].computed.alias("deploymentNewController.isValidDeploymentName"),
    isValidNameAndPassword: _ember["default"].computed('isValidDeploymentName', 'isValidCommonPassword', function () {
      return this.get('isValidDeploymentName') && this.get('isValidCommonPassword');
    }),
    disableNextOnDeploymentName: _ember["default"].computed.not('isValidNameAndPassword')

  });
});
define('fusor-ember-cli/controllers/deployment-new/satellite', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Controller.extend({

    deploymentNewController: _ember['default'].inject.controller('deployment-new'),

    satelliteTabRouteName: _ember['default'].computed.alias("deploymentNewController.satelliteTabRouteName"),
    lifecycleEnvironmentTabRouteName: _ember['default'].computed.alias("deploymentNewController.lifecycleEnvironmentTabRouteName"),

    disableTabDeploymentName: _ember['default'].computed.alias("deploymentNewController.disableTabDeploymentName"),
    disableTabLifecycleEnvironment: _ember['default'].computed.alias("deploymentNewController.disableTabLifecycleEnvironment"),
    disableTabAccessInsights: true

  });
});
define('fusor-ember-cli/controllers/deployment-new/start', ['exports', 'ember', 'fusor-ember-cli/mixins/start-controller-mixin'], function (exports, _ember, _fusorEmberCliMixinsStartControllerMixin) {
  exports['default'] = _ember['default'].Controller.extend(_fusorEmberCliMixinsStartControllerMixin['default'], {

    isNew: true,
    deploymentNewController: _ember['default'].inject.controller('deployment-new'),

    isRhev: _ember['default'].computed.alias("deploymentNewController.model.deploy_rhev"),
    isOpenStack: _ember['default'].computed.alias("deploymentNewController.model.deploy_openstack"),
    isCloudForms: _ember['default'].computed.alias("deploymentNewController.model.deploy_cfme"),
    isOpenShift: _ember['default'].computed.alias("deploymentNewController.model.deploy_openshift"),
    isSubscriptions: _ember['default'].computed.alias("deploymentNewController.isSubscriptions")

  });
});
define("fusor-ember-cli/controllers/deployment-new", ["exports", "ember", "fusor-ember-cli/mixins/deployment-controller-mixin", "fusor-ember-cli/mixins/disable-tab-mixin"], function (exports, _ember, _fusorEmberCliMixinsDeploymentControllerMixin, _fusorEmberCliMixinsDisableTabMixin) {
  exports["default"] = _ember["default"].Controller.extend(_fusorEmberCliMixinsDeploymentControllerMixin["default"], _fusorEmberCliMixinsDisableTabMixin["default"], {

    deploymentNewSatelliteIndex: _ember["default"].inject.controller('deployment-new/satellite/index'),
    deploymentNewConfigureEnvironment: _ember["default"].inject.controller('deployment-new/satellite/configure-environment'),

    routeNameSatellite: 'deployment-new.satellite',
    routeNameStart: 'deployment-new.start',
    backRouteNameOnSatIndex: 'deployments-new.start', //default, should be overwritten by route hooks

    useDefaultOrgViewForEnv: _ember["default"].computed.alias("deploymentNewConfigureEnvironment.useDefaultOrgViewForEnv"),
    selectedEnvironmentDeploymentNew: _ember["default"].computed.alias("deploymentNewConfigureEnvironment.selectedEnvironment"),

    // these tabs will always be disabled within deployment-new
    isDisabledRhev: true,
    isDisabledOpenstack: true,
    isDisabledOpenShift: true,
    isDisabledCloudForms: true,
    isDisabledSubscriptions: true,
    isDisabledReview: true,

    // selectedEnvironmentDeploymentNew is set to 'Library' by routes/deployment-new/satellite/configure-environment.js if Library is only environment
    hasLifecycleEnvironment: _ember["default"].computed('model.lifecycle_environment', 'useDefaultOrgViewForEnv', function () {
      return !!this.get('model.lifecycle_environment.id') || this.get('useDefaultOrgViewForEnv') || this.get('selectedEnvironmentDeploymentNew');
    }),
    hasNoLifecycleEnvironment: _ember["default"].computed.not('hasLifecycleEnvironment'),

    isValidCommonPassword: _ember["default"].computed.alias("deploymentNewSatelliteIndex.isValidCommonPassword"),

    isValidNameAndPassword: _ember["default"].computed('isValidDeploymentName', 'isValidCommonPassword', function () {
      return this.get('isValidDeploymentName') && this.get('isValidCommonPassword');
    }),

    hasInvalidNameOrPassword: _ember["default"].computed.not('isValidNameAndPassword'),
    disableTabLifecycleEnvironment: _ember["default"].computed.not('isValidNameAndPassword')

  });
});
define("fusor-ember-cli/controllers/deployment-plan", ["exports", "ember", "fusor-ember-cli/mixins/needs-deployment-mixin"], function (exports, _ember, _fusorEmberCliMixinsNeedsDeploymentMixin) {
  exports["default"] = _ember["default"].Controller.extend(_fusorEmberCliMixinsNeedsDeploymentMixin["default"], {});
});
define("fusor-ember-cli/controllers/deployment-role", ["exports", "ember", "fusor-ember-cli/mixins/needs-deployment-mixin"], function (exports, _ember, _fusorEmberCliMixinsNeedsDeploymentMixin) {
  exports["default"] = _ember["default"].Controller.extend(_fusorEmberCliMixinsNeedsDeploymentMixin["default"], {});
});
define("fusor-ember-cli/controllers/deployment", ["exports", "ember", "fusor-ember-cli/mixins/deployment-controller-mixin", "fusor-ember-cli/mixins/disable-tab-mixin"], function (exports, _ember, _fusorEmberCliMixinsDeploymentControllerMixin, _fusorEmberCliMixinsDisableTabMixin) {
  exports["default"] = _ember["default"].Controller.extend(_fusorEmberCliMixinsDeploymentControllerMixin["default"], _fusorEmberCliMixinsDisableTabMixin["default"], {

    deploymentsController: _ember["default"].inject.controller('deployments'),
    deploymentSatelliteIndex: _ember["default"].inject.controller('satellite/index'),
    configureEnvironmentController: _ember["default"].inject.controller('configure-environment'),
    rhevController: _ember["default"].inject.controller('rhev'),
    openstackController: _ember["default"].inject.controller('openstack'),
    openshiftController: _ember["default"].inject.controller('openshift'),
    cloudformsController: _ember["default"].inject.controller('cloudforms'),
    credentialsController: _ember["default"].inject.controller('subscriptions/credentials'),
    selectSubscriptionsController: _ember["default"].inject.controller('subscriptions/select-subscriptions'),

    routeNameSatellite: 'satellite',
    routeNameStart: 'deployment.start',
    backRouteNameOnSatIndex: 'deployment.start', //default, should be overwritten by route hooks

    useDefaultOrgViewForEnv: _ember["default"].computed.alias("configureEnvironmentController.useDefaultOrgViewForEnv"),

    isOpenModal: _ember["default"].computed.alias("deploymentsController.isOpenModal"),
    deploymentInModal: _ember["default"].computed.alias("deploymentsController.deploymentInModal"),

    validRhev: _ember["default"].computed.alias("rhevController.validRhev"),
    validOpenStack: _ember["default"].computed.alias("openstackController.validOpenStack"),
    validOpenshift: _ember["default"].computed.alias("openshiftController.validOpenshift"),
    validCloudforms: _ember["default"].computed.alias("cloudformsController.validCloudforms"),
    disableNextOnSelectSubscriptions: _ember["default"].computed.alias("selectSubscriptionsController.disableNextOnSelectSubscriptions"),
    isDisconnected: _ember["default"].computed.alias("model.is_disconnected"),

    isDisabledRhev: _ember["default"].computed.alias("satelliteInvalid"),

    isDisabledOpenstack: _ember["default"].computed("satelliteInvalid", 'isRhev', 'validRhev', function () {
      return this.get('satelliteInvalid') || this.get('isRhev') && !this.get('validRhev');
    }),

    isDisabledOpenShift: _ember["default"].computed("satelliteInvalid", 'isRhev', 'isOpenStack', 'validRhev', 'validOpenStack', function () {
      return this.get('satelliteInvalid') || this.get('isRhev') && !this.get('validRhev') || this.get('isOpenStack') && !this.get('validOpenStack');
    }),

    isDisabledCloudForms: _ember["default"].computed("satelliteInvalid", 'isRhev', 'isOpenStack', 'isOpenShift', 'validRhev', 'validOpenStack', 'validOpenshift', function () {
      return this.get('satelliteInvalid') || this.get('isRhev') && !this.get('validRhev') || this.get('isOpenStack') && !this.get('validOpenStack') || this.get('isOpenShift') && !this.get('validOpenshift');
    }),

    isDisabledSubscriptions: _ember["default"].computed("satelliteInvalid", 'isRhev', 'isOpenStack', 'isOpenShift', 'validRhev', 'validOpenStack', 'validOpenshift', 'isCloudForms', 'validCloudforms', function () {
      return this.get('satelliteInvalid') || this.get('isRhev') && !this.get('validRhev') || this.get('isOpenStack') && !this.get('validOpenStack') || this.get('isOpenShift') && !this.get('validOpenshift') || this.get('isCloudForms') && !this.get('validCloudforms');
    }),

    hasSubscriptionUUID: _ember["default"].computed('model.upstream_consumer_uuid', function () {
      return _ember["default"].isPresent(this.get('model.upstream_consumer_uuid'));
    }),

    isDisabledReview: _ember["default"].computed('isDisconnected', 'isDisabledSubscriptions', 'hasSubscriptionUUID', 'disableNextOnSelectSubscriptions', function () {
      var isConnectedSync = !this.get('isDisconnected');
      var subsNotReady = this.get('isDisabledSubscriptions') || !this.get('hasSubscriptionUUID') || this.get('disableNextOnSelectSubscriptions');

      // Disable review if this is a connected sync and subs are not ready
      return isConnectedSync && subsNotReady;
    }),

    hasLifecycleEnvironment: _ember["default"].computed('model.lifecycle_environment', 'useDefaultOrgViewForEnv', function () {
      return !!this.get('model.lifecycle_environment.id') || this.get('useDefaultOrgViewForEnv');
    }),
    hasNoLifecycleEnvironment: _ember["default"].computed.not('hasLifecycleEnvironment'),

    isValidCommonPassword: _ember["default"].computed.alias("deploymentSatelliteIndex.isValidCommonPassword"),

    isValidNameAndPassword: _ember["default"].computed('isValidDeploymentName', 'isValidCommonPassword', function () {
      return this.get('isValidDeploymentName') && this.get('isValidCommonPassword');
    }),

    hasInvalidNameOrPassword: _ember["default"].computed.not('isValidNameAndPassword'),
    disableTabLifecycleEnvironment: _ember["default"].computed.not('isValidNameAndPassword'),

    satelliteInvalid: _ember["default"].computed.or('hasNoName', 'hasInvalidNameOrPassword', 'hasNoOrganization', 'hasNoLifecycleEnvironment'),

    skipContent: false,

    numSubscriptionsRequired: _ember["default"].computed('isRhev', 'isOpenStack', 'isCloudForms', 'model.discovered_hosts.[]', function () {
      var num = 0;
      if (this.get('isRhev')) {
        num = num + 1 + this.get('model.discovered_hosts.length'); // 1 is for engine
      }
      if (this.get('isCloudForms')) {
        num = num + 1;
      }
      return num;
    }),

    managementApplicationName: _ember["default"].computed('model.upstream_consumer_name', 'credentialsController.organizationUpstreamConsumerName', function () {
      if (_ember["default"].isPresent(this.get('model.upstream_consumer_name'))) {
        return this.get('model.upstream_consumer_name');
      } else {
        return this.get('credentialsController.organizationUpstreamConsumerName');
      }
    }),

    hasEngine: _ember["default"].computed('model.discovered_host.id', function () {
      return _ember["default"].isPresent(this.get("model.discovered_host.id"));
    }),
    hasNoEngine: _ember["default"].computed.not('hasEngine'),

    cntHypervisors: _ember["default"].computed('model.discovered_hosts.[]', function () {
      return this.get('model.discovered_hosts.length');
    }),

    hasHypervisors: _ember["default"].computed('cntHypervisors', function () {
      return this.get('cntHypervisors') > 0;
    }),
    hasNoHypervisors: _ember["default"].computed.not('hasHypervisors'),

    isStarted: _ember["default"].computed('model.foreman_task_uuid', function () {
      return !!this.get('model.foreman_task_uuid');
    }),
    isNotStarted: _ember["default"].computed.not('isStarted'),

    isFinished: _ember["default"].computed('model.progress', function () {
      return this.get('model.progress') === '1';
    }),
    isNotFinished: _ember["default"].computed.not('isFinished'),

    cntSubscriptions: _ember["default"].computed('model.subscriptions.[]', function () {
      return this.get('model.subscriptions.length');
    }),

    enableAccessInsights: _ember["default"].computed('model.enable_access_insights', function () {
      if (this.get('model.enable_access_insights')) {
        return 'Enabled';
      } else {
        return 'Disabled';
      }
    }),

    hasSubscriptions: _ember["default"].computed('cntSubscriptions', function () {
      return this.get('cntSubscriptions') > 0;
    }),
    hasNoSubscriptions: _ember["default"].computed.not('hasSubscriptions')
  });
});
define('fusor-ember-cli/controllers/deployments', ['exports', 'ember', 'fusor-ember-cli/mixins/pagination-controller-mixin'], function (exports, _ember, _fusorEmberCliMixinsPaginationControllerMixin) {
  exports['default'] = _ember['default'].Controller.extend(_fusorEmberCliMixinsPaginationControllerMixin['default'], {

    filteredDeployments: _ember['default'].computed('model', 'search', 'model.[]', function () {
      var search = this.get('search');
      var rx = new RegExp(search, 'gi');
      var model = this.get('model');

      if (model.get('length') > 1) {
        return model.filter(function (record) {
          if (_ember['default'].isPresent(record.get('name'))) {
            return record.get('name').match(rx);
          }
        });
      } else {
        return model;
      }
    })

  });
});
define("fusor-ember-cli/controllers/engine/discovered-host", ["exports", "ember", "fusor-ember-cli/mixins/needs-deployment-mixin", "fusor-ember-cli/mixins/pagination-controller-mixin"], function (exports, _ember, _fusorEmberCliMixinsNeedsDeploymentMixin, _fusorEmberCliMixinsPaginationControllerMixin) {
  exports["default"] = _ember["default"].Controller.extend(_fusorEmberCliMixinsNeedsDeploymentMixin["default"], _fusorEmberCliMixinsPaginationControllerMixin["default"], {

    rhevController: _ember["default"].inject.controller('rhev'),

    selectedRhevEngineHost: _ember["default"].computed.alias("model"),
    rhevIsSelfHosted: _ember["default"].computed.alias("deploymentController.model.rhev_is_self_hosted"),

    hypervisorModelIds: _ember["default"].computed('deploymentController.model.discovered_hosts.[]', function () {
      return this.get('deploymentController.model.discovered_hosts').getEach('id');
    }),

    engineNextRouteName: _ember["default"].computed('rhevIsSelfHosted', function () {
      if (this.get('rhevIsSelfHosted')) {
        return 'rhev-options';
      } else {
        return 'hypervisor.discovered-host';
      }
    }),

    // Filter out hosts selected as Hypervisor
    availableHosts: _ember["default"].computed('deployingHosts', 'allDiscoveredHosts.[]', 'hypervisorModelIds.[]', function () {
      var allDiscoveredHosts = this.get('allDiscoveredHosts');

      if (_ember["default"].isEmpty(allDiscoveredHosts)) {
        return [];
      }

      var deployingHosts = this.get('deployingHosts');
      var hypervisorIds = this.get('hypervisorModelIds');

      return allDiscoveredHosts.filter(function (host) {
        var hostId = host.get('id');
        var isHypervisor = hypervisorIds && hypervisorIds.contains(host.get('id'));
        var isDeploying = deployingHosts.any(function (deployingHost) {
          return deployingHost.get('id') === hostId;
        });

        return !isHypervisor && !isDeploying;
      });
    }),

    filteredHosts: _ember["default"].computed('availableHosts.[]', 'searchString', 'isStarted', function () {
      var searchString = this.get('searchString');
      var rx = new RegExp(searchString, 'gi');
      var availableHosts = this.get('availableHosts');

      if (this.get('isStarted')) {
        return _ember["default"].A([this.get('model')]);
      } else if (availableHosts.get('length') > 0) {
        return availableHosts.filter(function (record) {
          return record.get('name').match(rx) || record.get('memory_human_size').match(rx) || record.get('disks_human_size').match(rx) || record.get('subnet_to_s').match(rx) || record.get('mac').match(rx);
        });
      } else {
        return availableHosts;
      }
    }),

    sortCriteria: _ember["default"].computed('sort_by', 'dir', function () {
      var sort_by = this.get('sort_by') || 'name';
      var dir = this.get('dir') || 'asc';
      return [sort_by + ':' + dir];
    }),
    sortedHosts: _ember["default"].computed.sort('filteredHosts', 'sortCriteria'),

    numSelected: _ember["default"].computed('model.id', function () {
      return this.get('model.id') ? 1 : 0;
    }),

    isSelectedEngineHostnameInvalid: false,

    disableNextOnEngine: _ember["default"].computed('isSelectedEngineHostnameInvalid', 'deploymentController.hasNoEngine', function () {
      return this.get('deploymentController.hasNoEngine') || this.get('isSelectedEngineHostnameInvalid');
    }),

    actions: {
      onEngineChanged: function onEngineChanged(newlySelectedHost, isInvalidHostname) {
        this.set('isSelectedEngineHostnameInvalid', isInvalidHostname);
        this.set('deploymentController.model.discovered_host', newlySelectedHost);
      },
      setIfHostnameInvalid: function setIfHostnameInvalid(bool, hostId) {
        var discoveredHost = this.get('deploymentController.model.discovered_host');
        if (discoveredHost && discoveredHost.get('id') === hostId) {
          this.set('isSelectedEngineHostnameInvalid', bool);
        }
      }
    }
  });
});
define('fusor-ember-cli/controllers/engine', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Controller.extend({

    rhevController: _ember['default'].inject.controller('rhev'),

    engineTabName: _ember['default'].computed.alias("rhevController.engineTabName"),
    engineTabNameLowercase: _ember['default'].computed('engineTabName', function () {
      return this.get('engineTabName').toLowerCase();
    })
  });
});
define("fusor-ember-cli/controllers/flavor", ["exports", "ember", "fusor-ember-cli/mixins/needs-deployment-mixin"], function (exports, _ember, _fusorEmberCliMixinsNeedsDeploymentMixin) {
  exports["default"] = _ember["default"].Controller.extend(_fusorEmberCliMixinsNeedsDeploymentMixin["default"], {});
});
define('fusor-ember-cli/controllers/host', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Controller.extend({});
});
define('fusor-ember-cli/controllers/hypervisor/discovered-host', ['exports', 'ember', 'fusor-ember-cli/mixins/needs-deployment-mixin', 'fusor-ember-cli/utils/validators'], function (exports, _ember, _fusorEmberCliMixinsNeedsDeploymentMixin, _fusorEmberCliUtilsValidators) {
  exports['default'] = _ember['default'].Controller.extend(_fusorEmberCliMixinsNeedsDeploymentMixin['default'], {

    deployments: _ember['default'].computed.alias('applicationController.model'),
    selectedRhevEngine: _ember['default'].computed.alias("deploymentController.model.discovered_host"),
    rhevIsSelfHosted: _ember['default'].computed.alias("deploymentController.model.rhev_is_self_hosted"),

    hostNamingScheme: _ember['default'].computed.alias("deploymentController.model.host_naming_scheme"),
    customPreprendName: _ember['default'].computed.alias("deploymentController.model.custom_preprend_name"),

    namingOptions: ['Freeform', 'MAC address', 'hypervisorN', 'Custom scheme'],

    isFreeform: _ember['default'].computed('hostNamingScheme', function () {
      return this.get('hostNamingScheme') === 'Freeform';
    }),

    isMac: _ember['default'].computed('hostNamingScheme', function () {
      return this.get('hostNamingScheme') === 'MAC address';
    }),

    isCustomScheme: _ember['default'].computed('hostNamingScheme', function () {
      return this.get('hostNamingScheme') === 'Custom scheme';
    }),

    isHypervisorN: _ember['default'].computed('hostNamingScheme', function () {
      return this.get('hostNamingScheme') === 'hypervisorN';
    }),

    availableHosts: _ember['default'].computed('deployingHosts', 'allDiscoveredHosts.[]', 'hypervisorModelIds.[]', function () {
      var _this = this;

      var allDiscoveredHosts = this.get('allDiscoveredHosts');

      if (_ember['default'].isEmpty(allDiscoveredHosts)) {
        return [];
      }

      var deployingHosts = this.get('deployingHosts');

      return allDiscoveredHosts.filter(function (host) {
        var hostId = host.get('id');
        var isEngine = hostId === _this.get('selectedRhevEngine.id');
        var isDeploying = deployingHosts.any(function (deployingHost) {
          return deployingHost.get('id') === hostId;
        });

        return !isEngine && !isDeploying;
      });
    }),

    // same as Engine. TODO. put it mixin
    filteredHosts: _ember['default'].computed('availableHosts.[]', 'searchString', 'isStarted', function () {
      var searchString = this.get('searchString');
      var rx = new RegExp(searchString, 'gi');
      var availableHosts = this.get('availableHosts');

      if (this.get('isStarted')) {
        return this.get('model');
      } else if (availableHosts.get('length') > 0) {
        return availableHosts.filter(function (record) {
          return record.get('name').match(rx) || record.get('memory_human_size').match(rx) || record.get('disks_human_size').match(rx) || record.get('subnet_to_s').match(rx) || record.get('mac').match(rx);
        });
      } else {
        return availableHosts;
      }
    }),

    hypervisorModelIds: _ember['default'].computed('model.[]', 'selectedRhevEngine', function () {
      if (this.get('model')) {
        var allIds = this.get('model').getEach('id');
        return allIds.removeObject(this.get('selectedRhevEngine').get('id'));
      } else {
        return [];
      }
    }),

    cntSelectedHypervisorHosts: _ember['default'].computed.alias('hypervisorModelIds.length'),

    hostInflection: _ember['default'].computed('cntSelectedHypervisorHosts', function () {
      return this.get('cntSelectedHypervisorHosts') === 1 ? 'host' : 'hosts';
    }),

    isAllChecked: _ember['default'].computed('availableHosts.[]', 'cntSelectedHypervisorHosts', function () {
      return this.get('cntSelectedHypervisorHosts') === this.get('availableHosts.length');
    }),

    hypervisorBackRouteName: _ember['default'].computed('rhevIsSelfHosted', function () {
      if (this.get('rhevIsSelfHosted')) {
        return 'rhev-setup';
      } else {
        return 'engine.discovered-host';
      }
    }),

    hostnameValidity: _ember['default'].Object.create({
      updated: Date.now(),
      state: _ember['default'].Object.create()
    }),
    disableNextOnHypervisor: _ember['default'].computed('hypervisorModelIds', 'hostnameValidity.updated', function () {
      var _this2 = this;

      if (this.get('hypervisorModelIds').get('length') === 0) {
        return true;
      }

      var vState = this.get('hostnameValidity').get('state');
      var trackedHostIds = Object.keys(vState);
      return trackedHostIds.length === 0 || !trackedHostIds.filter(function (hostId) {
        return _this2.get('hypervisorModelIds').contains(hostId);
      }).map(function (k) {
        return vState.get(k);
      }).reduce(function (previousAreTrue, currentValue) {
        return previousAreTrue && currentValue;
      }, true);
    }),

    customPrefixValidator: _fusorEmberCliUtilsValidators.AllValidator.create({
      validators: [_fusorEmberCliUtilsValidators.PresenceValidator.create({}), _fusorEmberCliUtilsValidators.AlphaNumericDashUnderscoreValidator.create({})]
    }),

    actions: {

      setCheckAll: function setCheckAll() {
        this.get('model').setObjects([]);
        this.get('model').addObjects(this.get('availableHosts'));
      },

      setUncheckAll: function setUncheckAll() {
        this.get('model').setObjects([]);
      },

      openNamingSchemeModal: function openNamingSchemeModal() {
        this.set('openModalNamingScheme', true);
      },

      cancelNamingScheme: function cancelNamingScheme() {
        this.get('deploymentController.model').rollbackAttributes();
      },

      saveNamingScheme: function saveNamingScheme() {
        this.get('deploymentController.model').save();
      },

      setIfHostnameInvalid: function setIfHostnameInvalid(isInvalid, hostId) {
        this.get('hostnameValidity').get('state').set(hostId, !isInvalid);
        this.get('hostnameValidity').set('updated', Date.now());
      },
      setSelectValue: function setSelectValue(fieldName, selectionValue) {
        this.get('deploymentController').set(fieldName, selectionValue);
      }
    }
  });
});
define("fusor-ember-cli/controllers/hypervisor", ["exports", "ember", "fusor-ember-cli/mixins/needs-deployment-mixin"], function (exports, _ember, _fusorEmberCliMixinsNeedsDeploymentMixin) {
  exports["default"] = _ember["default"].Controller.extend(_fusorEmberCliMixinsNeedsDeploymentMixin["default"], {});
});
define('fusor-ember-cli/controllers/image', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Controller.extend({});
});
define('fusor-ember-cli/controllers/new-environment', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Controller.extend({});
});
define('fusor-ember-cli/controllers/node', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Controller.extend({});
});
define('fusor-ember-cli/controllers/object', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Controller;
});
define('fusor-ember-cli/controllers/openshift/openshift-configuration', ['exports', 'ember', 'fusor-ember-cli/mixins/needs-deployment-mixin', 'fusor-ember-cli/utils/validators'], function (exports, _ember, _fusorEmberCliMixinsNeedsDeploymentMixin, _fusorEmberCliUtilsValidators) {
  exports['default'] = _ember['default'].Controller.extend(_fusorEmberCliMixinsNeedsDeploymentMixin['default'], {

    openshiftController: _ember['default'].inject.controller('openshift'),

    isCloudForms: _ember['default'].computed.alias("deploymentController.isCloudForms"),
    isSubscriptions: _ember['default'].computed.alias("deploymentController.isSubscriptions"),

    nextRouteNameAfterOpenshift: _ember['default'].computed('isCloudForms', 'isSubscriptions', function () {
      if (this.get('isCloudForms')) {
        return 'cloudforms';
      } else if (this.get('isSubscriptions')) {
        return 'subscriptions';
      } else {
        return 'review';
      }
    }),

    isValidOpenshiftConfiguration: _ember['default'].computed.alias('openshiftController.isValidOpenshiftConfiguration'),
    isInvalidOpenshiftConfiguration: _ember['default'].computed.alias('openshiftController.isInvalidOpenshiftConfiguration'),

    storageNameValidator: _ember['default'].computed.alias('openshiftController.storageNameValidator'),
    storageHostValidator: _ember['default'].computed.alias('openshiftController.storageHostValidator'),
    exportPathValidator: _ember['default'].computed.alias('openshiftController.exportPathValidator'),
    usernameValidator: _ember['default'].computed.alias('openshiftController.usernameValidator'),
    subdomainValidator: _ember['default'].computed.alias('openshiftController.subdomainValidator'),

    userPassword: _ember['default'].computed.alias('model.openshift_user_password'),
    passwordValidator: _fusorEmberCliUtilsValidators.RequiredPasswordValidator.create({}),

    confirmUserPasswordValidator: _ember['default'].computed('userPassword', function () {
      return _fusorEmberCliUtilsValidators.EqualityValidator.create({ equals: this.get('userPassword') });
    }),

    isPasswordValid: _ember['default'].computed('userPassword', 'confirmUserPassword', function () {
      return (0, _fusorEmberCliUtilsValidators.validateZipper)([[this.get('passwordValidator'), this.get('userPassword')], [this.get('confirmUserPasswordValidator'), this.get('confirmUserPassword')]]);
    }),
    isInvalidPassword: _ember['default'].computed.not('isPasswordValid'),

    isNFS: _ember['default'].computed('model.openshift_storage_type', function () {
      return this.get('model.openshift_storage_type') === 'NFS';
    }),

    isGluster: _ember['default'].computed('model.openshift_storage_type', function () {
      return this.get('model.openshift_storage_type') === 'GFS';
    }),

    postTextDomainName: _ember['default'].computed('domainName', function () {
      return "." + this.get('domainName');
    }),

    disableNextOpenshiftConfig: _ember['default'].computed('isInvalidOpenshiftConfiguration', 'isInvalidPassword', function () {
      return this.get('isInvalidOpenshiftConfiguration') || this.get('isInvalidPassword');
    })
  });
});
define("fusor-ember-cli/controllers/openshift/openshift-nodes", ["exports", "ember", "fusor-ember-cli/mixins/needs-deployment-mixin", "fusor-ember-cli/mixins/openshift-mixin"], function (exports, _ember, _fusorEmberCliMixinsNeedsDeploymentMixin, _fusorEmberCliMixinsOpenshiftMixin) {
  exports["default"] = _ember["default"].Controller.extend(_fusorEmberCliMixinsNeedsDeploymentMixin["default"], _fusorEmberCliMixinsOpenshiftMixin["default"], {

    openshiftController: _ember["default"].inject.controller('openshift'),

    // similar code to CFME where-install.js. Possible to DRY into mixin
    isRhev: _ember["default"].computed.alias("deploymentController.isRhev"),
    isNotRhev: _ember["default"].computed.not("isRhev"),
    isOpenStack: _ember["default"].computed.alias("deploymentController.isOpenStack"),
    isCloudForms: _ember["default"].computed.alias("deploymentController.isCloudForms"),
    isNotOpenStack: _ember["default"].computed.not("isOpenStack"),

    isOverCapacity: _ember["default"].computed.alias("openshiftController.isOverCapacity"),
    isInvalidOpenshiftNodes: _ember["default"].computed.alias("openshiftController.isInvalidOpenshiftNodes"),

    disableRHEV: _ember["default"].computed('isStarted', 'isNotRhev', function () {
      return this.get('isStarted') || this.get('isNotRhev');
    }),

    disableOpenStack: _ember["default"].computed('isStarted', 'isNotOpenStack', function () {
      return this.get('isStarted') || this.get('isNotOpenStack');
    }),

    disableRHEVradio: _ember["default"].computed('disableRHEV', 'isStarted', function () {
      return this.get('disableRHEV') || this.get('isStarted');
    }),

    disableOpenstackradio: _ember["default"].computed('disableOpenStack', 'isStarted', function () {
      return this.get('disableOpenStack') || this.get('isStarted');
    }),

    backRouteName: _ember["default"].computed('isOpenStack', 'isRhev', function () {
      if (this.get('isOpenStack')) {
        return 'openstack.overcloud';
      } else if (this.get('isRhev')) {
        return 'storage';
      } else {
        return 'satellite.access-insights';
      }
    }),

    showEnvironmentSummary: _ember["default"].computed('numNodes', 'storageSize', function () {
      return _ember["default"].isPresent(this.get('numNodes')) && _ember["default"].isPresent(this.get('storageSize'));
    }),

    actions: {
      openshiftLocationChanged: function openshiftLocationChanged() {},

      numMasterNodesChanged: function numMasterNodesChanged(numNodes) {
        this.set('isCustomNumMasterNodes', false);
        this.set('numMasterNodes', numNodes);
      },

      numWorkerNodesChanged: function numWorkerNodesChanged(numNodes) {
        this.set('isCustomNumWorkerNodes', false);
        this.set('numWorkerNodes', numNodes);
      },

      storageSizeChanged: function storageSizeChanged(storageSize) {
        this.set('isCustomStorageSize', false);
        this.set('model.openshift_storage_size', storageSize);
      },

      showCustomNumWorkerNodes: function showCustomNumWorkerNodes() {
        this.set('isCustomNumWorkerNodes', true);
      },

      showCustomStorageSize: function showCustomStorageSize() {
        this.set('isCustomStorageSize', true);
      }
    },

    _initWorkerNodes: function _initWorkerNodes(count) {
      var _workerNodes = _ember["default"].A([]);
      var _workerNodesMinusFirst = _ember["default"].A([]);

      for (var nodeOrdinal = 1; nodeOrdinal <= count; ++nodeOrdinal) {
        var _node = this._createWorkerNode(nodeOrdinal);
        _workerNodes.push(_node);

        if (nodeOrdinal === 1) {
          this.set('_firstWorkerNode', _node);
        } else {
          _workerNodesMinusFirst.push(_node);
        }
      }

      this.set('_workerNodes', _workerNodes);
      this.set('_workerNodesMinusFirst', _workerNodesMinusFirst);
    },

    _createWorkerNode: function _createWorkerNode(ordinal) {
      var WorkerNode = _ember["default"].Object.extend({
        numMasterNodes: _ember["default"].computed.alias('controller.numMasterNodes'),

        perMasterVcpu: _ember["default"].computed.alias('controller.masterVcpu'),
        perMasterRam: _ember["default"].computed.alias('controller.masterRam'),
        perMasterDisk: _ember["default"].computed.alias('controller.masterDisk'),
        perWorkerVcpu: _ember["default"].computed.alias('controller.model.openshift_node_vcpu'),
        perWorkerRam: _ember["default"].computed.alias('controller.model.openshift_node_ram'),
        perWorkerDisk: _ember["default"].computed.alias('controller.storageSize'),

        vcpuAvailable: _ember["default"].computed.alias('controller.vcpuAvailable'),
        ramAvailable: _ember["default"].computed.alias('controller.ramAvailable'),
        diskAvailable: _ember["default"].computed.alias('controller.diskAvailable'),

        vcpuNeeded: _ember["default"].computed('ordinal', 'numMasterNodes', 'perMasterVcpu', 'perWorkerVcpu', function () {
          var totalWorkerCpu = this.get('ordinal') * this.get('perWorkerCpu');
          var totalMasterCpu = this.get('numMasterNodes') * this.get('perMasterVcpu');
          return totalWorkerCpu + totalMasterCpu;
        }),

        ramNeeded: _ember["default"].computed('ordinal', 'numMasterNodes', 'perMasterRam', 'perWorkerRam', function () {
          var totalWorkerRam = this.get('ordinal') * this.get('perWorkerRam');
          var totalMasterRam = this.get('numMasterNodes') * this.get('perMasterRam');
          return totalWorkerRam + totalMasterRam;
        }),

        diskNeeded: _ember["default"].computed('ordinal', 'numMasterNodes', 'perMasterDisk', 'perWorkerDisk', function () {
          var totalWorkerDisk = this.get('ordinal') * this.get('perWorkerDisk');
          var totalMasterDisk = this.get('numMasterNodes') * this.get('perMasterDisk');
          return totalWorkerDisk + totalMasterDisk;
        }),

        isOverCapacity: _ember["default"].computed('vcpuNeeded', 'vcpuAvailable', 'ramNeeded', 'ramAvailable', 'diskNeeded', 'diskAvailable', function () {
          var vcpuOver = this.get('vcpuNeeded') > this.get('vcpuAvailable');
          var ramOver = this.get('ramNeeded') > this.get('ramAvailable');
          var diskOver = this.get('diskNeeded') > this.get('diskAvailable');
          return vcpuOver || ramOver || diskOver;
        })
      });

      return WorkerNode.create({
        controller: this,
        ordinal: ordinal
      });
    }
  });
});
define('fusor-ember-cli/controllers/openshift', ['exports', 'ember', 'fusor-ember-cli/mixins/openshift-mixin', 'fusor-ember-cli/utils/validators'], function (exports, _ember, _fusorEmberCliMixinsOpenshiftMixin, _fusorEmberCliUtilsValidators) {
  exports['default'] = _ember['default'].Controller.extend(_fusorEmberCliMixinsOpenshiftMixin['default'], {
    stepNumberOpenShift: _ember['default'].computed.alias('deploymentController.stepNumberOpenShift'),

    isVcpuOverCapacity: _ember['default'].computed('vcpuNeeded', 'vcpuAvailable', function () {
      return this.get('vcpuNeeded') > this.get('vcpuAvailable');
    }),

    isRamOverCapacity: _ember['default'].computed('ramNeeded', 'ramAvailable', function () {
      return this.get('ramNeeded') > this.get('ramAvailable');
    }),

    isDiskOverCapacity: _ember['default'].computed('diskNeeded', 'diskAvailable', function () {
      return this.get('diskNeeded') > this.get('diskAvailable');
    }),

    isOverCapacity: _ember['default'].computed('isVcpuOverCapacity', 'isRamOverCapacity', 'isDiskOverCapacity', function () {
      return this.get('isVcpuOverCapacity') || this.get('isRamOverCapacity') || this.get('isDiskOverCapacity');
    }),
    isUnderCapacity: _ember['default'].computed.not("isOverCapacity"),

    isValidOpenshiftNodes: _ember['default'].computed('openshiftInstallLoc', 'numMasterNodes', 'numWorkerNodes', 'storageSize', 'masterVcpu', 'masterRam', 'masterDisk', 'workerVcpu', 'workerRam', 'workerDisk', function () {
      return _ember['default'].isPresent(this.get('openshiftInstallLoc')) && isPositiveInteger(this.get('numMasterNodes')) && isPositiveInteger(this.get('numWorkerNodes')) && isPositiveInteger(this.get('storageSize')) && isPositiveInteger(this.get('masterVcpu')) && isPositiveInteger(this.get('masterRam')) && isPositiveInteger(this.get('masterDisk')) && isPositiveInteger(this.get('workerVcpu')) && isPositiveInteger(this.get('workerRam')) && isPositiveInteger(this.get('workerDisk'));
    }),
    isInvalidOpenshiftNodes: _ember['default'].computed.not("isValidOpenshiftNodes"),

    ////////////////////////////////////////////////////////////
    // OpenShift Configuration
    ////////////////////////////////////////////////////////////
    usernameValidator: _fusorEmberCliUtilsValidators.AllValidator.create({
      validators: [_fusorEmberCliUtilsValidators.PresenceValidator.create({}), _fusorEmberCliUtilsValidators.AlphaNumericDashUnderscoreValidator.create({})]
    }),

    storageNameValidator: _fusorEmberCliUtilsValidators.AllValidator.create({
      validators: [_fusorEmberCliUtilsValidators.PresenceValidator.create({}), _fusorEmberCliUtilsValidators.AlphaNumericDashUnderscoreValidator.create({})]
    }),

    storageHostValidator: _fusorEmberCliUtilsValidators.AllValidator.create({
      validators: [_fusorEmberCliUtilsValidators.PresenceValidator.create({}), _fusorEmberCliUtilsValidators.IpAddressValidator.create({})]
    }),

    exportPathValidator: _fusorEmberCliUtilsValidators.AllValidator.create({
      validators: [_fusorEmberCliUtilsValidators.PresenceValidator.create({}), _fusorEmberCliUtilsValidators.NfsPathValidator.create({})]
    }),

    subdomainValidator: _fusorEmberCliUtilsValidators.AllValidator.create({
      validators: [_fusorEmberCliUtilsValidators.PresenceValidator.create({}), _fusorEmberCliUtilsValidators.HostnameValidator.create({})]
    }),

    isValidOpenshiftConfiguration: _ember['default'].computed('storageNameValidator', 'storageHostValidator', 'exportPathValidator', 'usernameValidator', 'subdomainValidator', 'deployment.openshift_storage_host', 'deployment.openshift_export_path', 'deployment.openshift_username', 'deployment.openshift_subdomain_name', function () {
      return (0, _fusorEmberCliUtilsValidators.validateZipper)([[this.get('storageHostValidator'), this.get('deployment.openshift_storage_host')], [this.get('exportPathValidator'), this.get('deployment.openshift_export_path')], [this.get('usernameValidator'), this.get('deployment.openshift_username')], [this.get('subdomainValidator'), this.get('deployment.openshift_subdomain_name')]]);
    }),

    isInvalidOpenshiftConfiguration: _ember['default'].computed.not('isValidOpenshiftConfiguration'),
    validOpenshift: _ember['default'].computed('isValidOpenshiftNodes', 'isValidOpenshiftConfiguration', function () {
      return this.get('isValidOpenshiftNodes') && this.get('isValidOpenshiftConfiguration');
    })
  });

  function isPositiveInteger(value) {
    //http://stackoverflow.com/questions/14636536/how-to-check-if-a-variable-is-an-integer-in-javascript
    return value > 0 && !isNaN(value) && (function (x) {
      return (x | 0) === x;
    })(parseFloat(value));
  }
});
define("fusor-ember-cli/controllers/openstack/assign-nodes", ["exports", "ember", "fusor-ember-cli/mixins/deployment-controller-mixin", "fusor-ember-cli/mixins/needs-deployment-mixin"], function (exports, _ember, _fusorEmberCliMixinsDeploymentControllerMixin, _fusorEmberCliMixinsNeedsDeploymentMixin) {

  var Role = _ember["default"].Object.extend({
    isAssigned: function isAssigned() {
      return _ember["default"].isPresent(this.get('flavor')) && this.get('flavor') !== 'baremetal';
    }
  });

  var AssignNodesController = _ember["default"].Controller.extend(_fusorEmberCliMixinsDeploymentControllerMixin["default"], _fusorEmberCliMixinsNeedsDeploymentMixin["default"], {

    deployment: _ember["default"].computed.alias("deploymentController.model"),
    deploymentId: _ember["default"].computed.alias("deployment.id"),
    openstackDeployment: _ember["default"].computed.alias("model"),
    isCloudForms: _ember["default"].computed.alias("deploymentController.isCloudForms"),

    globalPlanParameters: [],

    roles: [Role.create({
      name: 'Compute',
      label: 'Compute',
      parameterPrefixes: ['Nova', 'Compute', 'OvercloudCompute'],
      countParameterName: 'ComputeCount',
      flavorParameterName: 'OvercloudComputeFlavor',
      imageParameterName: 'NovaImage',
      flavorDeploymentAttributeName: 'overcloud_compute_flavor',
      countDeploymentAttributeName: 'overcloud_compute_count',
      roleType: 'compute',
      parameters: [],
      advancedParameters: []
    }), Role.create({
      name: 'Controller',
      label: 'Controller',
      parameterPrefixes: ['Controller', 'Control', 'OvercloudControl'],
      countParameterName: 'ControllerCount',
      flavorParameterName: 'OvercloudControlFlavor',
      imageParameterName: 'controllerImage',
      flavorDeploymentAttributeName: 'overcloud_controller_flavor',
      countDeploymentAttributeName: 'overcloud_controller_count',
      roleType: 'controller',
      parameters: [],
      advancedParameters: []
    }), Role.create({
      name: 'BlockStorage',
      label: 'Block Storage',
      parameterPrefixes: ['Cinder', 'BlockStorage', 'OvercloudBlockStorage'],
      countParameterName: 'BlockStorageCount',
      flavorParameterName: 'OvercloudBlockStorageFlavor',
      imageParameterName: 'BlockStorageImage',
      flavorDeploymentAttributeName: 'overcloud_block_storage_flavor',
      countDeploymentAttributeName: 'overcloud_block_storage_count',
      roleType: 'block-storage',
      parameters: [],
      advancedParameters: []
    }), Role.create({
      name: 'ObjectStorage',
      label: 'Object Storage',
      parameterPrefixes: ['Swift', 'OvercloudSwift', 'ObjectStorage', 'OvercloudObjectStorage'],
      countParameterName: 'ObjectStorageCount',
      flavorParameterName: 'OvercloudSwiftStorageFlavor',
      imageParameterName: 'SwiftStorageImage',
      flavorDeploymentAttributeName: 'overcloud_object_storage_flavor',
      countDeploymentAttributeName: 'overcloud_object_storage_count',
      roleType: 'object-storage',
      parameters: [],
      advancedParameters: []
    })],

    unassignedRoles: _ember["default"].computed('roles.@each.flavor', function () {
      return this.get('roles').filter(function (role) {
        return !role.isAssigned();
      });
    }),

    assignedRoles: _ember["default"].computed('roles.@each.flavor', function () {
      return this.get('roles').filter(function (role) {
        return role.isAssigned();
      });
    }),

    allRolesAssigned: _ember["default"].computed('unassignedRoles.[]', function () {
      return this.get('unassignedRoles.length') === 0;
    }),

    notAllRolesAssigned: _ember["default"].computed.not('allRolesAssigned'),

    numProfiles: _ember["default"].computed('profiles.[]', function () {
      return this.get('profiles.length');
    }),

    nodeCount: _ember["default"].computed('nodes.[]', function () {
      return this.get('nodes.length');
    }),

    isDraggingRole: _ember["default"].computed('roles.[]', 'roles.@each.isDraggingObject', function () {
      return this.get('roles').any(function (role) {
        return role.get('isDraggingObject') === true;
      });
    }),

    droppableClass: _ember["default"].computed('isDraggingRole', function () {
      return this.get('isDraggingRole') ? 'deployment-roles-active' : '';
    }),

    roleCountChanged: _ember["default"].observer('roles.@each.count', function () {
      _ember["default"].run.once(this, 'updateRoleCounts');
    }),

    hasValidNodeAssignments: _ember["default"].computed.alias('openstackDeployment.hasValidNodeAssignments'),

    disableAssignNodesNext: _ember["default"].computed.not('hasValidNodeAssignments'),

    settingsActiveClass: _ember["default"].computed('selectedTab', function () {
      return this.get('selectedTab') == 'settings' ? 'active' : 'inactive';
    }),

    configActiveClass: _ember["default"].computed('selectedTab', function () {
      return this.get('selectedTab') == 'config' ? 'active' : 'inactive';
    }),

    doAssignRole: function doAssignRole(role, profileName) {
      if (this.get('isStarted')) {
        return;
      }
      role.set('isDraggingObject', false);
      role.set('flavor', profileName);
      this.set("openstackDeployment." + role.get('flavorDeploymentAttributeName'), profileName);
    },

    updateRoleCounts: function updateRoleCounts() {
      var _this = this;

      if (!this.get('plan')) {
        return;
      }

      this.get('roles').forEach(function (role) {
        _this.set("openstackDeployment." + role.get('countDeploymentAttributeName'), role.get('count'));
      });
    },

    openEditDialog: function openEditDialog() {
      this.set('openModalEditRole', true);
    },

    closeEditDialog: function closeEditDialog() {
      this.set('openModalEditRole', false);
    },

    openGlobalServiceConfigDialog: function openGlobalServiceConfigDialog() {
      this.set('openModalEditGlobal', true);
    },

    closeGlobalServiceConfigDialog: function closeGlobalServiceConfigDialog() {
      this.set('openModalEditGlobal', false);
    },

    resetEditedParameters: function resetEditedParameters(parameters) {
      parameters.forEach(function (p) {
        return p.set('newValue', p.get('value'));
      });
    },

    updateEditedParameters: function updateEditedParameters(parameters) {
      parameters.forEach(function (p) {
        return p.set('value', p.get('newValue'));
      });
    },

    actions: {
      editRole: function editRole(role) {
        this.set('selectedTab', 'settings');

        this.set('editedRole', role);
        this.set('editedRoleImage', role.get('image'));
        this.set('editedRoleNodeCount', role.get('count'));
        this.set('editedRoleProfile', role.get('flavor'));
        this.set('editedRoleParameters', role.get('parameters'));

        this.resetEditedParameters(this.get('editedRoleParameters'));
        this.openEditDialog();
      },

      saveRole: function saveRole() {
        var role = this.get('editedRole');

        role.set('image', this.get('editedRoleImage'));
        role.set('count', parseInt(this.get('editedRoleNodeCount'), 10));

        this.doAssignRole(role, this.get('editedRoleProfile'));
        this.updateEditedParameters(this.get('editedRoleParameters'));
        this.closeEditDialog();
      },

      assignRole: function assignRole(role, profile) {
        this.doAssignRole(role, profile.get('name'));
      },

      unassignRole: function unassignRole(role) {
        this.doAssignRole(role, 'baremetal');
      },

      doShowSettings: function doShowSettings() {
        this.set('selectedTab', 'settings');
      },

      doShowConfig: function doShowConfig() {
        this.set('selectedTab', 'config');
      },

      editGlobalServiceConfig: function editGlobalServiceConfig() {
        this.resetEditedParameters(this.get('globalPlanParameters'));
        this.openGlobalServiceConfigDialog();
      },

      saveGlobalServiceConfig: function saveGlobalServiceConfig() {
        this.updateEditedParameters(this.get('globalPlanParameters'));
        this.closeGlobalServiceConfigDialog();
      },

      cancelGlobalServiceConfig: function cancelGlobalServiceConfig() {
        this.resetEditedParameters(this.get('globalPlanParameters'));
        this.closeGlobalServiceConfigDialog();
      }
    }
  });

  exports["default"] = AssignNodesController;
});
define("fusor-ember-cli/controllers/openstack/overcloud", ["exports", "ember", "fusor-ember-cli/mixins/deployment-controller-mixin", "fusor-ember-cli/mixins/needs-deployment-mixin", "fusor-ember-cli/utils/validators"], function (exports, _ember, _fusorEmberCliMixinsDeploymentControllerMixin, _fusorEmberCliMixinsNeedsDeploymentMixin, _fusorEmberCliUtilsValidators) {

  var OvercloudController = _ember["default"].Controller.extend(_fusorEmberCliMixinsDeploymentControllerMixin["default"], _fusorEmberCliMixinsNeedsDeploymentMixin["default"], {
    isCloudForms: _ember["default"].computed.alias("deploymentController.isCloudForms"),
    isOpenShift: _ember["default"].computed.alias("deploymentController.isOpenShift"),
    openstackDeployment: _ember["default"].computed.alias('model'),

    //TODO move password confirmations to transient data on the model
    confirmOvercloudPassword: _ember["default"].computed.alias("deploymentController.confirmOvercloudPassword"),

    confirmOvercloudPasswordValidator: _ember["default"].computed('openstackDeployment.overcloud_password', function () {
      return _fusorEmberCliUtilsValidators.EqualityValidator.create({ equals: this.get('openstackDeployment.overcloud_password') });
    }),

    nextStepRouteNameOvercloud: _ember["default"].computed('isCloudForms', function () {
      if (this.get('isOpenShift')) {
        return 'openshift';
      } else if (this.get('isCloudForms')) {
        return 'cloudforms';
      } else {
        return 'subscriptions';
      }
    }),

    validOvercloudNetworks: _ember["default"].computed('openstackDeployment.isValidOvercloud', 'confirmOvercloudPassword', 'confirmOvercloudPasswordValidator', function () {
      return this.get('openstackDeployment.isValidOvercloud') && this.get('confirmOvercloudPasswordValidator').isValid(this.get('confirmOvercloudPassword'));
    }),

    disableNextOvercloud: _ember["default"].computed.not('validOvercloudNetworks')
  });

  exports["default"] = OvercloudController;
});
define('fusor-ember-cli/controllers/openstack/register-nodes', ['exports', 'ember', 'ic-ajax', 'fusor-ember-cli/mixins/needs-deployment-mixin'], function (exports, _ember, _icAjax, _fusorEmberCliMixinsNeedsDeploymentMixin) {

  var RegisterNodesController = _ember['default'].Controller.extend(_fusorEmberCliMixinsNeedsDeploymentMixin['default'], {
    deployment: _ember['default'].computed.alias("deploymentController.model"),
    openstackDeployment: _ember['default'].computed.alias("model"),
    savedInfo: [],
    introspectionTasks: [],

    hasNodes: _ember['default'].computed('openstackDeployment.overcloud_node_count', function () {
      return this.get('openstackDeployment.overcloud_node_count') > 0;
    }),

    nodeErrors: _ember['default'].computed('nodeManagers.[]', 'nodes.[]', 'introspectionTasks.[]', 'foremanTasks.@each.humanized_errors', 'ports.[]', function () {
      var _this = this;

      var nodeManagers = this.get('nodeManagers') || [];
      var foremanTasks = this.get('foremanTasks') || [];
      var nodeErrors = [];
      nodeManagers.forEach(function (manager) {
        manager.get('nodes').forEach(function (node) {
          var nodeError = _this.getNodeError(manager, node);
          if (nodeError) {
            nodeErrors.pushObject(nodeError);
          }
        });
      });

      return nodeErrors;
    }),

    showNodeErrors: _ember['default'].computed('nodeErrors', function () {
      return _ember['default'].isPresent(this.get('nodeErrors'));
    }),

    enableRegisterNodesNext: _ember['default'].computed('openstackDeployment.areNodesRegistered', function () {
      return this.get('openstackDeployment.areNodesRegistered');
    }),

    disableRegisterNodesNext: _ember['default'].computed.not('enableRegisterNodesNext'),

    actions: {
      showNodeRegistrationModal: function showNodeRegistrationModal() {
        this.set('openModalNewNode', true);
      },

      submitRegisterNodes: function submitRegisterNodes(nodeInfo) {
        this.registerNodes(nodeInfo);
      },

      addNodesToManager: function addNodesToManager(nodeManager) {
        this.set('registerNodesMethod', 'manual');

        this.set('addNodeInfo', _ember['default'].Object.create({
          vendor: null,
          driver: nodeManager.get('driver'),
          address: nodeManager.get('address'),
          username: nodeManager.get('username'),
          password: this.getPassword(nodeManager),
          macAddresses: [_ember['default'].Object.create({ value: '' })]
        }));

        this.set('openModalAddNode', true);
      },

      submitAddNodes: function submitAddNodes(nodeInfo) {
        this.registerNodes(nodeInfo);
      },

      deleteNode: function deleteNode(node, nodeLabel) {
        this.set('nodeToDelete', node);
        this.set('nodeToDeleteLabel', nodeLabel);
        this.set('openModalDeleteNode', true);
      },

      confirmDeleteNode: function confirmDeleteNode() {
        this.deleteNodeRequest();
      }
    },

    deleteNodeRequest: function deleteNodeRequest() {
      var _this2 = this;

      var nodeToDelete = this.get('nodeToDelete');
      var url = '/fusor/api/openstack/deployments/' + this.get('deployment.id') + '/nodes/' + nodeToDelete.get('id');

      this.send('resetError');
      nodeToDelete.set('deleteInProgress', true);

      return (0, _icAjax['default'])({
        url: url,
        type: 'DELETE',
        headers: {
          "Accept": "application/json",
          "Content-Type": "application/json",
          "X-CSRF-Token": _ember['default'].$('meta[name="csrf-token"]').attr('content')
        }
      }).then(function (result) {
        _this2.removeNode(_this2.get('nodeToDelete'));
      })['catch'](function (error) {
        nodeToDelete.set('deleteInProgress', false);
        _this2.send('error', error, 'Unable to delete node. DELETE ' + url + '.');
      });
    },

    removeNode: function removeNode(node) {
      var nodes = this.get('nodes');
      var nodeManagers = this.get('nodeManagers');
      nodeManagers.forEach(function (mgr) {
        mgr.removeNode(node);
      });

      this.set('nodeManagers', nodeManagers.filter(function (mgr) {
        return mgr.get('nodes.length') > 0;
      }));
      this.set('nodes', nodes.without(node));
    },

    registerNodes: function registerNodes(nodeInfo) {
      var _this3 = this;

      nodeInfo.get('macAddresses').forEach(function (macAddress) {
        if (macAddress && _ember['default'].isPresent(macAddress.get('value'))) {
          _this3.registerNode(nodeInfo, macAddress.get('value'));
        }
      });
    },

    registerNode: function registerNode(nodeDriverInfo, macAddress) {
      var _this4 = this;

      nodeDriverInfo.set('address', nodeDriverInfo.get('address').trim());
      nodeDriverInfo.set('username', nodeDriverInfo.get('username').trim());

      var nodeParam = this.createNodeHash(nodeDriverInfo, macAddress);
      var url = '/fusor/api/openstack/deployments/' + this.get('deployment.id') + '/nodes';

      this.send('resetError');
      return (0, _icAjax['default'])({
        url: url,
        type: 'POST',
        headers: {
          "Accept": "application/json",
          "Content-Type": "application/json",
          "X-CSRF-Token": _ember['default'].$('meta[name="csrf-token"]').attr('content')
        },
        data: JSON.stringify({ node: nodeParam })
      }).then(function (result) {
        _this4.get('savedInfo').unshiftObject(nodeDriverInfo);
        _this4.send('restartPolling');
      })['catch'](function (error) {
        _this4.send('error', error, 'Unable to register node. POST ' + url + '.');
      });
    },

    createNodeHash: function createNodeHash(nodeInfo, macAddress) {
      var driverInfo = {};
      if (nodeInfo.get('driver') === 'pxe_ssh') {
        driverInfo = {
          ssh_address: nodeInfo.get('address'),
          ssh_username: nodeInfo.get('username'),
          ssh_password: nodeInfo.get('password'),
          ssh_virt_type: 'virsh'
        };
      } else if (nodeInfo.get('driver') === 'pxe_ipmitool') {
        driverInfo = {
          ipmi_address: nodeInfo.get('address'),
          ipmi_username: nodeInfo.get('username'),
          ipmi_password: nodeInfo.get('password')
        };
      }
      driverInfo.deploy_kernel = this.get('bmDeployKernelImage.id');
      driverInfo.deploy_ramdisk = this.get('bmDeployRamdiskImage.id');

      return {
        driver: nodeInfo.get('driver'),
        driver_info: driverInfo,
        properties: {
          capabilities: 'boot_option:local'
        },
        address: macAddress.trim()
      };
    },

    getNodeError: function getNodeError(nodeManager, node) {
      if (node.get('ready')) {
        return null;
      }

      var macAddress = node.getMacAddress(this.get('ports'));
      var nodeLabel = macAddress ? 'MAC Address ' + macAddress : node.get('id');

      var foremanTask = node.getForemanTask(this.get('introspectionTasks'), this.get('foremanTasks'));
      var foremanErrors = foremanTask ? foremanTask.get('humanized_errors') : '';

      var lastError = node.get('last_error') || '';

      if (foremanTask && foremanTask.get('state') === 'running') {
        return null;
      }

      if (_ember['default'].isBlank(lastError) && _ember['default'].isBlank(foremanErrors)) {
        return null;
      }

      foremanErrors = this.formatForemanTaskError(foremanErrors);

      return _ember['default'].Object.create({
        taskUrl: foremanTask ? foremanTask.get('taskUrl') : '',
        message: nodeLabel + ' from ' + nodeManager.get('address') + ' ' + foremanErrors + ' ' + lastError
      });
    },

    formatForemanTaskError: function formatForemanTaskError(errorMessage) {
      var formattedErrorMessage = errorMessage;
      var requestErrorMatches = errorMessage.match(/@body=".*", @headers/i);

      if (_ember['default'].isPresent(requestErrorMatches)) {
        formattedErrorMessage = requestErrorMatches[0].replace('@body="', '').replace('", @headers', '');
      }

      return formattedErrorMessage.substring(0, Math.min(250, errorMessage.length));
    },

    getPassword: function getPassword(manager) {
      var foundInfo = this.getSavedInfo(manager);
      return foundInfo ? foundInfo.get('password') : null;
    },

    getSavedInfo: function getSavedInfo(manager) {
      return this.get('savedInfo').find(function (savedInfo) {
        return savedInfo.get('driver') === manager.get('driver') && savedInfo.get('address') === manager.get('address') && savedInfo.get('username') === manager.get('username');
      });
    }
  });

  exports['default'] = RegisterNodesController;
});
define('fusor-ember-cli/controllers/openstack/undercloud-deploy', ['exports', 'ember', 'fusor-ember-cli/mixins/needs-deployment-mixin'], function (exports, _ember, _fusorEmberCliMixinsNeedsDeploymentMixin) {

  var UndercloudDeployController = _ember['default'].Controller.extend(_fusorEmberCliMixinsNeedsDeploymentMixin['default'], {

    deployment: _ember['default'].computed.alias('deploymentController.model'),
    deploymentId: _ember['default'].computed.alias('deployment.id'),
    openstackDeployment: _ember['default'].computed.alias('model'),

    isRhev: _ember['default'].computed.alias('deploymentController.isRhev'),
    fullnameOpenStack: _ember['default'].computed.alias('deploymentController.fullnameOpenStack'),

    undercloudIPHelp: _ember['default'].computed('fullnameOpenStack', function () {
      return 'The IP address that the already-installed ' + this.get('fullnameOpenStack') + ' undercloud is running on.';
    }),

    undercloudIpValidator: _ember['default'].computed.alias('openstackDeployment.validations.undercloud_ip_address'),

    stackDeleteFailed: _ember['default'].computed('stack.stack_status', function () {
      return this.get('stack.stack_status') === 'DELETE_FAILED';
    }),

    isConnected: _ember['default'].computed('isStarted', 'openstackDeployment.isUndercloudConnected', function () {
      return !this.get('isStarted') && this.get('openstackDeployment.isUndercloudConnected');
    }),

    deployDisabled: _ember['default'].computed('isStarted', 'openstackDeployment.undercloud_ip_address', 'openstackDeployment.undercloud_ssh_username', 'openstackDeployment.undercloud_ssh_password', 'openstackDeployment.isUndercloudConnected', function () {
      return this.get('isStarted') || this.get('openstackDeployment.isUndercloudConnected') || !this.get('openstackDeployment').validateField('undercloud_ip_address') || !this.get('openstackDeployment').validateField('undercloud_ssh_username') || !this.get('openstackDeployment').validateField('undercloud_ssh_password');
    }),

    disableDeployUndercloudNext: _ember['default'].computed.not('openstackDeployment.isUndercloudReady'),

    backRouteNameUndercloud: _ember['default'].computed('isRhev', function () {
      if (this.get('isRhev')) {
        return 'storage';
      } else {
        return 'satellite.access-insights';
      }
    }),

    actions: {
      resetCredentials: function resetCredentials() {
        this.set('undercloudIP', null);
        this.set('sshUser', null);
        this.set('sshPassword', null);
        this.set('openstackDeployment.undercloud_admin_password', null);
        this.set('openstackDeployment.undercloud_ip_address', null);
        this.set('openstackDeployment.undercloud_ssh_username', null);
        this.set('openstackDeployment.undercloud_ssh_password', null);
        this.send('saveOpenstackDeployment', null);
      }
    }
  });

  exports['default'] = UndercloudDeployController;
});
define('fusor-ember-cli/controllers/openstack', ['exports', 'ember', 'fusor-ember-cli/mixins/needs-deployment-mixin'], function (exports, _ember, _fusorEmberCliMixinsNeedsDeploymentMixin) {
  exports['default'] = _ember['default'].Controller.extend(_fusorEmberCliMixinsNeedsDeploymentMixin['default'], {

    //TODO move password confirmations to transient data on the model
    confirmOvercloudPassword: _ember['default'].computed.alias("deploymentController.confirmOvercloudPassword"),
    openstackDeployment: _ember['default'].computed.alias('deploymentController.model.openstack_deployment'),

    registerNodesController: _ember['default'].inject.controller('openstack/register-nodes'),
    assignNodesController: _ember['default'].inject.controller('openstack/assign-nodes'),
    overcloudController: _ember['default'].inject.controller('openstack/overcloud'),

    stepNumberOpenstack: _ember['default'].computed.alias('deploymentController.stepNumberOpenstack'),
    disableRegisterNodesNext: _ember['default'].computed.alias('registerNodesController.disableRegisterNodesNext'),
    disableAssignNodesNext: _ember['default'].computed.alias('assignNodesController.disableAssignNodesNext'),
    disableNextOvercloud: _ember['default'].computed.alias('overcloudController.disableNextOvercloud'),

    disableTabRegisterNodes: _ember['default'].computed.not('openstackDeployment.isUndercloudReady'),

    disableTabAssignNodes: _ember['default'].computed('openstackDeployment.isUndercloudReady', 'openstackDeployment.areNodesRegistered', function () {
      return !this.get('openstackDeployment.isUndercloudReady') || !this.get('openstackDeployment.areNodesRegistered');
    }),

    disableTabOvercloud: _ember['default'].computed('openstackDeployment.isUndercloudReady', 'openstackDeployment.areNodesRegistered', 'openstackDeployment.hasValidNodeAssignments', function () {
      return !this.get('openstackDeployment.isUndercloudReady') || !this.get('openstackDeployment.areNodesRegistered') || !this.get('openstackDeployment.hasValidNodeAssignments');
    }),

    validOpenStack: _ember['default'].computed('confirmOvercloudPassword', 'openstackDeployment.overcloud_password', 'openstackDeployment.areAllAttributesValid', function () {
      //TODO move password confirmations to transient data on the model and validate them there
      return this.get('openstackDeployment.areAllAttributesValid') && this.get('openstackDeployment.overcloud_password') === this.get('confirmOvercloudPassword');
    })
  });
});
define("fusor-ember-cli/controllers/review/installation", ["exports", "ember", "fusor-ember-cli/mixins/needs-deployment-mixin", "fusor-ember-cli/mixins/openshift-mixin"], function (exports, _ember, _fusorEmberCliMixinsNeedsDeploymentMixin, _fusorEmberCliMixinsOpenshiftMixin) {
  exports["default"] = _ember["default"].Controller.extend(_fusorEmberCliMixinsNeedsDeploymentMixin["default"], _fusorEmberCliMixinsOpenshiftMixin["default"], {

    rhevController: _ember["default"].inject.controller('rhev'),
    rhevSetupController: _ember["default"].inject.controller('rhev-setup'),
    rhevOptionsController: _ember["default"].inject.controller('rhev-options'),
    selectSubscriptionsController: _ember["default"].inject.controller('subscriptions/select-subscriptions'),
    overcloudController: _ember["default"].inject.controller('openstack/overcloud'),

    isSelfHost: _ember["default"].computed.alias("rhevController.isSelfHost"),
    isDisconnected: _ember["default"].computed.alias("deploymentController.isDisconnected"),
    isNotDisconnected: _ember["default"].computed.not("isDisconnected"),
    cdnUrl: _ember["default"].computed.alias("model.cdn_url"),

    manifestFile: _ember["default"].computed.alias('deploymentController.model.manifest_file'),
    hasManifestFile: _ember["default"].computed.notEmpty('manifestFile'),
    hasNoManifestFile: _ember["default"].computed.not('hasManifestFile'),

    buttonDeployTitle: _ember["default"].computed('isStarted', function () {
      if (this.get('isStarted')) {
        return 'Next';
      } else {
        return 'Deploy';
      }
    }),

    isMissingSubscriptions: _ember["default"].computed('isNotDisconnected', 'hasSubscriptionsToAttach', 'hasSessionPortal', 'hasSubscriptionPools', function () {
      return this.get('isNotDisconnected') && this.get('hasSubscriptionsToAttach') && (!this.get('hasSessionPortal') || !this.get('hasSubscriptionPools'));
    }),

    buttonDeployDisabled: _ember["default"].computed('deploymentController.isDisabledReview', 'isMissingSubscriptions', 'isDisconnected', 'hasNoManifestFile', 'showErrorMessage', 'showValidationErrors', function () {
      var isReviewTabDisabled = this.get('deploymentController.isDisabledReview');
      var isMissingSubscriptions = this.get('isMissingSubscriptions');
      var disconnectedWithoutManifest = this.get('isDisconnected') && this.get('hasNoManifestFile');
      var hasErrors = this.get('showErrorMessage') || this.get('showValidationErrors') > 0;

      return isReviewTabDisabled || isMissingSubscriptions || disconnectedWithoutManifest || hasErrors;
    }),

    validationWarnings: [],
    showValidationWarnings: _ember["default"].computed('validationWarnings', function () {
      return this.get('validationWarnings.length') > 0;
    }),

    validationErrors: [],
    showValidationErrors: _ember["default"].computed('validationErrors', function () {
      return this.get('validationErrors.length') > 0;
    }),

    foremanTasksURL: null,
    skipContent: _ember["default"].computed.alias("deploymentController.skipContent"),

    showSpinner: false,
    spinnerTextMessage: null,

    isRhevOpen: true,
    isOpenStackOpen: true,
    isCloudFormsOpen: true,
    isSubscriptionsOpen: true,
    isOpenshiftOpen: true,

    engineHostAddressDefault: 'ovirt-hypervisor.rhci.redhat.com',
    hostAddress: _ember["default"].computed.alias("rhevOptionsController.hostAddress"),
    engineHostName: _ember["default"].computed.alias("rhevOptionsController.engineHostName"),

    nameDeployment: _ember["default"].computed.alias("model.name"),
    selectedOrganization: _ember["default"].computed.alias("deploymentController.selectedOrganzation"),
    selectedEnvironment: _ember["default"].computed.alias("deploymentController.selectedEnvironment"),
    rhevSetup: _ember["default"].computed.alias("deploymentController.rhevSetup"),

    isRhev: _ember["default"].computed.alias("deploymentController.isRhev"),
    isOpenStack: _ember["default"].computed.alias("deploymentController.isOpenStack"),
    openStack: _ember["default"].computed.alias("deploymentController.openStack"),
    isOpenShift: _ember["default"].computed.alias("deploymentController.isOpenShift"),
    isCloudForms: _ember["default"].computed.alias("deploymentController.isCloudForms"),
    isSubscriptions: _ember["default"].computed.alias("deploymentController.isSubscriptions"),

    isSelfHosted: _ember["default"].computed.alias("model.rhev_is_self_hosted"),
    selectedHypervisorHosts: _ember["default"].computed.alias("model.discovered_hosts"),

    rhev_engine_host: _ember["default"].computed.alias("model.discovered_host"),
    selectedRhevEngine: _ember["default"].computed.alias("model.discovered_host"),
    isStarted: _ember["default"].computed.alias("model.isStarted"),
    subscriptions: _ember["default"].computed.alias("model.subscriptions"),

    undercloudUrl: _ember["default"].computed('model.openstack_deployment.undercloud_ip_address', function () {
      var ipAddr = this.get('model.openstack_deployment.undercloud_ip_address');
      return ipAddr ? "http://" + ipAddr : ipAddr;
    }),

    profiles: _ember["default"].computed('model.openstack_deployment.overcloud_compute_flavor', 'model.openstack_deployment.overcloud_compute_count', 'model.openstack_deployment.overcloud_controller_flavor', 'model.openstack_deployment.overcloud_controller_count', 'model.openstack_deployment.overcloud_ceph_storage_flavor', 'model.openstack_deployment.overcloud_ceph_storage_count', 'model.openstack_deployment.overcloud_block_storage_flavor', 'model.openstack_deployment.overcloud_block_storage_count', 'model.openstack_deployment.overcloud_object_storage_flavor', 'model.openstack_deployment.overcloud_object_storage_count', function () {
      var profiles = [];

      this.addFlavor(profiles, this.get('model.openstack_deployment.overcloud_controller_flavor'), this.get('model.openstack_deployment.overcloud_controller_count'), 'Controller');
      this.addFlavor(profiles, this.get('model.openstack_deployment.overcloud_compute_flavor'), this.get('model.openstack_deployment.overcloud_compute_count'), 'Compute');
      this.addFlavor(profiles, this.get('model.openstack_deployment.overcloud_ceph_storage_flavor'), this.get('model.openstack_deployment.overcloud_ceph_storage_count'), 'Ceph Storage');
      this.addFlavor(profiles, this.get('model.openstack_deployment.overcloud_block_storage_flavor'), this.get('model.openstack_deployment.overcloud_block_storage_count'), 'Block Storage');
      this.addFlavor(profiles, this.get('model.openstack_deployment.overcloud_object_storage_flavor'), this.get('model.openstack_deployment.overcloud_object_storage_count'), 'Object Storage');

      return profiles;
    }),

    addFlavor: function addFlavor(profiles, flavor, count, name) {
      if (flavor === 'baremetal' || !count) {
        return;
      }

      var profile = profiles.findBy('flavor', flavor);

      if (!profile) {
        profile = _ember["default"].Object.create({ flavor: flavor, nodes: [] });
        profiles.addObject(profile);
      }

      profile.get('nodes').addObject(_ember["default"].Object.create({ name: name, count: count }));
    },

    engineNamePlusDomain: _ember["default"].computed('selectedRhevEngine.is_discovered', 'selectedRhevEngine.name', 'engineDomain', function () {
      if (this.get("selectedRhevEngine.is_discovered")) {
        return this.get("selectedRhevEngine.name") + '.' + this.get('engineDomain');
      } else {
        // name is fqdn for managed host
        return this.get("selectedRhevEngine.name");
      }
    }),

    fullOpenshiftSubdomain: _ember["default"].computed('model.openshift_subdomain_name', 'deploymentController.defaultDomainName', function () {
      var subdomainName = this.get('model.openshift_subdomain_name');
      var defaultDomainName = this.get('deploymentController.defaultDomainName');
      return subdomainName + "." + defaultDomainName;
    }),

    nameRHCI: _ember["default"].computed.alias("deploymentController.nameRHCI"),
    nameRhev: _ember["default"].computed.alias("deploymentController.nameRhev"),
    nameOpenStack: _ember["default"].computed.alias("deploymentController.nameOpenStack"),
    nameCloudForms: _ember["default"].computed.alias("deploymentController.nameCloudForms"),
    nameSatellite: _ember["default"].computed.alias("deploymentController.nameSatellite"),

    backRouteNameonReviewInstallation: _ember["default"].computed('isSubscriptions', 'isRhev', 'isOpenStack', 'isCloudForms', 'model.upstream_consumer_uuid', function () {
      if (this.get('isSubscriptions')) {
        if (this.get('model.is_disconnected')) {
          return 'subscriptions.review-subscriptions';
        } else if (_ember["default"].isPresent(this.get('model.upstream_consumer_uuid'))) {
          return 'subscriptions.review-subscriptions';
        } else {
          return 'subscriptions.credentials';
        }
      } else {
        if (this.get('isCloudForms')) {
          return 'cloudforms.cfme-configuration';
        } else if (this.get('isOpenShift')) {
          return 'openshift.openshift-configuration';
        } else if (this.get('isOpenStack')) {
          return 'openstack.overcloud';
        } else if (this.get('isRhev')) {
          return 'storage';
        }
      }
    }),

    lifecycleEnvironmentName: _ember["default"].computed('model.lifecycle_environment.name', function () {
      var name = this.get('model.lifecycle_environment.name');
      if (name) {
        return name;
      } else {
        return "Default Organization View";
      }
    }),

    ramNeededGB: _ember["default"].computed('ramNeeded', function () {
      return this.get('ramNeeded') + ' GB';
    }),

    diskNeededGB: _ember["default"].computed('diskNeeded', function () {
      return this.get('diskNeeded') + ' GB';
    }),

    storageSizeGB: _ember["default"].computed('storageSize', function () {
      return this.get('storageSize') + ' GB';
    }),

    closeContinueDeployModal: function closeContinueDeployModal() {
      this.set('openModal', false);
    },

    actions: {
      showContinueDeployModal: function showContinueDeployModal() {
        this.set('openModal', true);
      },

      onDeployButton: function onDeployButton() {
        if (this.get('showValidationWarnings')) {
          this.send('showContinueDeployModal');
        } else if (this.get('hasSubscriptionsToAttach')) {
          this.send('attachSubscriptions');
        } else {
          this.send('installDeployment');
        }
      }
    }
  });
});
define('fusor-ember-cli/controllers/review/progress/log', ['exports', 'ember', 'fusor-ember-cli/mixins/needs-deployment-mixin'], function (exports, _ember, _fusorEmberCliMixinsNeedsDeploymentMixin) {
  exports['default'] = _ember['default'].Controller.extend(_fusorEmberCliMixinsNeedsDeploymentMixin['default'], {

    searchLogInputValue: null,
    scrollToEndChecked: true,
    errorChecked: true,
    warnChecked: true,
    infoChecked: true,
    debugChecked: false,
    logTypes: [{ label: 'QCI Deployment (deployment.log)', value: 'fusor_log' }, { label: 'Satellite (production.log)', value: 'foreman_log' },
    //{label: 'Satellite Proxy (proxy.log)', value: 'foreman_proxy_log'},
    { label: 'Subscriptions (candlepin.log)', value: 'candlepin_log' }, { label: 'Ansible (ansible.log)', value: 'ansible_log' }, { label: 'System Messages (messages)', value: 'messages_log' }],
    logType: 'fusor_log',

    showLogLoading: _ember['default'].computed('errorMessage', 'isLoading', function () {
      return !this.get('errorMessage') && this.get('isLoading');
    }),

    showLogUpdating: _ember['default'].computed('errorMessage', 'isLoading', 'deploymentInProgress', function () {
      return !this.get('errorMessage') && !this.get('isLoading') && this.get('deploymentInProgress');
    }),

    showLogEmpty: _ember['default'].computed('errorMessage', 'isLoading', 'logType', 'model.fusor_log.entries.[]', 'model.foreman_log.entries.[]', 'model.foreman_proxy_log.entries.[]', 'model.candlepin_log.entries.[]', 'model.messages_log.entries.[]', function () {
      var logType, entries;
      logType = this.get('logType') || 'fusor_log';
      entries = this.get('model.' + logType + '.entries');
      return !this.get('errorMessage') && !this.get('isLoading') && (!entries || !entries.length);
    }),

    logOptionsChanged: _ember['default'].observer('errorChecked', 'warnChecked', 'infoChecked', 'debugChecked', function () {
      var _this = this;

      _ember['default'].run.once(this, function () {
        return _this.send('updateDisplayedLog');
      });
    }),

    isSearchActive: _ember['default'].computed('searchLogString', function () {
      return !!this.get('searchLogString');
    }),

    actions: {
      logTypeChanged: function logTypeChanged() {
        var _this2 = this;

        this.set('displayedLogHtml', '');
        this.set('newEntries', []);
        // run later to allow the dropdown to close and log to clear before doing the real work
        _ember['default'].run.scheduleOnce('afterRender', this, function () {
          _this2.send('changeLogType');
        });
      },

      scrollToEnd: function scrollToEnd() {
        if (this.get('deploymentInProgress') && this.get('scrollToEndChecked')) {
          var logOutput = _ember['default'].$('.log-output')[0];
          if (logOutput) {
            logOutput.scrollTop = logOutput.scrollHeight;
          }
        }
      },

      search: function search() {
        this.set('scrollToEndChecked', false);
        this.set('searchLogString', this.get('searchLogInputValue'));
        return true; //bubble anc execute route action
      },

      clearSearch: function clearSearch() {
        this.set('searchLogInputValue', null);
        this.set('searchLogString', null);
        return true; //bubble anc execute route action
      },

      navPreviousSearchResult: function navPreviousSearchResult() {
        this.navSearchResult(-1);
      },

      navNextSearchResult: function navNextSearchResult() {
        this.navSearchResult(1);
      }
    },

    navSearchResult: function navSearchResult(idxChange) {
      var searchResults = this.get('searchResults'),
          searchResultIdx = this.get('searchResultIdx'),
          isSearchActive = this.get('isSearchActive');

      if (!isSearchActive || searchResults.length === 0) {
        return;
      }

      searchResultIdx += idxChange;
      if (searchResultIdx > searchResults.length) {
        searchResultIdx = 1;
      }

      if (searchResultIdx < 1) {
        searchResultIdx = searchResults.length;
      }

      this.set('searchResultIdx', searchResultIdx);
      this.markAndScrollToSearchResult(idxChange < 0);
    },

    markAndScrollToSearchResult: function markAndScrollToSearchResult(showAtTop) {
      var searchResults = this.get('searchResults'),
          searchResultIdx = this.get('searchResultIdx'),
          currentlySelected,
          searchResult,
          searchTag;

      searchTag = searchResults[searchResultIdx - 1];
      currentlySelected = _ember['default'].$('.log-entry-search-selected');
      searchResult = _ember['default'].$('.' + searchTag.cssClass);

      this.set('scrollToEndChecked', false);
      currentlySelected.removeClass('log-entry-search-selected');

      if (searchResult && searchResult[0]) {
        searchResult.addClass('log-entry-search-selected');
        searchResult[0].scrollIntoView(showAtTop);
      }
    }
  });
});
define('fusor-ember-cli/controllers/review/progress/overview', ['exports', 'ember', 'ic-ajax', 'fusor-ember-cli/mixins/progress-bar-mixin', 'fusor-ember-cli/mixins/needs-deployment-mixin'], function (exports, _ember, _icAjax, _fusorEmberCliMixinsProgressBarMixin, _fusorEmberCliMixinsNeedsDeploymentMixin) {
  exports['default'] = _ember['default'].Controller.extend(_fusorEmberCliMixinsProgressBarMixin['default'], _fusorEmberCliMixinsNeedsDeploymentMixin['default'], {

    isRhev: _ember['default'].computed.alias("deploymentController.isRhev"),
    isOpenStack: _ember['default'].computed.alias("deploymentController.isOpenStack"),
    isCloudForms: _ember['default'].computed.alias("deploymentController.isCloudForms"),
    isOpenShift: _ember['default'].computed.alias("deploymentController.isOpenShift"),

    nameRHCI: _ember['default'].computed.alias("deploymentController.nameRHCI"),
    nameRhev: _ember['default'].computed.alias("deploymentController.nameRhev"),
    nameOpenStack: _ember['default'].computed.alias("deploymentController.nameOpenStack"),
    nameCloudForms: _ember['default'].computed.alias("deploymentController.nameCloudForms"),
    nameSatellite: _ember['default'].computed.alias("deploymentController.nameSatellite"),
    nameOpenShift: _ember['default'].computed.alias("deploymentController.nameOpenShift"),

    progressDeployment: _ember['default'].computed.alias("deployTask.progress"),
    resultDeployment: _ember['default'].computed.alias("deployTask.result"),
    stateDeployment: _ember['default'].computed.alias("deployTask.state"),

    deployTaskIsStopped: _ember['default'].computed('stateDeployment', function () {
      return this.get('stateDeployment') === 'stopped' || this.get('stateDeployment') === 'paused';
    }),

    deployTaskIsFinished: _ember['default'].computed('progressDeployment', 'resultDeployment', function () {
      return this.get('progressDeployment') === '1' && this.get('resultDeployment') === 'success';
    }),

    //Deploy task is not 100% but All subtasks are 100%
    showDeployTaskProgressBar: _ember['default'].computed('isRhev', 'isOpenStack', 'isCloudForms', 'isOpenShift', 'manageContentTask.progress', 'rhevTask.progress', 'openstackTask.progress', 'cfmeTask.progress', 'openshiftTask.progress', 'progressDeployment', function () {
      if (this.get('progressDeployment') === '1' || this.get('manageContentTask.progress') !== '1') {
        return false;
      }

      if (this.get('isRhev') && this.get('rhevTask.progress') !== '1') {
        return false;
      }

      if (this.get('isOpenStack') && this.get('openstackTask.progress') !== '1') {
        return false;
      }

      if (this.get('isCloudForms') && this.get('cfmeTask.progress') !== '1') {
        return false;
      }

      if (this.get('isOpenShift') && this.get('openshiftTask.progress') !== '1') {
        return false;
      }

      return true;
    }),

    loadingRedeployment: false,

    actions: {
      redeploy: function redeploy() {
        var _this = this;

        this.set('loadingRedeployment', true);

        var depl = this.get('deploymentController.model');
        var token = _ember['default'].$('meta[name="csrf-token"]').attr('content');

        (0, _icAjax['default'])({
          url: '/fusor/api/v21/deployments/' + depl.get('id') + '/redeploy',
          type: "PUT",
          headers: {
            "Accept": "application/json",
            "Content-Type": "application/json",
            "X-CSRF-Token": token,
            "Authorization": "Basic " + this.get('session.basicAuthToken')
          }
        }).then(function (response) {
          var newTaskUUID = response.id;
          depl.set('foreman_task_uuid', newTaskUUID);
          depl.set('has_content_error', false);
          depl.save();
          _this.send('refreshModelOnOverviewRoute');
        })['catch'](function (err) {
          console.log('ERROR occurred attempting a redeploy', err);
        })['finally'](function () {
          return _this.set('loadingRedeployment', false);
        });
      },
      abandonAndDelete: function abandonAndDelete() {
        this.set('openModal', true);
      },
      abandon: function abandon() {
        this.transitionToRoute('deployments');
      },
      executeAbandonment: function executeAbandonment() {
        var depl = this.get('deploymentController.model');
        depl.destroyRecord();
        this.transitionToRoute('deployments');
      }
    }
  });
});
define('fusor-ember-cli/controllers/review/progress', ['exports', 'ember', 'fusor-ember-cli/mixins/needs-deployment-mixin'], function (exports, _ember, _fusorEmberCliMixinsNeedsDeploymentMixin) {
  exports['default'] = _ember['default'].Controller.extend(_fusorEmberCliMixinsNeedsDeploymentMixin['default'], {

    overviewController: _ember['default'].inject.controller('review/progress/overview'),

    isRhevOpen: true,
    isOpenStackOpen: false,
    isCloudFormsOpen: false,
    isSubscriptionsOpen: false,
    foremanTasksURL: null,

    showErrorMessage: false,
    errorMsg: null, // this should be overwritten by API response

    deployTaskIsFinished: _ember['default'].computed.alias("overviewController.deployTaskIsFinished"),
    deployTaskIsStopped: _ember['default'].computed.alias("overviewController.deployTaskIsStopped"),

    deployButtonTitle: _ember['default'].computed('deployTaskIsStopped', function () {
      if (this.get('deployTaskIsStopped')) {
        return 'Deployment Stopped';
      } else {
        return 'Deploying ...';
      }
    })
  });
});
define('fusor-ember-cli/controllers/review/summary', ['exports', 'ember', 'fusor-ember-cli/mixins/needs-deployment-mixin'], function (exports, _ember, _fusorEmberCliMixinsNeedsDeploymentMixin) {
  exports['default'] = _ember['default'].Controller.extend(_fusorEmberCliMixinsNeedsDeploymentMixin['default'], {

    isRhev: _ember['default'].computed.alias('deploymentController.isRhev'),
    isOpenStack: _ember['default'].computed.alias('deploymentController.isOpenStack'),
    isOpenShift: _ember['default'].computed.alias('deploymentController.isOpenShift'),
    isCloudForms: _ember['default'].computed.alias('deploymentController.isCloudForms'),

    isRhevOpen: true,
    isOpenStackOpen: true,
    isCloudFormsOpen: true,
    isOpenShiftOpen: true,

    undercloudUsername: 'admin',
    undercloudPassword: _ember['default'].computed.alias("model.openstack_deployment.undercloud_admin_password"),

    overcloudUsername: 'admin',
    overcloudPassword: _ember['default'].computed.alias("model.openstack_deployment.overcloud_password"),

    overcloudUrlIP: _ember['default'].computed('model.openstack_deployment.overcloud_hostname', function () {
      return 'http://' + this.get('model.openstack_deployment.overcloud_address') + '/dashboard/admin';
    }),

    selectedRhevEngine: _ember['default'].computed.alias("deploymentController.model.discovered_host"),
    deploymentLabel: _ember['default'].computed.alias('deploymentController.model.label'),

    exampleAppUrl: _ember['default'].computed('deploymentController.defaultDomainName', function () {
      var domainName = this.get('deploymentController.defaultDomainName');
      var subdomainName = this.get('model.openshift_subdomain_name');

      return 'http://hello-openshift.' + subdomainName + '.' + domainName;
    }),

    rhevEngineUrl: _ember['default'].computed('selectedRhevEngine', function () {
      return 'https://' + this.get('selectedRhevEngine.name') + '/ovirt-engine/';
    }),
    rhevEngineUrlIP: _ember['default'].computed('selectedRhevEngine', function () {
      return 'https://' + this.get('selectedRhevEngine.ip') + '/ovirt-engine/';
    }),

    cfmeUrl: _ember['default'].computed('model.cfme_hostname', function () {
      return 'https://' + this.get('model.cfme_hostname');
    }),
    cfmeUrlIP: _ember['default'].computed('model.cfme_address', function () {
      return 'https://' + this.get('model.cfme_address');
    }),

    cfmeUrlSelfService: _ember['default'].computed('cfmeUrl', function () {
      return this.get('cfmeUrl') + '/self_service';
    }),
    cfmeUrlSelfServiceIP: _ember['default'].computed('cfmeUrlIP', function () {
      return this.get('cfmeUrlIP') + '/self_service';
    })

  });
});
define('fusor-ember-cli/controllers/review', ['exports', 'ember', 'fusor-ember-cli/mixins/needs-deployment-mixin'], function (exports, _ember, _fusorEmberCliMixinsNeedsDeploymentMixin) {
  exports['default'] = _ember['default'].Controller.extend(_fusorEmberCliMixinsNeedsDeploymentMixin['default'], {

    subscriptionsController: _ember['default'].inject.controller('subscriptions'),
    overviewController: _ember['default'].inject.controller('review/progress/overview'),

    isUpstream: _ember['default'].computed.alias("applicationController.isUpstream"),
    disableNext: _ember['default'].computed.alias("subscriptionsController.disableNext"),

    nameSelectSubscriptions: _ember['default'].computed.alias("deploymentController.nameSelectSubscriptions"),

    stepNumberReview: _ember['default'].computed.alias("deploymentController.stepNumberReview"),

    deployTaskIsFinished: _ember['default'].computed.alias("overviewController.deployTaskIsFinished"),

    disableTabInstallation: _ember['default'].computed('disableNext', 'isUpstream', function () {
      return this.get('disableNext') && !this.get('isUpstream');
    }),

    disableTabProgress: _ember['default'].computed.not("isStarted"),

    disableTabSummary: _ember['default'].computed.not("deployTaskIsFinished")

  });
});
define('fusor-ember-cli/controllers/rhev-options', ['exports', 'ember', 'fusor-ember-cli/mixins/needs-deployment-mixin', 'fusor-ember-cli/utils/validators'], function (exports, _ember, _fusorEmberCliMixinsNeedsDeploymentMixin, _fusorEmberCliUtilsValidators) {
  exports['default'] = _ember['default'].Controller.extend(_fusorEmberCliMixinsNeedsDeploymentMixin['default'], {

    rhevRootPassword: _ember['default'].computed.alias("deploymentController.model.rhev_root_password"),
    rhevEngineAdminPassword: _ember['default'].computed.alias("deploymentController.model.rhev_engine_admin_password"),
    rhevDataCenterName: _ember['default'].computed.alias("deploymentController.model.rhev_data_center_name"),
    rhevClusterName: _ember['default'].computed.alias("deploymentController.model.rhev_cluster_name"),
    rhevCpuType: _ember['default'].computed.alias("deploymentController.model.rhev_cpu_type"),
    rhevIsSelfHosted: _ember['default'].computed.alias("deploymentController.model.rhev_is_self_hosted"),
    confirmRhevRootPassword: _ember['default'].computed.alias("deploymentController.confirmRhevRootPassword"),
    confirmRhevEngineAdminPassword: _ember['default'].computed.alias("deploymentController.confirmRhevEngineAdminPassword"),

    cpuTypes: ['Intel Conroe Family', 'Intel Penryn Family', 'Intel Nehalem Family', 'Intel Westmere Family', 'Intel SandyBridge Family', 'Intel Haswell', 'AMD Opteron G1', 'AMD Opteron G2', 'AMD Opteron G3', 'AMD Opteron G4', 'AMD Opteron G5', 'IBM POWER 8'],

    passwordValidator: _fusorEmberCliUtilsValidators.RequiredPasswordValidator.create({}),

    confirmRhevRootPasswordValidator: _ember['default'].computed('rhevRootPassword', function () {
      return _fusorEmberCliUtilsValidators.EqualityValidator.create({ equals: this.get('rhevRootPassword') });
    }),

    confirmRhevEngineAdminPasswordValidator: _ember['default'].computed('rhevEngineAdminPassword', function () {
      return _fusorEmberCliUtilsValidators.EqualityValidator.create({ equals: this.get('rhevEngineAdminPassword') });
    }),

    optionsBackRouteName: 'hypervisor.discovered-host',

    applicationModes: ['Both', 'Virt', 'Gluster'],
    engineLocation: ['Local', 'Remote'],
    dbSetup: ['Automatic', 'Manual'],
    yesNo: ['Yes', 'No'],
    applicationModes2: [{
      id: 1,
      name: 'Both'
    }, {
      id: 2,
      name: 'Virt'
    }, {
      id: 3,
      name: 'Gluster'
    }],

    createComputerNameValidator: function createComputerNameValidator(fieldName, otherFieldName, otherFieldValue) {
      if (_ember['default'].isBlank(otherFieldValue) || otherFieldValue === 'Default') {
        return _fusorEmberCliUtilsValidators.AlphaNumericDashUnderscoreValidator.create({ trim: false });
      }

      return _fusorEmberCliUtilsValidators.AllValidator.create({
        validators: [_fusorEmberCliUtilsValidators.Validator.create({
          message: 'Note: You must change the ' + fieldName + ' after changing the ' + otherFieldName,
          isValid: function isValid(value) {
            return _ember['default'].isPresent(value) && value !== 'Default';
          }
        }), _fusorEmberCliUtilsValidators.AlphaNumericDashUnderscoreValidator.create({ trim: false })]
      });
    },

    dataCenterNameValidator: _ember['default'].computed('rhevClusterName', function () {
      return this.createComputerNameValidator('data center name', 'cluster name', this.get('rhevClusterName'));
    }),

    clusterNameValidator: _ember['default'].computed('rhevDataCenterName', function () {
      return this.createComputerNameValidator('cluster name', 'data center name', this.get('rhevDataCenterName'));
    }),

    validRhevOptions: _ember['default'].computed('rhevRootPassword', 'confirmRhevRootPassword', 'confirmRhevRootPasswordValidator', 'rhevEngineAdminPassword', 'confirmRhevEngineAdminPassword', 'confirmRhevEngineAdminPasswordValidator', 'rhevDataCenterName', 'dataCenterNameValidator', 'rhevClusterName', 'clusterNameValidator', function () {
      return this.get('passwordValidator').isValid(this.get('rhevRootPassword')) && this.get('passwordValidator').isValid(this.get('rhevEngineAdminPassword')) && this.get('confirmRhevRootPasswordValidator').isValid(this.get('confirmRhevRootPassword')) && this.get('confirmRhevEngineAdminPasswordValidator').isValid(this.get('confirmRhevEngineAdminPassword')) && this.get('dataCenterNameValidator').isValid(this.get('rhevDataCenterName')) && this.get('clusterNameValidator').isValid(this.get('rhevClusterName'));
    }),

    disableNextRhevOptions: _ember['default'].computed.not('validRhevOptions'),

    actions: {
      setSelectValue: function setSelectValue(fieldName, selectionValue) {
        this.set(fieldName, selectionValue);
      }
    }
  });
});
define('fusor-ember-cli/controllers/rhev-setup', ['exports', 'ember', 'fusor-ember-cli/mixins/needs-deployment-mixin', 'fusor-ember-cli/mixins/needs-discovered-hosts-ajax'], function (exports, _ember, _fusorEmberCliMixinsNeedsDeploymentMixin, _fusorEmberCliMixinsNeedsDiscoveredHostsAjax) {
  exports['default'] = _ember['default'].Controller.extend(_fusorEmberCliMixinsNeedsDeploymentMixin['default'], _fusorEmberCliMixinsNeedsDiscoveredHostsAjax['default'], {

    rhevIsSelfHosted: _ember['default'].computed.alias("deploymentController.model.rhev_is_self_hosted"),

    setupNextRouteName: _ember['default'].computed('rhevIsSelfHosted', function () {
      return this.get('rhevIsSelfHosted') ? 'hypervisor.discovered-host' : 'engine.discovered-host';
    }),

    rhevSetupTitle: _ember['default'].computed('rhevIsSelfHosted', function () {
      return this.get('rhevIsSelfHosted') ? "Self Hosted" : "Host + Engine";
    }),

    actions: {
      rhevSetupChanged: function rhevSetupChanged(newSelection) {
        this.get('deploymentController').set('model.rhev_is_self_hosted', newSelection === 'selfhost');

        // Changing from self-hosted to hv+engine setup needs to reset
        // host associations to a clean slate.
        this.resetEngineAndHypervisors()['catch'](function (err) {
          console.log('Error occurred while resetting engine and hypervisors');
          console.log(err);
        });
      }
    },

    resetEngineAndHypervisors: function resetEngineAndHypervisors() {
      var _this = this;

      var deployment = this.get('deploymentController.model');

      deployment.set('discovered_host', null); // Engine reset
      return deployment.save().then(function () {
        return _this.postDiscoveredHostIds(deployment, []);
      }).then(function () {
        return _this.send('loadDefaultData', deployment, { reset: true });
      });
    }
  });
});
define('fusor-ember-cli/controllers/rhev', ['exports', 'ember', 'fusor-ember-cli/mixins/needs-deployment-mixin'], function (exports, _ember, _fusorEmberCliMixinsNeedsDeploymentMixin) {
  exports['default'] = _ember['default'].Controller.extend(_fusorEmberCliMixinsNeedsDeploymentMixin['default'], {

    storageController: _ember['default'].inject.controller('storage'),
    rhevSetupController: _ember['default'].inject.controller('rhev-setup'),
    rhevOptionsController: _ember['default'].inject.controller('rhev-options'),
    engineDiscoveredHostController: _ember['default'].inject.controller('engine/discovered-host'),
    hypervisorDiscoveredHostController: _ember['default'].inject.controller('hypervisor/discovered-host'),

    rhevSetup: _ember['default'].computed.alias("rhevSetupController.rhevSetup"),

    isSelfHost: _ember['default'].computed('rhevSetup', function () {
      return this.get('rhevSetup') === 'selfhost';
    }),

    hypervisorTabName: _ember['default'].computed('isSelfHost', function () {
      if (this.get('isSelfHost')) {
        return 'Engine/Hypervisor';
      } else {
        return 'Hypervisor';
      }
    }),

    engineTabName: 'Engine',

    disableTabRhevHypervisors: _ember['default'].computed('isSelfHost', 'validRhevEngine', function () {
      return !(this.get('isSelfHost') || this.get('validRhevEngine'));
    }),
    disableTabRhevEngine: _ember['default'].computed('isSelfHost', function () {
      return this.get('isSelfHost');
    }),

    disableTabRhevSetupType: false,
    hasEngine: _ember['default'].computed.alias('deploymentController.hasEngine'),
    hasNoEngine: _ember['default'].computed.not('hasEngine'),

    hasHypervisor: _ember['default'].computed('deploymentController.model.discovered_hosts.[]', function () {
      return this.get('deploymentController.model.discovered_hosts.length') > 0;
    }),
    hasNoHypervisor: _ember['default'].computed.not('hasHypervisor'),

    isEngineHostnameValid: _ember['default'].computed.not('engineDiscoveredHostController.isHostnameInvalid'),
    isHypervisorHostnameValid: _ember['default'].computed.not('hypervisorDiscoveredHostController.isHostnameInvalid'),

    disableTabRhevConfiguration: _ember['default'].computed('isSelfHost', 'invalidRhevEngine', 'invalidRhevHypervisor', function () {
      return !this.get('isSelfHost') && this.get('invalidRhevEngine') || this.get('invalidRhevHypervisor');
    }),

    disableTabRhevStorage: _ember['default'].computed('rhevOptionsController.disableNextRhevOptions', 'disableTabRhevConfiguration', function () {
      return this.get('disableTabRhevConfiguration') || this.get('rhevOptionsController.disableNextRhevOptions');
    }),

    validRhevSetup: true,

    validRhevEngine: _ember['default'].computed('hasEngine', 'isEngineHostnameValid', function () {
      return this.get('hasEngine') && this.get('isEngineHostnameValid');
    }),
    invalidRhevEngine: _ember['default'].computed.not('validRhevEngine'),

    validRhevHypervisor: _ember['default'].computed('hasHypervisor', 'isHypervisorHostnameValid', function () {
      return this.get('hasHypervisor') && this.get('isHypervisorHostnameValid');
    }),
    invalidRhevHypervisor: _ember['default'].computed.not('validRhevHypervisor'),

    validRhevOptions: _ember['default'].computed.alias("rhevOptionsController.validRhevOptions"),
    validRhevStorage: _ember['default'].computed.alias("storageController.validRhevStorage"),

    validRhev: _ember['default'].computed('isSelfHost', 'validRhevSetup', 'validRhevEngine', 'validRhevHypervisor', 'validRhevOptions', 'validRhevStorage', function () {
      return this.get('validRhevSetup') && (this.get('validRhevEngine') || this.get('isSelfHost') && this.get('validRhevHypervisor')) && this.get('validRhevOptions') && this.get('validRhevStorage');
    })
  });
});
define("fusor-ember-cli/controllers/satellite/access-insights", ["exports", "ember", "fusor-ember-cli/mixins/needs-deployment-mixin"], function (exports, _ember, _fusorEmberCliMixinsNeedsDeploymentMixin) {
  exports["default"] = _ember["default"].Controller.extend(_fusorEmberCliMixinsNeedsDeploymentMixin["default"], {

    step2RouteName: _ember["default"].computed.alias("deploymentController.step2RouteName"),

    analyticsColor: _ember["default"].computed('isStarted', function () {
      if (this.get('isStarted')) {
        return 'disabled';
      } else {
        return '';
      }
    })

  });
});
define("fusor-ember-cli/controllers/satellite/index", ["exports", "ember", "fusor-ember-cli/mixins/needs-deployment-mixin", "fusor-ember-cli/mixins/validates-deployment-name-mixin", "fusor-ember-cli/mixins/common-password-mixin"], function (exports, _ember, _fusorEmberCliMixinsNeedsDeploymentMixin, _fusorEmberCliMixinsValidatesDeploymentNameMixin, _fusorEmberCliMixinsCommonPasswordMixin) {
  exports["default"] = _ember["default"].Controller.extend(_fusorEmberCliMixinsNeedsDeploymentMixin["default"], _fusorEmberCliMixinsValidatesDeploymentNameMixin["default"], _fusorEmberCliMixinsCommonPasswordMixin["default"], {

    name: _ember["default"].computed.alias("deploymentController.name"),
    description: _ember["default"].computed.alias("deploymentController.description"),

    lifecycleEnvironmentTabRouteName: _ember["default"].computed.alias("deploymentController.lifecycleEnvironmentTabRouteName"),

    idSatName: 'deployment_sat_name',
    idSatDesc: 'deployment_sat_desc',

    backRouteNameOnSatIndex: _ember["default"].computed.alias("deploymentController.backRouteNameOnSatIndex"),

    isRhev: _ember["default"].computed.alias('deploymentController.isRhev'),
    isOpenStack: _ember["default"].computed.alias("deploymentController.isOpenStack"),
    isCloudForms: _ember["default"].computed.alias("deploymentController.isCloudForms"),
    isOpenShift: _ember["default"].computed.alias("deploymentController.isOpenShift"),

    isValidDeploymentName: _ember["default"].computed.alias("deploymentController.isValidDeploymentName"),
    isValidNameAndPassword: _ember["default"].computed('isValidDeploymentName', 'isValidCommonPassword', function () {
      return this.get('isValidDeploymentName') && this.get('isValidCommonPassword');
    }),
    disableNextOnDeploymentName: _ember["default"].computed.not('isValidNameAndPassword')

  });
});
define("fusor-ember-cli/controllers/satellite", ["exports", "ember", "fusor-ember-cli/mixins/needs-deployment-mixin"], function (exports, _ember, _fusorEmberCliMixinsNeedsDeploymentMixin) {
  exports["default"] = _ember["default"].Controller.extend(_fusorEmberCliMixinsNeedsDeploymentMixin["default"], {

    satelliteTabRouteName: _ember["default"].computed.alias("deploymentController.satelliteTabRouteName"),
    lifecycleEnvironmentTabRouteName: _ember["default"].computed.alias("deploymentController.lifecycleEnvironmentTabRouteName"),

    disableTabDeploymentName: _ember["default"].computed.alias("deploymentController.disableTabDeploymentName"),
    disableTabLifecycleEnvironment: _ember["default"].computed.alias("deploymentController.disableTabLifecycleEnvironment"),
    disableTabAccessInsights: _ember["default"].computed.alias("deploymentController.disableTabAccessInsights")

  });
});
define('fusor-ember-cli/controllers/storage', ['exports', 'ember', 'ic-ajax', 'fusor-ember-cli/mixins/needs-deployment-mixin', 'fusor-ember-cli/utils/validators'], function (exports, _ember, _icAjax, _fusorEmberCliMixinsNeedsDeploymentMixin, _fusorEmberCliUtilsValidators) {
  exports['default'] = _ember['default'].Controller.extend(_fusorEmberCliMixinsNeedsDeploymentMixin['default'], {
    actions: {
      testMountPoint: function testMountPoint() {
        var _this = this;

        var deployment = this.get('model');
        deployment.trimFieldsForSave();
        this.set('errorMsg', null);
        var checkExport = this.get('isCloudForms');
        var checkHosted = this.get('rhevIsSelfHosted');

        var storageParams = {
          path: this.get('model.rhev_share_path'),
          address: this.get('model.rhev_storage_address'),
          type: this.get('model.rhev_storage_type')
        };

        var validationPromises = {
          storage: this.storageMountRequest(storageParams)
        };

        if (checkExport) {
          var exportParams = {
            path: this.get('model.rhev_export_domain_path'),
            address: this.get('model.rhev_export_domain_address'),
            type: this.get('model.rhev_storage_type')
          };

          validationPromises['export'] = this.storageMountRequest(exportParams);
        }

        if (checkHosted) {
          var hostedParams = {
            path: this.get('model.hosted_storage_path'),
            address: this.get('model.hosted_storage_address'),
            type: this.get('model.rhev_storage_type')
          };

          validationPromises.hosted = this.storageMountRequest(hostedParams);
        }

        this.set('loadingSpinnerText', 'Trying to mount storage paths...');
        this.set('showLoadingSpinner', true);

        _ember['default'].RSVP.hash(validationPromises).then(function (resultHash) {
          _this.set('showLoadingSpinner', false);
          var validMounts = resultHash.storage.mounted;

          if (checkExport) {
            validMounts = validMounts && resultHash['export'].mounted;
          }
          if (checkHosted) {
            validMounts = validMounts && resultHash.hosted.mounted;
          }

          if (validMounts) {
            _this.set('errorMsg', null);
            _this.transitionTo(_this.get('step3RouteName'));
          } else {
            var failedDomain = undefined;
            if (!resultHash.storage.mounted) {
              failedDomain = 'storage';
            } else if (checkHosted && !resultHash.hosted.mounted) {
              failedDomain = 'self-hosted';
            } else if (checkExport && !resultHash['export'].mounted) {
              failedDomain = 'export';
            }

            if (!failedDomain) {
              // Catch handler manages this
              throw 'Could not detect failed domain...';
            }

            var failedDomainName = undefined;
            switch (failedDomain) {
              case 'storage':
                failedDomainName = _this.get('deploymentController.model.rhev_storage_name');
                break;
              case 'self-hosted':
                failedDomainName = _this.get('deploymentController.model.hosted_storage_name');
                break;
              case 'export':
                failedDomainName = _this.get('deploymentController.model.rhev_export_domain_name');
                break;
              default:
                failedDomainName = '';
            }

            var errorMsg = 'Error mounting ' + failedDomain + ' domain ' + failedDomainName + ', ' + 'please make sure it is a valid mount point';

            _this.set('errorMsg', errorMsg);
          }
        })['catch'](function (err) {
          console.error(err);
          _this.set('errorMsg', 'Error occurred while attempting to validate storage paths');
        });
      }
    },

    storageMountRequest: function storageMountRequest(params) {
      var deploymentId = this.get('deploymentId');
      return (0, _icAjax['default'])({
        url: '/fusor/api/v21/deployments/' + deploymentId + '/check_mount_point',
        type: 'GET',
        data: params,
        headers: {
          'Accept': 'application/json',
          'Content-Type': 'application/json',
          'X-CSRF-Token': _ember['default'].$('meta[name="csrf-token"]').attr('content')
        }
      });
    },

    deploymentId: _ember['default'].computed.alias('deploymentController.model.id'),
    step3RouteName: _ember['default'].computed.alias("deploymentController.step3RouteName"),
    isCloudForms: _ember['default'].computed.alias("deploymentController.isCloudForms"),
    rhevIsSelfHosted: _ember['default'].computed.alias("deploymentController.model.rhev_is_self_hosted"),
    errorMsg: null,

    isNFS: _ember['default'].computed('deploymentController.model.rhev_storage_type', function () {
      return this.get('deploymentController.model.rhev_storage_type') === 'NFS';
    }),

    isLocal: _ember['default'].computed('deploymentController.model.rhev_storage_type', function () {
      return this.get('deploymentController.model.rhev_storage_type') === 'Local';
    }),

    isGluster: _ember['default'].computed('deploymentController.model.rhev_storage_type', function () {
      return this.get('deploymentController.model.rhev_storage_type') === 'glusterfs';
    }),

    computerNameValidator: _fusorEmberCliUtilsValidators.AllValidator.create({
      validators: [_fusorEmberCliUtilsValidators.PresenceValidator.create({}), _fusorEmberCliUtilsValidators.AlphaNumericDashUnderscoreValidator.create({})]
    }),

    hostnameValidator: _fusorEmberCliUtilsValidators.AllValidator.create({
      validators: [_fusorEmberCliUtilsValidators.PresenceValidator.create({}), _fusorEmberCliUtilsValidators.HostnameValidator.create({})]
    }),

    nfsPathValidator: _fusorEmberCliUtilsValidators.AllValidator.create({
      validators: [_fusorEmberCliUtilsValidators.PresenceValidator.create({}), _fusorEmberCliUtilsValidators.NfsPathValidator.create({})]
    }),

    glusterPathValidator: _fusorEmberCliUtilsValidators.AllValidator.create({
      validators: [_fusorEmberCliUtilsValidators.PresenceValidator.create({}), _fusorEmberCliUtilsValidators.GlusterPathValidator.create({})]
    }),

    sharePathValidator: _ember['default'].computed('deploymentController.model.rhev_storage_type', function () {
      if (this.get('deploymentController.model.rhev_storage_type') === 'NFS') {
        return this.get('nfsPathValidator');
      }

      return this.get('glusterPathValidator');
    }),

    invalidStorageName: _ember['default'].computed('deploymentController.model.rhev_storage_name', function () {
      return this.get('computerNameValidator').isInvalid(this.get('deploymentController.model.rhev_storage_name'));
    }),

    invalidStorageAddress: _ember['default'].computed('deploymentController.model.rhev_storage_address', function () {
      return this.get('hostnameValidator').isInvalid(this.get('deploymentController.model.rhev_storage_address'));
    }),

    invalidSharePath: _ember['default'].computed('deploymentController.model.rhev_share_path', 'sharePathValidator', function () {
      return this.get('sharePathValidator').isInvalid(this.get('deploymentController.model.rhev_share_path'));
    }),

    invalidExportDomainName: _ember['default'].computed('deploymentController.model.rhev_export_domain_name', function () {
      return this.get('computerNameValidator').isInvalid(this.get('deploymentController.model.rhev_export_domain_name'));
    }),

    invalidExportAddress: _ember['default'].computed('deploymentController.model.rhev_export_domain_address', function () {
      return this.get('hostnameValidator').isInvalid(this.get('deploymentController.model.rhev_export_domain_address'));
    }),

    invalidExportPath: _ember['default'].computed('deploymentController.model.rhev_export_domain_path', 'sharePathValidator', function () {
      return this.get('sharePathValidator').isInvalid(this.get('deploymentController.model.rhev_export_domain_path'));
    }),

    invalidHostedName: _ember['default'].computed('deploymentController.model.hosted_storage_name', function () {
      return this.get('computerNameValidator').isInvalid(this.get('deploymentController.model.hosted_storage_name'));
    }),

    invalidHostedAddress: _ember['default'].computed('deploymentController.model.hosted_storage_address', function () {
      return this.get('hostnameValidator').isInvalid(this.get('deploymentController.model.hosted_storage_address'));
    }),

    invalidHostedPath: _ember['default'].computed('deploymentController.model.hosted_storage_path', 'sharePathValidator', function () {
      return this.get('sharePathValidator').isInvalid(this.get('deploymentController.model.hosted_storage_path'));
    }),

    disableNextStorage: _ember['default'].computed('isCloudForms', 'rhevIsSelfHosted', 'invalidStorageName', 'invalidStorageAddress', 'invalidSharePath', 'invalidExportDomainName', 'invalidExportAddress', 'invalidExportPath', 'invalidHostedName', 'invalidHostedAddress', 'invalidHostedPath', function () {
      return this.get('invalidStorageName') || this.get('invalidStorageAddress') || this.get('invalidSharePath') || this.get('isCloudForms') && (this.get('invalidExportDomainName') || this.get('invalidExportAddress') || this.get('invalidExportPath')) || this.get('rhevIsSelfHosted') && (this.get('invalidHostedName') || this.get('invalidHostedAddress') || this.get('invalidHostedPath'));
    }),

    validRhevStorage: _ember['default'].computed.not('disableNextStorage')

  });
});
define('fusor-ember-cli/controllers/subscriptions/credentials', ['exports', 'ember', 'ic-ajax', 'fusor-ember-cli/mixins/needs-deployment-mixin'], function (exports, _ember, _icAjax, _fusorEmberCliMixinsNeedsDeploymentMixin) {

  var MirrorStatus = {
    VALID: 1,
    INVALID: 2,
    VALIDATING: 3
  };

  exports['default'] = _ember['default'].Controller.extend(_fusorEmberCliMixinsNeedsDeploymentMixin['default'], {

    cdnUrl: _ember['default'].computed.alias("deploymentController.model.cdn_url"),
    manifestFile: _ember['default'].computed.alias("deploymentController.model.manifest_file"),

    subscriptionsController: _ember['default'].inject.controller('subscriptions'),

    validCredentials: _ember['default'].computed('model.identification', 'password', function () {
      // password is not saved in the model
      return _ember['default'].isPresent(this.get('model.identification')) && _ember['default'].isPresent(this.get('password'));
    }),

    enableCredentialsNext: _ember['default'].computed('validCredentials', 'model.isAuthenticated', function () {
      return this.get('validCredentials') || this.get('model.isAuthenticated');
    }),
    disableCredentialsNext: _ember['default'].computed.not('enableCredentialsNext'),

    backRouteFromCredentials: _ember['default'].computed.alias('subscriptionsController.backRouteFromSubscriptions'),

    nextButtonTitle: 'Next',

    actionCredentialsNext: _ember['default'].computed('model.isAuthenticated', function () {
      if (this.get('model.isAuthenticated')) {
        return 'redirectToManagementApplication';
      } else {
        return 'loginPortal';
      }
    }),

    isDisconnected: _ember['default'].computed.alias('deploymentController.model.is_disconnected'),
    hasManifestFile: _ember['default'].computed.notEmpty('manifestFile'),
    noManifestFile: _ember['default'].computed.empty('manifestFile'),

    disableNextDisconnected: _ember['default'].computed('noManifestFile', 'currentMirrorStatus', function () {
      // If currentMirrorStatus is not VALID, disable next
      var retVal = this.get('noManifestFile') || this.get('currentMirrorStatus') !== this.get('MirrorStatus').VALID;
      return retVal;
    }),

    contentProviderType: _ember['default'].computed('isDisconnected', function () {
      return this.get('isDisconnected') ? "disconnected" : "redhat_cdn";
    }),

    contentProviderTitle: _ember['default'].computed('isDisconnected', function () {
      return this.get('isDisconnected') ? "Disconnected" : "Red Hat CDN";
    }),

    isDisconnectedSelected: _ember['default'].computed('contentProviderType', function () {
      return this.get('contentProviderType') === 'disconnected';
    }),

    MirrorStatus: MirrorStatus,
    currentMirrorStatus: MirrorStatus.INVALID,

    actions: {
      providerTypeChanged: function providerTypeChanged() {
        this.set('isDisconnected', this.get('isDisconnectedSelected'));
      },

      uploadManifest: function uploadManifest() {
        var self = this;
        var manifestFile = document.getElementById('manifest-file-field').files[0];
        var formData = new FormData();
        var token = _ember['default'].$('meta[name="csrf-token"]').attr('content');
        formData.append('manifest_file[name]', manifestFile.name);
        formData.append('manifest_file[file]', manifestFile);
        formData.append('manifest_file[deployment_id]', this.get('deploymentId'));

        console.log('action: uploadManifest, PUT /fusor/api/v21/subscriptions/upload');
        //ic-ajax request
        (0, _icAjax['default'])({
          type: 'PUT',
          url: '/fusor/api/v21/subscriptions/upload',
          data: formData,
          processData: false,
          headers: { 'X-CSRF-Token': token },
          contentType: false
        }).then(function (result) {
          self.get('deploymentController.model').set('manifest_file', result.manifest_file);
          self.get('deploymentController.model').save().then(function () {
            return console.log('Manifest successfully uploaded');
          });
        }, function (error) {
          console.log(error);
          return console.log('ERROR on uploadManifest');
        });
      },

      uploadDifferentManifest: function uploadDifferentManifest() {
        this.set("manifestFile", null);
      },

      mirrorStatusUpdate: function mirrorStatusUpdate(newStatus) {
        this.set('currentMirrorStatus', newStatus);
      }
    }

  });
});
define('fusor-ember-cli/controllers/subscriptions/management-application/consumer/entitlements', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Controller.extend({});
});
define('fusor-ember-cli/controllers/subscriptions/management-application/consumer/pools', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Controller.extend({});
});
define('fusor-ember-cli/controllers/subscriptions/management-application/consumer', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Controller.extend({});
});
define('fusor-ember-cli/controllers/subscriptions/management-application', ['exports', 'ember', 'fusor-ember-cli/mixins/needs-deployment-mixin', 'ic-ajax', 'fusor-ember-cli/utils/validation-util'], function (exports, _ember, _fusorEmberCliMixinsNeedsDeploymentMixin, _icAjax, _fusorEmberCliUtilsValidationUtil) {
  exports['default'] = _ember['default'].Controller.extend(_fusorEmberCliMixinsNeedsDeploymentMixin['default'], {
    subscriptionsController: _ember['default'].inject.controller('subscriptions'),

    showManagementApplications: true,
    sessionPortal: _ember['default'].computed.alias('subscriptionsController.model'),

    msgWaiting: _ember['default'].computed('newSatelliteName', function () {
      return 'Adding ' + this.get('newSatelliteName') + ' ....';
    }),

    isValidMgmtAppName: _ember['default'].computed('newSatelliteName', function () {
      return _fusorEmberCliUtilsValidationUtil['default'].validateMgmtAppName(this.get('newSatelliteName'));
    }),
    isInvalidMgmtAppName: _ember['default'].computed.not('isValidMgmtAppName'),

    disableNextOnManagementApp: _ember['default'].computed('upstreamConsumerUuid', function () {
      return _ember['default'].isBlank(this.get('upstreamConsumerUuid'));
    }),

    actions: {
      registerNewSatellite: function registerNewSatellite() {
        this.set('showErrorMessage', false);
        this.set('openModal', true);
      },

      selectManagementApp: function selectManagementApp(managementApp) {
        this.set('showAlertMessage', false);
        this.set('showWaitingMessage', false);
        this.set('showErrorMessage', false);
        this.get('sessionPortal').set('consumerUUID', managementApp.get('id'));
        this.get('sessionPortal').save();
        this.set('upstreamConsumerUuid', managementApp.get('id'));
        this.set('upstreamConsumerName', managementApp.get('name'));
        // show selected UUID in url
        return this.transitionTo('subscriptions.management-application.consumer', managementApp.get('id'));
      },

      createSatellite: function createSatellite(newSatelliteName) {
        var _this = this;

        this.set('showAlertMessage', false);
        this.set('showErrorMessage', false);
        this.set('showWaitingMessage', true);
        this.set('newSatelliteName', newSatelliteName);

        var token = _ember['default'].$('meta[name="csrf-token"]').attr('content');
        var errorMsg = this.get('errorMsg');
        var ownerKey = this.get('sessionPortal').get('ownerKey');

        //POST /customer_portal/consumers?owner=#{OWNER['key']}, {"name":"#{RHCI_DISTRIBUTOR_NAME}","type":"satellite","facts":{"distributor_version":"sat-6.0","system.certificate_version":"3.2"}}
        var url = '/customer_portal/consumers?=' + ownerKey;

        if (this.get('isInvalidMgmtAppName')) {
          this.set('showWaitingMessage', false);
          this.set('showErrorMessage', true);
          this.set('errorMsg', newSatelliteName + ' failed to be added. Invalid application name.');
        } else {
          (0, _icAjax['default'])({
            url: url,
            type: "POST",
            data: JSON.stringify({
              name: newSatelliteName,
              type: "satellite",
              facts: {
                "distributor_version": "sat-6.2",
                "system.certificate_version": "3.2"
              }
            }),
            headers: {
              "Accept": "application/json",
              "Content-Type": "application/json",
              "X-CSRF-Token": token
            }
          }).then(function (response) {
            var newMgmtApp = _this.store.createRecord('management-application', {
              name: response.name,
              entitlementCount: 0,
              id: response.uuid
            });

            _this.get('model').addObject(newMgmtApp._internalModel);
            _this.get('sessionPortal').set('consumerUUID', response.uuid);
            _this.get('sessionPortal').save();
            _this.set('upstreamConsumerUuid', response.uuid);
            _this.set('upstreamConsumerName', response.name);
            _this.set('showAlertMessage', true);
            _this.set('showWaitingMessage', false);
          })['catch'](function (error) {
            var errorMsg = newSatelliteName + ' failed to be added. ';
            if (error && error.jqXHR && error.jqXHR.responseJSON && error.jqXHR.responseJSON.displayMessage) {
              errorMsg += error.jqXHR.responseJSON.displayMessage;
            }

            _this.set('showErrorMessage', true);
            _this.set('showWaitingMessage', false);
            _this.set('errorMsg', errorMsg);
            _this.send('error');
          });
        }
      }
    }
  });
});
define('fusor-ember-cli/controllers/subscriptions/review-subscriptions', ['exports', 'ember', 'fusor-ember-cli/mixins/needs-deployment-mixin'], function (exports, _ember, _fusorEmberCliMixinsNeedsDeploymentMixin) {
  exports['default'] = _ember['default'].Controller.extend(_fusorEmberCliMixinsNeedsDeploymentMixin['default'], {

    isDisconnected: _ember['default'].computed.alias('deploymentController.isDisconnected'),

    subscriptionsController: _ember['default'].inject.controller('subscriptions'),

    backRouteNameReviewSubs: _ember['default'].computed('isDisconnected', function () {
      if (this.get('useExistingManifest')) {
        return this.get('subscriptionsController.backRouteFromSubscriptions');
      } else if (this.get('isDisconnected')) {
        return 'subscriptions.credentials';
      } else {
        return 'subscriptions.select-subscriptions';
      }
    }),

    sortProps: ['contract_number'],
    sortedModel: _ember['default'].computed.sort('model', 'sortProps')

  });
});
define("fusor-ember-cli/controllers/subscriptions/select-subscriptions", ["exports", "ember", "fusor-ember-cli/mixins/needs-deployment-mixin"], function (exports, _ember, _fusorEmberCliMixinsNeedsDeploymentMixin) {
  exports["default"] = _ember["default"].Controller.extend(_fusorEmberCliMixinsNeedsDeploymentMixin["default"], {

    isUpstream: _ember["default"].computed.alias("applicationController.isUpstream"),
    stepNumberSubscriptions: _ember["default"].computed.alias("deploymentController.stepNumberSubscriptions"),
    numSubscriptionsRequired: _ember["default"].computed.alias("deploymentController.numSubscriptionsRequired"),
    isStarted: _ember["default"].computed.alias("deploymentController.isStarted"),
    isDisconnected: _ember["default"].computed.alias('deploymentController.model.is_disconnected'),

    hasSubscriptionPools: _ember["default"].computed('subscriptionPools.[]', function () {
      return this.get('subscriptionPools.length') > 0;
    }),

    hasSubscriptionSavedInModel: _ember["default"].computed('model.[]', function () {
      return this.get('model.length') > 0;
    }),

    contractNumbersInPool: _ember["default"].computed('subscriptionPools.[]', 'hasSubscriptionPools', function () {
      if (this.get('hasSubscriptionPools')) {
        return this.get('subscriptionPools').getEach("contractNumber");
      }
    }),

    contractNumbersInModel: _ember["default"].computed('model.[]', 'hasSubscriptionSavedInModel', function () {
      if (this.get('hasSubscriptionSavedInModel')) {
        return this.get('model').getEach("contract_number");
      }
    }),

    contractNumbersInModelNotInPool: _ember["default"].computed('contractNumbersInPool', 'contractNumbersInModel', 'hasSubscriptionSavedInModel', function () {
      if (this.get('hasSubscriptionSavedInModel')) {
        return this.get('contractNumbersInModel').removeObjects(_ember["default"].A(this.get('contractNumbersInPool')));
      } else {
        return _ember["default"].A([]);
      }
    }),

    hasContractNumbersInModelNotInPool: _ember["default"].computed('contractNumbersInModelNotInPool', function () {
      return this.get('contractNumbersInModelNotInPool.length') > 0;
    }),

    hasSubscriptionsToAttach: _ember["default"].computed('model.[]', function () {
      return this.get('model.length') > 0;
    }),

    showErrorMessage: _ember["default"].computed.notEmpty('errorMsg')

  });
});
define("fusor-ember-cli/controllers/subscriptions", ["exports", "ember", "fusor-ember-cli/mixins/needs-deployment-mixin"], function (exports, _ember, _fusorEmberCliMixinsNeedsDeploymentMixin) {
  exports["default"] = _ember["default"].Controller.extend(_fusorEmberCliMixinsNeedsDeploymentMixin["default"], {
    stepNumberSubscriptions: _ember["default"].computed.alias("deploymentController.stepNumberSubscriptions"),
    isStarted: _ember["default"].computed.alias("deploymentController.isStarted"),
    isDisconnected: _ember["default"].computed.alias("deploymentController.model.is_disconnected"),

    disableTabManagementApplication: _ember["default"].computed('model.isAuthenticated', 'isStarted', function () {
      return !this.get('isStarted') && !this.get('model.isAuthenticated');
    }),

    disableTabReviewSubsciptions: _ember["default"].computed.empty("deploymentController.model.manifest_file"),

    disableTabSelectSubsciptions: _ember["default"].computed('model.isAuthenticated', 'upstreamConsumerUuid', function () {
      return _ember["default"].isBlank(this.get('upstreamConsumerUuid')) || !this.get('model.isAuthenticated');
    }),

    backRouteFromSubscriptions: _ember["default"].computed('isRhev', 'isOpenStack', 'isOpenShift', 'isCloudForms', function () {
      if (this.get('isCloudForms')) {
        return 'cloudforms.cfme-configuration';
      } else if (this.get('isOpenShift')) {
        return 'openshift.openshift-configuration';
      } else if (this.get('isOpenStack')) {
        return 'openstack.overcloud';
      } else if (this.get('isRhev')) {
        return 'storage';
      } else {
        return 'configure-environment';
      }
    })
  });
});
define('fusor-ember-cli/controllers/where-install', ['exports', 'ember', 'fusor-ember-cli/mixins/needs-deployment-mixin'], function (exports, _ember, _fusorEmberCliMixinsNeedsDeploymentMixin) {
  exports['default'] = _ember['default'].Controller.extend(_fusorEmberCliMixinsNeedsDeploymentMixin['default'], {

    cloudformsController: _ember['default'].inject.controller('cloudforms'),

    cfmeInstallLoc: _ember['default'].computed.alias("deploymentController.model.cfme_install_loc"),
    isRhev: _ember['default'].computed.alias("deploymentController.isRhev"),
    isNotRhev: _ember['default'].computed.not("isRhev"),
    isOpenStack: _ember['default'].computed.alias("deploymentController.isOpenStack"),
    isNotOpenStack: _ember['default'].computed.not("isOpenStack"),
    fullnameOpenStack: _ember['default'].computed.alias("deploymentController.fullnameOpenStack"),
    isInvalidCfmeInstallLocation: _ember['default'].computed.alias("cloudformsController.isInvalidCfmeInstallLocation"),
    isOpenShift: _ember['default'].computed.alias("deploymentController.isOpenShift"),

    disableRHEV: _ember['default'].computed('isStarted', 'isNotRhev', function () {
      return this.get('isStarted') || this.get('isNotRhev');
    }),

    disableOpenStack: _ember['default'].computed('isStarted', 'isNotOpenStack', function () {
      return this.get('isStarted') || this.get('isNotOpenStack');
    }),

    disableRHEVradio: _ember['default'].computed('disableRHEV', 'isStarted', function () {
      return this.get('disableRHEV') || this.get('isStarted');
    }),

    disableOpenstackradio: _ember['default'].computed('disableOpenStack', 'isStarted', function () {
      return this.get('disableOpenStack') || this.get('isStarted');
    }),

    backRouteName: _ember['default'].computed('isOpenStack', 'isRhev', 'isOpenShift', function () {
      if (this.get('isOpenShift')) {
        return 'openshift.openshift-configuration';
      } else if (this.get('isOpenStack')) {
        return 'openstack.overcloud';
      } else if (this.get('isRhev')) {
        return 'storage';
      } else {
        return 'satellite.access-insights';
      }
    }),

    actions: {
      cfmeLocationChanged: function cfmeLocationChanged() {}
    }

  });
});
define('fusor-ember-cli/helpers/and', ['exports', 'ember', 'ember-truth-helpers/helpers/and'], function (exports, _ember, _emberTruthHelpersHelpersAnd) {

  var forExport = null;

  if (_ember['default'].Helper) {
    forExport = _ember['default'].Helper.helper(_emberTruthHelpersHelpersAnd.andHelper);
  } else if (_ember['default'].HTMLBars.makeBoundHelper) {
    forExport = _ember['default'].HTMLBars.makeBoundHelper(_emberTruthHelpersHelpersAnd.andHelper);
  }

  exports['default'] = forExport;
});
define('fusor-ember-cli/helpers/ember-power-select-build-selection', ['exports', 'ember-power-select/helpers/ember-power-select-build-selection'], function (exports, _emberPowerSelectHelpersEmberPowerSelectBuildSelection) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberPowerSelectHelpersEmberPowerSelectBuildSelection['default'];
    }
  });
  Object.defineProperty(exports, 'emberPowerSelectBuildSelection', {
    enumerable: true,
    get: function get() {
      return _emberPowerSelectHelpersEmberPowerSelectBuildSelection.emberPowerSelectBuildSelection;
    }
  });
});
define('fusor-ember-cli/helpers/ember-power-select-is-selected', ['exports', 'ember-power-select/helpers/ember-power-select-is-selected'], function (exports, _emberPowerSelectHelpersEmberPowerSelectIsSelected) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberPowerSelectHelpersEmberPowerSelectIsSelected['default'];
    }
  });
  Object.defineProperty(exports, 'emberPowerSelectIsSelected', {
    enumerable: true,
    get: function get() {
      return _emberPowerSelectHelpersEmberPowerSelectIsSelected.emberPowerSelectIsSelected;
    }
  });
});
define('fusor-ember-cli/helpers/eq', ['exports', 'ember', 'ember-truth-helpers/helpers/equal'], function (exports, _ember, _emberTruthHelpersHelpersEqual) {

  var forExport = null;

  if (_ember['default'].Helper) {
    forExport = _ember['default'].Helper.helper(_emberTruthHelpersHelpersEqual.equalHelper);
  } else if (_ember['default'].HTMLBars.makeBoundHelper) {
    forExport = _ember['default'].HTMLBars.makeBoundHelper(_emberTruthHelpersHelpersEqual.equalHelper);
  }

  exports['default'] = forExport;
});
define('fusor-ember-cli/helpers/fa-icon', ['exports', 'ember'], function (exports, _ember) {

  var FA_PREFIX = /^fa\-.+/;

  var warn = _ember['default'].Logger.warn;

  /**
   * Handlebars helper for generating HTML that renders a FontAwesome icon.
   *
   * @param  {String} name    The icon name. Note that the `fa-` prefix is optional.
   *                          For example, you can pass in either `fa-camera` or just `camera`.
   * @param  {Object} options Options passed to helper.
   * @return {Ember.Handlebars.SafeString} The HTML markup.
   */
  var faIcon = function faIcon(name, options) {
    if (_ember['default'].typeOf(name) !== 'string') {
      var message = "fa-icon: no icon specified";
      warn(message);
      return _ember['default'].String.htmlSafe(message);
    }

    var params = options.hash,
        classNames = [],
        html = "";

    classNames.push("fa");
    if (!name.match(FA_PREFIX)) {
      name = "fa-" + name;
    }
    classNames.push(name);
    if (params.spin) {
      classNames.push("fa-spin");
    }
    if (params.flip) {
      classNames.push("fa-flip-" + params.flip);
    }
    if (params.rotate) {
      classNames.push("fa-rotate-" + params.rotate);
    }
    if (params.lg) {
      warn("fa-icon: the 'lg' parameter is deprecated. Use 'size' instead. I.e. {{fa-icon size=\"lg\"}}");
      classNames.push("fa-lg");
    }
    if (params.x) {
      warn("fa-icon: the 'x' parameter is deprecated. Use 'size' instead. I.e. {{fa-icon size=\"" + params.x + "\"}}");
      classNames.push("fa-" + params.x + "x");
    }
    if (params.size) {
      if (_ember['default'].typeOf(params.size) === "string" && params.size.match(/\d+/)) {
        params.size = Number(params.size);
      }
      if (_ember['default'].typeOf(params.size) === "number") {
        classNames.push("fa-" + params.size + "x");
      } else {
        classNames.push("fa-" + params.size);
      }
    }
    if (params.fixedWidth) {
      classNames.push("fa-fw");
    }
    if (params.listItem) {
      classNames.push("fa-li");
    }
    if (params.pull) {
      classNames.push("pull-" + params.pull);
    }
    if (params.border) {
      classNames.push("fa-border");
    }
    if (params.classNames && !_ember['default'].isArray(params.classNames)) {
      params.classNames = [params.classNames];
    }
    if (!_ember['default'].isEmpty(params.classNames)) {
      Array.prototype.push.apply(classNames, params.classNames);
    }

    html += "<";
    var tagName = params.tagName || 'i';
    html += tagName;
    html += " class='" + classNames.join(" ") + "'";
    if (params.title) {
      html += " title='" + params.title + "'";
    }
    if (params.ariaHidden === undefined || params.ariaHidden) {
      html += " aria-hidden=\"true\"";
    }
    html += "></" + tagName + ">";
    return _ember['default'].String.htmlSafe(html);
  };

  exports.faIcon = faIcon;
  exports['default'] = _ember['default'].Handlebars.makeBoundHelper(faIcon);
});
define('fusor-ember-cli/helpers/gt', ['exports', 'ember', 'ember-truth-helpers/helpers/gt'], function (exports, _ember, _emberTruthHelpersHelpersGt) {

  var forExport = null;

  if (_ember['default'].Helper) {
    forExport = _ember['default'].Helper.helper(_emberTruthHelpersHelpersGt.gtHelper);
  } else if (_ember['default'].HTMLBars.makeBoundHelper) {
    forExport = _ember['default'].HTMLBars.makeBoundHelper(_emberTruthHelpersHelpersGt.gtHelper);
  }

  exports['default'] = forExport;
});
define('fusor-ember-cli/helpers/gte', ['exports', 'ember', 'ember-truth-helpers/helpers/gte'], function (exports, _ember, _emberTruthHelpersHelpersGte) {

  var forExport = null;

  if (_ember['default'].Helper) {
    forExport = _ember['default'].Helper.helper(_emberTruthHelpersHelpersGte.gteHelper);
  } else if (_ember['default'].HTMLBars.makeBoundHelper) {
    forExport = _ember['default'].HTMLBars.makeBoundHelper(_emberTruthHelpersHelpersGte.gteHelper);
  }

  exports['default'] = forExport;
});
define('fusor-ember-cli/helpers/hash', ['exports', 'ember-hash-helper-polyfill/helpers/hash'], function (exports, _emberHashHelperPolyfillHelpersHash) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberHashHelperPolyfillHelpersHash['default'];
    }
  });
  Object.defineProperty(exports, 'hash', {
    enumerable: true,
    get: function get() {
      return _emberHashHelperPolyfillHelpersHash.hash;
    }
  });
});
define('fusor-ember-cli/helpers/is-array', ['exports', 'ember', 'ember-truth-helpers/helpers/is-array'], function (exports, _ember, _emberTruthHelpersHelpersIsArray) {

  var forExport = null;

  if (_ember['default'].Helper) {
    forExport = _ember['default'].Helper.helper(_emberTruthHelpersHelpersIsArray.isArrayHelper);
  } else if (_ember['default'].HTMLBars.makeBoundHelper) {
    forExport = _ember['default'].HTMLBars.makeBoundHelper(_emberTruthHelpersHelpersIsArray.isArrayHelper);
  }

  exports['default'] = forExport;
});
define("fusor-ember-cli/helpers/log", ["exports"], function (exports) {
  exports["default"] = function () {
    //console.debug(str);
  };

  ;
});
define('fusor-ember-cli/helpers/lt', ['exports', 'ember', 'ember-truth-helpers/helpers/lt'], function (exports, _ember, _emberTruthHelpersHelpersLt) {

  var forExport = null;

  if (_ember['default'].Helper) {
    forExport = _ember['default'].Helper.helper(_emberTruthHelpersHelpersLt.ltHelper);
  } else if (_ember['default'].HTMLBars.makeBoundHelper) {
    forExport = _ember['default'].HTMLBars.makeBoundHelper(_emberTruthHelpersHelpersLt.ltHelper);
  }

  exports['default'] = forExport;
});
define('fusor-ember-cli/helpers/lte', ['exports', 'ember', 'ember-truth-helpers/helpers/lte'], function (exports, _ember, _emberTruthHelpersHelpersLte) {

  var forExport = null;

  if (_ember['default'].Helper) {
    forExport = _ember['default'].Helper.helper(_emberTruthHelpersHelpersLte.lteHelper);
  } else if (_ember['default'].HTMLBars.makeBoundHelper) {
    forExport = _ember['default'].HTMLBars.makeBoundHelper(_emberTruthHelpersHelpersLte.lteHelper);
  }

  exports['default'] = forExport;
});
define('fusor-ember-cli/helpers/not-eq', ['exports', 'ember', 'ember-truth-helpers/helpers/not-equal'], function (exports, _ember, _emberTruthHelpersHelpersNotEqual) {

  var forExport = null;

  if (_ember['default'].Helper) {
    forExport = _ember['default'].Helper.helper(_emberTruthHelpersHelpersNotEqual.notEqualHelper);
  } else if (_ember['default'].HTMLBars.makeBoundHelper) {
    forExport = _ember['default'].HTMLBars.makeBoundHelper(_emberTruthHelpersHelpersNotEqual.notEqualHelper);
  }

  exports['default'] = forExport;
});
define('fusor-ember-cli/helpers/not', ['exports', 'ember', 'ember-truth-helpers/helpers/not'], function (exports, _ember, _emberTruthHelpersHelpersNot) {

  var forExport = null;

  if (_ember['default'].Helper) {
    forExport = _ember['default'].Helper.helper(_emberTruthHelpersHelpersNot.notHelper);
  } else if (_ember['default'].HTMLBars.makeBoundHelper) {
    forExport = _ember['default'].HTMLBars.makeBoundHelper(_emberTruthHelpersHelpersNot.notHelper);
  }

  exports['default'] = forExport;
});
define('fusor-ember-cli/helpers/or', ['exports', 'ember', 'ember-truth-helpers/helpers/or'], function (exports, _ember, _emberTruthHelpersHelpersOr) {

  var forExport = null;

  if (_ember['default'].Helper) {
    forExport = _ember['default'].Helper.helper(_emberTruthHelpersHelpersOr.orHelper);
  } else if (_ember['default'].HTMLBars.makeBoundHelper) {
    forExport = _ember['default'].HTMLBars.makeBoundHelper(_emberTruthHelpersHelpersOr.orHelper);
  }

  exports['default'] = forExport;
});
define('fusor-ember-cli/helpers/pluralize', ['exports', 'ember-inflector/lib/helpers/pluralize'], function (exports, _emberInflectorLibHelpersPluralize) {
  exports['default'] = _emberInflectorLibHelpersPluralize['default'];
});
define('fusor-ember-cli/helpers/singularize', ['exports', 'ember-inflector/lib/helpers/singularize'], function (exports, _emberInflectorLibHelpersSingularize) {
  exports['default'] = _emberInflectorLibHelpersSingularize['default'];
});
define('fusor-ember-cli/helpers/xor', ['exports', 'ember', 'ember-truth-helpers/helpers/xor'], function (exports, _ember, _emberTruthHelpersHelpersXor) {

  var forExport = null;

  if (_ember['default'].Helper) {
    forExport = _ember['default'].Helper.helper(_emberTruthHelpersHelpersXor.xorHelper);
  } else if (_ember['default'].HTMLBars.makeBoundHelper) {
    forExport = _ember['default'].HTMLBars.makeBoundHelper(_emberTruthHelpersHelpersXor.xorHelper);
  }

  exports['default'] = forExport;
});
define("fusor-ember-cli/initializers/active-model-adapter", ["exports", "active-model-adapter", "active-model-adapter/active-model-serializer"], function (exports, _activeModelAdapter, _activeModelAdapterActiveModelSerializer) {
  exports["default"] = {
    name: 'active-model-adapter',
    initialize: function initialize() {
      var application = arguments[1] || arguments[0];
      application.register('adapter:-active-model', _activeModelAdapter["default"]);
      application.register('serializer:-active-model', _activeModelAdapterActiveModelSerializer["default"]);
    }
  };
});
define('fusor-ember-cli/initializers/add-data-qci', ['exports', 'ember-radio-button/components/radio-button-input', 'emberx-select/components/x-select', 'ember-bootstrap-switch/components/bootstrap-switch', 'ember-drag-drop/components/draggable-object'], function (exports, _emberRadioButtonComponentsRadioButtonInput, _emberxSelectComponentsXSelect, _emberBootstrapSwitchComponentsBootstrapSwitch, _emberDragDropComponentsDraggableObject) {
  exports.initialize = initialize;

  function initialize() {
    _emberRadioButtonComponentsRadioButtonInput['default'].reopen({
      init: function init() {
        this._super();
        this.get('attributeBindings').pushObject('data-qci');
      }
    });

    _emberxSelectComponentsXSelect['default'].reopen({
      init: function init() {
        this._super();
        this.get('attributeBindings').pushObject('data-qci');
      }
    });

    _emberBootstrapSwitchComponentsBootstrapSwitch['default'].reopen({
      init: function init() {
        this._super();
        this.get('attributeBindings').pushObject('data-qci');
      }
    });

    _emberDragDropComponentsDraggableObject['default'].reopen({
      init: function init() {
        this._super();
        this.get('attributeBindings').pushObject('data-qci');
      }
    });
  }

  exports['default'] = {
    name: 'add-data-qci',
    initialize: initialize
  };
});
define('fusor-ember-cli/initializers/app-version', ['exports', 'ember-cli-app-version/initializer-factory', 'fusor-ember-cli/config/environment'], function (exports, _emberCliAppVersionInitializerFactory, _fusorEmberCliConfigEnvironment) {
  var _config$APP = _fusorEmberCliConfigEnvironment['default'].APP;
  var name = _config$APP.name;
  var version = _config$APP.version;
  exports['default'] = {
    name: 'App Version',
    initialize: (0, _emberCliAppVersionInitializerFactory['default'])(name, version)
  };
});
define("fusor-ember-cli/initializers/coordinator-setup", ["exports", "fusor-ember-cli/models/coordinator"], function (exports, _fusorEmberCliModelsCoordinator) {
  exports["default"] = {
    name: "setup coordinator",

    initialize: function initialize() {
      var app = arguments[1] || arguments[0];
      app.register("drag:coordinator", _fusorEmberCliModelsCoordinator["default"]);
      app.inject("component", "coordinator", "drag:coordinator");
    }
  };
});
define('fusor-ember-cli/initializers/ember-cli-mirage', ['exports', 'ember-cli-mirage/utils/read-modules', 'fusor-ember-cli/config/environment', 'fusor-ember-cli/mirage/config', 'ember-cli-mirage/server'], function (exports, _emberCliMirageUtilsReadModules, _fusorEmberCliConfigEnvironment, _fusorEmberCliMirageConfig, _emberCliMirageServer) {
  exports['default'] = {
    name: 'ember-cli-mirage',
    initialize: function initialize(application) {
      if (arguments.length > 1) {
        // Ember < 2.1
        var container = arguments[0],
            application = arguments[1];
      }
      var environment = _fusorEmberCliConfigEnvironment['default'].environment;

      if (_shouldUseMirage(environment, _fusorEmberCliConfigEnvironment['default']['ember-cli-mirage'])) {
        var modules = (0, _emberCliMirageUtilsReadModules['default'])(_fusorEmberCliConfigEnvironment['default'].modulePrefix);
        var options = _.assign(modules, { environment: environment, baseConfig: _fusorEmberCliMirageConfig['default'], testConfig: _fusorEmberCliMirageConfig.testConfig });

        new _emberCliMirageServer['default'](options);
      }
    }
  };

  function _shouldUseMirage(env, addonConfig) {
    var userDeclaredEnabled = typeof addonConfig.enabled !== 'undefined';
    var defaultEnabled = _defaultEnabled(env, addonConfig);

    return userDeclaredEnabled ? addonConfig.enabled : defaultEnabled;
  }

  /*
    Returns a boolean specifying the default behavior for whether
    to initialize Mirage.
  */
  function _defaultEnabled(env, addonConfig) {
    var usingInDev = env === 'development' && !addonConfig.usingProxy;
    var usingInTest = env === 'test';

    return usingInDev || usingInTest;
  }
});
define('fusor-ember-cli/initializers/ember-devtools', ['exports', 'fusor-ember-cli/services/ember-devtools', 'fusor-ember-cli/config/environment'], function (exports, _fusorEmberCliServicesEmberDevtools, _fusorEmberCliConfigEnvironment) {
  exports['default'] = {
    name: 'ember-devtools',
    after: DS !== undefined ? 'store' : null,
    initialize: function initialize(container, app) {
      Ember.deprecate("ember-devtools: 'config.APP.emberDevTools' is deprecated. Please configure ember-devtools using config['ember-devtools'].", !app.emberDevTools, { url: 'https://github.com/aexmachina/ember-devtools' });

      var devToolsConfig = app.emberDevTools || _fusorEmberCliConfigEnvironment['default']['ember-devtools'] || {};

      app.devTools = _fusorEmberCliServicesEmberDevtools['default'].create({
        container: container
      });
      container.register('service:devtools', app.devTools);
      if (devToolsConfig.global === true) {
        app.devTools.globalize();
      } else if (devToolsConfig.global) {
        window[devToolsConfig.global] = app.devTools;
      }
    }
  };
});
/* global DS */
define('fusor-ember-cli/initializers/ember-moment', ['exports', 'ember-moment/helpers/moment', 'ember-moment/helpers/ago', 'ember-moment/helpers/duration', 'ember'], function (exports, _emberMomentHelpersMoment, _emberMomentHelpersAgo, _emberMomentHelpersDuration, _ember) {
  var initialize = function initialize() /* container, app */{
    var registerHelper;

    if (_ember['default'].HTMLBars) {
      registerHelper = function (helperName, fn) {
        _ember['default'].HTMLBars._registerHelper(helperName, _ember['default'].HTMLBars.makeBoundHelper(fn));
      };
    } else {
      registerHelper = _ember['default'].Handlebars.helper;
    };

    registerHelper('moment', _emberMomentHelpersMoment['default']);
    registerHelper('ago', _emberMomentHelpersAgo['default']);
    registerHelper('duration', _emberMomentHelpersDuration['default']);
  };

  exports.initialize = initialize;
  exports['default'] = {
    name: 'ember-moment',

    initialize: initialize
  };
});
define('fusor-ember-cli/initializers/event-bus', ['exports', 'ember'], function (exports, _ember) {
  exports.initialize = initialize;

  function initialize(registry, application) {
    // NOTE: This interface can be confusing; be sure you are
    // operating on the object you expect to be. Newer versions of
    // Ember have deprecated the first param, and newer versions of ember-cli
    // will generate boilerplate in accordance. For ember v1.13.10,
    // we continue to be passed the registry and application seperately.
    //
    // Ref:
    // https://github.com/ember-cli/ember-cli/commit/00e25f7de8075cfa01bfdb582b16a2f5611b5912

    var factoryName = 'event-bus:main';
    var injectedProp = 'eventBus';
    application.register('event-bus:main', _ember['default'].Object.extend(_ember['default'].Evented));
    ['adapter', 'component', 'controller', 'route'].map(function (target) {
      application.inject(target, injectedProp, factoryName);
    });
  }

  exports['default'] = {
    name: 'event-bus',
    initialize: initialize
  };
});
define('fusor-ember-cli/initializers/export-application-global', ['exports', 'ember', 'fusor-ember-cli/config/environment'], function (exports, _ember, _fusorEmberCliConfigEnvironment) {
  exports.initialize = initialize;

  function initialize() {
    var application = arguments[1] || arguments[0];
    if (_fusorEmberCliConfigEnvironment['default'].exportApplicationGlobal !== false) {
      var value = _fusorEmberCliConfigEnvironment['default'].exportApplicationGlobal;
      var globalName;

      if (typeof value === 'string') {
        globalName = value;
      } else {
        globalName = _ember['default'].String.classify(_fusorEmberCliConfigEnvironment['default'].modulePrefix);
      }

      if (!window[globalName]) {
        window[globalName] = application;

        application.reopen({
          willDestroy: function willDestroy() {
            this._super.apply(this, arguments);
            delete window[globalName];
          }
        });
      }
    }
  }

  exports['default'] = {
    name: 'export-application-global',

    initialize: initialize
  };
});
define('fusor-ember-cli/initializers/truth-helpers', ['exports', 'ember', 'ember-truth-helpers/utils/register-helper', 'ember-truth-helpers/helpers/and', 'ember-truth-helpers/helpers/or', 'ember-truth-helpers/helpers/equal', 'ember-truth-helpers/helpers/not', 'ember-truth-helpers/helpers/is-array', 'ember-truth-helpers/helpers/not-equal', 'ember-truth-helpers/helpers/gt', 'ember-truth-helpers/helpers/gte', 'ember-truth-helpers/helpers/lt', 'ember-truth-helpers/helpers/lte'], function (exports, _ember, _emberTruthHelpersUtilsRegisterHelper, _emberTruthHelpersHelpersAnd, _emberTruthHelpersHelpersOr, _emberTruthHelpersHelpersEqual, _emberTruthHelpersHelpersNot, _emberTruthHelpersHelpersIsArray, _emberTruthHelpersHelpersNotEqual, _emberTruthHelpersHelpersGt, _emberTruthHelpersHelpersGte, _emberTruthHelpersHelpersLt, _emberTruthHelpersHelpersLte) {
  exports.initialize = initialize;

  function initialize() /* container, application */{

    // Do not register helpers from Ember 1.13 onwards, starting from 1.13 they
    // will be auto-discovered.
    if (_ember['default'].Helper) {
      return;
    }

    (0, _emberTruthHelpersUtilsRegisterHelper.registerHelper)('and', _emberTruthHelpersHelpersAnd.andHelper);
    (0, _emberTruthHelpersUtilsRegisterHelper.registerHelper)('or', _emberTruthHelpersHelpersOr.orHelper);
    (0, _emberTruthHelpersUtilsRegisterHelper.registerHelper)('eq', _emberTruthHelpersHelpersEqual.equalHelper);
    (0, _emberTruthHelpersUtilsRegisterHelper.registerHelper)('not', _emberTruthHelpersHelpersNot.notHelper);
    (0, _emberTruthHelpersUtilsRegisterHelper.registerHelper)('is-array', _emberTruthHelpersHelpersIsArray.isArrayHelper);
    (0, _emberTruthHelpersUtilsRegisterHelper.registerHelper)('not-eq', _emberTruthHelpersHelpersNotEqual.notEqualHelper);
    (0, _emberTruthHelpersUtilsRegisterHelper.registerHelper)('gt', _emberTruthHelpersHelpersGt.gtHelper);
    (0, _emberTruthHelpersUtilsRegisterHelper.registerHelper)('gte', _emberTruthHelpersHelpersGte.gteHelper);
    (0, _emberTruthHelpersUtilsRegisterHelper.registerHelper)('lt', _emberTruthHelpersHelpersLt.ltHelper);
    (0, _emberTruthHelpersUtilsRegisterHelper.registerHelper)('lte', _emberTruthHelpersHelpersLte.lteHelper);
  }

  exports['default'] = {
    name: 'truth-helpers',
    initialize: initialize
  };
});
define('fusor-ember-cli/mirage/config', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = function () {

    // route to prevent js console error by ember-cli-blanket
    this.post('/write-blanket-coverage', function (db, request) {
      return {};
    });

    this.get('/fusor/api/v21/deployments', function (db, request) {
      return { deployments: db.deployments,
        meta: {
          total: 107,
          total_pages: 5,
          page: 1
        }
      };
    });

    this.post('/fusor/api/v21/deployments');
    this.get('/fusor/api/v21/deployments/:id');
    this.put('/fusor/api/v21/deployments/:id');
    this.del('/fusor/api/v21/deployments/:id');
    this.get('/fusor/api/v21/deployments/:id/openshift_disk_space', function (db, request) {
      return { openshift_disk_space: 1024 * 250 };
    });
    this.get('/fusor/api/v21/deployments/:id/check_mount_point', function (db, request) {
      return { mounted: true };
    });

    this.get('/fusor/api/v21/openstack_deployments');
    this.post('/fusor/api/v21/openstack_deployments');
    this.get('/fusor/api/v21/openstack_deployments/:id');
    this.put('/fusor/api/v21/openstack_deployments/:id');
    this.del('/fusor/api/v21/openstack_deployments/:id');

    this.get('/api/v21/organizations');
    this.get('/api/v21/organizations/:id');

    this.get('/api/v21/lifecycle_environments');
    this.get('/api/v21/lifecycle_environments/:id');
    this.post('/api/v21/lifecycle_environments', function (db, request) {
      var attrs = JSON.parse(request.requestBody).lifecycle_environment;
      attrs['prior_id'] = 1;
      var record = db.lifecycle_environments.insert(attrs);
      console.log(record);
      return {
        lifecycle_environment: record
      };
    });

    this.get('/api/v21/discovered_hosts');
    this.get('/api/v21/discovered_hosts/:id');
    this.put('/api/v21/discovered_hosts/:id/rename', function (db, request) {
      var id = request.params.id;
      return db.discovered_hosts.find(id);
    });

    this.get('/katello/api/v2/organizations/:id', function (db, request) {
      var id = request.params.id;
      return db.katello_organizations.find(id);
    });

    this.get('/katello/api/v2/organizations/:id/subscriptions', function (db, request) {
      return { "results": [] };
    });

    this.get('/customer_portal/owners/:owner_key/consumers', function (db, request) {
      return db.management_applications;
    });

    this.get('/customer_portal/consumers/:uuid/entitlements', function (db, request) {
      return db.entitlements;
    });

    this.get('/customer_portal/users/:username/owners', function (db, request) {
      return db.owners;
    });

    this.get('/customer_portal/pools', function (db, request) {
      return db.pools;
    });

    this.post('/customer_portal/login', function (db, request) {
      return {};
    });

    this.get('/fusor/api/v21/subscriptions', function (db, request) {
      var id = request.params.deployment_id;
      console.log(request.params);
      return db.subscriptions;
    });

    this.get('/api/v21/hostgroups');
    this.get('/api/v21/hostgroups/:id');

    this.get('/api/v21/domains');
    this.get('/api/v21/domains/:id');

    this.get('fusor/api/v21/deployments/:id/validate', function (db, request) {
      var id = request.params.id;
      return { validation: { deployment_id: id, errors: [], warnings: [] } };
    });

    this.put('fusor/api/v21/deployments/:id/deploy', function (db, request) {
      return db.foreman_tasks.find('db25a76f-e344-48ba-ac77-f29303586dbe');
    });

    this.get('/api/v21/foreman_tasks');
    this.get('/api/v21/foreman_tasks/:id', function (db, request) {
      var id = request.params.id;
      return db.foreman_tasks.find(id);
    });

    this.post('/fusor/api/openstack/deployments/:id/underclouds', function (db, request) {
      return { 'undercloud': 2 };
    });

    this.get('/fusor/api/openstack/deployments/:id/underclouds/:id', function (db, request) {
      return {
        'deployed': true,
        'failed': false
      };
    });
    this.get('/fusor/api/openstack/deployments/:id/stacks', function (db, request) {
      return { 'stacks': [] };
    });

    this.get('/fusor/api/openstack/deployments/:id/nodes', function (db, request) {
      return { nodes: db.nodes };
    });

    this.post('/fusor/api/openstack/deployments/:id/nodes', function (db, request) {
      var id = request.params.id;
      return db.nodes.find(id);
    });

    this.get('/fusor/api/openstack/deployments/:id/node_ports', function (db, request) {
      return { ports: db.node_ports };
    });

    this.post('/fusor/api/openstack/deployments/:id/node_mac_addresses', function (db, request) {
      return { nodes: db.node_mac_addresses };
    });

    this.get('/fusor/api/openstack/deployments/:id/flavors', function (db, request) {
      // NOTE root node is flavor and not flavors
      return { flavor: db.flavors };
    });

    this.get('/fusor/api/openstack/deployments/:id/images', function (db, request) {
      return { images: db.images };
    });

    this.get('/fusor/api/openstack/deployments/:id/deployment_plans/overcloud', function (db, request) {
      return { deployment_plan: db.deployment_plan[0] };
    });

    this.put('/fusor/api/openstack/deployments/:id/deployment_plans/overcloud/:update_action', function (db, request) {
      // return deployment plan even though UI should update not based on response
      return { deployment_plan: db.deployment_plan[0] };
    });

    this.post('/fusor/api/v21/openstack_deployments/:id/sync_openstack');

    this.get('/fusor/api/v21/subscriptions');
    this.post('/fusor/api/v21/subscriptions');

    this.post('/customer_portal/consumers/:uuid/entitlements');

    this.get('/api/v2/settings', function (db, request) {
      return { results: db.settings };
    });

    this.get('/fusor/api/v21/unlogged/deployments/:id/log', function (db, request) {
      return {
        "fusor_log": { path: '' },
        "foreman_log": { path: '' },
        "foreman_proxy_log": { path: '' },
        "candlepin_log": { path: '' },
        "messages_log": { path: '' }
      };
    });

    /*
      Route shorthand cheatsheet
    */
    /*
      GET shorthands
       // Collections
      this.get('/contacts');
      this.get('/contacts', 'users');
      this.get('/contacts', ['contacts', 'addresses']);
       // Single objects
      this.get('/contacts/:id');
      this.get('/contacts/:id', 'user');
      this.get('/contacts/:id', ['contact', 'addresses']);
    */

    /*
      POST shorthands
       this.post('/contacts');
      this.post('/contacts', 'user'); // specify the type of resource to be created
    */

    /*
      PUT shorthands
       this.put('/contacts/:id');
      this.put('/contacts/:id', 'user'); // specify the type of resource to be updated
    */

    /*
      DELETE shorthands
       this.del('/contacts/:id');
      this.del('/contacts/:id', 'user'); // specify the type of resource to be deleted
       // Single object + related resources. Make sure parent resource is first.
      this.del('/contacts/:id', ['contact', 'addresses']);
    */

    /*
      Function fallback. Manipulate data in the db via
         - db.{collection}
        - db.{collection}.find(id)
        - db.{collection}.where(query)
        - db.{collection}.update(target, attrs)
        - db.{collection}.remove(target)
       // Example: return a single object with related models
      this.get('/contacts/:id', function(db, request) {
        var contactId = +request.params.id;
         return {
          contact: db.contacts.find(contactId),
          addresses: db.addresses.where({contact_id: contactId})
        };
      });
     */
  };

  /*
  You can optionally export a config that is only loaded during tests
  export function testConfig() {
  
  }
  */
});
define('fusor-ember-cli/mirage/factories/contact', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = _emberCliMirage['default'].Factory.extend({
    // name: 'Pete',                         // strings
    // age: 20,                              // numbers
    // tall: true,                           // booleans

    // email: function(i) {                  // and functions
    //   return 'person' + i + '@test.com';
    // },

    // firstName: faker.name.firstName,       // using faker
    // lastName: faker.name.firstName,
    // zipCode: faker.address.zipCode
  });
});
/*
  This is an example factory definition.

  Create more files in this directory to define additional factories.
*/
/*, {faker} */
define('fusor-ember-cli/mirage/factories/deployment', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = _emberCliMirage['default'].Factory.extend({
    name: function name(i) {
      // and functions
      return 'deployment_number_' + i;
    },
    is_disconnected: false,
    rhev_is_self_hosted: false,
    rhev_engine_admin_password: '12345678',
    rhev_data_center_name: 'Default',
    rhev_cluster_name: 'Default',
    rhev_storage_name: 'my_storage',
    rhev_storage_type: 'NFS',
    rhev_storage_address: '10.2.132.4',
    rhev_root_password: "12345678",
    // rhev_cpu_type: null,
    rhev_share_path: '/share/path',
    rhev_export_domain_name: 'my_export',
    rhev_export_domain_address: '10.22.17.4',
    rhev_export_domain_path: '/export/path',
    cfme_install_loc: "RHEV",
    cfme_root_password: "12345678",
    cfme_admin_password: "12345678",
    cfme_db_password: "12345678",
    host_naming_scheme: "Freeform",
    custom_preprend_name: null,
    enable_access_insights: true,
    openstack_undercloud_password: "dummy password",
    upstream_consumer_uuid: null,
    upstream_consumer_name: null,
    openshift_storage_host: "1.2.3.4",
    openshift_storage_type: "NFS",
    openshift_export_path: "/share/openshift/path",
    openshift_user_password: 'openshiftPassword',
    openshift_subdomain_name: 'app123',
    cloudforms_vcpu: 4,
    cloudforms_ram: 6,
    cloudforms_vm_disk_size: 40,
    cloudforms_db_disk_size: 40

  });

  //       "cdn_url": "10.35.3.63",
  //       "manifest_file": "/usr/share/foreman/tmp/import_10c9a9f7cc20541de373.zip",
  //       "created_at": "2015-11-30T09:31:03Z",
  //       "updated_at": "2015-12-03T13:18:19Z",
  //       "organization_id": 1,
  //       "lifecycle_environment_id": null,
  //       "discovered_host_id": 2,
  //       "discovered_host_ids": [
  //           4
  //       ],
  //       "subscription_ids": [
  //           4,
  //           3
  //       ],
  //       "introspection_task_ids": []

  // rhev_root_password: DS.attr('string'),
  // cfme_root_password: DS.attr('string'),
  // cfme_admin_password: DS.attr('string'),

  // foreman_task_uuid: DS.attr('string'),
  // upstream_consumer_uuid: DS.attr('string'),
  // upstream_consumer_name: DS.attr('string'),

  // rhev_export_domain_name: DS.attr('string'),
  // rhev_export_domain_address: DS.attr('string'),
  // rhev_export_domain_path: DS.attr('string'),

  // rhev_local_storage_path: DS.attr('string'),

  // host_naming_scheme: DS.attr('string'),
  // custom_preprend_name: DS.attr('string'),
  // enable_access_insights: DS.attr('boolean'),
  // cfme_address: DS.attr('string'),

  // cdn_url: DS.attr('string'),
  // manifest_file: DS.attr('string'),

  // created_at: DS.attr('date'),
  // updated_at: DS.attr('date'),

  // // has one Engine - discovered_host is an alias for rhev_engine_host_id
  // discovered_host: DS.belongsTo('discovered-host', {async: true}),
  // rhev_engine_host_id: DS.attr('number'),

  // // has many Hypervisors
  // discovered_hosts: DS.hasMany('discovered-host', {async: true}),

  // // has many Subscriptions
  // subscriptions: DS.hasMany('subscription', {inverse: 'deployment', async: true}),
  // introspection_tasks: DS.hasMany('introspection-task', {async: true}),
});
/*
  This is an example factory definition.

  Create more files in this directory to define additional factories.
*/
/*, {faker} */
define('fusor-ember-cli/mirage/factories/discovered_host', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = _emberCliMirage['default'].Factory.extend({
    name: function name(i) {
      // and functions
      return 'mac' + i + '254000f6568';
    },
    type: 'Host::Discovered',
    ip: function ip(i) {
      // and functions
      return '192.168.152. ' + i;
    },
    mac: function mac(i) {
      // and functions
      return i + '2:54:00:0f:65:68';
    },
    cpus: 4,
    memory_human_size: "7.8 GB",
    disks_human_size: "10 GB",
    disk_count: 1,
    subnet_to_s: "default (192.168.152.0/24)",
    is_virtual: true,
    is_managed: false,
    is_discovered: true

  });
});
/*
  This is an example factory definition.

  Create more files in this directory to define additional factories.
*/
define('fusor-ember-cli/mirage/factories/domain', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = _emberCliMirage['default'].Factory.extend({});
});
/*
  This is an example factory definition.

  Create more files in this directory to define additional factories.
*/
define('fusor-ember-cli/mirage/factories/hostgroup', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = _emberCliMirage['default'].Factory.extend({});
});
/*
  This is an example factory definition.

  Create more files in this directory to define additional factories.
*/
define('fusor-ember-cli/mirage/factories/lifecycle_environment', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = _emberCliMirage['default'].Factory.extend({
    name: function name(i) {
      return 'env ' + i;
    }
  });
});
/*
  This is an example factory definition.

  Create more files in this directory to define additional factories.
*/
define('fusor-ember-cli/mirage/factories/openstack_deployment', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = _emberCliMirage['default'].Factory.extend({
    undercloud_admin_password: 'undercloudAdminPassword',
    undercloud_ip_address: '192.168.234.254',
    undercloud_ssh_username: 'root',
    undercloud_ssh_password: 'vagrant',
    overcloud_address: null,
    overcloud_ext_net_interface: 'nic2',
    overcloud_private_net: '192.168.254.0/24',
    overcloud_float_net: '192.168.253.0/24',
    overcloud_float_gateway: '192.168.253.1',
    overcloud_password: 'overcloudAdminPassword',
    overcloud_libvirt_type: 'kvm',
    overcloud_node_count: 2,
    overcloud_compute_flavor: 'Flavor-16-x86_64-16384-99',
    overcloud_compute_count: 1,
    overcloud_controller_flavor: 'Flavor-16-x86_64-16384-99',
    overcloud_controller_count: 1,
    overcloud_ceph_storage_flavor: 'Flavor-16-x86_64-16384-99',
    overcloud_ceph_storage_count: 0,
    overcloud_block_storage_flavor: 'Flavor-16-x86_64-16384-99',
    overcloud_block_storage_count: 0,
    overcloud_object_storage_flavor: 'Flavor-16-x86_64-16384-99',
    overcloud_object_storage_count: 0,
    overcloud_hostname: null,
    undercloud_hostname: null
  });
});
/*
  This is an example factory definition.

  Create more files in this directory to define additional factories.
*/
/*, {faker} */
define('fusor-ember-cli/mirage/factories/organization', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = _emberCliMirage['default'].Factory.extend({
    name: function name(i) {
      return 'org ' + i;
    }
  });
});
/*
  This is an example factory definition.

  Create more files in this directory to define additional factories.
*/
define("fusor-ember-cli/mirage/fixtures/deployment_plan", ["exports"], function (exports) {
  exports["default"] = [{
    "name": "overcloud",
    "parameters": {
      "AdminPassword": {
        "Default": "changeme",
        "Description": "The password for the keystone admin account, used for monitoring, querying neutron etc.",
        "Label": "AdminPassword",
        "NoEcho": "true",
        "Type": "String"
      },
      "AdminToken": {
        "Default": "CuVyGZqfwZdbTwUaX9euaPGaA",
        "Description": "The keystone auth secret.",
        "Label": "AdminToken",
        "NoEcho": "true",
        "Type": "String"
      },
      "BlockStorageCount": {
        "Default": 0,
        "Description": "",
        "Label": "BlockStorageCount",
        "NoEcho": "false",
        "Type": "Number"
      },
      "BlockStorageExtraConfig": {
        "Default": {},
        "Description": "BlockStorage specific configuration to inject into the cluster. Same\nstructure as ExtraConfig.\n",
        "Label": "BlockStorageExtraConfig",
        "NoEcho": "false",
        "Type": "Json"
      },
      "BlockStorageHostnameFormat": {
        "Default": "%stackname%-blockstorage-%index%",
        "Description": "Format for BlockStorage node hostnames",
        "Label": "BlockStorageHostnameFormat",
        "NoEcho": "false",
        "Type": "String"
      },
      "BlockStorageImage": {
        "Default": "overcloud-full",
        "Description": "",
        "Label": "BlockStorageImage",
        "NoEcho": "false",
        "Type": "String"
      },
      "BlockStorageRemovalPolicies": {
        "Default": [],
        "Description": "List of resources to be removed from BlockStorageResourceGroup when doing an update which requires removal of specific resources.\n",
        "Label": "BlockStorageRemovalPolicies",
        "NoEcho": "false",
        "Type": "Json"
      },
      "BlockStorageSchedulerHints": {
        "Default": {},
        "Description": "Optional scheduler hints to pass to nova",
        "Label": "BlockStorageSchedulerHints",
        "NoEcho": "false",
        "Type": "Json"
      },
      "CeilometerBackend": {
        "Default": "mongodb",
        "Description": "The ceilometer backend type.",
        "Label": "CeilometerBackend",
        "NoEcho": "false",
        "Type": "String"
      },
      "CeilometerComputeAgent": {
        "AllowedValues": ["", "Present"],
        "Default": "",
        "Description": "Indicates whether the Compute agent is present and expects nova-compute to be configured accordingly",
        "Label": "CeilometerComputeAgent",
        "NoEcho": "false",
        "Type": "String"
      },
      "CeilometerMeteringSecret": {
        "Default": "Hvkf9Rzz6tHF6UVsErPjCE3uM",
        "Description": "Secret shared by the ceilometer services.",
        "Label": "CeilometerMeteringSecret",
        "NoEcho": "true",
        "Type": "String"
      },
      "CeilometerPassword": {
        "Default": "2zgV6yAE2d3JTskTnBUsvzDf4",
        "Description": "The password for the ceilometer service account.",
        "Label": "CeilometerPassword",
        "NoEcho": "true",
        "Type": "String"
      },
      "CephAdminKey": {
        "Default": "",
        "Description": "The Ceph admin client key. Can be created with ceph-authtool --gen-print-key.",
        "Label": "CephAdminKey",
        "NoEcho": "true",
        "Type": "String"
      },
      "CephClientKey": {
        "Default": "",
        "Description": "The Ceph client key. Can be created with ceph-authtool --gen-print-key. Currently only used for external Ceph deployments to create the openstack user keyring.",
        "Label": "CephClientKey",
        "NoEcho": "true",
        "Type": "String"
      },
      "CephClusterFSID": {
        "Default": "",
        "Description": "The Ceph cluster FSID. Must be a UUID.",
        "Label": "CephClusterFSID",
        "NoEcho": "false",
        "Type": "String"
      },
      "CephExternalMonHost": {
        "Default": "",
        "Description": "List of externally managed Ceph Mon Host IPs. Only used for external Ceph deployments.",
        "Label": "CephExternalMonHost",
        "NoEcho": "false",
        "Type": "String"
      },
      "CephMonKey": {
        "Default": "",
        "Description": "The Ceph monitors key. Can be created with ceph-authtool --gen-print-key.",
        "Label": "CephMonKey",
        "NoEcho": "true",
        "Type": "String"
      },
      "CephStorageCount": {
        "Default": 0,
        "Description": "",
        "Label": "CephStorageCount",
        "NoEcho": "false",
        "Type": "Number"
      },
      "CephStorageExtraConfig": {
        "Default": {},
        "Description": "CephStorage specific configuration to inject into the cluster. Same\nstructure as ExtraConfig.\n",
        "Label": "CephStorageExtraConfig",
        "NoEcho": "false",
        "Type": "Json"
      },
      "CephStorageHostnameFormat": {
        "Default": "%stackname%-cephstorage-%index%",
        "Description": "Format for CephStorage node hostnames",
        "Label": "CephStorageHostnameFormat",
        "NoEcho": "false",
        "Type": "String"
      },
      "CephStorageImage": {
        "Default": "overcloud-full",
        "Description": "",
        "Label": "CephStorageImage",
        "NoEcho": "false",
        "Type": "String"
      },
      "CephStorageRemovalPolicies": {
        "Default": [],
        "Description": "List of resources to be removed from CephStorageResourceGroup when doing an update which requires removal of specific resources.\n",
        "Label": "CephStorageRemovalPolicies",
        "NoEcho": "false",
        "Type": "Json"
      },
      "CephStorageSchedulerHints": {
        "Default": {},
        "Description": "Optional scheduler hints to pass to nova",
        "Label": "CephStorageSchedulerHints",
        "NoEcho": "false",
        "Type": "Json"
      },
      "CinderEnableIscsiBackend": {
        "Default": true,
        "Description": "Whether to enable or not the Iscsi backend for Cinder",
        "Label": "CinderEnableIscsiBackend",
        "NoEcho": "false",
        "Type": "Boolean"
      },
      "CinderEnableNfsBackend": {
        "Default": false,
        "Description": "Whether to enable or not the NFS backend for Cinder",
        "Label": "CinderEnableNfsBackend",
        "NoEcho": "false",
        "Type": "Boolean"
      },
      "CinderEnableRbdBackend": {
        "Default": false,
        "Description": "Whether to enable or not the Rbd backend for Cinder",
        "Label": "CinderEnableRbdBackend",
        "NoEcho": "false",
        "Type": "Boolean"
      },
      "CinderISCSIHelper": {
        "Default": "lioadm",
        "Description": "The iSCSI helper to use with cinder.",
        "Label": "CinderISCSIHelper",
        "NoEcho": "false",
        "Type": "String"
      },
      "CinderLVMLoopDeviceSize": {
        "Default": 10280,
        "Description": "The size of the loopback file used by the cinder LVM driver.",
        "Label": "CinderLVMLoopDeviceSize",
        "NoEcho": "false",
        "Type": "Number"
      },
      "CinderNfsMountOptions": {
        "Default": "",
        "Description": "Mount options for NFS mounts used by Cinder NFS backend. Effective when CinderEnableNfsBackend is true.\n",
        "Label": "CinderNfsMountOptions",
        "NoEcho": "false",
        "Type": "String"
      },
      "CinderNfsServers": {
        "Default": "",
        "Description": "NFS servers used by Cinder NFS backend. Effective when CinderEnableNfsBackend is true.\n",
        "Label": "CinderNfsServers",
        "NoEcho": "false",
        "Type": "CommaDelimitedList"
      },
      "CinderPassword": {
        "Default": "Ma3kfBHqB8FDb2hgJa3sPUAzh",
        "Description": "The password for the cinder service account, used by cinder-api.",
        "Label": "CinderPassword",
        "NoEcho": "true",
        "Type": "String"
      },
      "CloudDomain": {
        "Default": "localdomain",
        "Description": "The DNS domain used for the hosts. This should match the dhcp_domain configured in the Undercloud neutron. Defaults to localdomain.\n",
        "Label": "CloudDomain",
        "NoEcho": "false",
        "Type": "String"
      },
      "CloudName": {
        "Default": "overcloud",
        "Description": "The DNS name of this cloud. E.g. ci-overcloud.tripleo.org",
        "Label": "CloudName",
        "NoEcho": "false",
        "Type": "String"
      },
      "ComputeCount": { "Default": 1, "Description": "", "Label": "ComputeCount", "NoEcho": "false", "Type": "Number" },
      "ComputeHostnameFormat": {
        "Default": "%stackname%-compute-%index%",
        "Description": "Format for Compute node hostnames",
        "Label": "ComputeHostnameFormat",
        "NoEcho": "false",
        "Type": "String"
      },
      "ComputeRemovalPolicies": {
        "Default": [],
        "Description": "List of resources to be removed from ComputeResourceGroup when doing an update which requires removal of specific resources.\n",
        "Label": "ComputeRemovalPolicies",
        "NoEcho": "false",
        "Type": "Json"
      },
      "ControlFixedIPs": {
        "Default": [],
        "Description": "Should be used for arbitrary ips.",
        "Label": "ControlFixedIPs",
        "NoEcho": "false",
        "Type": "Json"
      },
      "ControlVirtualInterface": {
        "Default": "br-ex",
        "Description": "Interface where virtual ip will be assigned.",
        "Label": "ControlVirtualInterface",
        "NoEcho": "false",
        "Type": "String"
      },
      "ControllerCount": {
        "Default": 1,
        "Description": "",
        "Label": "ControllerCount",
        "MinValue": 1,
        "NoEcho": "false",
        "Type": "Number"
      },
      "ControllerEnableCephStorage": {
        "Default": false,
        "Description": "Whether to deploy Ceph Storage (OSD) on the Controller",
        "Label": "ControllerEnableCephStorage",
        "NoEcho": "false",
        "Type": "Boolean"
      },
      "ControllerEnableSwiftStorage": {
        "Default": true,
        "Description": "Whether to enable Swift Storage on the Controller",
        "Label": "ControllerEnableSwiftStorage",
        "NoEcho": "false",
        "Type": "Boolean"
      },
      "ControllerHostnameFormat": {
        "Default": "%stackname%-controller-%index%",
        "Description": "Format for Controller node hostnames",
        "Label": "ControllerHostnameFormat",
        "NoEcho": "false",
        "Type": "String"
      },
      "ControllerRemovalPolicies": {
        "Default": [],
        "Description": "List of resources to be removed from ControllerResourceGroup when doing an update which requires removal of specific resources.\n",
        "Label": "ControllerRemovalPolicies",
        "NoEcho": "false",
        "Type": "Json"
      },
      "ControllerSchedulerHints": {
        "Default": {},
        "Description": "Optional scheduler hints to pass to nova",
        "Label": "ControllerSchedulerHints",
        "NoEcho": "false",
        "Type": "Json"
      },
      "CorosyncIPv6": {
        "Default": false,
        "Description": "Enable IPv6 in Corosync",
        "Label": "CorosyncIPv6",
        "NoEcho": "false",
        "Type": "Boolean"
      },
      "Debug": {
        "Default": "",
        "Description": "Set to True to enable debugging on all services.",
        "Label": "Debug",
        "NoEcho": "false",
        "Type": "String"
      },
      "DeployIdentifier": {
        "Default": "",
        "Description": "Setting this to a unique value will re-run any deployment tasks which perform configuration on a Heat stack-update.\n",
        "Label": "DeployIdentifier",
        "NoEcho": "false",
        "Type": "String"
      },
      "EnableFencing": {
        "Default": false,
        "Description": "Whether to enable fencing in Pacemaker or not.",
        "Label": "EnableFencing",
        "NoEcho": "false",
        "Type": "Boolean"
      },
      "EnableGalera": {
        "Default": true,
        "Description": "Whether to use Galera instead of regular MariaDB.",
        "Label": "EnableGalera",
        "NoEcho": "false",
        "Type": "Boolean"
      },
      "ExtraConfig": {
        "Default": {},
        "Description": "Additional configuration to inject into the cluster. The format required\nmay be implementation specific, e.g puppet hieradata.  Any role specific\nExtraConfig, e.g controllerExtraConfig takes precedence over ExtraConfig.\n",
        "Label": "ExtraConfig",
        "NoEcho": "false",
        "Type": "Json"
      },
      "FencingConfig": {
        "Default": {},
        "Description": "Pacemaker fencing configuration. The JSON should have\nthe following structure:\n  {\n    \"devices\": [\n      {\n        \"agent\": \"AGENT_NAME\",\n        \"host_mac\": \"HOST_MAC_ADDRESS\",\n        \"params\": {\"PARAM_NAME\": \"PARAM_VALUE\"}\n      }\n    ]\n  }\nFor instance:\n  {\n    \"devices\": [\n      {\n        \"agent\": \"fence_xvm\",\n        \"host_mac\": \"52:54:00:aa:bb:cc\",\n        \"params\": {\n          \"multicast_address\": \"225.0.0.12\",\n          \"port\": \"baremetal_0\",\n          \"manage_fw\": true,\n          \"manage_key_file\": true,\n          \"key_file\": \"/etc/fence_xvm.key\",\n          \"key_file_password\": \"abcdef\"\n        }\n      }\n    ]\n  }\n",
        "Label": "FencingConfig",
        "NoEcho": "false",
        "Type": "Json"
      },
      "GlanceBackend": {
        "AllowedValues": ["swift", "file", "rbd"],
        "Default": "swift",
        "Description": "The short name of the Glance backend to use. Should be one of swift, rbd or file",
        "Label": "GlanceBackend",
        "NoEcho": "false",
        "Type": "String"
      },
      "GlanceLogFile": {
        "Default": "",
        "Description": "The filepath of the file to use for logging messages from Glance.",
        "Label": "GlanceLogFile",
        "NoEcho": "false",
        "Type": "String"
      },
      "GlanceNotifierStrategy": {
        "Default": "noop",
        "Description": "Strategy to use for Glance notification queue",
        "Label": "GlanceNotifierStrategy",
        "NoEcho": "false",
        "Type": "String"
      },
      "GlancePassword": {
        "Default": "EBNnAsWxuzAHfqG8trjjMDsCu",
        "Description": "The password for the glance service account, used by the glance services.",
        "Label": "GlancePassword",
        "NoEcho": "true",
        "Type": "String"
      },
      "HAProxySyslogAddress": {
        "Default": "/dev/log",
        "Description": "Syslog address where HAproxy will send its log",
        "Label": "HAProxySyslogAddress",
        "NoEcho": "false",
        "Type": "String"
      },
      "HeatPassword": {
        "Default": "BEhHu9UhKd4ZnQwmtCUFsZrh4",
        "Description": "The password for the Heat service account, used by the Heat services.",
        "Label": "HeatPassword",
        "NoEcho": "true",
        "Type": "String"
      },
      "HeatStackDomainAdminPassword": {
        "Default": "fpRbkRneNJVutk4QqK8xYR3Qm",
        "Description": "Password for heat_stack_domain_admin user.",
        "Label": "HeatStackDomainAdminPassword",
        "NoEcho": "true",
        "Type": "String"
      },
      "HorizonAllowedHosts": {
        "Default": "*",
        "Description": "A list of IP/Hostname allowed to connect to horizon",
        "Label": "HorizonAllowedHosts",
        "NoEcho": "false",
        "Type": "CommaDelimitedList"
      },
      "HypervisorNeutronPhysicalBridge": {
        "Default": "br-ex",
        "Description": "An OVS bridge to create on each hypervisor. This defaults to br-ex the same as the control plane nodes, as we have a uniform configuration of the openvswitch agent. Typically should not need to be changed.\n",
        "Label": "HypervisorNeutronPhysicalBridge",
        "NoEcho": "false",
        "Type": "String"
      },
      "HypervisorNeutronPublicInterface": {
        "Default": "nic1",
        "Description": "What interface to add to the HypervisorNeutronPhysicalBridge.",
        "Label": "HypervisorNeutronPublicInterface",
        "NoEcho": "false",
        "Type": "String"
      },
      "ImageUpdatePolicy": {
        "Default": "REBUILD_PRESERVE_EPHEMERAL",
        "Description": "What policy to use when reconstructing instances. REBUILD for rebuilds, REBUILD_PRESERVE_EPHEMERAL to preserve /mnt.",
        "Label": "ImageUpdatePolicy",
        "NoEcho": "false",
        "Type": "String"
      },
      "InstanceNameTemplate": {
        "Default": "instance-%08x",
        "Description": "Template string to be used to generate instance names",
        "Label": "InstanceNameTemplate",
        "NoEcho": "false",
        "Type": "String"
      },
      "InternalApiVirtualFixedIPs": {
        "Default": [],
        "Description": "Control the IP allocation for the InternalApiVirtualInterface port. E.g. [{'ip_address':'1.2.3.4'}]\n",
        "Label": "InternalApiVirtualFixedIPs",
        "NoEcho": "false",
        "Type": "Json"
      },
      "KeyName": {
        "CustomConstraint": "nova.keypair",
        "Default": "default",
        "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instances",
        "Label": "KeyName",
        "NoEcho": "false",
        "Type": "String"
      },
      "KeystoneCACertificate": {
        "Default": "",
        "Description": "Keystone self-signed certificate authority certificate.",
        "Label": "KeystoneCACertificate",
        "NoEcho": "false",
        "Type": "String"
      },
      "KeystoneNotificationDriver": {
        "Default": ["messaging"],
        "Description": "Comma-separated list of Oslo notification drivers used by Keystone",
        "Label": "KeystoneNotificationDriver",
        "NoEcho": "false",
        "Type": "CommaDelimitedList"
      },
      "KeystoneNotificationFormat": {
        "AllowedValues": ["basic", "cadf"],
        "Default": "basic",
        "Description": "The Keystone notification format",
        "Label": "KeystoneNotificationFormat",
        "NoEcho": "false",
        "Type": "String"
      },
      "KeystoneSSLCertificate": {
        "Default": "",
        "Description": "Keystone certificate for verifying token validity.",
        "Label": "KeystoneSSLCertificate",
        "NoEcho": "false",
        "Type": "String"
      },
      "KeystoneSSLCertificateKey": {
        "Default": "",
        "Description": "Keystone key for signing tokens.",
        "Label": "KeystoneSSLCertificateKey",
        "NoEcho": "true",
        "Type": "String"
      },
      "KeystoneSigningCertificate": {
        "Default": "",
        "Description": "Keystone certificate for verifying token validity.",
        "Label": "KeystoneSigningCertificate",
        "NoEcho": "false",
        "Type": "String"
      },
      "KeystoneSigningKey": {
        "Default": "",
        "Description": "Keystone key for signing tokens.",
        "Label": "KeystoneSigningKey",
        "NoEcho": "true",
        "Type": "String"
      },
      "ManageFirewall": {
        "Default": false,
        "Description": "Whether to manage IPtables rules.",
        "Label": "ManageFirewall",
        "NoEcho": "false",
        "Type": "Boolean"
      },
      "MemcachedIPv6": {
        "Default": false,
        "Description": "Enable IPv6 features in Memcached.",
        "Label": "MemcachedIPv6",
        "NoEcho": "false",
        "Type": "Boolean"
      },
      "MongoDbIPv6": {
        "Default": false,
        "Description": "Enable IPv6 if MongoDB VIP is IPv6",
        "Label": "MongoDbIPv6",
        "NoEcho": "false",
        "Type": "Boolean"
      },
      "MongoDbNoJournal": {
        "Default": false,
        "Description": "Should MongoDb journaling be disabled",
        "Label": "MongoDbNoJournal",
        "NoEcho": "false",
        "Type": "Boolean"
      },
      "MysqlInnodbBufferPoolSize": {
        "Default": 0,
        "Description": "Specifies the size of the buffer pool in megabytes. Setting to zero should be interpreted as \"no value\" and will defer to the lower level default.\n",
        "Label": "MysqlInnodbBufferPoolSize",
        "NoEcho": "false",
        "Type": "Number"
      },
      "MysqlMaxConnections": {
        "Default": 4096,
        "Description": "Configures MySQL max_connections config setting",
        "Label": "MysqlMaxConnections",
        "NoEcho": "false",
        "Type": "Number"
      },
      "NeutronAgentExtensions": {
        "Default": "qos",
        "Description": "Comma-separated list of extensions enabled for the Neutron agents.\n",
        "Label": "NeutronAgentExtensions",
        "NoEcho": "false",
        "Type": "CommaDelimitedList"
      },
      "NeutronAgentMode": {
        "Default": "dvr_snat",
        "Description": "Agent mode for the neutron-l3-agent on the controller hosts",
        "Label": "NeutronAgentMode",
        "NoEcho": "false",
        "Type": "String"
      },
      "NeutronAllowL3AgentFailover": {
        "Default": "False",
        "Description": "Allow automatic l3-agent failover",
        "Label": "NeutronAllowL3AgentFailover",
        "NoEcho": "false",
        "Type": "String"
      },
      "NeutronBridgeMappings": {
        "Default": "datacentre:br-ex",
        "Description": "The OVS logical->physical bridge mappings to use. See the Neutron documentation for details. Defaults to mapping br-ex - the external bridge on hosts - to a physical name 'datacentre' which can be used to create provider networks (and we use this for the default floating network) - if changing this either use different post-install network scripts or be sure to keep 'datacentre' as a mapping network name.\n",
        "Label": "NeutronBridgeMappings",
        "NoEcho": "false",
        "Type": "CommaDelimitedList"
      },
      "NeutronComputeAgentMode": {
        "Default": "dvr",
        "Description": "Agent mode for the neutron-l3-agent on the compute hosts",
        "Label": "NeutronComputeAgentMode",
        "NoEcho": "false",
        "Type": "String"
      },
      "NeutronControlPlaneID": {
        "Default": "ctlplane",
        "Description": "Neutron ID or name for ctlplane network.",
        "Label": "NeutronControlPlaneID",
        "NoEcho": "false",
        "Type": "String"
      },
      "NeutronCorePlugin": {
        "Default": "ml2",
        "Description": "The core plugin for Neutron. The value should be the entrypoint to be loaded\nfrom neutron.core_plugins namespace.\n",
        "Label": "NeutronCorePlugin",
        "NoEcho": "false",
        "Type": "String"
      },
      "NeutronDVR": {
        "Default": "False",
        "Description": "Whether to configure Neutron Distributed Virtual Routers",
        "Label": "NeutronDVR",
        "NoEcho": "false",
        "Type": "String"
      },
      "NeutronDhcpAgentsPerNetwork": {
        "Default": 1,
        "Description": "The number of neutron dhcp agents to schedule per network",
        "Label": "NeutronDhcpAgentsPerNetwork",
        "NoEcho": "false",
        "Type": "Number"
      },
      "NeutronDnsmasqOptions": {
        "Default": "dhcp-option-force=26,%MTU%",
        "Description": "Dnsmasq options for neutron-dhcp-agent. The default value here forces MTU to be set to the value of NeutronTenantMtu, which should be set to account for tunnel overhead.\n",
        "Label": "NeutronDnsmasqOptions",
        "NoEcho": "false",
        "Type": "String"
      },
      "NeutronEnableIsolatedMetadata": {
        "Default": "False",
        "Description": "If True, DHCP provide metadata route to VM.",
        "Label": "NeutronEnableIsolatedMetadata",
        "NoEcho": "false",
        "Type": "String"
      },
      "NeutronEnableL2Pop": {
        "Default": "False",
        "Description": "Enable/disable the L2 population feature in the Neutron agents.\n",
        "Label": "NeutronEnableL2Pop",
        "NoEcho": "false",
        "Type": "String"
      },
      "NeutronEnableTunnelling": {
        "Default": "True",
        "Description": "",
        "Label": "NeutronEnableTunnelling",
        "NoEcho": "false",
        "Type": "String"
      },
      "NeutronExternalNetworkBridge": {
        "Default": "br-ex",
        "Description": "Name of bridge used for external network traffic.",
        "Label": "NeutronExternalNetworkBridge",
        "NoEcho": "false",
        "Type": "String"
      },
      "NeutronFlatNetworks": {
        "Default": "datacentre",
        "Description": "If set, flat networks to configure in neutron plugins. Defaults to 'datacentre' to permit external network creation.\n",
        "Label": "NeutronFlatNetworks",
        "NoEcho": "false",
        "Type": "CommaDelimitedList"
      },
      "NeutronL3HA": {
        "Default": "False",
        "Description": "Whether to enable l3-agent HA",
        "Label": "NeutronL3HA",
        "NoEcho": "false",
        "Type": "String"
      },
      "NeutronMechanismDrivers": {
        "Default": "openvswitch",
        "Description": "The mechanism drivers for the Neutron tenant network.\n",
        "Label": "NeutronMechanismDrivers",
        "NoEcho": "false",
        "Type": "CommaDelimitedList"
      },
      "NeutronMetadataProxySharedSecret": {
        "Default": "A2kEkckqfAzxcdVEJtnWj4hGP",
        "Description": "Shared secret to prevent spoofing",
        "Label": "NeutronMetadataProxySharedSecret",
        "NoEcho": "true",
        "Type": "String"
      },
      "NeutronNetworkType": {
        "Default": "vxlan",
        "Description": "The tenant network type for Neutron.",
        "Label": "NeutronNetworkType",
        "NoEcho": "false",
        "Type": "CommaDelimitedList"
      },
      "NeutronNetworkVLANRanges": {
        "Default": "datacentre:1:1000",
        "Description": "The Neutron ML2 and OpenVSwitch vlan mapping range to support. See the Neutron documentation for permitted values. Defaults to permitting any VLAN on the 'datacentre' physical network (See NeutronBridgeMappings).\n",
        "Label": "NeutronNetworkVLANRanges",
        "NoEcho": "false",
        "Type": "CommaDelimitedList"
      },
      "NeutronPassword": {
        "Default": "9n3AfD2b9zfBrmmBHwHyc7TgV",
        "Description": "The password for the neutron service account, used by neutron agents.",
        "Label": "NeutronPassword",
        "NoEcho": "true",
        "Type": "String"
      },
      "NeutronPluginExtensions": {
        "Default": "qos,port_security",
        "Description": "Comma-separated list of extensions enabled for the Neutron plugin.\n",
        "Label": "NeutronPluginExtensions",
        "NoEcho": "false",
        "Type": "CommaDelimitedList"
      },
      "NeutronPublicInterface": {
        "Default": "nic2",
        "Description": "What interface to bridge onto br-ex for network nodes.",
        "Label": "NeutronPublicInterface",
        "NoEcho": "false",
        "Type": "String"
      },
      "NeutronPublicInterfaceDefaultRoute": {
        "Default": "",
        "Description": "A custom default route for the NeutronPublicInterface.",
        "Label": "NeutronPublicInterfaceDefaultRoute",
        "NoEcho": "false",
        "Type": "String"
      },
      "NeutronPublicInterfaceIP": {
        "Default": "",
        "Description": "A custom IP address to put onto the NeutronPublicInterface.",
        "Label": "NeutronPublicInterfaceIP",
        "NoEcho": "false",
        "Type": "String"
      },
      "NeutronPublicInterfaceRawDevice": {
        "Default": "",
        "Description": "If set, the public interface is a vlan with this device as the raw device.",
        "Label": "NeutronPublicInterfaceRawDevice",
        "NoEcho": "false",
        "Type": "String"
      },
      "NeutronPublicInterfaceTag": {
        "Default": "",
        "Description": "VLAN tag for creating a public VLAN. The tag will be used to create an access port on the exterior bridge for each control plane node, and that port will be given the IP address returned by neutron from the public network. Set CONTROLEXTRA=overcloud-vlan-port.yaml when compiling overcloud.yaml to include the deployment of VLAN ports to the control plane.\n",
        "Label": "NeutronPublicInterfaceTag",
        "NoEcho": "false",
        "Type": "String"
      },
      "NeutronServicePlugins": {
        "Default": "router,qos",
        "Description": "Comma-separated list of service plugin entrypoints to be loaded from the\nneutron.service_plugins namespace.\n",
        "Label": "NeutronServicePlugins",
        "NoEcho": "false",
        "Type": "CommaDelimitedList"
      },
      "NeutronTenantMtu": {
        "Default": 1400,
        "Description": "The default MTU for tenant networks. For VXLAN/GRE tunneling, this should be at least 50 bytes smaller than the MTU on the physical network. This value will be used to set the MTU on the virtual Ethernet device. This number is related to the value of NeutronDnsmasqOptions, since that will determine the MTU that is assigned to the VM host through DHCP.\n",
        "Label": "NeutronTenantMtu",
        "NoEcho": "false",
        "Type": "Number"
      },
      "NeutronTunnelIdRanges": {
        "Default": ["1:4094"],
        "Description": "Comma-separated list of <tun_min>:<tun_max> tuples enumerating ranges\nof GRE tunnel IDs that are available for tenant network allocation\n",
        "Label": "NeutronTunnelIdRanges",
        "NoEcho": "false",
        "Type": "CommaDelimitedList"
      },
      "NeutronTunnelTypes": {
        "Default": "vxlan",
        "Description": "The tunnel types for the Neutron tenant network.\n",
        "Label": "NeutronTunnelTypes",
        "NoEcho": "false",
        "Type": "CommaDelimitedList"
      },
      "NeutronTypeDrivers": {
        "Default": "vxlan,vlan,flat,gre",
        "Description": "Comma-separated list of network type driver entrypoints to be loaded.\n",
        "Label": "NeutronTypeDrivers",
        "NoEcho": "false",
        "Type": "CommaDelimitedList"
      },
      "NeutronVniRanges": {
        "Default": ["1:4094"],
        "Description": "Comma-separated list of <vni_min>:<vni_max> tuples enumerating ranges\nof VXLAN VNI IDs that are available for tenant network allocation\n",
        "Label": "NeutronVniRanges",
        "NoEcho": "false",
        "Type": "CommaDelimitedList"
      },
      "NovaComputeDriver": {
        "Default": "libvirt.LibvirtDriver",
        "Description": "",
        "Label": "NovaComputeDriver",
        "NoEcho": "false",
        "Type": "String"
      },
      "NovaComputeExtraConfig": {
        "Default": {},
        "Description": "NovaCompute specific configuration to inject into the cluster. Same\nstructure as ExtraConfig.\n",
        "Label": "NovaComputeExtraConfig",
        "NoEcho": "false",
        "Type": "Json"
      },
      "NovaComputeLibvirtType": {
        "Default": "kvm",
        "Description": "",
        "Label": "NovaComputeLibvirtType",
        "NoEcho": "false",
        "Type": "String"
      },
      "NovaComputeLibvirtVifDriver": {
        "Default": "",
        "Description": "Libvirt VIF driver configuration for the network",
        "Label": "NovaComputeLibvirtVifDriver",
        "NoEcho": "false",
        "Type": "String"
      },
      "NovaComputeSchedulerHints": {
        "Default": {},
        "Description": "Optional scheduler hints to pass to nova",
        "Label": "NovaComputeSchedulerHints",
        "NoEcho": "false",
        "Type": "Json"
      },
      "NovaEnableRbdBackend": {
        "Default": false,
        "Description": "Whether to enable or not the Rbd backend for Nova",
        "Label": "NovaEnableRbdBackend",
        "NoEcho": "false",
        "Type": "Boolean"
      },
      "NovaIPv6": {
        "Default": false,
        "Description": "Enable IPv6 features in Nova",
        "Label": "NovaIPv6",
        "NoEcho": "false",
        "Type": "Boolean"
      },
      "NovaImage": {
        "CustomConstraint": "glance.image",
        "Default": "overcloud-full",
        "Description": "",
        "Label": "NovaImage",
        "NoEcho": "false",
        "Type": "String"
      },
      "NovaOVSBridge": {
        "Default": "br-int",
        "Description": "Name of integration bridge used by Open vSwitch",
        "Label": "NovaOVSBridge",
        "NoEcho": "false",
        "Type": "String"
      },
      "NovaPassword": {
        "Default": "QCn7EHTkMMrJHH7Upp6txzUYX",
        "Description": "The password for the nova service account, used by nova-api.",
        "Label": "NovaPassword",
        "NoEcho": "true",
        "Type": "String"
      },
      "NovaSecurityGroupAPI": {
        "Default": "neutron",
        "Description": "The full class name of the security API class",
        "Label": "NovaSecurityGroupAPI",
        "NoEcho": "false",
        "Type": "String"
      },
      "NtpServer": {
        "Default": "",
        "Description": "Comma-separated list of ntp servers",
        "Label": "NtpServer",
        "NoEcho": "false",
        "Type": "CommaDelimitedList"
      },
      "ObjectStorageCount": {
        "Default": 0,
        "Description": "",
        "Label": "ObjectStorageCount",
        "NoEcho": "false",
        "Type": "Number"
      },
      "ObjectStorageExtraConfig": {
        "Default": {},
        "Description": "ObjectStorage specific configuration to inject into the cluster. Same\nstructure as ExtraConfig.\n",
        "Label": "ObjectStorageExtraConfig",
        "NoEcho": "false",
        "Type": "Json"
      },
      "ObjectStorageHostnameFormat": {
        "Default": "%stackname%-objectstorage-%index%",
        "Description": "Format for SwiftStorage node hostnames",
        "Label": "ObjectStorageHostnameFormat",
        "NoEcho": "false",
        "Type": "String"
      },
      "ObjectStorageRemovalPolicies": {
        "Default": [],
        "Description": "List of resources to be removed from ObjectStorageResourceGroup when doing an update which requires removal of specific resources.\n",
        "Label": "ObjectStorageRemovalPolicies",
        "NoEcho": "false",
        "Type": "Json"
      },
      "ObjectStorageSchedulerHints": {
        "Default": {},
        "Description": "Optional scheduler hints to pass to nova",
        "Label": "ObjectStorageSchedulerHints",
        "NoEcho": "false",
        "Type": "Json"
      },
      "OvercloudBlockStorageFlavor": {
        "CustomConstraint": "nova.flavor",
        "Default": "Flavor-16-x86_64-16384-99",
        "Description": "Flavor for block storage nodes to request when deploying.",
        "Label": "OvercloudBlockStorageFlavor",
        "NoEcho": "false",
        "Type": "String"
      },
      "OvercloudCephStorageFlavor": {
        "CustomConstraint": "nova.flavor",
        "Default": "Flavor-16-x86_64-16384-99",
        "Description": "Flavor for Ceph storage nodes to request when deploying.",
        "Label": "OvercloudCephStorageFlavor",
        "NoEcho": "false",
        "Type": "String"
      },
      "OvercloudComputeFlavor": {
        "CustomConstraint": "nova.flavor",
        "Default": "Flavor-16-x86_64-16384-99",
        "Description": "Use this flavor",
        "Label": "OvercloudComputeFlavor",
        "NoEcho": "false",
        "Type": "String"
      },
      "OvercloudControlFlavor": {
        "CustomConstraint": "nova.flavor",
        "Default": "Flavor-16-x86_64-16384-99",
        "Description": "Flavor for control nodes to request when deploying.",
        "Label": "OvercloudControlFlavor",
        "NoEcho": "false",
        "Type": "String"
      },
      "OvercloudSwiftStorageFlavor": {
        "CustomConstraint": "nova.flavor",
        "Default": "Flavor-16-x86_64-16384-99",
        "Description": "Flavor for Swift storage nodes to request when deploying.",
        "Label": "OvercloudSwiftStorageFlavor",
        "NoEcho": "false",
        "Type": "String"
      },
      "PublicVirtualFixedIPs": {
        "Default": [],
        "Description": "Control the IP allocation for the PublicVirtualInterface port. E.g. [{'ip_address':'1.2.3.4'}]\n",
        "Label": "PublicVirtualFixedIPs",
        "NoEcho": "false",
        "Type": "Json"
      },
      "PublicVirtualInterface": {
        "Default": "br-ex",
        "Description": "Specifies the interface where the public-facing virtual ip will be assigned. This should be int_public when a VLAN is being used.\n",
        "Label": "PublicVirtualInterface",
        "NoEcho": "false",
        "Type": "String"
      },
      "PurgeFirewallRules": {
        "Default": false,
        "Description": "Whether IPtables rules should be purged before setting up the ones.",
        "Label": "PurgeFirewallRules",
        "NoEcho": "false",
        "Type": "Boolean"
      },
      "RabbitClientPort": {
        "Default": 5672,
        "Description": "Set rabbit subscriber port, change this if using SSL",
        "Label": "RabbitClientPort",
        "NoEcho": "false",
        "Type": "Number"
      },
      "RabbitClientUseSSL": {
        "Default": false,
        "Description": "Rabbit client subscriber parameter to specify an SSL connection to the RabbitMQ host.\n",
        "Label": "RabbitClientUseSSL",
        "NoEcho": "false",
        "Type": "String"
      },
      "RabbitCookieSalt": {
        "Default": "unset",
        "Description": "Salt for the rabbit cookie, change this to force the randomly generated rabbit cookie to change.",
        "Label": "RabbitCookieSalt",
        "NoEcho": "false",
        "Type": "String"
      },
      "RabbitFDLimit": {
        "Default": 16384,
        "Description": "Configures RabbitMQ FD limit",
        "Label": "RabbitFDLimit",
        "NoEcho": "false",
        "Type": "String"
      },
      "RabbitIPv6": {
        "Default": false,
        "Description": "Enable IPv6 in RabbitMQ",
        "Label": "RabbitIPv6",
        "NoEcho": "false",
        "Type": "Boolean"
      },
      "RabbitPassword": {
        "Default": "guest",
        "Description": "The password for RabbitMQ",
        "Label": "RabbitPassword",
        "NoEcho": "true",
        "Type": "String"
      },
      "RabbitUserName": {
        "Default": "guest",
        "Description": "The username for RabbitMQ",
        "Label": "RabbitUserName",
        "NoEcho": "false",
        "Type": "String"
      },
      "RedisPassword": {
        "Default": "Rhq8Fd7eEIoPP821Ui",
        "Description": "The password for Redis",
        "Label": "RedisPassword",
        "NoEcho": "true",
        "Type": "String"
      },
      "ServerMetadata": {
        "Default": {},
        "Description": "Extra properties or metadata passed to Nova for the created nodes in the overcloud. It's accessible via the Nova metadata API.\n",
        "Label": "ServerMetadata",
        "NoEcho": "false",
        "Type": "Json"
      },
      "ServiceNetMap": {
        "Default": {
          "BlockStorageHostnameResolveNetwork": "internal_api",
          "CeilometerApiNetwork": "internal_api",
          "CephClusterNetwork": "storage_mgmt",
          "CephPublicNetwork": "storage",
          "CephStorageHostnameResolveNetwork": "storage",
          "CinderApiNetwork": "internal_api",
          "CinderIscsiNetwork": "storage",
          "ComputeHostnameResolveNetwork": "internal_api",
          "ControllerHostnameResolveNetwork": "internal_api",
          "GlanceApiNetwork": "storage",
          "GlanceRegistryNetwork": "internal_api",
          "HeatApiNetwork": "internal_api",
          "HorizonNetwork": "internal_api",
          "KeystoneAdminApiNetwork": "ctlplane",
          "KeystonePublicApiNetwork": "internal_api",
          "MemcachedNetwork": "internal_api",
          "MongoDbNetwork": "internal_api",
          "MysqlNetwork": "internal_api",
          "NeutronApiNetwork": "internal_api",
          "NeutronTenantNetwork": "tenant",
          "NovaApiNetwork": "internal_api",
          "NovaMetadataNetwork": "internal_api",
          "NovaVncProxyNetwork": "internal_api",
          "ObjectStorageHostnameResolveNetwork": "internal_api",
          "RabbitMqNetwork": "internal_api",
          "RedisNetwork": "internal_api",
          "SwiftMgmtNetwork": "storage_mgmt",
          "SwiftProxyNetwork": "storage"
        },
        "Description": "Mapping of service_name -> network name. Typically set via parameter_defaults in the resource registry.",
        "Label": "ServiceNetMap",
        "NoEcho": "false",
        "Type": "Json"
      },
      "SnmpdReadonlyUserName": {
        "Default": "ro_snmp_user",
        "Description": "The user name for SNMPd with readonly rights running on all Overcloud nodes",
        "Label": "SnmpdReadonlyUserName",
        "NoEcho": "false",
        "Type": "String"
      },
      "SnmpdReadonlyUserPassword": {
        "Default": "password",
        "Description": "The user password for SNMPd with readonly rights running on all Overcloud nodes",
        "Label": "SnmpdReadonlyUserPassword",
        "NoEcho": "true",
        "Type": "String"
      },
      "StorageMgmtVirtualFixedIPs": {
        "Default": [],
        "Description": "Control the IP allocation for the StorageMgmgVirtualInterface port. E.g. [{'ip_address':'1.2.3.4'}]\n",
        "Label": "StorageMgmtVirtualFixedIPs",
        "NoEcho": "false",
        "Type": "Json"
      },
      "StorageVirtualFixedIPs": {
        "Default": [],
        "Description": "Control the IP allocation for the StorageVirtualInterface port. E.g. [{'ip_address':'1.2.3.4'}]\n",
        "Label": "StorageVirtualFixedIPs",
        "NoEcho": "false",
        "Type": "Json"
      },
      "SwiftHashSuffix": {
        "Default": "JN273288Xt3JTBqnE8RBsrYze",
        "Description": "A random string to be used as a salt when hashing to determine mappings in the ring.",
        "Label": "SwiftHashSuffix",
        "NoEcho": "true",
        "Type": "String"
      },
      "SwiftMinPartHours": {
        "Default": 1,
        "Description": "The minimum time (in hours) before a partition in a ring can be moved following a rebalance.",
        "Label": "SwiftMinPartHours",
        "NoEcho": "false",
        "Type": "Number"
      },
      "SwiftMountCheck": {
        "Default": "false",
        "Description": "Value of mount_check in Swift account/container/object -server.conf",
        "Label": "SwiftMountCheck",
        "NoEcho": "false",
        "Type": "Boolean"
      },
      "SwiftPartPower": {
        "Default": 10,
        "Description": "Partition Power to use when building Swift rings",
        "Label": "SwiftPartPower",
        "NoEcho": "false",
        "Type": "Number"
      },
      "SwiftPassword": {
        "Default": "KfqyTxGtQ9y7P6yCK2m7n2xMz",
        "Description": "The password for the swift service account, used by the swift proxy services.",
        "Label": "SwiftPassword",
        "NoEcho": "true",
        "Type": "String"
      },
      "SwiftReplicas": {
        "Default": 3,
        "Description": "How many replicas to use in the swift rings.",
        "Label": "SwiftReplicas",
        "NoEcho": "false",
        "Type": "Number"
      },
      "SwiftStorageImage": {
        "Default": "overcloud-full",
        "Description": "",
        "Label": "SwiftStorageImage",
        "NoEcho": "false",
        "Type": "String"
      },
      "TimeZone": {
        "Default": "UTC",
        "Description": "The timezone to be set on nodes.",
        "Label": "TimeZone",
        "NoEcho": "false",
        "Type": "String"
      },
      "UpdateIdentifier": {
        "Default": "",
        "Description": "Setting to a previously unused value during stack-update will trigger package update on all nodes\n",
        "Label": "UpdateIdentifier",
        "NoEcho": "false",
        "Type": "String"
      },
      "controllerExtraConfig": {
        "Default": {},
        "Description": "Controller specific configuration to inject into the cluster. Same\nstructure as ExtraConfig.\n",
        "Label": "controllerExtraConfig",
        "NoEcho": "false",
        "Type": "Json"
      },
      "controllerImage": {
        "CustomConstraint": "glance.image",
        "Default": "overcloud-full",
        "Description": "",
        "Label": "controllerImage",
        "NoEcho": "false",
        "Type": "String"
      }
    },
    "roles": ["Controller", "Compute", "BlockStorage", "ObjectStorage", "CephStorage"]
  }];
});
define("fusor-ember-cli/mirage/fixtures/entitlements", ["exports"], function (exports) {
  exports["default"] = [{
    "id": "8a85f983510e0e2d015110e47e6b562f",
    "consumer": {
      "id": "8a85f98350fe2951015102a33a6d4e9a",
      "uuid": "7ffddefd-aacb-4192-a999-01beb7c2e473",
      "name": "tsanders-rhci",
      "href": "/consumers/7ffddefd-aacb-4192-a999-01beb7c2e473"
    },
    "pool": {
      "id": "8a85f9814c508347014c71b23f4a4775",
      "type": "NORMAL",
      "owner": {
        "id": "8a85f9814a192108014a1adef5826b38",
        "key": "7473998",
        "displayName": "7473998",
        "href": "/owners/7473998"
      },
      "activeSubscription": true,
      "sourceEntitlement": null,
      "quantity": 90,
      "startDate": "2015-03-31T04:00:00.000+0000",
      "endDate": "2016-03-31T03:59:59.000+0000",
      "productId": "RV00007",
      "derivedProductId": null,
      "providedProducts": [{
        "id": "8a85f9814c508347014c71b23f4a4789",
        "productId": "220",
        "productName": "Red Hat OpenStack Beta",
        "created": "2015-03-31T21:17:29.000+0000",
        "updated": "2015-03-31T21:17:29.000+0000"
      }, {
        "id": "8a85f9814c508347014c71b23f4a478a",
        "productId": "201",
        "productName": "Red Hat Software Collections (for RHEL Server)",
        "created": "2015-03-31T21:17:29.000+0000",
        "updated": "2015-03-31T21:17:29.000+0000"
      }, {
        "id": "8a85f9814c508347014c71b23f4a478b",
        "productId": "269",
        "productName": "Red Hat Satellite Capsule",
        "created": "2015-03-31T21:17:29.000+0000",
        "updated": "2015-03-31T21:17:29.000+0000"
      }, {
        "id": "8a85f9814c508347014c71b23f4a478c",
        "productId": "150",
        "productName": "Red Hat Enterprise Virtualization",
        "created": "2015-03-31T21:17:29.000+0000",
        "updated": "2015-03-31T21:17:29.000+0000"
      }, {
        "id": "8a85f9814c508347014c71b23f4a478d",
        "productId": "239",
        "productName": "Red Hat Enterprise MRG Messaging",
        "created": "2015-03-31T21:17:29.000+0000",
        "updated": "2015-03-31T21:17:29.000+0000"
      }, {
        "id": "8a85f9814c508347014c71b23f4a478e",
        "productId": "84",
        "productName": "Red Hat Enterprise Linux High Availability (for RHEL Server) - Extended Update Support",
        "created": "2015-03-31T21:17:29.000+0000",
        "updated": "2015-03-31T21:17:29.000+0000"
      }, {
        "id": "8a85f9814c508347014c71b23f4a478f",
        "productId": "70",
        "productName": "Red Hat Enterprise Linux Server - Extended Update Support",
        "created": "2015-03-31T21:17:29.000+0000",
        "updated": "2015-03-31T21:17:29.000+0000"
      }, {
        "id": "8a85f9814c508347014c71b23f4a4790",
        "productId": "180",
        "productName": "Red Hat Beta",
        "created": "2015-03-31T21:17:29.000+0000",
        "updated": "2015-03-31T21:17:29.000+0000"
      }, {
        "id": "8a85f9814c508347014c71b23f4a4791",
        "productId": "246",
        "productName": "Oracle Java (for RHEL Server) - Extended Update Support",
        "created": "2015-03-31T21:17:29.000+0000",
        "updated": "2015-03-31T21:17:29.000+0000"
      }, {
        "id": "8a85f9814c508347014c71b23f4a4792",
        "productId": "183",
        "productName": "JBoss Enterprise Application Platform",
        "created": "2015-03-31T21:17:29.000+0000",
        "updated": "2015-03-31T21:17:29.000+0000"
      }, {
        "id": "8a85f9814c508347014c71b23f4a4793",
        "productId": "240",
        "productName": "Oracle Java (for RHEL Server)",
        "created": "2015-03-31T21:17:29.000+0000",
        "updated": "2015-03-31T21:17:29.000+0000"
      }, {
        "id": "8a85f9814c508347014c71b23f4a4795",
        "productId": "86",
        "productName": "Red Hat Enterprise Linux Load Balancer (for RHEL Server) - Extended Update Support",
        "created": "2015-03-31T21:17:29.000+0000",
        "updated": "2015-03-31T21:17:29.000+0000"
      }, {
        "id": "8a85f9814c508347014c71b23f4a4794",
        "productId": "191",
        "productName": "Red Hat OpenStack",
        "created": "2015-03-31T21:17:29.000+0000",
        "updated": "2015-03-31T21:17:29.000+0000"
      }, {
        "id": "8a85f9814c508347014c71b23f4a4797",
        "productId": "69",
        "productName": "Red Hat Enterprise Linux Server",
        "created": "2015-03-31T21:17:29.000+0000",
        "updated": "2015-03-31T21:17:29.000+0000"
      }, {
        "id": "8a85f9814c508347014c71b23f4a4796",
        "productId": "83",
        "productName": "Red Hat Enterprise Linux High Availability (for RHEL Server)",
        "created": "2015-03-31T21:17:29.000+0000",
        "updated": "2015-03-31T21:17:29.000+0000"
      }, {
        "id": "8a85f9814c508347014c71b23f4a4798",
        "productId": "250",
        "productName": "Red Hat Satellite",
        "created": "2015-03-31T21:17:29.000+0000",
        "updated": "2015-03-31T21:17:29.000+0000"
      }, {
        "id": "8a85f9814c508347014c71b23f4a4799",
        "productId": "205",
        "productName": "Red Hat Software Collections Beta (for RHEL Server)",
        "created": "2015-03-31T21:17:29.000+0000",
        "updated": "2015-03-31T21:17:29.000+0000"
      }, {
        "id": "8a85f9814c508347014c71b23f4a479a",
        "productId": "85",
        "productName": "Red Hat Enterprise Linux Load Balancer (for RHEL Server)",
        "created": "2015-03-31T21:17:29.000+0000",
        "updated": "2015-03-31T21:17:29.000+0000"
      }, {
        "id": "8a85f9814c508347014c71b23f4a479b",
        "productId": "167",
        "productName": "Red Hat CloudForms",
        "created": "2015-03-31T21:17:29.000+0000",
        "updated": "2015-03-31T21:17:29.000+0000"
      }],
      "derivedProvidedProducts": [],
      "attributes": [],
      "productAttributes": [{
        "id": "8a85f9814c508347014c71b23f4a4777",
        "name": "ph_product_line",
        "value": "RHCI",
        "productId": "RV00007",
        "created": "2015-03-31T21:17:29.000+0000",
        "updated": "2015-03-31T21:17:29.000+0000"
      }, {
        "id": "8a85f9814c508347014c71b23f4a4778",
        "name": "name",
        "value": "Red Hat Cloud Infrastructure with Smart Management, Premium (2-sockets)",
        "productId": "RV00007",
        "created": "2015-03-31T21:17:29.000+0000",
        "updated": "2015-03-31T21:17:29.000+0000"
      }, {
        "id": "8a85f9814c508347014c71b23f4a4779",
        "name": "ph_product_name",
        "value": "RHCI",
        "productId": "RV00007",
        "created": "2015-03-31T21:17:29.000+0000",
        "updated": "2015-03-31T21:17:29.000+0000"
      }, {
        "id": "8a85f9814c508347014c71b23f4a477a",
        "name": "product_family",
        "value": "Red Hat Cloud Infrastructure",
        "productId": "RV00007",
        "created": "2015-03-31T21:17:29.000+0000",
        "updated": "2015-03-31T21:17:29.000+0000"
      }, {
        "id": "8a85f9814c508347014c71b23f4a477b",
        "name": "variant",
        "value": "Cloud",
        "productId": "RV00007",
        "created": "2015-03-31T21:17:29.000+0000",
        "updated": "2015-03-31T21:17:29.000+0000"
      }, {
        "id": "8a85f9814c508347014c71b23f4a477c",
        "name": "management_enabled",
        "value": "1",
        "productId": "RV00007",
        "created": "2015-03-31T21:17:29.000+0000",
        "updated": "2015-03-31T21:17:29.000+0000"
      }, {
        "id": "8a85f9814c508347014c71b23f4a477d",
        "name": "sockets",
        "value": "2",
        "productId": "RV00007",
        "created": "2015-03-31T21:17:29.000+0000",
        "updated": "2015-03-31T21:17:29.000+0000"
      }, {
        "id": "8a85f9814c508347014c71b23f4a477e",
        "name": "multi-entitlement",
        "value": "yes",
        "productId": "RV00007",
        "created": "2015-03-31T21:17:29.000+0000",
        "updated": "2015-03-31T21:17:29.000+0000"
      }, {
        "id": "8a85f9814c508347014c71b23f4a477f",
        "name": "arch",
        "value": "x86_64,ppc64le,ppc64,ia64,ppc,s390,x86,s390x",
        "productId": "RV00007",
        "created": "2015-03-31T21:17:29.000+0000",
        "updated": "2015-03-31T21:17:29.000+0000"
      }, {
        "id": "8a85f9814c508347014c71b23f4a4780",
        "name": "support_type",
        "value": "L1-L3",
        "productId": "RV00007",
        "created": "2015-03-31T21:17:29.000+0000",
        "updated": "2015-03-31T21:17:29.000+0000"
      }, {
        "id": "8a85f9814c508347014c71b23f4a4781",
        "name": "stacking_id",
        "value": "RV00007",
        "productId": "RV00007",
        "created": "2015-03-31T21:17:29.000+0000",
        "updated": "2015-03-31T21:17:29.000+0000"
      }, {
        "id": "8a85f9814c508347014c71b23f4a4782",
        "name": "description",
        "value": "Red Hat Cloud Infrastructure",
        "productId": "RV00007",
        "created": "2015-03-31T21:17:29.000+0000",
        "updated": "2015-03-31T21:17:29.000+0000"
      }, {
        "id": "8a85f9814c508347014c71b23f4a4784",
        "name": "type",
        "value": "MKT",
        "productId": "RV00007",
        "created": "2015-03-31T21:17:29.000+0000",
        "updated": "2015-03-31T21:17:29.000+0000"
      }, {
        "id": "8a85f9814c508347014c71b23f4a4783",
        "name": "enabled_consumer_types",
        "value": "satellite",
        "productId": "RV00007",
        "created": "2015-03-31T21:17:29.000+0000",
        "updated": "2015-03-31T21:17:29.000+0000"
      }, {
        "id": "8a85f9814c508347014c71b23f4a4785",
        "name": "ph_category",
        "value": "Subscriptions",
        "productId": "RV00007",
        "created": "2015-03-31T21:17:29.000+0000",
        "updated": "2015-03-31T21:17:29.000+0000"
      }, {
        "id": "8a85f9814c508347014c71b23f4a4786",
        "name": "virt_limit",
        "value": "unlimited",
        "productId": "RV00007",
        "created": "2015-03-31T21:17:29.000+0000",
        "updated": "2015-03-31T21:17:29.000+0000"
      }, {
        "id": "8a85f9814c508347014c71b23f4a4787",
        "name": "support_level",
        "value": "Premium",
        "productId": "RV00007",
        "created": "2015-03-31T21:17:29.000+0000",
        "updated": "2015-03-31T21:17:29.000+0000"
      }, {
        "id": "8a85f9814c508347014c71b23f4a4788",
        "name": "subtype",
        "value": "Premium",
        "productId": "RV00007",
        "created": "2015-03-31T21:17:29.000+0000",
        "updated": "2015-03-31T21:17:29.000+0000"
      }],
      "derivedProductAttributes": [],
      "restrictedToUsername": null,
      "contractNumber": "10670000",
      "accountNumber": "5530698",
      "orderNumber": null,
      "consumed": 76,
      "exported": 73,
      "productName": "Red Hat Cloud Infrastructure with Smart Management, Premium (2-sockets)",
      "derivedProductName": null,
      "branding": [{
        "productId": "69",
        "name": "Red Hat Cloud Infrastructure",
        "type": "OS",
        "created": "2015-03-31T21:17:29.000+0000",
        "updated": "2015-03-31T21:17:29.000+0000"
      }],
      "calculatedAttributes": {
        "compliance_type": "Stackable"
      },
      "stacked": true,
      "stackId": "RV00007",
      "href": "/pools/8a85f9814c508347014c71b23f4a4775",
      "created": "2015-03-31T21:17:29.000+0000",
      "updated": "2015-03-31T21:19:26.000+0000",
      "subscriptionId": "3565254",
      "subscriptionSubKey": "master",
      "sourceStackId": null,
      "sourceConsumer": null
    },
    "certificates": [{
      "key": "-----BEGIN RSA PRIVATE KEY-----\nMIIEowIBAAKCAQEAhkO4+XaEKzzTUno9xsMnNCc1pCtmQGMXMtNzgL+Wom+yM1b+\nCHEAjfpJF3Y5IyXu0deQnC22/aIIa6mRU0ixYJznZItIF8znRXvxcnrJmoiEbDK1\nZLhgcSBZCBk3htc/rHG3gcRh9QP6VQjbKPnA11dGj+vQpNJjj6V9S4jmLdh3/BBi\nqCN1B3d48t7odl/UHe/3W1ALfP1bYKe6xej1Uv5NX90jQOqWdfm5LbRAULsKCJ6f\nnP5wdQAR6K3p03zr6HnJl62uUu0ndj8aD+9bwLQjTWCNNXIapflG2RZg6pZV7L+e\n0CHVx3S2DPnihaPPhbrHgK/bOb8fECeuaSA6bwIDAQABAoIBAFCTphg4kztrppsx\n948ooYeAHIYo8ZWkolCDbCcRU/KqO/TpuU0RnDaYxXLKJaI9aqUOzJ+eI9r1ej46\nppen4aPMpmXF3P9Dnmwp5Q5COGmAkpBookoPCPn7YtMkZxmKZpE0MeA0HmGwAHU1\n+mkN8jiKDTPkXvP7u3qC474IK7PI8zx0WD24EsgukszlGzN4StGbnYcj3Ba73xdZ\n9GREZehrCsacw1g00msBUdsf7r/dkUNauu0EBod4lvBo5wwKYwKkDFgbJnRqVnV7\nLPLyGt0IrjGiwzib5h+u4WWpS5oY8k6/DevuIfJJaQzpALnTeabiOxxveHclvHpO\n4E8I7ekCgYEA/YheF1T51rj/MvN9J9liFphMiP0EXG2brV+XLNiULSMLqJKHhGk8\nVkH0CKIO4TBElxmV7qNqVvwzcOHcgLLY4uO5C/n1Zf8cYAkdty5zAgNLMYeNaEHF\nZfBw6duvF8Xpbr+l0NR/6qhFonYzyuU3enJBAV9QIVLABzGsp1Ft5A0CgYEAh5I4\nH/m1kZLS1NGHDCu9g/ipAHfDJV4m7OQtlD7oeTDBWCmZvhQnRcGjIHm40iVtSJ0W\nYlYl2U+QnwPxLxae7OnCoNvjp2e4ksinZPZ9Tv/V+Q3aJG3BCOkTiQF5N0YdRp/F\nhFx/O8iMc1AMVO9KK7QTeWZK31gCLKN4DJSCTWsCgYEA8X1q4h52uygLLKTwmXxe\nCdeXTwRxmvhsSH+8p2LEARpYiIDJxD3Y0vCPWYnDUot/Sc19GoldSO2Asgzw00WH\ngNYX9GhqbnTIulD0lP8RXOF2Rf8vmhbLx4V2h8pQxPwmlO7HKlq+XO1bJpwgSSp7\n5Y3ejUgUMyl272NJaTYOziECgYBX9B8Bb6nCVfT+KSlqVf5P3kUWjpxGY/zw92Ay\nq1V7OoxVPDgIP17zPJsueInVnH53+6IIDkfj4mC7KX2RxSU6IrYoUkAx3XK7l/4x\n3FCTrhsNx1TdCW+Q7lXELvaLS6u2o/Uq2C+bg5LLRQWbHNuL2vo/aoPsvlY6y5sY\n3khjHQKBgB4V9RXFzs1d5bb176NCcnL4Or+pxcPmpjewhWZdr+O5XNByoEBvUisH\n78G9YpCQ7Fa0vMctjwU+rLpDb9uIg/Z83QaJa7PPhlZcXw/oGYTW4+6/rG+hbK8W\nmmi2q8dF0Ci+XdYxmup7al0PjXgB6mew5bT/le6MLcMOUGc5AEX/\n-----END RSA PRIVATE KEY-----\n",
      "cert": "-----BEGIN CERTIFICATE-----\nMIIKfzCCCGegAwIBAgIIO7UV55+tQ8IwDQYJKoZIhvcNAQEFBQAwgaQxCzAJBgNV\nBAYTAlVTMRcwFQYDVQQIDA5Ob3J0aCBDYXJvbGluYTEWMBQGA1UECgwNUmVkIEhh\ndCwgSW5jLjEYMBYGA1UECwwPUmVkIEhhdCBOZXR3b3JrMSQwIgYDVQQDDBtSZWQg\nSGF0IENhbmRsZXBpbiBBdXRob3JpdHkxJDAiBgkqhkiG9w0BCQEWFWNhLXN1cHBv\ncnRAcmVkaGF0LmNvbTAeFw0xNTAzMzEwNDAwMDBaFw0xNjAzMzEwMzU5NTlaMCsx\nKTAnBgNVBAMTIDhhODVmOTgzNTEwZTBlMmQwMTUxMTBlNDdlNmI1NjJmMIIBIjAN\nBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAhkO4+XaEKzzTUno9xsMnNCc1pCtm\nQGMXMtNzgL+Wom+yM1b+CHEAjfpJF3Y5IyXu0deQnC22/aIIa6mRU0ixYJznZItI\nF8znRXvxcnrJmoiEbDK1ZLhgcSBZCBk3htc/rHG3gcRh9QP6VQjbKPnA11dGj+vQ\npNJjj6V9S4jmLdh3/BBiqCN1B3d48t7odl/UHe/3W1ALfP1bYKe6xej1Uv5NX90j\nQOqWdfm5LbRAULsKCJ6fnP5wdQAR6K3p03zr6HnJl62uUu0ndj8aD+9bwLQjTWCN\nNXIapflG2RZg6pZV7L+e0CHVx3S2DPnihaPPhbrHgK/bOb8fECeuaSA6bwIDAQAB\no4IGKzCCBicwEQYJYIZIAYb4QgEBBAQDAgWgMAsGA1UdDwQEAwIEsDCB3gYDVR0j\nBIHWMIHTgBR3LqXNNw2o4dPqYcVWZ0PokcdtHKGBt6SBtDCBsTELMAkGA1UEBhMC\nVVMxFzAVBgNVBAgMDk5vcnRoIENhcm9saW5hMRYwFAYDVQQKDA1SZWQgSGF0LCBJ\nbmMuMRgwFgYDVQQLDA9SZWQgSGF0IE5ldHdvcmsxMTAvBgNVBAMMKFJlZCBIYXQg\nRW50aXRsZW1lbnQgT3BlcmF0aW9ucyBBdXRob3JpdHkxJDAiBgkqhkiG9w0BCQEW\nFWNhLXN1cHBvcnRAcmVkaGF0LmNvbYIBPzAdBgNVHQ4EFgQUH4sIAAAAAAAAAAMA\nAAAAAAAAAAAwEwYDVR0lBAwwCgYIKwYBBQUHAwIwEgYJKwYBBAGSCAkGBAUMAzMu\nMjCCBNoGCSsGAQQBkggJBwSCBMsEggTHeNpNUsuSozAM7I+ZK1QSHjlvbe1xqraW\nw5yFI8ATG1O2IZN8/ciEyXKQsSW51d3YDy2OeQHlxshjxOR50XxD/eH8NUSK2o2o\nfhudiuWvBi1Hgpt4lKK6Zm6KzpmAcA+RbfYAz2EFIz2yD+i04YAyL/IDVJcFRu/1\n42Hu6ChELxBQT3CpKkbnPFsawSHwF247EtpSL1D/R2v54qJlKf80u/xFe1bRefhB\nhbRoFPlJ4ohKlJbCpMpLiXRO+RL1JrCQepHXEtUO8KlQ8TRs204WZxHmNiivp0Qv\nIyEcM6EuLD2W03LTouJLJAY0//6+Nzg37BepidDNM4psjI6cXBQMMqlmGfVK7Sxx\nSE2ZoinMZtd2RIkl/Sx3mVXUi453WN9nFvU2RJya3E021ZbwAy8WV62SoT7KOWSb\n8+fVkRq0c3c/FwVOMI4uLRka1QaWidAxrttBGBcSJS68rNo4yvGAz5ZpSi3mecX2\nNr7uBWVwxktT+OGZKWet/PCXPZIbfyybp8mwFQDydzh5P2LLJy208n32VBh0P0hO\nG2q1Sd7o4PDm2TAFTkNqIdrOPZwgutnLu3trpUReDfgG9mEFioGRt9/cWY+T/4G3\nHhHgU92ehvK7ws9xvR4ws/87iRysziOJx2ZaeIe4zduevdieqa0dkencfQrV2Woc\n4IZ4gxcbv9w5/7jN256J7R3ZjibTxATxuv8OZeN89xm67PaO7McN0uM3bnr3Unon\nqmtHZHp3H0K1dlqHON9/4N9LjN25692prR349I5O5WrstQ57e4/pcU/35N5HHeq1\nZvXBfUDqF9jH+CmujTTnHmdxvf7iwPlOgu8SPVmTHccm7kHi57iwNlx4sRyRWRXR\n4zdYNuevdqa0d+PJqPKTubLUOe3uLPOU2DNxvw4x3/83WDbnr3W7Azv7Wqa0d+PS\nOJqPKTuDvTC7LUOe3uM3bnknontHdmON3uM3bnr3THonqmtHZHnlFGZ3HxKzJjtl\nqHOD2eEaXCsh9kMaGbrBtz17rcMM6k9+3GX/RPVNaOyPJqPKKMiLp3B3n0Dge4U3\nf1BbLSkKHKT3G8PxT/CXjvVas3rjCgH3cb43CCPG5bjDX/2uLJWWf4NrkfNLauN5\nnFudzd0d2Y4wvgx7j742svO/AL78bz+t+PcYP+4wj3G9Pxm6wbc9e6k8ZH4nqmtH\nU1HlFGRK6dx9DZaU9Q5xv/uHOfhB7jXK4PZBM/TKplEyzZ4wlsVXiPpxb+9xvXuC\nwACAo6O/87n7hpniymykQV/jepxy2uYeN57gh7gNLitXjDJxhA43l+JheMkVkV0e\nGxuN99xZ75b0A7jro2I5PLPLvcb2/G59xZ8ytuML+4ZM8Od7gsAAgL7HW4xF+N59\nxHP/GEXjN293R3Zbgpro1xZ8yv3GBXEZ+4QePZ4hPs3bnr3WxhnTP/9U/W0I3SXU\nmJ6prR2R55RRmdwd58Q4HuFMDqC2WocpPcYeOPuK4JkmiQZJInj1s4Ye43/7jA/8\nc3OLeS4s88Zuy7ujuzHHrlw05w09x49uCmuMnlnl3uPSfjdnjfRxk9wg9m7o7sxx\nk5x4e40d2Y437cHvcc3uLTt7vFp3jN3rO6O7McXu6O7McZu3u6O7MccZu6O7McAw\nDQYJKoZIhvcNAQEFBQADggIBAF+U/p4o2brkdYJ1cz7dE4elKB3dQP0P4HgQWJwR\nrk2SHs1pPv8OG0XgEohLMo6Enn0jl8MKhRDXxHiPN/Qtw/NdUu/QmzMWC8vSISsC\n6wyozE863MCw6k4oED+m1CHkO3xG2clMraj1w6b56i4oQwiyDraeXiRGLnjAVRPR\n2E09erbGqo0PAAYRBiIFYnVeImABjsHgz6I8rPtLx4VyHs3vOEaqQuR4XugMpCrY\nS2IvqHOgZrbR/8sQbPKylAcE2WYRFmTNI3DGnx3WeZ+DK64h5iJt7NhmerclwiKr\nfYwKdWgDXAAWGGp1AjmszA/6JWJMbjJqm6n6gH+mjT0YZxuCo7oTsEtz2AOo1hZB\nJgCmxz7yEjo3buK59uiuEbCbVlzx5FGMTgCfkVrRLnjnksidL0mLlGqzmmwTmUVc\n3LJoCZ5HF/un1zRTQiNrQdLYifsKrcJVbuY/kjJCpoeVuSFy9n0/55hX4q21X1De\nEwH6M2oG5ht0GdRiNEiAjSic5W7LDN+e6fPsQJDP3zNQjyFFdh5B95jhygy8FLn1\nSEFuo7MfBt4AdV3n0JcUupzaEK1C1yaxNCIBStuBmfDoH3Pj8H4BX7u9e2RfdCWs\nLDpNkgJSo+3+1ockqt2oijRUiI0FNPCCTsPDbT0DJJkBEZxeA9ZvKbvaB0b67NSV\n0D5T\n-----END CERTIFICATE-----\n-----BEGIN ENTITLEMENT DATA-----\neJzlfWtz40aS7V9hKPbDTITZAlB4kP7W9rbHPWtvO6wd37h7Y2MCktgtjilRS1Ky\n2xPz328BfAFkFTKzqhKoYu9OzLTdIkBVVmaefJ3859Xd8mn98jhbXX19VXz8eH8/\n+3g/Lsu723EaT5NxOZ1Ox1F8O7st7pJZWoirr67+96V82sw3n6++jr+6Wr/cru9W\n8+fNfPl09fU/r9a/vsgn/fxLJP+vkD/8VD7Oqn8xux99X25G3y6WL/ej908fV+V6\ns3q527ysZqPf5puH0c1judqMfiyfyk+zx9nT5qvRT6vZ4/zlcfSnZLxe3v0626z/\nLB+4++PV18lXV4+Hn776Wj5tJv92tnqd382qb7KYvc4W8tW7x8iPbj4/V9/lh3j8\ng7j6l/zhTXn36/zp09/n943vLP9iubqvDuSfjV91GtU/v5JvukqiOBtHYizi/4rS\nr6NI/ue/5eNnT/fbv8z3fym+zqbyP9VfymPerMq76uNxlBfVq+S/Le/uli/Vt7/K\nMhHl00n19ufV8l6ejPwV/98/r+qvlqTR8Sg/yMcsZqO/lq/l6E8fl6vRz9+/+2F0\nI3/x2ao6IPk/61oYV9ULVncP882sPufqgVe/T/K/56n8G/mHq//Zfq/6/A7vyqf5\n8aw+1wd3IsR38iOr59V8PRv9MH96+X2U7V4/Go+a3+6b2UZ+xZ9/+rEW3KK8reWx\nepgtxtl4XX9ivHmYr+6f5bl+Hi/rj47/IT86vpUfHa+eH9f1L/R0v1wd3y//1XO5\neZD/4nr37a+rH7+uHny9fex1dv1vq9liVq5n1T/92638Q3UU1413XC/XtdDK28VM\n/uIfy8V6tj0w9Ul9ev7095dV9Rt8nC9mX19fX882d9fPv86v5fccy7+9lr/p+C8/\n/WX8H+/+73g1u38oN/Xv8RXh53dfWr71UX7yvtyUf5/9/jxfyeOf5GkkL+Fq9r8v\n8p/v/74pP9Xfs3WeV//zr6+OghSOBGkmQ7z47ufrjZficyuOyVEc1XdAyCPXyOP9\nzYdzeeSAPObrpak8coQ85OMNBfKw2TxLgZBPOT8/ZZFkgnzKBeWUC75TLtydspPz\nLZTnm7s63617MDrk2j3gT/rMPRR+nm5S1KiAZLJ1JuJm+bK6m42UlhuyFOv6szYG\nHGMwtm+5vpFf8cZfU642MhOqmDp1oEtWKFUgCwytEVQh+Q6UVFqXTxOyTdMhJaU5\ng5CShc/AIKX+PbMK/xRR7Ar/dHgOyLTZeo5gkJC81YXTOK7LSKHCOXsjhbns/XqV\nAeM76YXIAu70Qubuh8Hv4KI738WmRtCZI7FZ4QZ7jIcJV/qCD27hQOoqb2JjM+0F\n5J+5dJtPmbqKlYyCJOboyOf0lgpuFBE529iJ7mziV0dww78gti+/pcaTDb9lFyV1\n4HcUkrTA7yHFS4lThTLXJGYVuqQ6jDpbRMYTOsBnhPSYIR4vUncA7Bo6lUXnh39T\nbmaLxXwzu0LXTtdiGv2urJ6KIo4BYR/eN8re5I0KrrSVn9eb2ePov/8MAsf6B8d/\njNf7Z43ls6wQ4+6JWvt4eNO1fBPe6x1Oqme4OL99PJxSQxfTKIaCr6Z4ioZ4cqx4\ncrV4Cifi0dnTpngK38WT68VTgJnYo3zyN3FDPnuT+WeopHQUinyAXbmu2L5SKQf5\n8KHLSaLIoXJS8zSj9m3fn+a/z25fPgE4vHmm0fi++gRHfNQ83ei6fo2PvkcFAooI\nKhl1+IW9KFDpBHc+oRsxG3qEgWSiQNjS2kDADGFsUDm4ts1xkXqDTI/v8lCYK+mc\nI7z1r71zdwmo7X4Z2l/aXtfE2g9jjeRJg7U4FA7Snb8aABlJgIZ8IBkoAI95zU2D\nYqStn1JOV2Psu9MjbSvPUEBum/c+kYzSVMdQMqTjvu5PFIthqrvKil6qm+pn2KyE\nLgUNRY5HH+p28HKh9pgdgFLhMJe7Z7lBlrqExvn7/IaYavcJZeAROoJKu7uLayka\n4zukUeoO2CmGiMAosRd71BWM3UqjHBpk0MF7i+g3dhH95gC499YsKVUgxruPjowo\nLRXaQw4UUATPMp+ilflEgVJ8cGUFQDHG3wyADnXhc3yOuW3zC8DmK/MJVjYfxEMe\n23wlBspNUzpG/jbmtfN+nrvayFOwZ24bnxkaeIrBCens8Xdee/Zk3O8itYyTRJC4\nP8eXgbW4nyiTyhX0IZPKIwQokzQqKDLRpPspeX7WBL+f9klZhSTV3HNdrplSbLcM\nAJx4CM9q61IMhNp6RyCmy0ur5WCV83eTm3aY89eHV0WOB0DaJKlx3sFtkhS8/oEk\nSdVOgCInjROgZbCdJIVgh+CtGJQ+ISOUyLQACZuhqLSCNUNRqUGfJTJ1upOQ4NHG\nvvgjteqdgmPfgY9TGnRoug6RxaEaij4qXH7bbHUbGyWpA/tWYlzVcq49BFht7xpg\npCUFBo1m0SrGRrXi/qrEwYRi0kdQjJrGRZDTEi463mCHEaSiRHh5aBuFKO2g7H2g\nfuqCany+IKWDYCNFbAR17FWIJst3ZVHnkfD1/I48ksHshpvRGsfZbs/yS2lEKkNo\nW0ppMzU9DNOElubLQYI2ROCCH6GxiqxxwcrgYzRxgT/SDstD6Za2zJy6aarop1s6\nN22Rs5nC6MXnhutqc3y7NSbiNgq1+4ux/QStjYDhKJp4Io7C+Os3y/W6OT3+9vl5\nMb8rq19t9NOi3EhZPF6hx5qfn+86qaHTONPF9ahvIq+KkHdhezeqa/L+mx9HPy1/\nU16Rf9yOZ+WzvAhiLH90vDuR6o/P1SeMbkf9Se3l+MetfKG8DwK6D9tzGsbl179C\nE3bFWnYBqkw6QkqVMA4RJkNMiRaFb6xEqdB2u2LFkZ6LQ+PdDlJJFVLhG/zcCycN\nlzxKTCa6ngSkmM6FpM7172WkkJB1qh8QED7J741cpProwCBVfYozD9MtoKYSFQ0/\nYy6lrbfRgcSjFsFiGsbhFDqHo0vDWDgcQDYqt8OtPtL5BKhAsbYPhSodsgKJYRQI\nIyafFEjkmS64ovkesM587nsKZ8oDSCWoArM0aboyDD2uIWHo3AGGtg5nfKOSlOKw\nBGcqDwNhaJWL4cfQIlwMLbGaroBmEergQVp/QAAD0XyTjshSSyRNztT0nKcJKUsj\npWGZOdNKA7BraqFYGDacbNBWzScpSYtmG9roo09q3MkZcXqpORq0PJlY5jfJUGAI\nIBAuDIizxM7RZGjonPUJnLPQYLPIMks8prVdaIUpXPoYKMT03Mdo0mdCOw1H9TFk\nLNB0NX2iAUqlwCc8IH2PZTINX1nrta7mtWlT+xg7pUnpGYF0kIyAfKtBy4hPgrJD\na0pBkSTELJrANEe6G8tkc8PdwKnNtN/UJhjJ+IbRUhHZdtAocmakbBlrnsxncai1\nw7Z5Rg/GqCiME355GfCrQZd0IXZJmAytIFmf6uF3PKn05bbdfnjH0avb8FoQ6sDe\nsqeMnJTsOSXpp31SB/DSPtmphSLf1R2JqNJefGPIe2sVRgyixFixK4zVMYKsTt/b\n2y7r5L0/bRXSbrlqdKF1Ig3ShxRYF1Iaa0c87BvFCL0WfWaMKd0WPskqzrR7nIyR\nGKFs3JPLCaUGpnY5tg1k+sIxIanfqzJ5n9TXFmBsO2QVGTFS5aUvhQpmQkOpUomr\n7jJ0n6wSy3F3ylK6y3wAdbmzKjPdFxXuVMdZcdkf0aSxdtmIRRszAcv1aNlC6ZtV\ntjfbormOKVqStHrsAPAeeeuma7W7HOhRkolK9WfxDFTKA5sn3ZGr3CghSd1Doiec\nNI/UEVcT6Jh8m0o5WLUiJEG4mszEQ2aVONghM2Ey0wO5xFlilx1QVDTRFYPeOpdC\nqRioh2ZtY019LpSaBOXMfgZUZpPxvysiDQLyUiUA+JEXPU0zoFVrrpRrUBHtjmP0\n7WL5cv+dFMB69I18xRWSfEhJN5QLiKv/5G06b3X3cfw4a4r2Vv4w2U1VH7quH9UQ\n7EGYfXmkrwgfud1KwB5Z5ALidjyThEbV1KIg61i3LHpWp4FEAtL9n8nkO/ljCGlU\nT3Mih/2DfLZnjQOFOO/OzhN3uV3d6l4CkT7v8vHw6w3jJ6fdcPA/zJ9eft958dF4\n9O53eVr38sf+9izfOxvdvDw/L1cbrK/56mpedvLcxYl27kP75XLw67VIErsJEWcv\n6yMVIv76yI+hkqgH7sPAGuEmE2iT8JlYMoxYqj8tZo/yCMvV586lHVlTQuvmx7Zo\nYv70cWkmKy27evMlFB6C9h0fOsRKIm0vkFZ26ejtTYfc1DqUjst1LR0DtSnX16lO\nZdZXRqf8sl5drx/K1ez6fnl33T7Xcfr2pnns5HOuftfGGecTEBGYma0T/eheEXSu\nGXgiY6wBaysFkh5aISWX65fiZlsB8vQL+PQBJu7qtM3PVxeYDky4HecZ2f+aGHqq\niTf3xDjrjnXHfpl2efPBXW5GN38XQcIKsIse3evBLo4cmn9eCO3ii+//c/Rfy+Vi\nXacdbZSjk0G9pROrh6fxpnonPWrHqsXhFQY5Zc+UI0nwTOpbSbb3LjVF97cbcNtP\nrQ4HkvOtmGiriNGmSx7UVkb4bcT+SQdEpd3SyVHSyfmk00F0byAdT+I8qTT41Uwo\npUGHdArhcAV2LQmFG9hNppCszLDaz9+Pvl0+Pi6f8NJbPYzv6o9wyezwgqDlBaXy\nreVFgBJ7gTFCib3IwocSEztnVaCcVcHnrDr25ZCdlQ8Vgzgih6mIuIeSjyzY8pFa\nWZnlI70Ql5Z5y05cQFa/cJzV10mGmNX3QCIiAvcEK5LC70ySwjPjpPCs76TwO9uk\n8KyZFI6TSQOfucsKI7LA7vO+XmR69aRwTpOTaBDVNvtsQKpt+EMHU0IIrTNwl1Oj\nJNM4s2iBZmf0hKZIGWGyzLDPdiEjndOmysgDry09ChlHYRwKnDpj6ITQeHBPEmHy\nqMHNs0Zn3VVayZ2WVrQJSlJphdeji6igYyQIiHYd8QGPmh9vByylHq3O6pue8AkC\nTWMBLfh1EiZTA2SGPIZBNdcDg57GKU8eo5ESxHjZfS6Qw8vuk4DhCCXRgx+z0lRH\nGgksUFFb5c3KVJ5v2VF4jiTSjp8at7V1yOnQ3GYsj44WN4cljT673qT1Ihc0qNYL\ntV3ecUEDtmUBDQ01KruQqyFWdvFpEoVZ40uWtOxa6MmSOALHf3hbjvjkFLpkBN34\noZKRv8xXm5dyMf9jO1WJF9Xrhk9ar5vgBZa20vEuirjo6iADrMMVdEMqEkpTR2+i\nJ9g6ZTpAZevMMy6ArRssLaBuHdZ2tjoqyaKh26Eyy4bcDgXaAIGbiAqDQAeVIeuu\n2JpLA86QOfQifZZ0pdbo+ES4KyHudUKZgPfgwqfwDCjRUaMtEUukgnPVAVqmtLUd\n4cRjuysTwlMoxzKh+0GUY5lw4FmUfEI2PSYjhl260jFpaK0luIHDMIiOVOnKqXZX\nq534oEx/7jrTrxMUNdPvjWjihD7cjqn0YrP+XBn+8HL6QghtVyLOnzjqdnDQdqJX\nE2prkCfCSRNwNJhYFsO7Gg5YhiuMBetw0jji6bkm4IWOFgA+VG2FFzxA1dIdkRPL\nRAoctOK5y8yAhDjBKlocgVx5XB2sztP8pm31PZdekgk5d0lozUP4IzbfE64S0I0W\nqhp2MFo/rZb3L3eb+et887lJO7rGD6k+Nx5hjbp1KtR8SbizqiLKG+Gqo77M7oZM\nt52Y/rRgareAWyXFsLVHrjpjUJVFQe+yNCrVo2r0LMX5MMdMkigz6f7ubuLTWJnS\n2Mp0NO4NaGVanXgSgybkg8SAULho7r5a7lOZXN5QsumALmh38bW0Lb52XNe+i69u\n200lxuQx4xiMSUSXzLgyTHMvsRBPv/Axs4GFRYfEBhc+OuQ1QgJKyWTK4kZaVSrY\npRyrVO6dy7FK5ZObkf6bg8oJHRlzBcPBxr9pnHKEbVhuLc1kA5exMiDX8sBaxTm9\nMc6kI4LaCsHdAxFY3VBEOblxBcokdQ5qzSwHtTqySr0NarltW5RRTAN4OYqzu6es\nS9spaziM8SX4FkJoL7i7rgVsN8mxd4Grr+TYwRBkh4k2hnRHPoNnzXQlK5iIJlgo\nNjFg0TJhfULMhzjarYDjefIpPknjiO5ATLpJEIzzjoSA6x8Znn9eX4Zz51tgMhoX\nHdawP/GCkiaZTHnSjFCnriYHwknMG2YeMZlqt/o666XGwy1XwTncVx0e3EozPcu/\nuwERAkeEs/0Z8LhIiK2Hgp71MiqUYwHy64YNGb9uwoXEQqTazJc7VIBuh3OoVjBG\nCLZFTmI5PYZ2F3tiyiv2WA6ON30KX+KIzpvprHKM5u9oFZDZmDxadeTQOT0kEiTT\nmFORIMEMOmOggrFgsGYwjWMOTkrCHArb5El4gC/NUsuBO5e9qu7SoTA6D6nQmTMN\nBOGXnXRUOy2XneBKnuFFvjG8Msh2igsrL2e9TuAMVzhiakCIJDoXzYfn2dPNprz7\ndfSNfMMVcru9aqF9EoH3oP2y2tzu7kEONR8s5UfX1UfHt/KjBNFWP46U7e4NzPy9\nt9tzto+y4LFX/XkXSBhxcuxkRHF2+oXyxPsCFEZnr6pWwFu5Os8egxNOjp5q0pAn\nz44OXB15AvdEd5oXVHDj/LrDxsbrq682OxBG67z6pEvv/Lp7aNrVdx1qku286xi8\n5Nq8wDfdT1OjhEr1yjgIxG7PGwuZThNKZ/hpklt0f9SXAMf/2bRs+LTombwDYgAV\nmX4PF+5k3U1nt1KfbjTP3/nsr7iVVznPndDJddvx6KqUwnz/WH6adcWb9c+N5/WP\n4SR3P19vTmxmvn1vQ2rb514fnjt0j0hEZ8+te5q3FglqX7bUgLqBuWohHrxxuf5N\nvhqk5Tmd0C98gXcchWPHURg7C67eszQGCSdxfF9Ypi8nLF8oa3IhFF9JmtF31B3u\nOO56k2/2mQCAcsnQHZZRYcMldKwTbk1G9w0/Vgjt03Xnt7pfAs6WZe85t55PCVXf\nk96jt5/kge6KWi1WQlB2s9dxWX3YzhrpClP7p1+L0Aa8EpFBuY8uFTrEEN+Vawny\nZOwOJr139YyPuw8QBLL/yKlQTFe5+yOEFEyOdNVu26XAFvzpTk21i4EM6fBh+Bz7\nsm6qNJeY2nQ3UztXLLpWCNYt+LYVMYmhbEnlaEa/JL/UYHjU2EYAZHdfk9ff5k/j\n2ObkdSBr++xwdm8KkegZKIitrVsr1j3bcmw5qU2XRQAXyHSLjOqge4yO6ujhHGsc\nF5jHTgVIO38mid2dPtt0ohNGoRWG00pSQw491JIG88sTqHFR4wGwddaDI+DzxDt/\nEKwbjsUUEsK3i+XL/XfL1eO66S12cugWwN3HnXpYWir12e+ffh2cqYoL/Z4f0A13\n5plyd3kmgFPZC++bTOhLfDIVtgfrCJkm50Rs11SU1bKOxFO/9bS+nIFq8EAkNtxD\n2FQHS4YjLNsjRGy7ZOygQcBwlMlg1JkZCmsyKknpbconVTJM1577Xr1e2maGQppp\nbjMio0io4jorT9OqVIEpTU9h1SjuQUoiTUBT3x0xZ8cgDTULyFMHVTlu2zqoZ8OA\naWGjNqoUOEZvFBlwp5bOcBImQLs3KayYnlQC7Hb4CtFx9P55S+skMkEufpu0AKLM\n3nkPoH0hyfsh6CF6AZMoJg9NN5rXwN3htrJTtK8NuzV8yC62wmbfuMmqPss1ffj2\nn9D39EnZkHnCGrJB1mmL8zwOn0zM67ReyIO+FU7d8ImIZR33OFx+V0MqwP4USrUL\nBczVNS+34LxR+bpoaJ43bB0VmgMonCHZ5hPIjvMpYc4G260IxqeqxkXembZWD2O/\nVADsMFrZ9gj6G309GFkI5qsAB1YFSNKcXG9pgC2g3lK4rrcU5HqLBwBKGCyhadP/\n1CNiOCKm7ZyYCyhbnKU1d8NiAWJYIRJtCpPIx4SNKoypGwlRRciUqNMmg+2v87tf\n1zJg3SBU49gA8R/7T+ktfvPBLq1987nhWHsJmQhpDxpkQjZFtzETH+VFCzQN0pY1\nBHaKc8oqR0DAGRoTZ2yYWF/1N8PEYWeY0yyHxHuzWa7kuYz+U8r0dTb6djGXZ9Rq\nmtfJcfxp8bKWd2Msxnf1p8byU+O2W6PKk+DL1ru3BlXDlvpGKI1i9Q1X12nomosq\nNosZ9ayQPZnot34YtAlCXU+tBkGrAmhXb6BXOZksJx8waa6Ea5rEiy7WOC9suC1V\ndXpglOS8Ts8AxfrfsjjgDPUko9NjZAgNyFxpQAip3STNyRRKqkY9fLPRoUmPg/2w\nr+a8QVsrCwtaGOK6MtNVZYY19IGZNCYF3adqu7dIjVsMBSR/e7aSNCN37ygz4Rhz\nw9cKHFT0lEYQ3rl5uV3frebP24BpvZ5tRj+WTzIgWSlHZ1Ggp3xkhDrHrzsuq687\nftx+3UvHPUIk2iKH0Xw5rgTbmjJnrMD2vJl3SBKgFKxWEZUSy1L2yDif26GYAROV\n5Va7EAhdjJqIkVNeNl2M3ggoSUEuAuroBHlogmVc4mLZCOJp1jB/lLrkMX2rr0se\ngLZtXVKHr4l1Sb/ys0LE2vIkEUMQ4YN1XcMb5OAS0kWJDf/cvm8FtU5n27ZCHKKn\nMByHd/xpPIEC0u75SNu23jexi3rfeRtRezoypIA1FTkYsELN1uY8TyzkpnSKoaAo\nJtRNMO5qtlSHcyjZMnqcwbqFndRPcnMiF7VCHQuy7svjtcZ4j6viFFyioyd3yqBj\ndUPupDvhU3In7w9bZIKMmkxmf6lDv9zTvj06jyH3fQj9ggoiaQ7cNqkg0GGe37ZZ\nBx8QKlD3BpHLPx2tQSTuMCtBdrUGXSCgUw+CEQZUaV3NtHZm7j7mHoeLhuhelsZV\n359HTQBh+YkZmBE9oyZOopi+zqRBTKE8ySMjhUkvkoKKYrBegBNqCBHpR4UI01qo\n3eyNrBfTrFZI2RV5T+l0qOno7QmBiua6lm3wZHJry/rWvlUQqAx4ect1q/+WDGJU\nG0MIEz3txjnOFba7Lrp+a4GD5qkycxKps+ouQI3XKhsyhPFmPcB+RfYxPTWlUi6i\nXvHV2AdSKZcVqix2QxVEoKk5id3cEtb0TxQ0LB2rzVz8seMSJbdDyyVZYmDPZYDj\n10lakLOU+nZtOp0n2yBhz6yeLjtPIno3V6bwL075IvkmC72hinSUFtYCb2riAtuz\nwtqtEhqNjaCkALt2u0Gnv3f+LKff555Rp5GKzeEfgTESEXNC4cBOXkSJzdHvk1Wo\n5iyrY9f2ZQV24BP6SlYDGg1e7owvZ5lMlJgkFE8ZmYH8t0VCUc/I7Es2PKbTw5Eq\naFxlswuftkqimD5uW6fK4Sy5xcYw/xPkIqITf3espSduAnaWI+9aUv/FJMgn+ZSs\nA2ccO8A8tPX2PG1CfGC9ULNLQeAGZpfSagSGXoqTK/HALxVgti7OJwTYSaN1oxG6\ncVO5fRldhHEEkrbbpvowYUYr02edkUUl+gah6nMSS4jUZjElbXfcec7DLWFErkp9\nhDcrkKQUs6jcTNFds3A5P3uxE7MJYgNFN2zIsdMzex8+djCZps/C0pko/dEIg5HN\nOuEBb5+ywGbeLZ6yzYqkmYD6rD48z55uNpWh3xZ/ijcRlmAcYiqbPa2rB4/lI+1L\nQTrAfHzNtiAkXxYQ475ILMtxBrt4XZPRFMrC3GWTyIH0xijaP1CD7AtJerUhFZI8\n0JWc3ggCcI5ifLluuSt++N+QfvTyCZwkKqbvlDqxd938i7YUpAW97Z+LXDE3oK0E\nrn/34Inb1bi4O+/FFErcTC5STxo4VIYZHi/OTOIYLQ8udW0NDcIwEv33hmScOkmb\nqpHKShiwrTFPWAxJuTagu0wTcGtzN83OPjGrI3Q5FpMUBDtW+dbz0d82tU6YYxaT\ngsz9rR97waTBFZ3JFhxUuAmYYPPgMZ2ZXdnrR8p+syX7Ak5+i4meiWInCc2azI4d\nQE0wcFiWyYYFdiszQwICSaSnOe5OsHYceZ1fNT9lRXrVoXnpM6+apPROYv3eB2QW\nyGmRp5/0z4A5OhmS6NcRUGOS7jSDE44GOA4ZOAORRPQZxm0nn8aWGLZqK3r3TAm3\nuk3GW1uTUbZNRnPhDoWv93gN9Xy9h7toy9eru4Ykvl4P/N8EJMDsaLnDgHG2NpSA\nETeZjwQ9TMaAqDU2wxPUnAhwQSrQrADyIbbaFBgucqNBIcwAP0kLm7nvxrAeLqe5\n775mzGnue69DCmViMYUSX3pWUGTLToMblC2GbzCEhhfFS/hizjaFIz7ga6oOsJM6\niSIyQ9I5xZQeedvm6PUTNL21SrXxeTvW7BPZx3lBDoz0220ohRb2fTaBDb3Ggk6J\n10jJn8wjAPDpdcMBml5DBUtC6A0WkXAYFX85LAHDJMPBxmSTgjwMoK1R4cfCGZqm\nfKxWDUklnEaOl98RWuL2eynZ1hh2LMG7/La4CR1NACqLYlNiaeHAae2XRuEe55m7\nzgHMcKTbZXveUWcOKMo0nkCFwO6mnMaWJZztZdh9Baxbouy+8iYUEJGwWWjZSTh0\nyovNw4gdTGN+khQ2/L84esyDLXNMj5mxJjD6BoX6aSIzUIjGg2xJ0859yOGZJekv\noAwFelcikE1128QJ70cMxl7FOeizDUgqkEkLd3v1UDQVwSYuEhHZpPKOTgXpTRy6\nkTDzd6lIoaAEXBlq3mHOsl/qwleGKivWmflgKqpKzVabDqkinYiU3BjQzbFCW7Xg\nGAMrWVaC3bWQRHTP0aicAiVTR7VSV+YojAppEsUGInkHiGRmIRJFK3o/InlnLBK3\nHexxNLGpDDle/MrN5hUmJJOWzGQf3ltgH15psQ9PYcp8YUxNBLiWAqZ3QvKkNhon\n+dYeWVBBeuOMY/rmnBNaZpREuCeOv5QZ41jQabn0DTT4hoHXDTOV/CuJJC3wIHBC\nyW91bIjG7vze9y3z7eCxIY32y6fHRUTAXdgd0Fi/dcg+cnqtRvoxWL+VpPTGKdWA\nJ3H3G1eErxz9DLArOhb0NTKQf0IZub2D4muJeTVBeYE7qigiS7MR3nQOqpfW7IaK\nUKe3aXVfEjepgJn2oaJAo5qM4xJS1wZ4tlE0SwQXrX6qWnQGZrEtyGGR/u6cI5Zv\nDEhFFRugExRRQt8nouhtev8oYRrc3TSvf8xYFNr+psNzB2M0mNAHls/WsgB1TraI\nKPQ4KEnpA/pKCl1M0dIdPxNIpxtSGTPuYG00RdM4GM2Dn7+MGn+cgp2t1C4/uL+v\n786+wAYPJxl5WJe03YhLab4MjUnSwsbXQEuXFQwOrNwNwTRaJgKsMcMVOUIpjrcG\nF5hJSuMpePjYTmMcfYOi4dhFLAf1HQcYwUnFAHstQXIfXL+xy01ECKKfYPuNxSSG\nmLP1LKUo/TjQlPIlOHY8pQFqhBBCvwHbaBMOlrLR5Y4If7ga05wMSLvLV9S6FUfB\nKhzgE8WJ9jZ3c2Xqe7Yc7bn2pV0rTsFCeCerF6qW0KD14qt4N3i9wq13i4mh+0MS\nrLkj6daJgUrS7c3ZCxGnWmtBpM7p8H0K5hxb3wcT5/i0NjzObHajnHB2k9YC8LKl\n9L0bYMiVYVFiwEH9Ts9BPTOb3teND3hOWy862jtxhsakOffE3vC16R7NzhfTsJuK\nlMw/0jG1iStqcjVoQDOcF92goRrJTcCxKfTGJxRtm45cxmrLELT8KdiUkYzyyM3y\n2yAPZGe1CFa8I2a1DRTzgpzK0LOr0le+2iqAV9teXXqeFITT386eHw6J7K19it8I\npw1kq4c7+ZKxfCx791j9ol2g/4be2u5BWkqKDAILdiLD0dyfSIytJ+dEYCF15iST\niT4lQJvhgXIB+5K1xeoieGrHpzSAhMzWPc22wMoVJ243Xv5yJt7SwqojFr0du1Bj\nBJc1JKON2Fx1JCFibecMldQbOUz45MyRw9nJC2iiJac09WsIaRNqjmL+QSfTBlxP\nmCTCfFtWk98ME9EcqrJUrAXSBYUXt0hoZcOvjVvqpMBXXOuaDXY6+WbG8om+94Me\n4isdtya4twC9uLgeDXydIV71lbfp84f6XxWXnZUCIEwynziNwIV+JhsbkDOVj+wc\nKfp2/i+mGpMkKZk1QOnUUUJlZAEMt48FTnF15K+AzBXD2JiyaOxBAirOKS4Dy5FM\nIFxYHblKmIkXVnaEJe68DMVoVb+dC68kstjNilOwK0YxJeOmLaawA8O+uxn1wgUb\nli5U7HjOkO0kdszMYke/oJwQ+i4kozYaUv8Ma+NMH0NOAwI0IfTmjprPxCYyWTOY\nYcZCUoG0eUvisAc4kulADPqRTJoYPMB1UgG0uM6o1RirBVwTzIOowoClLilAS99z\nIkDarlVels6hFq4OuguQPimkbsLtzns2gyiLSiXAkOtFujNOIyh21U8WZcj41Olk\nkU4frCaLPHP5mb6SbBBokkJM58Elr7sfMrIUU3KlIFdJCVWWPCmO8fA3GFTHvMll\n0vcqaptaoG1xrbIYA1Y2WQ7rAV6OOyIVOkUWlgudjamhdxp0p+32iclQ9Tv9UPXM\nbKhaMfw14FB1e8Arol/Xhv3eM0Oiyk87ekgXc9XnvKw7jsiQ61D0Bt5jUqO7+dCi\na0FnngfuM4xzcPzcoNwEJicOJSaWHF2jrBRmmk7eYaicbUEQjCPuPOcHZuTwPKcH\nDmloIEUsQIIa261Jvzj6Qm1mQAMMwuLMpjP0pKmXwlDAyU1w4YWlNM3AnJPVaBVx\nqIp/nCqcEA6UDJRgxeQyeCk+Lp/ZQ4hEizWINXUqKwXnLqRhCCncEkOB03IgVSWy\n48vpVkUEWWXoOfVJYb6/4Cw/iKP+aKUJGbcbtLKFoctJCGHZdXLCbYnteXBb/ein\n2WHI6kdEb4bcEnpAq6jMY1Z/tlAZ5CbbhI85ee7q6NIxEIytiBRe6UhEhZs6Hh4A\nu27rVWWFe6/mDbuK13ynxHnlCbvlkM+nD7Xg0GlCFFxaBIDhQuW8x58WL2spyrHY\nA2D582P24RPybgMPgvkkaq4sIhUBu9qk6loguTuqsyRI7YhirgwmE3AdBG4GlDTD\n03IJPASBA6+GHrQVVFiSc5yEFUjGLcdsnuog4wvI86cCRMSU5aooarsOIiLO1aqX\n2c6rrPuDC3NRjCxEMhbOnanhbguf5OYuj+DmmOdTvzS3FtNXlxBT/3wJ/+DS/PLV\nt6vySf7A9rw/VF97+29ULfOj908fV9Vc58vd5kW+p9k43CmnH3/+y+jH2Xpdfpo/\nfaoPfbWWdkX+8NX2WKRPqh+pPJ2dHORfHcwspZu89fJRYrGb/HH1afy4f9I4YbxJ\n9Zuuk/Bu1NETUpKpKBFhEM6phNiSgnsBBZgcTKcEC3sqGezes+1vvRdLwaA6qtWA\npmrjAVoRk6ShMGBqoy0XodaY7+RT0MoixtVLefREXO+fHZCeTED6fao8KLZL8Fkt\nfEOqL6JIp4T+4C6TZWSrmIxUOFnXVD90TPHlGaAJmc6LM5QjaELwpgQhjZKx89YY\nJTqsEtywisDW7o2NkkpCSDegAC8N6jKCXJ+VRO0ujD1321106AbkNBzMKehdR0hz\nCVIxCDlRlPdA5eXcRxyQLwkjWFd6FX33raFXMcinCPZ8ignB39AZumZt4SiWD6vy\nbjEb/bV8bZaD9qdfj3LK05Pn9rdn+dpZ3e25XG0cpN4KQd+10J4xVX2xqvjR/JW6\n2UxmL+vx5mG+un8uV5vP42X9yfE/5CcJ5Xv5ENwMy/HpfhCcJEVK7lOkSwA3BKwX\nBFmXTeQRnDofir+xgRoVbtSoYFUjbSWRrkZc48bShuXkw8/cHH7Gevg6hDKsDVO1\n0sV0qmz69e8un3dIwNxqYa5/OImfgr6lhK4nKDTP6WkwWhOGp1Frmg3FswMZYhTO\nWoYYvQuwKiQ10IaAyMZOYlSPV+d8TjupGIoKq/UPNrLCAHJeJO6zrJThdFxvHTqR\nzzdbXn1kjPz8fJenNXis/3R1aL2S/yj/ey3qnuvqN97+w+/KiDrOIojn7d/lwS+W\nz/Ka1H2gs40M978ZHZOTEOPrdgzh9NLshg3uN2t5m1cPt+SUpfzM9p7sxgiy62z7\nptbw1Otm+517zun3sE5h+2u3qEfBOqWdKHNYlLkTUebX+RckylwhyiyCstZqUTrU\nRzZN7NFYD6SGUL3aVHZoBWRTvUuSnVLvwDKqrTf8P8vVr+tNPRh5Ksbfjn/lwi82\nHvfFOcfG795WTSijYOshCeK19JVN8Uqtbbz4i5BxrpMxvFRKLeNGEsG5DpMTDCZK\nPEiSaDhdziIztEuQ8zY6PhXxnvHBgXQ7Rku/AMGeT9/AzeGWMs1hmeZuZKqaSrx4\nmaqoJLLIzOcS9BQZ0ZjLFBfYXKZM1SGOmY91qKBsmnlZIY5KH6HpNWsbSwbBbvAR\nBgVfpo5qwXA65cojGUi5B/FelvJqkS/Er2WbpEACX+PYFYd7LyxiVQHeLDIDvCxR\nKm94ekmq2ZFg4lVNNDyyVU0AJF2YaqpxElcaH21f2SzrZemiSnbMOUB0JcY65gQK\nMpeKZw8xZ4sh91yON8uPm9/K1Wz07XKxmN1V9nh9PpNwheyqUHVIpFEOXSbll4Av\nUdFeezJ697cbjUlYPazvqg6tqsHGfZda/fTrOJzO0DRvTgxVv245f5qt5o/lJ0Uz\ntfqKfLv/1PrPOJ46QDSHb8HAlFlLp/UCbikNRYI9AfGwUppY+ISUJduWp70s+5qg\nHIzLHIxQrcSYtwf+QMOZ14aTKlVsI2LfQnWCbqdgpUUpIVeFlr1cONefbKXSc9v1\nUCugIpjO085wmkAVW43zxYw6solGEuKyhnx20E8YqVYakFHdygiaaQ3bNMpAJtER\nMISqyMZBGAoSMoLBXvRlqHWSU7An3djqoQAGI7K4GLmppvwnYCOsrWlEqR0ft/QF\n40M1+oAKwbZ43wSEsNE0hOLq1KGZkatzVELai4eNZO0ScyDKGb96dyU0gvn9/NPD\n6O1rOZeymC/mm888hDrKEUEdy04sMvLQdtfvkcO/SSfZ2UN53EnUmjXlyug8yF+m\nbPwuARICxlFKJk/okmGGkWHXHH5TiK3hbjYChTMpBr8BLJ441cvCpUwLpzLVoTZr\nmXoQy0rzStgf4Mi80gxrDya1jp68tp9k6gtr+0kznD1YTJ2Q/LKLsXAtq+qP77/5\ncfTT8jdnLq/643P1PEsLWT+DwentIWKFDfsX6vz2cXs6bR2EuCnc6yASh2YucSha\nmP2uMnOqohmBxN2Rz8PqZu4UuqA9YBikXsrtwCl5wbMre4tWz7a5NdZQorWFFdQ/\nM5vGBXnpmXVYgZRj4dLMooOKkOrKUhkdO0m8MpLVkF8BTxCrj9o2IfO0WWsbTc96\n0DB1YDGgOjUUqsjPRXLeLm7cY9yRd01Tg2kgRzMj7hP9p/MGHgOaKegBzw8+cXL0\nCfvZJ96f/gT0YKrTr5fkOiR+SPYLqe236aKkcqmTGwpWDwPtqqXraJSqlqqFOHXg\n4wsaqJoYeKadirqbOk72srReGY+QaN/LVQcR63RC51BKXDIoVSLlW400vL11IqUU\nHEAztp8obGhrP7EA8UIUTekCwb3yGhG6ZbbqD998OehmktIpVoiukQBerV0jCrte\nmGtUamxGd41ulZVvNmpoPXUTs0/oVBuYmB0HWrjRik8xuxKTFIzqgYrqeoGNYaiH\nGjTS1cOxU+rTJ30BHmk6MUmTuQ2/rbvCPYy83SRIMjpxPDWHSciQ2GN8f2PqYZiJ\nCwM2KEdMUKza5jvQmII9zzZWDxdZsc3ChGT11C6JrhWE/CFOOr3ESaHkD5WhrIGU\nXHumXh3Tl+OWJuCUjxZ2OMUb3EDjkvLDSngBtseey9FpoNaHiwvQwaUG6MNx1bPP\noueFRdFqIE/PizgVZh8htOeapvZk9LUEaE9GKKBwl04uyZMpx96TunByylhQbmaL\nxXwzk6KgrLlVErKmILvv6euU/bKd8yG7m1GM1/tHuSufFo27cXi8vD19zbJWX2gg\nHpJUNHkHq+9gKrz3Nx8oUpuvl67FJR9JltLDZvMsT93JUcofd6IGHaMY+vO0RiO6\nU2WfvRjw9gt4906HyHKKyHIGkal2Alyk6BSRgGhRypMNV44zXAqpWRguSF59GjD1\nkYKMmKgTRfhxxcG6aIPqPt9L8+dqGVo4oYYMicJjlBovrd+AspLYCyQWQwEGIlRg\nAAmXISPl+FlSU6djCN9OBLQTj01klRRg05v+m7imfmQItgLgfDSKw1WEj0UGdYvo\nRel4nYL7gMFnDkFXEownYAeXvQSRZJC8bVwXJ01lm3huro+uty4wjwFcqplV8SQX\nmbmSujWwjk2rd+zWDu2qERWym1JDSwUZde8yxKeKYvKkkYgx2v21Bc6uF4DVEqVu\nAUOporebv2xVssGVrODcOBPED8vyfvRNuSif7mYrHp7kDkpkyGigv64tHfLitmc6\n5IX8RW53v4fvpWUlXRkYCrmVXVc+Uis8Nt65lvTCbWIUINByK0Sa9JjF5lOTtrLo\nH08Vu1k/PM+ebjbl3a82Oak0bW6QURdeziR/ePPop0W5kSJ7HBVvolEjmfmn7+ST\nzgV84MFayiesqyeM5QfH1WtdLyA5vuFeHvLdZil/9E10vX9VCNxzYppAnRhHSeQn\nAujwcAopyE/zreU8vOZaviYo9j8pAaiirJcA5ezZT93PrXGqvgu45IW1R/Jfr8oq\nJikX2562lni6YITGTi2f60YzxrVJx/ft3lUbrQBZ+AXcCHqUWnaiOUTRyI/3IZLr\nLFRR5FDZSSOKvNON5GpJsLW6twXhrRtRlfGnCcRPo3UjB4v2vvrlF4sKahP1o3Iw\n8/2nezFe1dtqtxOgukhETF4DgwDENDxW9IPHCp8VSblnD+TFOIoilRLoVBWFAUud\nuBLYgqUB6IbSkIkGOFNHi3pAjI4Jc/aY8GCgAosHoY4+/eEb+Iw+MFWgTiIuwCrX\nURTfSRy/fBz9tJq9zme/YdqLl+uNVL+P9ef6AFTbN/nrClSFqnRKzlhq3PQ+QWQU\nvdeeevcAXlDVymMFE89LowW1RZKwrxno7QftBiOUeJJCSZajUESFo2BrJXhN1KfV\n/I8/Fp89PWO1gSLvZELEEQZpqz78eKBpqjgDmWOPMnm3Xs9+P7pxWCWetz/K0Yhy\nPPlZ9a0uuCElnZJbAyh+3iAu33t7/gC97fO9hWcqt1806fSgSPE0AYyOFDPuSLHO\nNYYUJEp9IW+mNqqf0BVnXz7pQW+a1ZOQ1Eb6IzxaPvFH2LBy75XYGs5PfdMlN54L\nmHpeX1whJifd1Llw5RXfsZy6yoJPDiMiTXoHxTHe7MHEHaLOkOyb9E7k5eyIoIji\nhdjDID8jVBVGy/WLvauDVRz8UT2q49/2+RlYMvnh2WP51Is1270rSIuW61e3EQVE\nlUwvIvFTU1RzSFEB9Tif1B0pBUf2SmMw5ywvvDapT7zwtMaV/bXvpdayvfzeum11\nEoa8w9ooqDQJJ3sLJP1UI3UUiUfCJ1Ekgu2lHUbyDbqexpFfwMCrVDTyMA0l22lQ\nPTikO/toHGvlO31HbOpeS3z+5jQdQMkDsCcA/DR26g1x+CkJAfWEnZQ0+whQ9pVN\n36+7Ghfju7xrXEyDZWk//cSpz1kUZdKxwHcfndZWKF317O30floZ9TwDvvfu9Mhp\nmUQnTfS44/f20qtb7vAx+GnLHdrk73ru+klM1U13AZp9KQq82T8VBVoGfRy+n/ZH\niXIEvs4kAE97AnJ68LB7jOOtwVGOXU8UXIFU2owra3KMRGTk5AtmNv+7cr1ZVdeF\nzIbxcfdJ8s3Zf/D09lwKF4YAoz8DSdEJL/i812WwXQgQSZiIiapFbGY3eCVi4ALa\nklLhhcNFIHbOO8IsmAEZkRORkycpaY6LbBkPnotsImmuK2DTyMADtFU+srCYeTQH\nFNiwSknm16AppYE2cqlhj9ug3CgfVLYzwSV4eXBjEU95to7HTx7Ywdo+KjbkZYQe\nAiAOYPIaRq+Oy06E+e1i+XI/ev/0cVXZlJc6IsdG62oqNX23Vscru5pV7tZ1Omx3\nOwoXaeFiezFbPKh36z7WCxlJ9G4+zlv1cX3LInDGWvhxesgu6tzaU/Y623t+2I10\nhnqGR3Pah2zv+Tqm6iXN4973keA3Me0+gTnyueEept5POoNAGXTQWhOiOW6qKSEe\neiDWJIMCVOjY9VZFc+5k60I8+MAMDJTZhs4ff/BsJ+5hDen8nKGoXuc1YXfJ4yeD\nONRGnpLkHVVe8eRU8d6Qcqoeu8Jm92rUGXn9Ml9tXsrF/I+6jdgGscdxRKjXtN87\n+l5+avUqT1RHSnIMqx9mrw8cwXX9YB9VRZN6SmNC3eXkuH8sn8pPMsYWbwSui6w6\nnMex/HG+Qkv9imv5Ck/hjibNEceEPIdSDI/ymEZvP8n/3q37oHY7VSc3fvz0uBmX\n1VNYdpi13nDdn4wG2boTg0vbKTLFzfOdCpGv7HwuTK9hrkbvEjDIQ3mbAs4pFm3X\nw6NdDxetUdJKEiaV6VbSwD6yWcbLIA9SDkJRxs1BIWadSpfphGeNPzK0WfQWh2Qq\nn5WCFEEog7g1h2rOoFxhCQmEQYTFcJVB7IsoaJAVmwWlOqlF7zEmWqpwe8yJ2Hva\n4OcENhTWNqw694wA6qrjz5jhXCWFLEQYJ6G2OYxTQG1sLOvUo+CBtrceRYmwU9vI\ntlKVlKgqaQ+qkgapKhPKakCtPBKiPJIe5JEEKY+IwpmtkwfSgTOefjjOW544WEJH\nHTkC3VZnbsOFCR36/tlennNGWdqCCfRoIV4vwZ26fc6DSE76XXM738psEZJabCOy\n/ea2nOSqErArCnv+KIKQrQD4+EC2EvDdwSrpDRMX5v5NjjX4b3JLk58rSsVbhJP7\nbfAnlIXFXdCSUktM+GuJib+WRx1xuUhOpDQxpPxiSIMSQxwntoHWWbHCKDHB27d+\nwTVddeLPNtG0S/xhM36sqb5gYjZp0yyceBtOAYsMtkCKY4FBv/UIF9gpSWMX9QVB\nTBZxcnwd+4N8x7JKnxLHTtQAV5njylw8+A5jC/NDbuFYZMCQcOaIJHr1+bSlZbfN\nEu3QKhansiLUYDyqPHYnYTE6D/qGNRP6xu9cqGgZbutggEwfexoT8OaJwmoLVLZu\nJraZjPPYzSBq6yVeu4xOMyVxs3UEvkv8URIhuYtESFcKMKQkiEiyxNzLKBpsUcGb\ndUfZeVvtxXSRqaxdNLWP8kgRHn98573XUdsrF9E2dvXP0WC5kEaXxQpQFjIsAScJ\nkXEJEh6nrPA49RseF9atAru0KsVTZ/wliywobx1nlPXYmI6NLkOkbdywN0f4/g3f\nTZOis0O6CRdlVnC5xdE/sDmGYLIlMiB00MWKIN07Q0rMhHsDwaVBancJyCxCCkUI\nbTmOhHgellya2NTRCYFqG+7tp6VheunnD8cMRpRVWPrOWQJKY8doQSE0GZaYK4PC\nhqGNl1OrdRkZR3XTpzk0a3cpYCTD1ubpp0FST4QTiMnpE+FGxRUmbz9o4DLQpLjL\nKkwG99BpQ1I3PXT+zYyzi1U1Y55NXeps1uXKugXaiygvw9mpJkzi2OXQrS1dEevs\nSSDzt8pStoWUmh1j6KyFiymU7u4x35N26gx3I4FkXk/I0PWEjLWekHldT5AuxmXv\nfYbI+HR7Gns06G1KexAIEbuJs4j5WGeJPK/M2yDENbEFK8SZANGSYxPZZYA8NbOK\nk4QTOuXnYIi4W1Tegjd1k66LUh+WHuINJ0HEm5Dy3EXRAM3maC1Go7WYFa3FfqO1\ngrKis+uwKd0fMX/3RxyUsZFisC207cRAaj+Lexj2ioMMGW1cb3d+hZZZ6SWn4qdv\nUCVUJplt+nI3HYblN2BlNvDz3NUtOC46MvHMpIfuGy5u0iaB02XGDomDrk50jHeQ\nF2Ob1AXHeam5VTsLyPHBHj85xQVRoqt1zAHZC1FsB01jFVyfvTkDic523ON8yNBo\nSUQPWc3LTlErF5zGNTe3avvUd8vV7pBNlyQJsFH/+KLdxqt3T5/mTzOckt99HMur\nwBgh1y+4Diw+nhYgL0Tj1Bsauj/6M9Apj+FxNs4qAojjumFqIqh+yKFMJCH98Zi9\n5ZpRTb+JxO54M+Ww1f6IU4dHnAZ6xGKKXB6rP2JVRnN/xPHxiOnF55MjjkM4YlVl\nUkxQW2O3J3zzeb2ZPR7sA2iU15VR5jHH68och5MMEOACBq0DxLk+RqcXzClLk4za\nnt5pkTWIVGmXzTLBHdY5xLRvImz9oIqTZ3/ewqEfFCEYabX1gJIdWuuBCrD2RoSv\nsrG3JQFe8HiSQeW+bhitMyUtFG1nQ5ogOhhzLS0HanV6p+HQHa5wd7gixMOVwI5w\nuCfADhlzr7lj7nVwMfckQ22j19oK9ckrLYbRwXfYjZDOWSI91Db6TqTXfdap67NO\nAz1rkdmiasW+PmUMbne+sfdmWh1/EwLDEzONxXZrdmy3DhTbybsN1TTgu91tR1o3\n3IUdiUOwI6r5qyyxwtFZR6uW8rCdROdxQNG5inxHJITQUeMoUS7SnXP003gr0V5O\nSJ4q0B5wmxPnuaYkoNusjhgJ3lITMXaba+Ea9okQzLX6rAk1W81ZAxdcOL/gIswL\n3hihqJuaTw76ptzMFov5Zjb6tnxev9QpVuNivCgKyA+fvW+Uv4lG49GH56qZo1yM\n/nTozs1HN/Uv8WckHF3vHz2+2z56vNw9dCzfwYhS5YvPXnktXxnSNTlO5xaQV1eL\nUCk3TLbnXGyVtNhyPw1h1TIKyXCmUdHIAakLIirpxGrpvL/5QJRLPJ6vly4JENvS\niK/l48myeNhsnqUsHN1+KCFhZsCsLFefJisYhCxFBQE2gqEyMVE9GKeQpAFlTQnS\nMHT3vXn5UJ17Gk2gnBTkPgqUcy+6nYgDgpoCdCXeOnbVZt4ILKkR/Lqx+rhJ5cJe\nPkzVMTFwGtUxURpmdfHT1aiIDosC5A8i+Bo6CI7sQDDOuwwOhI2uuwYIFzjb1KEA\njiN53TBusJG8Wk+ghgFITawslhVARgjIY4CslIaRh9dIwxR6OcirYCUTGPyCqi0E\n+GWa9HLS8ASDL28Fo3ZDUKXAzA1Z+Z8+HU9IBs42H2MPE3pDB+GCgglI50QQkxI8\nA/KxAM9YwfQJntXIyyTNAmeRzTxLy3b1UVdpW7DA/I1Z9QvyN2aAza3kyL7HW8mp\nIVxuYtg0CRq6YbMqjWESNAMbNXnAJrV9zfka+3cXKUrMaQfo29PIqPtCE8WYxC/M\nkYufWFjZa1OHLXoKkx/mTy+/j76ff3oYvX0t5/KM5/IwPzcksZPDFbIbR57w8139\nv/Ny/4/yv+XfKht1kiInsKnC3/ao2ePRd+V6syrvftVcoYfy2Jl10PSPu88QbtD+\nI9pFMQ/y+5aNr+vp9VHx6omIwNkOSyerGQ/ff/Pj6Kflb5WQQI6jppCy+o/P1Sdt\nqY7qh2j5288EBuOP/aWvbrup4KqvR6HFMW+hnt8+bs+xyWtc5ATqI4omkoR80EQ3\nZFadesgOK/uSqCr0ywgcZLA0IX/cFOGR08p9cKe2pWcCOzicoeO4aU7g1McY0LZS\ndaHXtulsahXf5osz8VDR6wE22MivP0N6Jm9pRQmcjaZ4hmpLD6iGak/p2CakUF0K\ny6l2IsNKpYj4ksXWOumHpAh09HRwQoQlXICENzAYEI1M3VrFoxvExw47+VknLx0G\nDS59ntN5bQrJvUHUZxLwmcvNy1jPeezmNE5Xow6yTzvADrJzo+OOAJ2a1DOnEbcm\nu0LPq/SQUQE8XfjplGlO4NmnB35Ut8e7LHlg3zdkvCcypzqcKy0vPuXiKn+d28NU\nj3IwjpPY5Cgvcxfl+Z15cYpCY8cW9BSF4qV39I8WAiR6SLT8/IOjInUaP+TUYD13\nFazTstDMFrEvL6faeVnkTqsJUP+rMproIzWmriZ4ECuIzKkxxLXyKXWKrW/PBkR6\ngjSknjgVE65vT6ktbE16QWf8RQaNV1h5JiyiyB2X49AqRQeFgXoskTqtF5wKmmo0\neTdzDWU5B5Tv1G3bWEYAJJkDQELLkwUQq0VO1U2TyTQJ2GwtrM9R27AZThmgO3Wm\n5wE6SdA9hOQnyuhf4J2Q1oXTy+TkCpAjfONF5WfQ8rnT8Pu0mEAsI/RRQMAmVMKu\nHojMaf8RknlHiVD56KoGDkJchvcC3JLjoNhDFp3jMntn6Sdk2TmtAqllR40L3TZm\ndkounGya/H/5Cy+X8s37IaZykn2cTuL0LosmIi0i+acivk3Ex7RMK8K/f/3r/wM+\nbAR2\n-----END ENTITLEMENT DATA-----\n-----BEGIN RSA SIGNATURE-----\nQCBE/Px2qWjlk80BrlH8hUeoE185t8ZahITUfHuMjUqhVY92wwMhyJJrEemOqSa0\nflBgZXHAnw96kSriNowtxCA8Ay2jaoI9QAqYHI6tUdes+Xn0bvBHNvejfn0S+sbT\nhz3lEc6ltyq/rqhmhQDV9Z7DoE1iuNMMpcRzTs63lFWE5TsyBdwO6+3sCCrgkrqz\nstAPI2shkd5/B0NHMbHuRKwOupDdjWqa6kdMKh068+M6z0lEYlBQxeGnkdA3P2yo\nRlT3boR9lAUhEUqMb+tmyQy18s/o/eWjLdgLP/O+IFSdgdqgOM1YeU0/WSqgo8FV\nHtUmTevWVGjwycUIsIdb+ElE4pihce6C8CKz2TUDlhWI7tCnJRXiiWhrSPEmVtD5\nYr/gLnrxc/9MNWZmzPxJ7KVEh2Xp/tDjdnfD1lswwHRHAUqm7PEuH0Xuef26n4ig\nNjtPnO6SN6GRq+G/eMv4ze5qpFpXXMl9oPpS7eC38AJHLvMjE9QIc/TV/+MdT1H9\njCmBMIShTsrnl4Nx3jfzgOEmGm3dW7kkrhVHABg9ADFZhcs9YGQDdMJhEaFeW2l3\nkqHV6R29dBHUARdmUTnSuhegAPPsXXS9iryIk0RqHk8u/M0NQGSwK7HEAQkRklyH\nZjHhrgnFfJYmCS/15uHWdwRYgHeSR1PXpB0Sxdj7oMs=\n-----END RSA SIGNATURE-----\n",
      "id": "8a85f983510e0e2d015110e482965630",
      "serial": {
        "id": 4302369103582938050,
        "revoked": false,
        "collected": false,
        "expiration": "2016-03-31T03:59:59.000+0000",
        "serial": 4302369103582938050,
        "created": "2015-11-16T15:23:09.000+0000",
        "updated": "2015-11-16T15:23:09.000+0000"
      },
      "created": "2015-11-16T15:23:09.000+0000",
      "updated": "2015-11-16T15:23:09.000+0000"
    }],
    "quantity": 1,
    "startDate": "2015-03-31T04:00:00.000+0000",
    "endDate": "2016-03-31T03:59:59.000+0000",
    "href": "/entitlements/8a85f983510e0e2d015110e47e6b562f",
    "created": "2015-11-16T15:23:08.000+0000",
    "updated": "2015-11-16T15:23:08.000+0000"
  }];
});
define("fusor-ember-cli/mirage/fixtures/flavors", ["exports"], function (exports) {
  exports["default"] = [{
    "name": "Flavor-16-x86_64-16384-99",
    "links": [{
      "href": "http://192.168.234.254:8774/v2/88e659ab600641d38bb9ef8fe1a6d0d5/flavors/1",
      "rel": "self"
    }, { "href": "http://192.168.234.254:8774/88e659ab600641d38bb9ef8fe1a6d0d5/flavors/1", "rel": "bookmark" }],
    "ram": 16384,
    "disabled": false,
    "vcpus": 16,
    "swap": "",
    "is_public": true,
    "rxtx_factor": 1.0,
    "ephemeral": 0,
    "disk": 99,
    "id": "1",
    "extra_specs": { "capabilities:boot_option": "local", "cpu_arch": "x86_64" }
  }, {
    "name": "Flavor-16-x86_64-16384-40",
    "links": [{
      "href": "http://192.168.234.254:8774/v2/88e659ab600641d38bb9ef8fe1a6d0d5/flavors/1",
      "rel": "self"
    }, { "href": "http://192.168.234.254:8774/88e659ab600641d38bb9ef8fe1a6d0d5/flavors/1", "rel": "bookmark" }],
    "ram": 8192,
    "disabled": false,
    "vcpus": 8,
    "swap": "",
    "is_public": true,
    "rxtx_factor": 1.0,
    "ephemeral": 0,
    "disk": 40,
    "id": "2",
    "extra_specs": { "capabilities:boot_option": "local", "cpu_arch": "x86_64" }
  }];
});
define("fusor-ember-cli/mirage/fixtures/foreman_tasks", ["exports"], function (exports) {
  exports["default"] = [{
    id: "db25a76f-e344-48ba-ac77-f29303586dbe",
    type: "ForemanTasks::Task::DynflowTask",
    label: "Actions::Fusor::Deploy",
    started_at: "2015-04-07 18:16:55",
    ended_at: null,
    state: "running",
    result: "success",
    progress: 1,
    external_id: "4f7ca3e7-8828-46df-a6f1-e6b07964efb1",
    parent_task_id: null
  }, {
    id: "aaaaa76f-e344-48ba-ac77-f29303586dbe",
    type: "ForemanTasks::Task::DynflowTask",
    label: "Actions::Fusor::Deploy",
    started_at: "2015-04-14 12:31:46",
    ended_at: null,
    state: "paused",
    result: "error",
    external_id: "4f7ca3e7-8828-46df-a6f1-e6b07964efb1",
    parent_task_id: null
  }, {
    id: "55fe84db-4a95-462c-83dd-704a08d3d8fe",
    type: "ForemanTasks::Task::DynflowTask",
    label: "Actions::Candlepin::ListenOnCandlepinEvents",
    started_at: "2015-04-07 18:16:55",
    ended_at: null,
    state: "paused",
    result: "pending",
    external_id: "9ed42d73-8621-4ebd-acdc-af84a52cbd9f",
    parent_task_id: null
  }];
});
define("fusor-ember-cli/mirage/fixtures/images", ["exports"], function (exports) {
  exports["default"] = [{
    "status": "active",
    "deleted_at": null,
    "name": "bm-deploy-ramdisk",
    "deleted": false,
    "container_format": "ari",
    "created_at": "2016-04-29T13:51:50.000000",
    "disk_format": "ari",
    "updated_at": "2016-04-29T13:51:52.000000",
    "min_disk": 0,
    "protected": false,
    "id": "484b6875-5ee4-4ee8-a8b8-0c5e81eb8b06",
    "min_ram": 0,
    "checksum": "68fcd461d9d920c1177e5f1a3208a639",
    "owner": "88e659ab600641d38bb9ef8fe1a6d0d5",
    "is_public": true,
    "virtual_size": null,
    "properties": {},
    "size": 344421623
  }, {
    "status": "active",
    "deleted_at": null,
    "name": "bm-deploy-kernel",
    "deleted": false,
    "container_format": "aki",
    "created_at": "2016-04-29T13:51:37.000000",
    "disk_format": "aki",
    "updated_at": "2016-04-29T13:51:46.000000",
    "min_disk": 0,
    "protected": false,
    "id": "0cfa071d-3ab8-41fe-ac6e-d1a75d622039",
    "min_ram": 0,
    "checksum": "5978101c3d3086f6d4e5e7fe0d47f9e4",
    "owner": "88e659ab600641d38bb9ef8fe1a6d0d5",
    "is_public": true,
    "virtual_size": null,
    "properties": {},
    "size": 5153408
  }, {
    "status": "active",
    "deleted_at": null,
    "name": "overcloud-full",
    "deleted": false,
    "container_format": "bare",
    "created_at": "2016-04-29T13:51:26.000000",
    "disk_format": "qcow2",
    "updated_at": "2016-04-29T13:51:36.000000",
    "min_disk": 0,
    "protected": false,
    "id": "9bb4c289-eaf0-481c-8a0c-e5cef39aff9a",
    "min_ram": 0,
    "checksum": "270119f95d0337f186be3c1bc4211cf0",
    "owner": "88e659ab600641d38bb9ef8fe1a6d0d5",
    "is_public": true,
    "virtual_size": null,
    "properties": {
      "kernel_id": "18a13f44-1cc5-40e9-959d-d142d8d8f0bd",
      "ramdisk_id": "38a6b52a-2c53-4e58-8d70-3eba262c117f"
    },
    "size": 1028305920
  }, {
    "status": "active",
    "deleted_at": null,
    "name": "overcloud-full-initrd",
    "deleted": false,
    "container_format": "ari",
    "created_at": "2016-04-29T13:51:24.000000",
    "disk_format": "ari",
    "updated_at": "2016-04-29T13:51:26.000000",
    "min_disk": 0,
    "protected": false,
    "id": "38a6b52a-2c53-4e58-8d70-3eba262c117f",
    "min_ram": 0,
    "checksum": "1144dcbdf702f5601fb5d0014d9fdd62",
    "owner": "88e659ab600641d38bb9ef8fe1a6d0d5",
    "is_public": true,
    "virtual_size": null,
    "properties": {},
    "size": 40324447
  }, {
    "status": "active",
    "deleted_at": null,
    "name": "overcloud-full-vmlinuz",
    "deleted": false,
    "container_format": "aki",
    "created_at": "2016-04-29T13:51:11.000000",
    "disk_format": "aki",
    "updated_at": "2016-04-29T13:51:14.000000",
    "min_disk": 0,
    "protected": false,
    "id": "18a13f44-1cc5-40e9-959d-d142d8d8f0bd",
    "min_ram": 0,
    "checksum": "5978101c3d3086f6d4e5e7fe0d47f9e4",
    "owner": "88e659ab600641d38bb9ef8fe1a6d0d5",
    "is_public": true,
    "virtual_size": null,
    "properties": {},
    "size": 5153408
  }];
});
define("fusor-ember-cli/mirage/fixtures/katello_environments", ["exports"], function (exports) {
  exports["default"] = [{
    "id": 3,
    "name": "Development",
    "label": "Development",
    "description": null,
    "organization": {
      "name": "Default_Organization",
      "label": "Default_Organization"
    },
    "created_at": "2014-08-03T10:25:18Z",
    "updated_at": "2014-08-03T10:25:18Z",
    "library": false,
    "prior": {
      "name": "Library",
      "id": 2
    },
    "permissions": {
      "view_lifecycle_environments": true,
      "edit_lifecycle_environments": true,
      "destroy_lifecycle_environments": true,
      "promote_or_remove_content_views_to_environments": true
    }
  }, {
    "id": 4,
    "name": "Test",
    "label": "Test",
    "description": null,
    "organization": {
      "name": "Default_Organization",
      "label": "Default_Organization"
    },
    "created_at": "2014-08-03T10:25:18Z",
    "updated_at": "2014-08-03T10:25:18Z",
    "library": false,
    "prior": {
      "name": "Development",
      "id": 3
    },
    "permissions": {
      "view_lifecycle_environments": true,
      "edit_lifecycle_environments": true,
      "destroy_lifecycle_environments": true,
      "promote_or_remove_content_views_to_environments": true
    }
  }, {
    "id": 5,
    "name": "Production",
    "label": "Production",
    "description": null,
    "organization": {
      "name": "Default_Organization",
      "label": "Default_Organization"
    },
    "created_at": "2014-08-03T10:25:18Z",
    "updated_at": "2014-08-03T10:25:18Z",
    "library": false,
    "prior": {
      "name": "Test",
      "id": 4
    },
    "permissions": {
      "view_lifecycle_environments": true,
      "edit_lifecycle_environments": true,
      "destroy_lifecycle_environments": true,
      "promote_or_remove_content_views_to_environments": true
    }
  }];
});
define("fusor-ember-cli/mirage/fixtures/katello_organizations", ["exports"], function (exports) {
  exports["default"] = [{
    "id": 1,
    "name": "Default Organization",
    "title": "Default Organization",
    "created_at": "2015-11-05T08:40:31Z",
    "updated_at": "2015-11-05T08:45:36Z",
    "select_all_types": [],
    "description": null,
    "parameters": [],
    "users": [],
    "smart_proxies": [{
      "name": "sat61dev.example.com",
      "id": 1,
      "url": "https://sat61dev.example.com:9090"
    }],
    "subnets": [{
      "id": 1,
      "name": "default",
      "network_address": "192.168.152.0/24"
    }],
    "compute_resources": [],
    "media": [{
      "id": 1,
      "name": "CentOS mirror"
    }, {
      "id": 7,
      "name": "Default_Organization/Library/Red_Hat_Server/Red_Hat_Enterprise_Linux_6_Server_Kickstart_x86_64_6_7"
    }, {
      "id": 8,
      "name": "Default_Organization/Library/Red_Hat_Server/Red_Hat_Enterprise_Linux_7_Server_Kickstart_x86_64_7_1"
    }],
    "config_templates": [{
      "id": 44,
      "name": "Boot disk iPXE - generic host",
      "template_kind_id": 1,
      "template_kind_name": "Bootdisk"
    }, {
      "id": 43,
      "name": "Boot disk iPXE - host",
      "template_kind_id": 1,
      "template_kind_name": "Bootdisk"
    }, {
      "id": 50,
      "name": "custom_deployment_repositories",
      "template_kind_id": null,
      "template_kind_name": null
    }, {
      "id": 48,
      "name": "idm_register",
      "template_kind_id": null,
      "template_kind_name": null
    }, {
      "id": 18,
      "name": "Kickstart default",
      "template_kind_id": 5,
      "template_kind_name": "provision"
    }, {
      "id": 22,
      "name": "Kickstart default iPXE",
      "template_kind_id": 4,
      "template_kind_name": "iPXE"
    }, {
      "id": 21,
      "name": "Kickstart default PXELinux",
      "template_kind_id": 2,
      "template_kind_name": "PXELinux"
    }, {
      "id": 39,
      "name": "kickstart_networking_setup",
      "template_kind_id": null,
      "template_kind_name": null
    }, {
      "id": 19,
      "name": "Kickstart RHEL default",
      "template_kind_id": 5,
      "template_kind_name": "provision"
    }, {
      "id": 40,
      "name": "puppet.conf",
      "template_kind_id": null,
      "template_kind_name": null
    }, {
      "id": 2,
      "name": "PXELinux default local boot",
      "template_kind_id": 2,
      "template_kind_name": "PXELinux"
    }, {
      "id": 1,
      "name": "PXELinux global default",
      "template_kind_id": 2,
      "template_kind_name": "PXELinux"
    }, {
      "id": 41,
      "name": "redhat_register",
      "template_kind_id": null,
      "template_kind_name": null
    }, {
      "id": 45,
      "name": "Satellite Kickstart Default",
      "template_kind_id": 5,
      "template_kind_name": "provision"
    }, {
      "id": 47,
      "name": "Satellite Kickstart Default Finish",
      "template_kind_id": 6,
      "template_kind_name": "finish"
    }, {
      "id": 46,
      "name": "Satellite Kickstart Default User Data",
      "template_kind_id": 8,
      "template_kind_name": "user_data"
    }, {
      "id": 51,
      "name": "ssh_public_key",
      "template_kind_id": null,
      "template_kind_name": null
    }, {
      "id": 49,
      "name": "subscription_manager_registration",
      "template_kind_id": null,
      "template_kind_name": null
    }],
    "domains": [{
      "id": 1,
      "name": "example.com"
    }],
    "environments": [{
      "name": "KT_Default_Organization_dev20_Fusor_Deployment___testnew_3",
      "id": 6
    }, {
      "name": "KT_Default_Organization_Library_Fusor_Deployment___testnew_3",
      "id": 5
    }, {
      "name": "KT_Default_Organization_Library_Fusor_Puppet_Content_2",
      "id": 3
    }, {
      "name": "KT_Default_Organization_Library_Fusor_RPM_Content_4",
      "id": 4
    }],
    "hostgroups": [{
      "id": 1,
      "name": "Fusor Base",
      "title": "Fusor Base"
    }, {
      "id": 5,
      "name": "aaaaa",
      "title": "Fusor Base/aaaaa"
    }, {
      "id": 6,
      "name": "RHEV-Engine",
      "title": "Fusor Base/aaaaa/RHEV-Engine"
    }, {
      "id": 7,
      "name": "RHEV-Hypervisor",
      "title": "Fusor Base/aaaaa/RHEV-Hypervisor"
    }, {
      "id": 2,
      "name": "rhev only222",
      "title": "Fusor Base/rhev only222"
    }, {
      "id": 3,
      "name": "RHEV-Engine",
      "title": "Fusor Base/rhev only222/RHEV-Engine"
    }, {
      "id": 4,
      "name": "RHEV-Hypervisor",
      "title": "Fusor Base/rhev only222/RHEV-Hypervisor"
    }, {
      "id": 8,
      "name": "testnew",
      "title": "Fusor Base/testnew"
    }, {
      "id": 9,
      "name": "OpenStack-Undercloud",
      "title": "Fusor Base/testnew/OpenStack-Undercloud"
    }],
    "locations": [],
    "label": "Default_Organization",
    "owner_details": {
      "parentOwner": null,
      "id": "ff80808150d6cd1b0150d6ce03ef0001",
      "key": "Default_Organization",
      "displayName": "Default Organization",
      "contentPrefix": "/Default_Organization/$env",
      "defaultServiceLevel": null,
      "upstreamConsumer": {
        "id": "ff80808150d6d8ad0150f0fe88d802ac",
        "uuid": "7ffddefd-aacb-4192-a999-01beb7c2e473",
        "name": "tsanders-rhci",
        "idCert": {
          "key": "-----BEGIN RSA PRIVATE KEY-----\nMIIEowIBAAKCAQEAhnYNVp8bo9LdLsLS3paT24HE6le6tX4wu4TneWGRNCOtAfT0\npiAmyeH1hkKbAuEPnJGF4Qw2mot0UlWFGkaReTuY5VbWWFUk8103QWO1DcfwRDwP\nxxIP4JPaT4xOY1McO4LDa9WODk0hrIEEvM6w/lna4L4NZ5xUGaRaWRB62Jmv2u99\nVrlZ954tHpLlVmMPR8rDZyJSwnJ0WMcqul16FnJTDeZN4SVe9uwanoTmoiKZezES\nN7X2QT9GwGbpkPPyMCH8pkCJHwYdvLiG82/v1/Ilg94S5n28CnggUYXHU06jIDui\nGZdnMUxlMNnt4esRivQkrlKiIrJeVaJ/U/4K7QIDAQABAoIBAFn1y7DDnNN7db4e\nXMTNi7kV1nBPJ7zb47DiF5gvPd3bbJndkH1BD5KMWh9smpdPiolfF2pdKH83hCi9\nzOKqihPJWt89vQS2WpV0LU7TbcP9m/ObF5dBr1u6sBn+rkdnyIDMWQDhjTxmQHxQ\niaHky6gw5+7rWL6UafQJ8OSb0QTuu+1x6qJZzZkwZXxrmXqGwMAAZmy82QCeFwfO\ntwaM1iuoI7QIIyvno7vnvmM4Ez3WpPF/jp0dwJ2ADjQg1ZNSa35BULxd6tQDT/KG\nTH3Z7GHNChkzlM3EmTgbrD18imj2yqgIoJh2IO0NkFC91oxoSiAUlD01Ya7KfWCR\nSOK1nQUCgYEA0mqAXIT9SSnVvo4gecglxcPqjOQNjSKTlGOSsRh5aGQEW0uOUW+/\nBycbn5Y48nWAcit/U0rAQRvEkOVRrkap6dbYwoIZNjejnF6+h8RwtuhloDqJdEYP\n6oLwkX87Et9EdzX4h5iRVnxqHmw/YfaTnm+Uh5J4I7lrTdVTtrn0VtMCgYEAo5cn\n5HQhJ0g0TL4z4P75LH5UEb8Nbb2s7zteFkQDxJRUkvrm6rYUNxV589qtjBYb9RCB\n4BuN+hF3iTU0nvs8dBCal59/24NabNQI++5AaGAB3/BuCNadFMFjuCC3MjqSAw10\ncN3IAveyVyApcpWuKOFPvirjyg85S9xY+xTOfz8CgYAPJDLQdZF0blo/OCMGIGz3\naj26nb6L5W0RRIkNzWEPLgNSPoGjQpNQhHPsa/b1G5d+n7qt17c1+DWQ56+VBui7\nNwaqGIqP6DkRy4+SXYRu5RJLEWtKvq/uhDWjgrBRj1dx7KRRvZzXyGQqhEebWQ8O\nW6EokFWs3G7oTu2TPJZkmQKBgAqgSe4UAQdNMGB/xlzqEwNp3Uodz+B9/pq3j4AA\nwQHm5Kt7cr5yP1PoqDhHzxgXY4+Cl/0XrRw+QDaAZz+gcCfV4ETTDnoSyS/iggbj\nTfm5qsWCF5OpZSCxAyo1rdCsb0mVeSfPsCtJLaNtKmQQBvUO1aAzpwI8BOvBj2IX\n0uX/AoGBANCYxXM1mpVj/Nnav1qwkeIvDbcJZEy7gtZtx3mPwcCcsF0KPzrFzKN3\n1H1OpR91SGMinoovEmdfUOC60g7Eh16hUDY/I/xrjRKB4R52uIICIVDUUqKw0RWY\noYwVIwuGpW7YZEz8ZKxpJibx/IrEBlQlGGDfooktmdMaxLsojAoa\n-----END RSA PRIVATE KEY-----\n",
          "cert": "-----BEGIN CERTIFICATE-----\nMIIFrTCCA5WgAwIBAgIIakR3GA8CX9MwDQYJKoZIhvcNAQEFBQAwgaQxCzAJBgNV\nBAYTAlVTMRcwFQYDVQQIDA5Ob3J0aCBDYXJvbGluYTEWMBQGA1UECgwNUmVkIEhh\ndCwgSW5jLjEYMBYGA1UECwwPUmVkIEhhdCBOZXR3b3JrMSQwIgYDVQQDDBtSZWQg\nSGF0IENhbmRsZXBpbiBBdXRob3JpdHkxJDAiBgkqhkiG9w0BCQEWFWNhLXN1cHBv\ncnRAcmVkaGF0LmNvbTAeFw0xNTA2MTAxMjQ3MzJaFw0xNjA2MTAxMjQ3MzJaMC8x\nLTArBgNVBAMTJDE1OTAwMDMxLTI3ZGYtNDAwNC1iZTM2LTEyMDNkZjEwYjIzODCC\nASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAIZ2DVafG6PS3S7C0t6Wk9uB\nxOpXurV+MLuE53lhkTQjrQH09KYgJsnh9YZCmwLhD5yRheEMNpqLdFJVhRpGkXk7\nmOVW1lhVJPNdN0FjtQ3H8EQ8D8cSD+CT2k+MTmNTHDuCw2vVjg5NIayBBLzOsP5Z\n2uC+DWecVBmkWlkQetiZr9rvfVa5WfeeLR6S5VZjD0fKw2ciUsJydFjHKrpdehZy\nUw3mTeElXvbsGp6E5qIimXsxEje19kE/RsBm6ZDz8jAh/KZAiR8GHby4hvNv79fy\nJYPeEuZ9vAp4IFGFx1NOoyA7ohmXZzFMZTDZ7eHrEYr0JK5SoiKyXlWif1P+Cu0C\nAwEAAaOCAVUwggFRMBEGCWCGSAGG+EIBAQQEAwIFoDALBgNVHQ8EBAMCBLAwgd4G\nA1UdIwSB1jCB04AUdy6lzTcNqOHT6mHFVmdD6JHHbRyhgbekgbQwgbExCzAJBgNV\nBAYTAlVTMRcwFQYDVQQIDA5Ob3J0aCBDYXJvbGluYTEWMBQGA1UECgwNUmVkIEhh\ndCwgSW5jLjEYMBYGA1UECwwPUmVkIEhhdCBOZXR3b3JrMTEwLwYDVQQDDChSZWQg\nSGF0IEVudGl0bGVtZW50IE9wZXJhdGlvbnMgQXV0aG9yaXR5MSQwIgYJKoZIhvcN\nAQkBFhVjYS1zdXBwb3J0QHJlZGhhdC5jb22CAT8wHQYDVR0OBBYEFO1aJ4WnLpWt\ntAjC8RewrfEazGhZMBMGA1UdJQQMMAoGCCsGAQUFBwMCMBoGA1UdEQQTMBGGD0NO\nPWptYWdlbjItcmhjaTANBgkqhkiG9w0BAQUFAAOCAgEAM+Mw2UkC0x5fZS5FCgcT\nQmZnm4GK1isXXDx2717qOKL/1e+J04y26Ky20r/tQDPYJxg1wCkQ2oWmTQEzmI1a\nbNxfrnEJkNLapCqcdwccSWD5EnDnQizWH22Co/OTYvCuSW9Sk9ivtsef0toRFIj1\n2eakLFfN2Jveu4EvI032fo5hufWrgD5ztPAQg+0b1vkjxtF0u4zzpNq71+3Z8yoI\nVlj3kEY+Jkl68AiGU/BsYDKMexmINH3te7i01KHBA8ZbKfl9o4sMfBLQxWClVtV+\ntIrLLHhS9U/VYASheJQrG2X6VnGyMnA/w81cWuqdAhBMGPNKMcoAseTJIjNZiJdI\nIY7x7cLGJoi0rRZXLUAt9RCaXEkYKuikUr2jzIOlInyVPCeGjtEUE298yiaqSZqO\nBSeVSJv6d9mBXhD0kHxENjWPWUc5+ID8BEVfpUcjs6CRFqhAat2PI9kiNoVzO5yh\nCStbgsH5VSa/b3KGIMz59HW6raMynBWhCqqM2B6zSk3fSXOyDv8kfKzwTaVNtch1\nGU+m/+SO78b7OypWC7SxPh1/RE8g86Xa0xAjG1j363QNpBqlIw7ncza5yHbShoyf\nU6k1GXt92SZRrEP87mYkxbGeKJFaHopq/4Hh72eP2/C0d1Vj4WTNGLuXbpSD3tFg\nO+rPEbXYpmQryBQmYP1oxt8=\n-----END CERTIFICATE-----\n",
          "id": "ff80808150d6d8ad0150f0fe88d702ab",
          "serial": {
            "id": 283230217608562925,
            "revoked": false,
            "collected": false,
            "expiration": "2016-06-10T12:47:32.000+0000",
            "serial": 283230217608562925,
            "created": "2015-11-10T10:43:44.470+0000",
            "updated": "2015-11-10T10:43:44.470+0000"
          },
          "created": "2015-11-10T10:43:44.471+0000",
          "updated": "2015-11-10T10:43:44.471+0000"
        },
        "type": {
          "id": "ff80808150d6d8ad0150e8d07ad00024",
          "label": "satellite",
          "manifest": true,
          "created": "2015-11-08T20:36:28.496+0000",
          "updated": "2015-11-08T20:36:28.496+0000"
        },
        "ownerId": "ff80808150d6cd1b0150d6ce03ef0001",
        "webUrl": "access.redhat.com/management/distributors/",
        "apiUrl": "https://subscription.rhn.redhat.com/subscription/consumers/",
        "created": "2015-11-10T10:43:44.472+0000",
        "updated": "2015-11-10T10:43:44.472+0000"
      },
      "logLevel": null,
      "href": "/owners/Default_Organization",
      "created": "2015-11-05T08:40:37.103+0000",
      "updated": "2015-11-10T10:43:44.775+0000"
    },
    "redhat_repository_url": "https://cdn.redhat.com",
    "redhat_docker_registry_url": "https://registry.access.redhat.com",
    "service_levels": ["Premium"],
    "service_level": null,
    "default_content_view_id": 1,
    "library_id": 1
  }];
});
define("fusor-ember-cli/mirage/fixtures/management_applications", ["exports"], function (exports) {
  exports["default"] = [{
    "id": "8a85f98350fe2951015102a33a6d4e9a",
    "uuid": "7ffddefd-aacb-4192-a999-01beb7c2e473",
    "name": "tsanders-rhci",
    "username": "rhci-test",
    "entitlementStatus": "valid",
    "serviceLevel": "",
    "releaseVer": {
      "releaseVer": null
    },
    "type": {
      "id": "9",
      "label": "satellite",
      "manifest": true
    },
    "owner": {
      "id": "8a85f9814a192108014a1adef5826b38",
      "key": "7473998",
      "displayName": "7473998",
      "href": "/owners/7473998"
    },
    "environment": null,
    "entitlementCount": 1,
    "lastCheckin": null,
    "installedProducts": [],
    "canActivate": false,
    "guestIds": [],
    "capabilities": [{
      "id": "8a85f98350fe2951015102a33a6e4e9b",
      "name": "derived_product"
    }, {
      "id": "8a85f98350fe2951015102a33a6e4e9c",
      "name": "ram"
    }, {
      "id": "8a85f98350fe2951015102a33a6e4e9d",
      "name": "cert_v3"
    }, {
      "id": "8a85f98350fe2951015102a33a6e4e9e",
      "name": "cores"
    }, {
      "id": "8a85f98350fe2951015102a33a6e4e9f",
      "name": "instance_multiplier"
    }],
    "hypervisorId": null,
    "contentTags": [],
    "autoheal": true,
    "href": "/consumers/7ffddefd-aacb-4192-a999-01beb7c2e473",
    "created": "2015-11-13T20:57:10.000+0000",
    "updated": "2015-11-16T15:23:08.000+0000"
  }, {
    "id": "8a85f9844c7a3d77014c7a40b0e420b5",
    "uuid": "b9350f8a-7c67-4ca6-9557-2ef46aebfc6a",
    "name": "jmontleo-rhci",
    "username": "rhci-test",
    "entitlementStatus": "valid",
    "serviceLevel": "",
    "releaseVer": {
      "releaseVer": null
    },
    "type": {
      "id": "9",
      "label": "satellite",
      "manifest": true
    },
    "owner": {
      "id": "8a85f9814a192108014a1adef5826b38",
      "key": "7473998",
      "displayName": "7473998",
      "href": "/owners/7473998"
    },
    "environment": null,
    "entitlementCount": 14,
    "lastCheckin": "2015-11-17T13:54:49.000+0000",
    "installedProducts": [],
    "canActivate": false,
    "guestIds": [],
    "capabilities": [{
      "id": "8a85f9874e63a3e8014e887272895529",
      "name": "derived_product"
    }, {
      "id": "8a85f9874e63a3e8014e88727289552a",
      "name": "ram"
    }, {
      "id": "8a85f9874e63a3e8014e88727289552b",
      "name": "guest_limit"
    }, {
      "id": "8a85f9874e63a3e8014e88727289552c",
      "name": "cert_v3"
    }, {
      "id": "8a85f9874e63a3e8014e88727289552d",
      "name": "cores"
    }, {
      "id": "8a85f9874e63a3e8014e88727289552f",
      "name": "instance_multiplier"
    }, {
      "id": "8a85f9874e63a3e8014e88727289552e",
      "name": "vcpu"
    }],
    "hypervisorId": null,
    "contentTags": [],
    "autoheal": true,
    "href": "/consumers/b9350f8a-7c67-4ca6-9557-2ef46aebfc6a",
    "created": "2015-04-02T13:10:02.000+0000",
    "updated": "2015-11-17T13:54:49.000+0000"
  }, {
    "id": "8a85f9844c7a3d77014c80336cfb436b",
    "uuid": "63170c3b-994d-4dd3-82ac-7cccf353206c",
    "name": "jmatthews-rhci",
    "username": "rhci-test",
    "entitlementStatus": "valid",
    "serviceLevel": "",
    "releaseVer": {
      "releaseVer": null
    },
    "type": {
      "id": "9",
      "label": "satellite",
      "manifest": true
    },
    "owner": {
      "id": "8a85f9814a192108014a1adef5826b38",
      "key": "7473998",
      "displayName": "7473998",
      "href": "/owners/7473998"
    },
    "environment": null,
    "entitlementCount": 15,
    "lastCheckin": "2015-11-13T19:01:49.000+0000",
    "installedProducts": [],
    "canActivate": false,
    "guestIds": [],
    "capabilities": [{
      "id": "8a85f9814d0bf2ce014d2b41350f6474",
      "name": "derived_product"
    }, {
      "id": "8a85f9814d0bf2ce014d2b41350f6475",
      "name": "ram"
    }, {
      "id": "8a85f9814d0bf2ce014d2b41350f6476",
      "name": "guest_limit"
    }, {
      "id": "8a85f9814d0bf2ce014d2b41350f6477",
      "name": "cert_v3"
    }, {
      "id": "8a85f9814d0bf2ce014d2b41350f6478",
      "name": "cores"
    }, {
      "id": "8a85f9814d0bf2ce014d2b41350f647a",
      "name": "instance_multiplier"
    }, {
      "id": "8a85f9814d0bf2ce014d2b41350f6479",
      "name": "vcpu"
    }],
    "hypervisorId": null,
    "contentTags": [],
    "autoheal": true,
    "href": "/consumers/63170c3b-994d-4dd3-82ac-7cccf353206c",
    "created": "2015-04-03T16:53:16.000+0000",
    "updated": "2015-11-13T19:01:49.000+0000"
  }, {
    "id": "8a85f9844df26b1c014df71601eb0bcd",
    "uuid": "1205e19f-d024-4fd8-a40b-f18e4048f861",
    "name": "unified-installer-demo",
    "username": "rhci-test",
    "entitlementStatus": "valid",
    "serviceLevel": "",
    "releaseVer": {
      "releaseVer": null
    },
    "type": {
      "id": "9",
      "label": "satellite",
      "manifest": true
    },
    "owner": {
      "id": "8a85f9814a192108014a1adef5826b38",
      "key": "7473998",
      "displayName": "7473998",
      "href": "/owners/7473998"
    },
    "environment": null,
    "entitlementCount": 0,
    "lastCheckin": null,
    "installedProducts": [],
    "canActivate": false,
    "guestIds": [],
    "capabilities": [{
      "id": "8a85f9844df26b1c014df71601eb0bce",
      "name": "derived_product"
    }, {
      "id": "8a85f9844df26b1c014df71601eb0bcf",
      "name": "ram"
    }, {
      "id": "8a85f9844df26b1c014df71601eb0bd0",
      "name": "cert_v3"
    }, {
      "id": "8a85f9844df26b1c014df71601eb0bd1",
      "name": "cores"
    }, {
      "id": "8a85f9844df26b1c014df71601eb0bd2",
      "name": "instance_multiplier"
    }],
    "hypervisorId": null,
    "contentTags": [],
    "autoheal": true,
    "href": "/consumers/1205e19f-d024-4fd8-a40b-f18e4048f861",
    "created": "2015-06-15T11:58:44.000+0000",
    "updated": "2015-10-06T17:57:46.000+0000"
  }];
});
define("fusor-ember-cli/mirage/fixtures/node_mac_addresses", ["exports"], function (exports) {
  exports["default"] = [{
    "hostname": "osp8_node_vm_for_RPM_env_1461337316",
    "mac_addresses": ["52:54:00:d4:a4:4b", "52:54:00:aa:d1:14"]
  }, {
    "hostname": "osp8_node_vm_for_RPM_env_1461337324",
    "mac_addresses": ["52:54:00:48:46:d8", "52:54:00:a0:a1:e6"]
  }, {
    "hostname": "osp8_node_vm_for_RPM_env_1461337325",
    "mac_addresses": ["52:54:00:48:46:d9", "52:54:00:a0:a1:e7"]
  }, {
    "hostname": "osp8_node_vm_for_RPM_env_1461337326",
    "mac_addresses": ["52:54:00:48:46:e0", "52:54:00:a0:a1:e8"]
  }];
});
define("fusor-ember-cli/mirage/fixtures/node_ports", ["exports"], function (exports) {
  exports["default"] = [{
    "node_uuid": "027ffe8d-157e-42a4-b235-61222ebc63f8",
    "uuid": "102057b4-93df-4832-80f3-421999f5f8e5",
    "links": [{
      "href": "http://192.168.234.254:6385/v1/ports/102057b4-93df-4832-80f3-421999f5f8e5",
      "rel": "self"
    }, { "href": "http://192.168.234.254:6385/ports/102057b4-93df-4832-80f3-421999f5f8e5", "rel": "bookmark" }],
    "extra": {},
    "created_at": "2016-04-29T18:42:58+00:00",
    "updated_at": null,
    "address": "52:54:00:48:46:d8"
  }, {
    "node_uuid": "0bc1174d-81a6-456f-83fc-8b846b25f68f",
    "uuid": "dd81058e-11f8-4bf9-867d-9f833e7a5b44",
    "links": [{
      "href": "http://192.168.234.254:6385/v1/ports/dd81058e-11f8-4bf9-867d-9f833e7a5b44",
      "rel": "self"
    }, { "href": "http://192.168.234.254:6385/ports/dd81058e-11f8-4bf9-867d-9f833e7a5b44", "rel": "bookmark" }],
    "extra": {},
    "created_at": "2016-04-29T18:43:00+00:00",
    "updated_at": null,
    "address": "52:54:00:d4:a4:4b"
  }];
});
define("fusor-ember-cli/mirage/fixtures/nodes", ["exports"], function (exports) {
  exports["default"] = [{
    "instance_uuid": null,
    "target_power_state": null,
    "maintenance": false,
    "uuid": "027ffe8d-157e-42a4-b235-61222ebc63f8",
    "driver_info": {
      "ssh_username": "root",
      "deploy_kernel": "0cfa071d-3ab8-41fe-ac6e-d1a75d622039",
      "deploy_ramdisk": "484b6875-5ee4-4ee8-a8b8-0c5e81eb8b06",
      "ssh_password": "******",
      "ssh_virt_type": "virsh",
      "ssh_address": "192.168.234.1"
    },
    "target_provision_state": null,
    "updated_at": "2016-04-29T18:43:53+00:00",
    "last_error": null,
    "console_enabled": false,
    "extra": { "hardware_swift_object": "extra_hardware-027ffe8d-157e-42a4-b235-61222ebc63f8" },
    "driver": "pxe_ssh",
    "links": [{
      "href": "http://192.168.234.254:6385/v1/nodes/027ffe8d-157e-42a4-b235-61222ebc63f8",
      "rel": "self"
    }, {
      "href": "http://192.168.234.254:6385/nodes/027ffe8d-157e-42a4-b235-61222ebc63f8", "rel": "bookmark"
    }],
    "maintenance_reason": null,
    "properties": {
      "memory_mb": "16384",
      "cpu_arch": "x86_64",
      "local_gb": "99",
      "cpus": "16",
      "capabilities": "boot_option:local"
    },
    "provision_updated_at": "2016-04-29T18:42:58+00:00",
    "power_state": "power off",
    "provision_state": "manageable",
    "reservation": null,
    "created_at": "2016-04-29T18:42:57+00:00",
    "instance_info": {},
    "ports": [{
      "href": "http://192.168.234.254:6385/v1/nodes/027ffe8d-157e-42a4-b235-61222ebc63f8/ports",
      "rel": "self"
    }, { "href": "http://192.168.234.254:6385/nodes/027ffe8d-157e-42a4-b235-61222ebc63f8/ports", "rel": "bookmark" }]
  }, {
    "instance_uuid": null,
    "target_power_state": null,
    "maintenance": false,
    "uuid": "0bc1174d-81a6-456f-83fc-8b846b25f68f",
    "driver_info": {
      "ssh_username": "root",
      "deploy_kernel": "0cfa071d-3ab8-41fe-ac6e-d1a75d622039",
      "deploy_ramdisk": "484b6875-5ee4-4ee8-a8b8-0c5e81eb8b06",
      "ssh_password": "******",
      "ssh_virt_type": "virsh",
      "ssh_address": "192.168.234.1"
    },
    "target_provision_state": null,
    "updated_at": "2016-04-29T18:43:55+00:00",
    "last_error": null,
    "console_enabled": false,
    "extra": { "hardware_swift_object": "extra_hardware-0bc1174d-81a6-456f-83fc-8b846b25f68f" },
    "driver": "pxe_ssh",
    "links": [{
      "href": "http://192.168.234.254:6385/v1/nodes/0bc1174d-81a6-456f-83fc-8b846b25f68f",
      "rel": "self"
    }, { "href": "http://192.168.234.254:6385/nodes/0bc1174d-81a6-456f-83fc-8b846b25f68f", "rel": "bookmark" }],
    "maintenance_reason": null,
    "properties": {
      "memory_mb": "16384",
      "cpu_arch": "x86_64",
      "local_gb": "99",
      "cpus": "16",
      "capabilities": "boot_option:local"
    },
    "provision_updated_at": "2016-04-29T18:43:00+00:00",
    "power_state": "power off",
    "provision_state": "manageable",
    "reservation": null,
    "created_at": "2016-04-29T18:42:59+00:00",
    "instance_info": {},
    "ports": [{
      "href": "http://192.168.234.254:6385/v1/nodes/0bc1174d-81a6-456f-83fc-8b846b25f68f/ports",
      "rel": "self"
    }, { "href": "http://192.168.234.254:6385/nodes/0bc1174d-81a6-456f-83fc-8b846b25f68f/ports", "rel": "bookmark" }]
  }];
});
define("fusor-ember-cli/mirage/fixtures/owners", ["exports"], function (exports) {
  exports["default"] = [{
    "parentOwner": null,
    "id": "8a85f9814a192108014a1adef5826b38",
    "key": "7473998",
    "displayName": "7473998",
    "contentPrefix": null,
    "defaultServiceLevel": null,
    "upstreamConsumer": null,
    "logLevel": null,
    "href": "/owners/7473998",
    "created": "2014-12-05T14:33:47.000+0000",
    "updated": "2014-12-05T14:33:47.000+0000"
  }];
});
define("fusor-ember-cli/mirage/fixtures/pools", ["exports"], function (exports) {
  exports["default"] = [{
    "id": "8a85f9814a192108014a1adf1c7b6b39",
    "owner": {
      "id": "8a85f9814a192108014a1adef5826b38",
      "key": "7473998",
      "displayName": "7473998",
      "href": "/owners/7473998"
    },
    "activeSubscription": true,
    "sourceEntitlement": null,
    "quantity": 10,
    "startDate": "2014-12-05T05:00:00.000+0000",
    "endDate": "2015-12-05T04:59:59.000+0000",
    "productId": "RV00007",
    "derivedProductId": null,
    "providedProducts": [{
      "id": "8a85f9894adf01b8014adfd14ae81246",
      "productId": "220",
      "productName": "Red Hat OpenStack Beta",
      "created": "2015-01-12T20:24:03.000+0000",
      "updated": "2015-01-12T20:24:03.000+0000"
    }, {
      "id": "8a85f9894adf01b8014adfd14ae81247",
      "productId": "201",
      "productName": "Red Hat Software Collections (for RHEL Server)",
      "created": "2015-01-12T20:24:03.000+0000",
      "updated": "2015-01-12T20:24:03.000+0000"
    }, {
      "id": "8a85f9894adf01b8014adfd14ae81248",
      "productId": "269",
      "productName": "Red Hat Satellite Capsule",
      "created": "2015-01-12T20:24:03.000+0000",
      "updated": "2015-01-12T20:24:03.000+0000"
    }, {
      "id": "8a85f9894adf01b8014adfd14ae81249",
      "productId": "150",
      "productName": "Red Hat Enterprise Virtualization",
      "created": "2015-01-12T20:24:03.000+0000",
      "updated": "2015-01-12T20:24:03.000+0000"
    }, {
      "id": "8a85f9894adf01b8014adfd14ae9124a",
      "productId": "239",
      "productName": "Red Hat Enterprise MRG Messaging",
      "created": "2015-01-12T20:24:03.000+0000",
      "updated": "2015-01-12T20:24:03.000+0000"
    }, {
      "id": "8a85f9894adf01b8014adfd14ae9124b",
      "productId": "84",
      "productName": "Red Hat Enterprise Linux High Availability (for RHEL Server) - Extended Update Support",
      "created": "2015-01-12T20:24:03.000+0000",
      "updated": "2015-01-12T20:24:03.000+0000"
    }, {
      "id": "8a85f9894adf01b8014adfd14ae9124c",
      "productId": "180",
      "productName": "Red Hat Beta",
      "created": "2015-01-12T20:24:03.000+0000",
      "updated": "2015-01-12T20:24:03.000+0000"
    }, {
      "id": "8a85f9894adf01b8014adfd14ae9124d",
      "productId": "70",
      "productName": "Red Hat Enterprise Linux Server - Extended Update Support",
      "created": "2015-01-12T20:24:03.000+0000",
      "updated": "2015-01-12T20:24:03.000+0000"
    }, {
      "id": "8a85f9894adf01b8014adfd14ae9124e",
      "productId": "246",
      "productName": "Oracle Java (for RHEL Server) - Extended Update Support",
      "created": "2015-01-12T20:24:03.000+0000",
      "updated": "2015-01-12T20:24:03.000+0000"
    }, {
      "id": "8a85f9894adf01b8014adfd14ae9124f",
      "productId": "183",
      "productName": "JBoss Enterprise Application Platform",
      "created": "2015-01-12T20:24:03.000+0000",
      "updated": "2015-01-12T20:24:03.000+0000"
    }, {
      "id": "8a85f9894adf01b8014adfd14ae91250",
      "productId": "240",
      "productName": "Oracle Java (for RHEL Server)",
      "created": "2015-01-12T20:24:03.000+0000",
      "updated": "2015-01-12T20:24:03.000+0000"
    }, {
      "id": "8a85f9894adf01b8014adfd14ae91252",
      "productId": "191",
      "productName": "Red Hat OpenStack",
      "created": "2015-01-12T20:24:03.000+0000",
      "updated": "2015-01-12T20:24:03.000+0000"
    }, {
      "id": "8a85f9894adf01b8014adfd14ae91251",
      "productId": "86",
      "productName": "Red Hat Enterprise Linux Load Balancer (for RHEL Server) - Extended Update Support",
      "created": "2015-01-12T20:24:03.000+0000",
      "updated": "2015-01-12T20:24:03.000+0000"
    }, {
      "id": "8a85f9894adf01b8014adfd14ae91254",
      "productId": "83",
      "productName": "Red Hat Enterprise Linux High Availability (for RHEL Server)",
      "created": "2015-01-12T20:24:03.000+0000",
      "updated": "2015-01-12T20:24:03.000+0000"
    }, {
      "id": "8a85f9894adf01b8014adfd14ae91253",
      "productId": "69",
      "productName": "Red Hat Enterprise Linux Server",
      "created": "2015-01-12T20:24:03.000+0000",
      "updated": "2015-01-12T20:24:03.000+0000"
    }, {
      "id": "8a85f9894adf01b8014adfd14ae91255",
      "productId": "250",
      "productName": "Red Hat Satellite",
      "created": "2015-01-12T20:24:03.000+0000",
      "updated": "2015-01-12T20:24:03.000+0000"
    }, {
      "id": "8a85f9894adf01b8014adfd14ae91256",
      "productId": "205",
      "productName": "Red Hat Software Collections Beta (for RHEL Server)",
      "created": "2015-01-12T20:24:03.000+0000",
      "updated": "2015-01-12T20:24:03.000+0000"
    }, {
      "id": "8a85f9894adf01b8014adfd14ae91257",
      "productId": "85",
      "productName": "Red Hat Enterprise Linux Load Balancer (for RHEL Server)",
      "created": "2015-01-12T20:24:03.000+0000",
      "updated": "2015-01-12T20:24:03.000+0000"
    }, {
      "id": "8a85f9894adf01b8014adfd14ae91258",
      "productId": "167",
      "productName": "Red Hat CloudForms",
      "created": "2015-01-12T20:24:03.000+0000",
      "updated": "2015-01-12T20:24:03.000+0000"
    }],
    "derivedProvidedProducts": [],
    "attributes": [],
    "productAttributes": [{
      "id": "8a85f9874a65e793014a70f74d145dce",
      "name": "ph_product_line",
      "value": "RHCI",
      "productId": "RV00007",
      "created": "2014-12-22T07:47:42.000+0000",
      "updated": "2014-12-22T07:47:42.000+0000"
    }, {
      "id": "8a85f9874a65e793014a70f74d145dcf",
      "name": "name",
      "value": "Red Hat Cloud Infrastructure with Smart Management, Premium (2-sockets)",
      "productId": "RV00007",
      "created": "2014-12-22T07:47:42.000+0000",
      "updated": "2014-12-22T07:47:42.000+0000"
    }, {
      "id": "8a85f9874a65e793014a70f74d145dd0",
      "name": "product_family",
      "value": "Red Hat Cloud Infrastructure",
      "productId": "RV00007",
      "created": "2014-12-22T07:47:42.000+0000",
      "updated": "2014-12-22T07:47:42.000+0000"
    }, {
      "id": "8a85f9874a65e793014a70f74d145dd1",
      "name": "ph_product_name",
      "value": "RHCI",
      "productId": "RV00007",
      "created": "2014-12-22T07:47:42.000+0000",
      "updated": "2014-12-22T07:47:42.000+0000"
    }, {
      "id": "8a85f9874a65e793014a70f74d145dd2",
      "name": "management_enabled",
      "value": "1",
      "productId": "RV00007",
      "created": "2014-12-22T07:47:42.000+0000",
      "updated": "2014-12-22T07:47:42.000+0000"
    }, {
      "id": "8a85f9874a65e793014a70f74d145dd3",
      "name": "variant",
      "value": "Cloud",
      "productId": "RV00007",
      "created": "2014-12-22T07:47:42.000+0000",
      "updated": "2014-12-22T07:47:42.000+0000"
    }, {
      "id": "8a85f9874a65e793014a70f74d145dd4",
      "name": "sockets",
      "value": "2",
      "productId": "RV00007",
      "created": "2014-12-22T07:47:42.000+0000",
      "updated": "2014-12-22T07:47:42.000+0000"
    }, {
      "id": "8a85f9874a65e793014a70f74d145dd5",
      "name": "multi-entitlement",
      "value": "yes",
      "productId": "RV00007",
      "created": "2014-12-22T07:47:42.000+0000",
      "updated": "2014-12-22T07:47:42.000+0000"
    }, {
      "id": "8a85f9874a65e793014a70f74d145dd6",
      "name": "support_type",
      "value": "L1-L3",
      "productId": "RV00007",
      "created": "2014-12-22T07:47:42.000+0000",
      "updated": "2014-12-22T07:47:42.000+0000"
    }, {
      "id": "8a85f9874a65e793014a70f74d145dd7",
      "name": "arch",
      "value": "x86_64,ppc64le,ppc64,ia64,ppc,s390,x86,s390x",
      "productId": "RV00007",
      "created": "2014-12-22T07:47:42.000+0000",
      "updated": "2014-12-22T07:47:42.000+0000"
    }, {
      "id": "8a85f9874a65e793014a70f74d145dd8",
      "name": "description",
      "value": "Red Hat Cloud Infrastructure",
      "productId": "RV00007",
      "created": "2014-12-22T07:47:42.000+0000",
      "updated": "2014-12-22T07:47:42.000+0000"
    }, {
      "id": "8a85f9874a65e793014a70f74d145dd9",
      "name": "stacking_id",
      "value": "RV00007",
      "productId": "RV00007",
      "created": "2014-12-22T07:47:42.000+0000",
      "updated": "2014-12-22T07:47:42.000+0000"
    }, {
      "id": "8a85f9874a65e793014a70f74d145ddb",
      "name": "type",
      "value": "MKT",
      "productId": "RV00007",
      "created": "2014-12-22T07:47:42.000+0000",
      "updated": "2014-12-22T07:47:42.000+0000"
    }, {
      "id": "8a85f9874a65e793014a70f74d145dda",
      "name": "enabled_consumer_types",
      "value": "satellite",
      "productId": "RV00007",
      "created": "2014-12-22T07:47:42.000+0000",
      "updated": "2014-12-22T07:47:42.000+0000"
    }, {
      "id": "8a85f9874a65e793014a70f74d145ddc",
      "name": "ph_category",
      "value": "Subscriptions",
      "productId": "RV00007",
      "created": "2014-12-22T07:47:42.000+0000",
      "updated": "2014-12-22T07:47:42.000+0000"
    }, {
      "id": "8a85f9874a65e793014a70f74d145ddd",
      "name": "virt_limit",
      "value": "unlimited",
      "productId": "RV00007",
      "created": "2014-12-22T07:47:42.000+0000",
      "updated": "2014-12-22T07:47:42.000+0000"
    }, {
      "id": "8a85f9874a65e793014a70f74d145dde",
      "name": "support_level",
      "value": "Premium",
      "productId": "RV00007",
      "created": "2014-12-22T07:47:42.000+0000",
      "updated": "2014-12-22T07:47:42.000+0000"
    }, {
      "id": "8a85f9874a65e793014a70f74d145ddf",
      "name": "subtype",
      "value": "Premium",
      "productId": "RV00007",
      "created": "2014-12-22T07:47:42.000+0000",
      "updated": "2014-12-22T07:47:42.000+0000"
    }],
    "derivedProductAttributes": [],
    "restrictedToUsername": null,
    "contractNumber": "10593540",
    "accountNumber": "5530698",
    "orderNumber": null,
    "consumed": 7,
    "exported": 6,
    "productName": "Red Hat Cloud Infrastructure with Smart Management, Premium (2-sockets)",
    "derivedProductName": null,
    "branding": [{
      "productId": "69",
      "name": "Red Hat Cloud Infrastructure",
      "type": "OS",
      "created": "2014-12-05T14:33:57.000+0000",
      "updated": "2014-12-05T14:33:57.000+0000"
    }],
    "calculatedAttributes": {
      "quantity_increment": "1",
      "suggested_quantity": "1",
      "compliance_type": "Stackable"
    },
    "stacked": true,
    "stackId": "RV00007",
    "href": "/pools/8a85f9814a192108014a1adf1c7b6b39",
    "type": "NORMAL",
    "created": "2014-12-05T14:33:57.000+0000",
    "updated": "2015-01-12T20:24:03.000+0000",
    "sourceStackId": null,
    "subscriptionId": "3456439",
    "sourceConsumer": null,
    "subscriptionSubKey": "master"
  }, {
    "id": "8a85f9814c508347014c71b23f4a4775",
    "owner": {
      "id": "8a85f9814a192108014a1adef5826b38",
      "key": "7473998",
      "displayName": "7473998",
      "href": "/owners/7473998"
    },
    "activeSubscription": true,
    "sourceEntitlement": null,
    "quantity": 90,
    "startDate": "2015-03-31T04:00:00.000+0000",
    "endDate": "2016-03-31T03:59:59.000+0000",
    "productId": "RV00007",
    "derivedProductId": null,
    "providedProducts": [{
      "id": "8a85f9814c508347014c71b23f4a4789",
      "productId": "220",
      "productName": "Red Hat OpenStack Beta",
      "created": "2015-03-31T21:17:29.000+0000",
      "updated": "2015-03-31T21:17:29.000+0000"
    }, {
      "id": "8a85f9814c508347014c71b23f4a478a",
      "productId": "201",
      "productName": "Red Hat Software Collections (for RHEL Server)",
      "created": "2015-03-31T21:17:29.000+0000",
      "updated": "2015-03-31T21:17:29.000+0000"
    }, {
      "id": "8a85f9814c508347014c71b23f4a478b",
      "productId": "269",
      "productName": "Red Hat Satellite Capsule",
      "created": "2015-03-31T21:17:29.000+0000",
      "updated": "2015-03-31T21:17:29.000+0000"
    }, {
      "id": "8a85f9814c508347014c71b23f4a478c",
      "productId": "150",
      "productName": "Red Hat Enterprise Virtualization",
      "created": "2015-03-31T21:17:29.000+0000",
      "updated": "2015-03-31T21:17:29.000+0000"
    }, {
      "id": "8a85f9814c508347014c71b23f4a478d",
      "productId": "239",
      "productName": "Red Hat Enterprise MRG Messaging",
      "created": "2015-03-31T21:17:29.000+0000",
      "updated": "2015-03-31T21:17:29.000+0000"
    }, {
      "id": "8a85f9814c508347014c71b23f4a478e",
      "productId": "84",
      "productName": "Red Hat Enterprise Linux High Availability (for RHEL Server) - Extended Update Support",
      "created": "2015-03-31T21:17:29.000+0000",
      "updated": "2015-03-31T21:17:29.000+0000"
    }, {
      "id": "8a85f9814c508347014c71b23f4a478f",
      "productId": "70",
      "productName": "Red Hat Enterprise Linux Server - Extended Update Support",
      "created": "2015-03-31T21:17:29.000+0000",
      "updated": "2015-03-31T21:17:29.000+0000"
    }, {
      "id": "8a85f9814c508347014c71b23f4a4790",
      "productId": "180",
      "productName": "Red Hat Beta",
      "created": "2015-03-31T21:17:29.000+0000",
      "updated": "2015-03-31T21:17:29.000+0000"
    }, {
      "id": "8a85f9814c508347014c71b23f4a4791",
      "productId": "246",
      "productName": "Oracle Java (for RHEL Server) - Extended Update Support",
      "created": "2015-03-31T21:17:29.000+0000",
      "updated": "2015-03-31T21:17:29.000+0000"
    }, {
      "id": "8a85f9814c508347014c71b23f4a4792",
      "productId": "183",
      "productName": "JBoss Enterprise Application Platform",
      "created": "2015-03-31T21:17:29.000+0000",
      "updated": "2015-03-31T21:17:29.000+0000"
    }, {
      "id": "8a85f9814c508347014c71b23f4a4793",
      "productId": "240",
      "productName": "Oracle Java (for RHEL Server)",
      "created": "2015-03-31T21:17:29.000+0000",
      "updated": "2015-03-31T21:17:29.000+0000"
    }, {
      "id": "8a85f9814c508347014c71b23f4a4795",
      "productId": "86",
      "productName": "Red Hat Enterprise Linux Load Balancer (for RHEL Server) - Extended Update Support",
      "created": "2015-03-31T21:17:29.000+0000",
      "updated": "2015-03-31T21:17:29.000+0000"
    }, {
      "id": "8a85f9814c508347014c71b23f4a4794",
      "productId": "191",
      "productName": "Red Hat OpenStack",
      "created": "2015-03-31T21:17:29.000+0000",
      "updated": "2015-03-31T21:17:29.000+0000"
    }, {
      "id": "8a85f9814c508347014c71b23f4a4797",
      "productId": "69",
      "productName": "Red Hat Enterprise Linux Server",
      "created": "2015-03-31T21:17:29.000+0000",
      "updated": "2015-03-31T21:17:29.000+0000"
    }, {
      "id": "8a85f9814c508347014c71b23f4a4796",
      "productId": "83",
      "productName": "Red Hat Enterprise Linux High Availability (for RHEL Server)",
      "created": "2015-03-31T21:17:29.000+0000",
      "updated": "2015-03-31T21:17:29.000+0000"
    }, {
      "id": "8a85f9814c508347014c71b23f4a4798",
      "productId": "250",
      "productName": "Red Hat Satellite",
      "created": "2015-03-31T21:17:29.000+0000",
      "updated": "2015-03-31T21:17:29.000+0000"
    }, {
      "id": "8a85f9814c508347014c71b23f4a4799",
      "productId": "205",
      "productName": "Red Hat Software Collections Beta (for RHEL Server)",
      "created": "2015-03-31T21:17:29.000+0000",
      "updated": "2015-03-31T21:17:29.000+0000"
    }, {
      "id": "8a85f9814c508347014c71b23f4a479a",
      "productId": "85",
      "productName": "Red Hat Enterprise Linux Load Balancer (for RHEL Server)",
      "created": "2015-03-31T21:17:29.000+0000",
      "updated": "2015-03-31T21:17:29.000+0000"
    }, {
      "id": "8a85f9814c508347014c71b23f4a479b",
      "productId": "167",
      "productName": "Red Hat CloudForms",
      "created": "2015-03-31T21:17:29.000+0000",
      "updated": "2015-03-31T21:17:29.000+0000"
    }],
    "derivedProvidedProducts": [],
    "attributes": [],
    "productAttributes": [{
      "id": "8a85f9814c508347014c71b23f4a4777",
      "name": "ph_product_line",
      "value": "RHCI",
      "productId": "RV00007",
      "created": "2015-03-31T21:17:29.000+0000",
      "updated": "2015-03-31T21:17:29.000+0000"
    }, {
      "id": "8a85f9814c508347014c71b23f4a4778",
      "name": "name",
      "value": "Red Hat Cloud Infrastructure with Smart Management, Premium (2-sockets)",
      "productId": "RV00007",
      "created": "2015-03-31T21:17:29.000+0000",
      "updated": "2015-03-31T21:17:29.000+0000"
    }, {
      "id": "8a85f9814c508347014c71b23f4a4779",
      "name": "ph_product_name",
      "value": "RHCI",
      "productId": "RV00007",
      "created": "2015-03-31T21:17:29.000+0000",
      "updated": "2015-03-31T21:17:29.000+0000"
    }, {
      "id": "8a85f9814c508347014c71b23f4a477a",
      "name": "product_family",
      "value": "Red Hat Cloud Infrastructure",
      "productId": "RV00007",
      "created": "2015-03-31T21:17:29.000+0000",
      "updated": "2015-03-31T21:17:29.000+0000"
    }, {
      "id": "8a85f9814c508347014c71b23f4a477b",
      "name": "variant",
      "value": "Cloud",
      "productId": "RV00007",
      "created": "2015-03-31T21:17:29.000+0000",
      "updated": "2015-03-31T21:17:29.000+0000"
    }, {
      "id": "8a85f9814c508347014c71b23f4a477c",
      "name": "management_enabled",
      "value": "1",
      "productId": "RV00007",
      "created": "2015-03-31T21:17:29.000+0000",
      "updated": "2015-03-31T21:17:29.000+0000"
    }, {
      "id": "8a85f9814c508347014c71b23f4a477d",
      "name": "sockets",
      "value": "2",
      "productId": "RV00007",
      "created": "2015-03-31T21:17:29.000+0000",
      "updated": "2015-03-31T21:17:29.000+0000"
    }, {
      "id": "8a85f9814c508347014c71b23f4a477e",
      "name": "multi-entitlement",
      "value": "yes",
      "productId": "RV00007",
      "created": "2015-03-31T21:17:29.000+0000",
      "updated": "2015-03-31T21:17:29.000+0000"
    }, {
      "id": "8a85f9814c508347014c71b23f4a477f",
      "name": "arch",
      "value": "x86_64,ppc64le,ppc64,ia64,ppc,s390,x86,s390x",
      "productId": "RV00007",
      "created": "2015-03-31T21:17:29.000+0000",
      "updated": "2015-03-31T21:17:29.000+0000"
    }, {
      "id": "8a85f9814c508347014c71b23f4a4780",
      "name": "support_type",
      "value": "L1-L3",
      "productId": "RV00007",
      "created": "2015-03-31T21:17:29.000+0000",
      "updated": "2015-03-31T21:17:29.000+0000"
    }, {
      "id": "8a85f9814c508347014c71b23f4a4781",
      "name": "stacking_id",
      "value": "RV00007",
      "productId": "RV00007",
      "created": "2015-03-31T21:17:29.000+0000",
      "updated": "2015-03-31T21:17:29.000+0000"
    }, {
      "id": "8a85f9814c508347014c71b23f4a4782",
      "name": "description",
      "value": "Red Hat Cloud Infrastructure",
      "productId": "RV00007",
      "created": "2015-03-31T21:17:29.000+0000",
      "updated": "2015-03-31T21:17:29.000+0000"
    }, {
      "id": "8a85f9814c508347014c71b23f4a4784",
      "name": "type",
      "value": "MKT",
      "productId": "RV00007",
      "created": "2015-03-31T21:17:29.000+0000",
      "updated": "2015-03-31T21:17:29.000+0000"
    }, {
      "id": "8a85f9814c508347014c71b23f4a4783",
      "name": "enabled_consumer_types",
      "value": "satellite",
      "productId": "RV00007",
      "created": "2015-03-31T21:17:29.000+0000",
      "updated": "2015-03-31T21:17:29.000+0000"
    }, {
      "id": "8a85f9814c508347014c71b23f4a4785",
      "name": "ph_category",
      "value": "Subscriptions",
      "productId": "RV00007",
      "created": "2015-03-31T21:17:29.000+0000",
      "updated": "2015-03-31T21:17:29.000+0000"
    }, {
      "id": "8a85f9814c508347014c71b23f4a4786",
      "name": "virt_limit",
      "value": "unlimited",
      "productId": "RV00007",
      "created": "2015-03-31T21:17:29.000+0000",
      "updated": "2015-03-31T21:17:29.000+0000"
    }, {
      "id": "8a85f9814c508347014c71b23f4a4787",
      "name": "support_level",
      "value": "Premium",
      "productId": "RV00007",
      "created": "2015-03-31T21:17:29.000+0000",
      "updated": "2015-03-31T21:17:29.000+0000"
    }, {
      "id": "8a85f9814c508347014c71b23f4a4788",
      "name": "subtype",
      "value": "Premium",
      "productId": "RV00007",
      "created": "2015-03-31T21:17:29.000+0000",
      "updated": "2015-03-31T21:17:29.000+0000"
    }],
    "derivedProductAttributes": [],
    "restrictedToUsername": null,
    "contractNumber": "10670000",
    "accountNumber": "5530698",
    "orderNumber": null,
    "consumed": 89,
    "exported": 89,
    "productName": "Red Hat Cloud Infrastructure with Smart Management, Premium (2-sockets)",
    "derivedProductName": null,
    "branding": [{
      "productId": "69",
      "name": "Red Hat Cloud Infrastructure",
      "type": "OS",
      "created": "2015-03-31T21:17:29.000+0000",
      "updated": "2015-03-31T21:17:29.000+0000"
    }],
    "calculatedAttributes": {
      "quantity_increment": "1",
      "suggested_quantity": "1",
      "compliance_type": "Stackable"
    },
    "stacked": true,
    "stackId": "RV00007",
    "href": "/pools/8a85f9814c508347014c71b23f4a4775",
    "type": "NORMAL",
    "created": "2015-03-31T21:17:29.000+0000",
    "updated": "2015-03-31T21:19:26.000+0000",
    "sourceStackId": null,
    "subscriptionId": "3565254",
    "sourceConsumer": null,
    "subscriptionSubKey": "master"
  }];
});
define("fusor-ember-cli/mirage/fixtures/settings", ["exports"], function (exports) {
  exports["default"] = [{
    "id": 102,
    "name": "openshift_master_disk",
    "value": 30,
    "description": "Amount of Storage (GB) for each OSE Master Node",
    "category": "Setting::Openshift",
    "settings_type": "integer",
    "default": 30,
    "created_at": "2016-02-18T14:36:44Z",
    "updated_at": "2016-02-18T15:16:33Z"
  }, {
    "id": 101,
    "name": "openshift_master_ram",
    "value": 8,
    "description": "Amount of RAM (GB) for each OSE Master Node",
    "category": "Setting::Openshift",
    "settings_type": "integer",
    "default": 8,
    "created_at": "2016-02-18T14:36:44Z",
    "updated_at": "2016-02-18T15:16:37Z"
  }, {
    "id": 100,
    "name": "openshift_master_vcpu",
    "value": 2,
    "description": "Number of vCPU's for each OSE Master Node",
    "category": "Setting::Openshift",
    "settings_type": "integer",
    "default": 2,
    "created_at": "2016-02-18T14:36:44Z",
    "updated_at": "2016-02-18T15:16:40Z"
  }, {
    "id": 105,
    "name": "openshift_node_disk",
    "value": 16,
    "description": "Amount of Storage (GB) for each OSE Worker Node",
    "category": "Setting::Openshift",
    "settings_type": "integer",
    "default": 16,
    "created_at": "2016-02-18T14:36:44Z",
    "updated_at": "2016-02-18T15:16:43Z"
  }, {
    "id": 104,
    "name": "openshift_node_ram",
    "value": 8,
    "description": "Amount of RAM (GB) for each OSE Worker Node",
    "category": "Setting::Openshift",
    "settings_type": "integer",
    "default": 8,
    "created_at": "2016-02-18T14:36:44Z",
    "updated_at": "2016-02-18T15:16:46Z"
  }, {
    "id": 103,
    "name": "openshift_node_vcpu",
    "value": 1,
    "description": "Number of vCPU's for each OSE Worker Node",
    "category": "Setting::Openshift",
    "settings_type": "integer",
    "default": 1,
    "created_at": "2016-02-18T14:36:44Z",
    "updated_at": "2016-02-18T15:16:49Z"
  }, {
    "id": 111,
    "name": "cloudforms_db_disk_size",
    "value": 40,
    "description": "Size of Storage (GB) for DB for CloudForms",
    "category": "Setting::Openshift",
    "settings_type": "integer",
    "default": 40,
    "created_at": "2016-02-25T15:32:31Z",
    "updated_at": "2016-02-25T15:32:31Z"
  }, {
    "id": 112,
    "name": "cloudforms_ram",
    "value": 6,
    "description": "Amount of RAM (GB) for CloudForms",
    "category": "Setting::Openshift",
    "settings_type": "integer",
    "default": 6,
    "created_at": "2016-02-25T15:32:31Z",
    "updated_at": "2016-02-25T15:32:31Z"
  }, {
    "id": 113,
    "name": "cloudforms_vcpu",
    "value": 4,
    "description": "Number of vCPU's for CloudForms",
    "category": "Setting::Openshift",
    "settings_type": "integer",
    "default": 4,
    "created_at": "2016-02-25T15:32:31Z",
    "updated_at": "2016-02-25T15:32:31Z"
  }, {
    "id": 110,
    "name": "cloudforms_vm_disk_size",
    "value": 40,
    "description": "Size of Storage (GB) for VM for CloudForms",
    "category": "Setting::Openshift",
    "settings_type": "integer",
    "default": 40,
    "created_at": "2016-02-25T15:32:31Z",
    "updated_at": "2016-02-25T15:32:31Z"
  }];
});
define("fusor-ember-cli/mirage/fixtures/subscriptions",["exports"],function(exports){exports["default"] = [{"id":"8a85f9834e009a85014e01e1f11737ea","consumer":{"id":"8a85f9874df26cde014dfcf1b4f65e08","uuid":"50f73b81-0242-4f9e-bcd5-d9fac11715af","name":"tzach","href":"/consumers/50f73b81-0242-4f9e-bcd5-d9fac11715af"},"pool":{"id":"8a85f9814c508347014c71b23f4a4775","owner":{"id":"8a85f9814a192108014a1adef5826b38","key":"7473998","displayName":"7473998","href":"/owners/7473998"},"activeSubscription":true,"sourceEntitlement":null,"quantity":90,"startDate":"2015-03-31T04:00:00.000+0000","endDate":"2016-03-31T03:59:59.000+0000","productId":"RV00007","derivedProductId":null,"providedProducts":[{"id":"8a85f9814c508347014c71b23f4a4789","productId":"220","productName":"Red Hat OpenStack Beta","created":"2015-03-31T21:17:29.000+0000","updated":"2015-03-31T21:17:29.000+0000"},{"id":"8a85f9814c508347014c71b23f4a478a","productId":"201","productName":"Red Hat Software Collections (for RHEL Server)","created":"2015-03-31T21:17:29.000+0000","updated":"2015-03-31T21:17:29.000+0000"},{"id":"8a85f9814c508347014c71b23f4a478b","productId":"269","productName":"Red Hat Satellite Capsule","created":"2015-03-31T21:17:29.000+0000","updated":"2015-03-31T21:17:29.000+0000"},{"id":"8a85f9814c508347014c71b23f4a478c","productId":"150","productName":"Red Hat Enterprise Virtualization","created":"2015-03-31T21:17:29.000+0000","updated":"2015-03-31T21:17:29.000+0000"},{"id":"8a85f9814c508347014c71b23f4a478d","productId":"239","productName":"Red Hat Enterprise MRG Messaging","created":"2015-03-31T21:17:29.000+0000","updated":"2015-03-31T21:17:29.000+0000"},{"id":"8a85f9814c508347014c71b23f4a478e","productId":"84","productName":"Red Hat Enterprise Linux High Availability (for RHEL Server) - Extended Update Support","created":"2015-03-31T21:17:29.000+0000","updated":"2015-03-31T21:17:29.000+0000"},{"id":"8a85f9814c508347014c71b23f4a478f","productId":"70","productName":"Red Hat Enterprise Linux Server - Extended Update Support","created":"2015-03-31T21:17:29.000+0000","updated":"2015-03-31T21:17:29.000+0000"},{"id":"8a85f9814c508347014c71b23f4a4790","productId":"180","productName":"Red Hat Beta","created":"2015-03-31T21:17:29.000+0000","updated":"2015-03-31T21:17:29.000+0000"},{"id":"8a85f9814c508347014c71b23f4a4791","productId":"246","productName":"Oracle Java (for RHEL Server) - Extended Update Support","created":"2015-03-31T21:17:29.000+0000","updated":"2015-03-31T21:17:29.000+0000"},{"id":"8a85f9814c508347014c71b23f4a4792","productId":"183","productName":"JBoss Enterprise Application Platform","created":"2015-03-31T21:17:29.000+0000","updated":"2015-03-31T21:17:29.000+0000"},{"id":"8a85f9814c508347014c71b23f4a4793","productId":"240","productName":"Oracle Java (for RHEL Server)","created":"2015-03-31T21:17:29.000+0000","updated":"2015-03-31T21:17:29.000+0000"},{"id":"8a85f9814c508347014c71b23f4a4795","productId":"86","productName":"Red Hat Enterprise Linux Load Balancer (for RHEL Server) - Extended Update Support","created":"2015-03-31T21:17:29.000+0000","updated":"2015-03-31T21:17:29.000+0000"},{"id":"8a85f9814c508347014c71b23f4a4794","productId":"191","productName":"Red Hat OpenStack","created":"2015-03-31T21:17:29.000+0000","updated":"2015-03-31T21:17:29.000+0000"},{"id":"8a85f9814c508347014c71b23f4a4797","productId":"69","productName":"Red Hat Enterprise Linux Server","created":"2015-03-31T21:17:29.000+0000","updated":"2015-03-31T21:17:29.000+0000"},{"id":"8a85f9814c508347014c71b23f4a4796","productId":"83","productName":"Red Hat Enterprise Linux High Availability (for RHEL Server)","created":"2015-03-31T21:17:29.000+0000","updated":"2015-03-31T21:17:29.000+0000"},{"id":"8a85f9814c508347014c71b23f4a4798","productId":"250","productName":"Red Hat Satellite","created":"2015-03-31T21:17:29.000+0000","updated":"2015-03-31T21:17:29.000+0000"},{"id":"8a85f9814c508347014c71b23f4a4799","productId":"205","productName":"Red Hat Software Collections Beta (for RHEL Server)","created":"2015-03-31T21:17:29.000+0000","updated":"2015-03-31T21:17:29.000+0000"},{"id":"8a85f9814c508347014c71b23f4a479a","productId":"85","productName":"Red Hat Enterprise Linux Load Balancer (for RHEL Server)","created":"2015-03-31T21:17:29.000+0000","updated":"2015-03-31T21:17:29.000+0000"},{"id":"8a85f9814c508347014c71b23f4a479b","productId":"167","productName":"Red Hat CloudForms","created":"2015-03-31T21:17:29.000+0000","updated":"2015-03-31T21:17:29.000+0000"}],"derivedProvidedProducts":[],"attributes":[],"productAttributes":[{"id":"8a85f9814c508347014c71b23f4a4777","name":"ph_product_line","value":"RHCI","productId":"RV00007","created":"2015-03-31T21:17:29.000+0000","updated":"2015-03-31T21:17:29.000+0000"},{"id":"8a85f9814c508347014c71b23f4a4778","name":"name","value":"Red Hat Cloud Infrastructure with Smart Management, Premium (2-sockets)","productId":"RV00007","created":"2015-03-31T21:17:29.000+0000","updated":"2015-03-31T21:17:29.000+0000"},{"id":"8a85f9814c508347014c71b23f4a4779","name":"ph_product_name","value":"RHCI","productId":"RV00007","created":"2015-03-31T21:17:29.000+0000","updated":"2015-03-31T21:17:29.000+0000"},{"id":"8a85f9814c508347014c71b23f4a477a","name":"product_family","value":"Red Hat Cloud Infrastructure","productId":"RV00007","created":"2015-03-31T21:17:29.000+0000","updated":"2015-03-31T21:17:29.000+0000"},{"id":"8a85f9814c508347014c71b23f4a477b","name":"variant","value":"Cloud","productId":"RV00007","created":"2015-03-31T21:17:29.000+0000","updated":"2015-03-31T21:17:29.000+0000"},{"id":"8a85f9814c508347014c71b23f4a477c","name":"management_enabled","value":"1","productId":"RV00007","created":"2015-03-31T21:17:29.000+0000","updated":"2015-03-31T21:17:29.000+0000"},{"id":"8a85f9814c508347014c71b23f4a477d","name":"sockets","value":"2","productId":"RV00007","created":"2015-03-31T21:17:29.000+0000","updated":"2015-03-31T21:17:29.000+0000"},{"id":"8a85f9814c508347014c71b23f4a477e","name":"multi-entitlement","value":"yes","productId":"RV00007","created":"2015-03-31T21:17:29.000+0000","updated":"2015-03-31T21:17:29.000+0000"},{"id":"8a85f9814c508347014c71b23f4a477f","name":"arch","value":"x86_64,ppc64le,ppc64,ia64,ppc,s390,x86,s390x","productId":"RV00007","created":"2015-03-31T21:17:29.000+0000","updated":"2015-03-31T21:17:29.000+0000"},{"id":"8a85f9814c508347014c71b23f4a4780","name":"support_type","value":"L1-L3","productId":"RV00007","created":"2015-03-31T21:17:29.000+0000","updated":"2015-03-31T21:17:29.000+0000"},{"id":"8a85f9814c508347014c71b23f4a4781","name":"stacking_id","value":"RV00007","productId":"RV00007","created":"2015-03-31T21:17:29.000+0000","updated":"2015-03-31T21:17:29.000+0000"},{"id":"8a85f9814c508347014c71b23f4a4782","name":"description","value":"Red Hat Cloud Infrastructure","productId":"RV00007","created":"2015-03-31T21:17:29.000+0000","updated":"2015-03-31T21:17:29.000+0000"},{"id":"8a85f9814c508347014c71b23f4a4784","name":"type","value":"MKT","productId":"RV00007","created":"2015-03-31T21:17:29.000+0000","updated":"2015-03-31T21:17:29.000+0000"},{"id":"8a85f9814c508347014c71b23f4a4783","name":"enabled_consumer_types","value":"satellite","productId":"RV00007","created":"2015-03-31T21:17:29.000+0000","updated":"2015-03-31T21:17:29.000+0000"},{"id":"8a85f9814c508347014c71b23f4a4785","name":"ph_category","value":"Subscriptions","productId":"RV00007","created":"2015-03-31T21:17:29.000+0000","updated":"2015-03-31T21:17:29.000+0000"},{"id":"8a85f9814c508347014c71b23f4a4786","name":"virt_limit","value":"unlimited","productId":"RV00007","created":"2015-03-31T21:17:29.000+0000","updated":"2015-03-31T21:17:29.000+0000"},{"id":"8a85f9814c508347014c71b23f4a4787","name":"support_level","value":"Premium","productId":"RV00007","created":"2015-03-31T21:17:29.000+0000","updated":"2015-03-31T21:17:29.000+0000"},{"id":"8a85f9814c508347014c71b23f4a4788","name":"subtype","value":"Premium","productId":"RV00007","created":"2015-03-31T21:17:29.000+0000","updated":"2015-03-31T21:17:29.000+0000"}],"derivedProductAttributes":[],"restrictedToUsername":null,"contractNumber":"10670000","accountNumber":"5530698","orderNumber":null,"consumed":89,"exported":89,"productName":"Red Hat Cloud Infrastructure with Smart Management, Premium (2-sockets)","derivedProductName":null,"branding":[{"productId":"69","name":"Red Hat Cloud Infrastructure","type":"OS","created":"2015-03-31T21:17:29.000+0000","updated":"2015-03-31T21:17:29.000+0000"}],"calculatedAttributes":{"compliance_type":"Stackable"},"type":"NORMAL","stacked":true,"stackId":"RV00007","href":"/pools/8a85f9814c508347014c71b23f4a4775","created":"2015-03-31T21:17:29.000+0000","updated":"2015-03-31T21:19:26.000+0000","subscriptionSubKey":"master","sourceStackId":null,"subscriptionId":"3565254","sourceConsumer":null},"certificates":[{"key":"-----BEGIN RSA PRIVATE KEY-----\nMIIEogIBAAKCAQEAqGQybHnChDrZhX25NFLMsR78scdXSuOumCnlupAdiFevlEXM\nbaM6UPmSk4lriKQj+wnlvAocgHxD8nDv0UGqVOmotENQC9eGRUvsZ006yHpBuJmO\nv498R6s3lfMpVDjFU55eosgtgnXy3rQLEp5u6QgD6yLoeFDhGYI2OYavaOGDe/VT\nSFPEuLekOoNtn7P7pJT32eaFEyLJqpBekmC5mEQpWEIaI4d3O286/nichOcp37+J\nd6UJS2gpzuN+wkYVH/5kQiCXKfX/GdwHBakpbVWL6JSVZn3lX9xR5p+UsSgfa5J3\n4uJNkS5nEgnvrg7vHPOEVTT67RNNgKHOl3pClQIDAQABAoIBAB1e9KiVCEeWGDC/\ngBlPQ+K0+/BqS6CFXAOwcyB6WJxaZwaesgyBhv9uuJFBS99WeewkisykmtoSUqur\n5TiDkpki9EkU4JZgLkxR9NcD0nf7UxFGv25MMaoyhAyEkDXffRObsPgFoGJ7/jO4\nBaJmvgOpYT2XJiMuQET5wEmCY4AQY9uz3zc+38pJFd/uLDAm9r2t+mfrKJ1jSJne\nEU2gVWc9zMPh/AhjKwnhY5GAMZMO/2c7FsPc2q5A5H3Mj9otS/j0pnp1rsQt7Olr\nPo5qZ+WSPWY89HmsDj4WuYUICRL1ey8pXkKZIjSoca0NpqkwGE3WpZk1QLO5fgiF\nVB88pPUCgYEA+/FASGum7vBABwkkLaIgY2gizyGr0yKbUso7mm2ziyG0paq5s05I\n4bWSS8og+ER/zMWoUtN3ytWVf+SJ0Sa5+N01FsJpgi91zKbv5wj4QF9xN9+GTivw\nX9CrjMElkVKokfuNl2AR5CkWYM9FK5WP50LlawZirmGS1G1nYvmSuC8CgYEAqxp3\n4gKth057r7afaOCBDcY6TaySNCfZAXRkuuxcT8Y9AplLCmZFhF33r8iaqzu12UGK\nQgTpCc5+xuEfTTOyfhPgcx7UaiaU3acfRrdPuvzeU7YNE0e1lrX61CgbWJsFKMdq\nUWf5zXNpSg/9xK57jGNn+8tR6LrXTgI+mAlLfHsCgYBBgKzU52BEeSQ8cAz+7Er9\nbWK3daqlvzag5MFwWhs3DjFYbTXQv4bFYB7EI65EvhJ4G9+ygRaBHty6nqGSRj5N\nzL1zyGIEHfDDn5d5+uQIYIggHbZedqANWURw2Pq6eMIpCjz64VhleKU/0EPMnBsI\n5mSdWdCoQ+gX4MXjfr29swKBgCqdrgxBxHy15IKQRsX1XM9UdwMPn16UKi19kvUn\nl5pa8qkqCxGtBVWBngZPPY62kYVqGIh29p/1qYfZXFV7MdLLGpUxsZA6ycsnK9gO\nIjKddrZ82mbZ7nV6H94lmyIHglJ00Jsz/XjZbPkAYKFTH/yIacbCDkWb+7I3RuXR\nMtbvAoGAdUdLQNRlUSH1ZY1yjlsc2ZKSsyVZ1tSkF9JNnX2OPv6JzkWST5bDSYvX\nBeNZwXG6us2GLnsI1LSqMpzeCLKjpH24337rO8fbbN9g5SuenOSlq3Tne1gXwGpW\nc0PemYSdl20++metc/5y74lqo+0hbiDc8guaQpOITff5k/1kqdE=\n-----END RSA PRIVATE KEY-----\n","cert":"-----BEGIN CERTIFICATE-----\nMIIKcjCCCFqgAwIBAgIIQXnq7rnlhcowDQYJKoZIhvcNAQEFBQAwgaQxCzAJBgNV\nBAYTAlVTMRcwFQYDVQQIDA5Ob3J0aCBDYXJvbGluYTEWMBQGA1UECgwNUmVkIEhh\ndCwgSW5jLjEYMBYGA1UECwwPUmVkIEhhdCBOZXR3b3JrMSQwIgYDVQQDDBtSZWQg\nSGF0IENhbmRsZXBpbiBBdXRob3JpdHkxJDAiBgkqhkiG9w0BCQEWFWNhLXN1cHBv\ncnRAcmVkaGF0LmNvbTAeFw0xNTAzMzEwNDAwMDBaFw0xNjAzMzEwMzU5NTlaMCsx\nKTAnBgNVBAMTIDhhODVmOTgzNGUwMDlhODUwMTRlMDFlMWYxMTczN2VhMIIBIjAN\nBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAqGQybHnChDrZhX25NFLMsR78scdX\nSuOumCnlupAdiFevlEXMbaM6UPmSk4lriKQj+wnlvAocgHxD8nDv0UGqVOmotENQ\nC9eGRUvsZ006yHpBuJmOv498R6s3lfMpVDjFU55eosgtgnXy3rQLEp5u6QgD6yLo\neFDhGYI2OYavaOGDe/VTSFPEuLekOoNtn7P7pJT32eaFEyLJqpBekmC5mEQpWEIa\nI4d3O286/nichOcp37+Jd6UJS2gpzuN+wkYVH/5kQiCXKfX/GdwHBakpbVWL6JSV\nZn3lX9xR5p+UsSgfa5J34uJNkS5nEgnvrg7vHPOEVTT67RNNgKHOl3pClQIDAQAB\no4IGHjCCBhowEQYJYIZIAYb4QgEBBAQDAgWgMAsGA1UdDwQEAwIEsDCB3gYDVR0j\nBIHWMIHTgBR3LqXNNw2o4dPqYcVWZ0PokcdtHKGBt6SBtDCBsTELMAkGA1UEBhMC\nVVMxFzAVBgNVBAgMDk5vcnRoIENhcm9saW5hMRYwFAYDVQQKDA1SZWQgSGF0LCBJ\nbmMuMRgwFgYDVQQLDA9SZWQgSGF0IE5ldHdvcmsxMTAvBgNVBAMMKFJlZCBIYXQg\nRW50aXRsZW1lbnQgT3BlcmF0aW9ucyBBdXRob3JpdHkxJDAiBgkqhkiG9w0BCQEW\nFWNhLXN1cHBvcnRAcmVkaGF0LmNvbYIBPzAdBgNVHQ4EFgQUH4sIAAAAAAAAAAMA\nAAAAAAAAAAAwEwYDVR0lBAwwCgYIKwYBBQUHAwIwEgYJKwYBBAGSCAkGBAUMAzMu\nMjCCBM0GCSsGAQQBkggJBwSCBL4EggS6eNpNkk2T2jAMht8fs1dnFvLBudPpcWc6\n5dCzYkTixY4zlhMWfn1loAsHOY4s6X0sOY09NlWNOZ45Gc+wcco8ZcyJV8dndH9j\nOkmm7OKE9qd35fDAa47RC2c0P/boORPkIpmDuYIXQVPV1TuG5K5Xf8GRJCeyJ9h7\n+jEmDjSBRfgL5xcBF2hgQZx5Upc9GadfHJwuza890milLA51tVXboFX2RqXaqtH/\nBt2DsFZ/XXVqLSzPo7nxqrKXGCBLLza5uWgaUopslEelE9btenaK9qXEgg32f35/\n7HF0XrF2e06rxtijES6rZbRPX2B0ipRGMY+LttVOrVBu1d6xRYO19DYeFpvd6vIF\nIQ0moHuUURWh/KC9DQUnZ0t/UinXgV66cwu1NMuig6sLwj1P3ey9y2zi7Yrk4SMd\nevI0Wa2YRl6N3lYJy1bVtVuddu+l3jO1U/DPnmkuwf6WMd5LhCHk7zpi/VNY/42N\nIehId7qf/oMt8+w5aAKlC6K+CRX6pJXwrSb3PrQY3TDqifPUO18a5STiLbFnEi4h\nnT7DfhkQtW5cks7irdcjSnbEPxp+71+BlFex9zODmdwhF/55DfiQhPx3+c79e/Z3\nd/rTX3Sb76p99I3edQS77cU72bwcybscrY3bmcoajT4Xqa72byb3b4X7v96SU+G7\n2bwcUcsc3b4W7f0d3WO5/N2ri++uvtIPZvBzJt6iKbD3VsbthOTNLJRJUNc3JCuF\n6mgHO/6vu/VpV99W+wbnxxk4bufdzvqt3s3g5k3Wxu2E5M1Q1wvU0A53nOEVd7Nq\nzm7fC3d+DRnp9runl9vTffkP3dn7eC7vRaUJ6Xd/7QFPL7Nmf6+d3UZ2i+/XL3yB\nchXLvqV2YAN0I+Xcfu/1ob760/t9670QYQaQ7+yF6GjjDjTndz32If3iTtJpJ7N4\nOZNqOHcaxytjdtZKJKBxfNQ1Gnwuzcqa768u+rP3f5xBTvZvJuxzdvhfvoH7SD2b\nwcybrY3bCcWSiSoa4XqaAc76v9vw+8xVOj9mSYaTEfLkfuT672bwcybUcscrY3bm\ncoajT4Xqa7LY8Md5wbvO13067f6u70NEGEGkOxe53rx/edfvqz/3mX3iTtJpJ7N4\nOZNvEim1HA8I6zWOVsbtzOLJRJQOLyKGubkaZ4zfeS4n34XZp1NOnO1UbZvBzJt4\nIps69LSdY5Wxu3M5ElA5Q1GmeM33kGT78L1NOnO53/d8fT77MAG6EM10KXvO+sru\nQru/Fppp+Lu7Tu+oP3r+53nk7QU+lPNQ0oSURqd4Od5+f760u+mXerg/FQE3ed13\nns7maHM76su9m8HLHN2+Fu+sP3p2n7d9A3cIQOz7WHX/nkN+JCE/HZbHhhxrv4o4\n53s3g5k2c5Y5Wxu3M5ElA5Q1GmOZwvU13nMx+e7zidy6fbc9cLFttX/O1+mu+oHa\nCnenac7u4n94z+yZ/fUn9/kO7cvu5n3fSneqqffQE7v/v7zO7cc75Odi4/vpzu/9\n3nBdolO/7O70cYcac7hod7Nu7e7fC3bjXejXfJrstjvqzu9HO+rPd9Gu92+Fu0HO\n4bnezdJvdvhbuU33Kbyb7yb3b4W72byb3b4W772b3b4W7DANBgkqhkiG9w0BAQUF\nAAOCAgEAEEkGEEq5dFGFH2pB/YGnwNnDhnxHJM3CvA11hsxV4P4VbiEbGM/QQ3e9\nh2QkAKhwtIz/kgk5p76ca1/G23Q6W1hna6u5iFlEFyc82soduIRrlsH9klSw65Di\nMZMNu6Fz2DE0nHLDatL5hEUCwgCaSZfzri4TMx4KR2vG3jplGW13QNOB7Ii8xBYD\nj9b/rb+F7hpajwaKtz+qLvFk+4KOX6IGRCePHB5UvZV8bPlVhu33PbM7ohQCYHMq\n9y9IFtQMdxjupLR2fEXlb49oVUpzcFgBQxUmNVDjVpiKCceBbMhnlDRtW8Ax+7BV\nL7Oqu3cGDgRJBN6oo2w/BRMIV9FZY0vlBzGe9xFRGIQ+m3QDYINT4pabll2NFX5q\nLIWgFaFZulQogwDlhQLunCbgX7xQ5nXO/dvHut4woM1f6qsWr2Ud6KdpGgePWRbO\nUGplsjR4vRw8i7OgN5wyoXsdEPlKharRhvZ1Iqw5xR4WAeuwDxz2YVz6ExDIlCpg\ntZcFqHSTv9Zc30nrXligJ23IzhJKE7JH4LaNcOGnG2kSqHn6ahTVWQlggsOMhaDp\n4s8hdrO81KxzfyU9Pe+R3TAYDOSDRhU4oQcrTqrTjj/rtzX0CkEM8SZ7V6iNOs68\nHPbowVqGnTZQnXDQQ/SdIGyje3Pw8iaVwZi+w20QSjHswFfzQKg=\n-----END CERTIFICATE-----\n-----BEGIN ENTITLEMENT DATA-----\neJzlff1zI8eN9r/CUt0PcZW5mpmeD9K/rX3reHP22ZW95K333rpKjSTuirEk6khK\n9iaV//1tDr9myO4G0N2Y6ebepZK1V/wQMAAeAA+Af17dLp5WL4+z5dU3V0XysRI3\nk3ScZHk2zj9OZ+Ob27tifDf9WN+maZUW9cerr6/+96V+Ws/Xn6++Kb6+Wr3crG6X\n8+f1fPF09c0/r1a/vsh3+vNfE/l/lfzhp/pxtvkXs7vRD/V69N3D4uVu9P7p47Je\nrZcvt+uX5Wz023x9P/rwWC/Xo5/qp/rT7HH2tP569Mty9jh/eRz9IRuvFre/ztar\nr+Qb7v549U329dXj4aevvpHvNpN/O1u+zm9nm2/yMHudPciP3r2NfOn68/Pmu/yY\njn8UV/+SP7yub3+dP3362/yu9Z3lXyyWdxuB/LP1q06T5ueX8pOusiQtxokYi/S/\nkvybJJH/+W/59rOnu+1flvu/FN8UU/mfzV9KMa+X9e3m5WlSVpuPkv+2vr1dvGy+\n/VVRiKScTjaf/rxc3EnJyF/x//3zqvlqWZ4cRfmzfJuH2ehP9Ws9+sPHxXL05x/e\n/Tj6IH/x2XIjIPk/q0YZV5sPWN7ez9ezRs6bN7z6fVL+rczl38g/XP3P9ns18jt8\nVjktj7L63AjuRInv5EuWz8v5ajb6cf708vuo2H38aDxqf7tvZ2v5Ff/8y0+N4h7q\nm0Yfy/vZw7gYr5pXjNf38+Xds5Tr5/Gieen47/Kl4xv50vHy+XHV/EJPd4vl8fPl\nv3qu1/fyX1zvvv315sevN298vX3b6+L635azh1m9mm3+6d9u5B82orhufcb1YtUo\nrb55mMlf/GP9sJptBaaW1KfnT397WW5+g4/zh9k319fXs/Xt9fOv82v5Pcfyb6/l\nbzr+4y9/HP/Hu/87Xs7u7ut183t8Tfj53ZeWn/ooX3lXr+u/zX5/ni+l+CdlnsiH\ncDn73xf5z3d/W9efmu/ZkefV//zr66MiJ0dFbr4DQpOlWpN/eP/h53MlloAS56sF\nUn9389W6o78SoT/59pYKvF+vn6VCyFIulVIWnszFzlLwRnIm5FCMxONDL7KiJD/0\nlcl9KZ/8CuO+8I//mfuq3B55Lw97pZSu8CVdO8E6uJTKn0vhkm9WNaiA5Ex0HvvD\n4mV5OxspfQrkuFfNa11cC8Z/bz/l+oP8ih/CdTIKny/NYEJVk9HHmHSFcjVkhaE9\nDlVJoQMlldWV04zs1XQxXOnVoBju4NUwMbx/oKSCo1WS+oKjhsgMuTbXyBwTMK28\n5nEmJ4VK59ydFOZh7zeqDJjfyShEVrAxCtmHH4a4g8s7QlebGkMXntTmhBvcMR4G\nUPcFH/zCgdxXRu/iM90VFJ679FvemvrKlaySJObsKOTCiwpuVAm5DmZEdy75qye4\nEV4S21fcUuPJVtxyy5IM+B2FJB3we0z5UubVoOwtidmELqkPo64WkfGEDvBZIT1m\niMeL1D0Au5ZNFcm58D/U69nDw3w9u0L3Tldimvyu7J7mSQqh+8PnjYo3VauDK433\n82o9exz991dg9Gt+cPyP8Wr/XmP5Xk6IcfeOWoM9fNK1/CR81DtIqmd8Mr95PEip\nbYtVmhLUU7bUU2DVU6jVU3pRjy58tdVThq6eQqeePKnw1lO+STfusWGe1A8tTe2d\n51eQvzyqZ7F7l7F8Uzd/WW0/W6Waw6dcy08J3222lAKWx7taUarC3O47CmmjAacu\nn0EDjeCH7qFWJdTja0sz6UaIvTT/fXbz8glIjtoyTcZ3m1dwJK1t6SbXzceE+GQr\nkJl8siGqE83dGLQCOR1n9RBcT7A6UnsfCD0jnA+qUNr1QT7qo5ArirA6KqoE6n0b\nEBRGH8W5PlzRkzn1t8ROA+lEUSqQSQfYWkVlHbqOqjrdsIrStDwDitUK/GrfQtWC\n0jQhStfcmfYgRWxExsgwpHhcQiV9RDy2Rkl+43F5XUYfj1XVrCqZUqxBEwDMtd+u\n52dgx3Rdfp8Zgdp9Q5Veg/c2proan8OaBWx8TpjJrfJxrmjZGFsK4CFD01VrlW4n\n4FRNmQakUHsRYSOonqK/mirFYkKHnUrbAWmwiEoGpYbBXr2Ixm9JqEQrXXipInHD\noujQkFQDxQRgxGqFVftBqdHYhuj04FAQFZ+wOcFRTCiwg6NDRYAUj54M7TRaH62H\nBhrwrAfXNitta6RWgZjP40TmaKqS0q5M3HqUjgAITA4CBkDKOjQpIShdk2ZLt0Px\n+2HKXu328f5GK3tyMuajB4DTRJTJWIlntmiTMaJONi6pD51sPFOEOsmTiqITTe+S\n0rRk7VaG6Z/UsYHAWDHgUl2VWo1LnfphfirVHvthWrQppUuhOJa6ZiOF2+gI+r3E\n3+CojCUeAGkr1z6aZX1wiyKpXKuDAEVPmiBAayvwE4rCrtQpY0JB6FtqARK2ULSx\nCtZC0cYM+uxbqiEnNICMSH+pT3YffbKwnYyyPVYSSp7aEhD+6Xbi6MIloOGfbEpB\nDY6txLyqE1x7SLC60TXOTIviimAmL5Ew2mnHMDNHu12Z0JWlpvRSOBdw08zeunwo\ni9BCC11Z6g4nzbL81JXYFROrPmRoonAkYcKSFVWpP5JSREWnBG8oWl4khRHPToUP\nU/aqVUgVqdAKG4V9+PeB14gmEroXU1do8fQlQw3RYkzazxyu5z5SYLXFPCE1+LTz\nJLTx9R7m1mMr8aatkELrY1jP9Tj2MfxQnPqY65FIClwVjahf4eeanSqCuJrV8LPN\ntoxgl2HNXmJuvKG2xE+XYGpZVkWs/qpXYYLWViZ3VE06EUdl/OnbxWrV3gT09vn5\nYX5bb3610S8P9Vrq4vEKvaLm+fnWeOYjTwtdHon6JvJREfJZ2D4bm8fk/bc/jX5Z\n/KZ8RP5+M57Vz/JBEGP5o+OdRDZ/fN68wurpaF6pfTj+fiM/UD4PAnoetnIaJuQ3\nv0IbdqXaTVFUnRhSSpUyDhkmQ06JVkVoGyZzoWU3Y9WRn6tDE90OWskVWuGbfd8r\nJ493EaiYTHR8FKSazpWkbkrudaTQkHNPElAQvhsZjF6k+ejAINV8qrMIY1ZQ24iq\nVpyx19I22uhA4tGKYDUNE3AqXcDRlWEcAg6gG1XY4TYfGXwiNKBUu+CdDtFIcKD0\nAAeckVloG47zVEu4o6qD7M/EMP4MYzUh+TNRFrpclwYFQH7SORSovPkyQCtxEZNS\n7bUDhwgDYWhViOHH0CJeDC2xmq6B5pDq4EFaf0AAA9FC044ockckTa7U9FynialK\nI7XhWDnTagPwa2qlODg2nG7QXi0oLU0mjrU0ctgZIuhEHXJcc099eYBaGOAsCQTp\n2tT4OS0yt0BToPPNos9ss4gt1xRF4YjHtKaBdmKVzxgD5TSBxxhN+UxoJyGpLoyM\nBdqerE80QOkUBIYHHKs3+M5ar321oF2bIu7LGOMGzHJCkzPvt8kpPw7NQAhGIdKL\nORbNWl4MLjPn/ZaZQfwVWuiX9uEWVJT2YY4majPhTl621hJxApO4MmgUNTNStYy1\nThay3ajdmCt5Rg/GqCiME34FmU+qQZf0ZW45foE2kKJP8wg7n1SCLle2Hz7C9xrf\ng1aEOrF35JSRa149V7zC9E/aepebWSjqXWakpSp78Q34771VHBhLbS6+Gvo0xsUg\nfIvI2BYScfkCwIZ5ZHXp3j2wOBfuQyJZaEc83JlJBK5FnxVjCtsiJKNJC+35R2sk\nRmgb9xRyYulLqmh+InVlXer7koSifq/GFHxRXxuBXCmZitIlqfPSl0FFM6GhNKnM\nF7sMTcxUwgVuaiaFXRYEbtAe8HEgmBMAQ4/mEws5U5UEld7IAHTIUPlTkTcOQEgW\n5IrmDFO0JEPqkQEQPPLWMABKb6U3Qg20h1Q1qkTV14AzpmIg+q0YYCeawlCEr7EM\nfFBR6oM9rFhE/jAU5GsyEw+ZVfphh8yEycwA9JIWmVt1QNHRRHcMemNmxNIxUA7N\nau/guNdCqUVQzupnRG02mf/7WqRBiDaqAgB/tKGXaQb0akcVNRuZT9ZCtbTy4/zp\n5fed6Efj0bvfpXDu5I/95Vl+7mz04eX5ebFcX6G3E81r43KiNNOSdbVfrgS/Xmez\nlXmL1exlddxfhX9a5MtQRYnDwqrI2AvlBLwyYKeXzZ8eZo9ShvXyM3SHYKOcVfsF\nhL16WA113h+7Vk+hJ49HCSYTaGv6mewLC9kb7nEUeg00GG7+9HFhpwbtPuKOGgiT\nu10HMzQoyRItjUGru3z09oNBb2oHlo/rVaMdC59Vr65znb9aXVlJ+WW1vF7d18vZ\n9d3i9ror13H+9kNb7GQ5b37XDvBr94KQzqmCDQRY8LkRtr370aGJgfd4pmVBjr82\nvobqZewjMc7BYMNxWN5FPvngaSurJ3+HsGED2MFq/3aww9JDr7UVQrut/If/HP3X\nYvGwanJFF+Mwrr3t2MTy/mm83nwmPZ3BmsXhIywKAWEZRzaZQqcB7FzZn38Yfbd4\nfJRpKhoyLe/Ht81LuODS4QMihkqTKbR63llfBEvbK4zR0vYqi93S8jQhgwZEFKIk\nKBVbgqINUHYJSgCVbIkaoDO+duoCaiyV5xqLTjPEGksAGhEJeNpJkSW+s8kSZ9ZZ\n4qzvLPGda5Y4a2eJaTZpwQF/JSxEycp/kSqQslQvqSI6ZnfdPlvc7jr+2GO3zHC0\nwcBfhkNJbThzmjjTfOm6yAEb47ngTghDA0QTKgLpc+T69UtIc8CUV2B45MMcdPiI\nag4BACRpAeA9LCsTMBW6Sq+FLm2/iVTo4o3oIqnoGAkCoiYRH/CovXgNsJQqWp3X\nt5XwCQLNUwHdyPKSJlMTZP8exqa2HoCXydOcp47RqkBhXP++9MTh+vc1p2iUkiVa\n8rZ1B9VQSDr0Uan0R0w31WNttt8Ga06uzFLtAnX6z3NlFraSiBhdB6iUCI4yOiEN\nZ0u8I0+1U0E3I1TB5K/z5fqlfpj/Y0uexKvqdc2nrdd1/ApLBJ31RrAlJSRW2ZJ9\n1gHY0mDQWE1mgC6Du7Yl0EHm0J1gizGHJkWEIUamiRaQDJUlmrsW9tqAs0SPXqrP\ntoa0Gt1YCneJyr9NKGuDATzweWd320kg8FcWhOlWx7Kgf8bVsSw4MOmqnJCfaBuq\nucnjGBjnzhEBRzyPYwxLUUPMptpLEm7qg4oope8iik5R1CJKMKpJM/ogAaaIbiin\ndJRiXVIBFBL4XS9VoV0ILeEDF0889fc8tJn0ZkLtugainDxNePhRhABkKNezpSRu\nASgAmCb9GzmDJDQJEUiBDRvEigbSRHuMza3mdUjqf1ku7l5u1/PX+fpze4Z4hWdn\nP7fewjlI6Sou7Q+Jl6SdJoKD9IUhCHnXiC1rsXfyD9mCiBPRaP/mrywGzkdH6/FE\nUrbyH08cCjN5wi9rIhy6hPY6kVOVBTtF4BoIdDArplGBVNAZEVYtK1SviqVJFScl\nNEsKG6aWmRah8TK1tZcxUCEG9DIdboMENBlZkBhEAzf3/Hf1QmrnySeU7DqgB9Tc\nJKpdm0SGx7XvJpFfAk82mbI85J2iLPzAH4uy/h/9Y1E2JCOQ6S9P/MSkv8TElznl\njTPOShDKQ307Zl9YPHpIvriA6SH3igqhJoJjyh9dO+IqF0VbIcrTnCNtw65d0HBF\nuWzGYu9CCEZT0gk8Ni12am+du6keWSNKJCWZCQFVkozU95kj9d1QVeqN+u6XXiWE\nvt7tbzwWv0Zm367lCjvHpm20AUhqTGs1/nrrWM6DP5XBffb4eBBZUrTgtacylnng\nsHYdOISrBKHUtiYWGy9sNjQgeOyelrbidjKEVAHI04T+hNuwSRC7+jwpAccfGXqR\npaCnIVadC2zsfl2zBe3XdbzROptMeSpkEF1UU5nk3PMWZwksm2oPX3gj9OLRlK+E\nHib3xoemcv3NbI9TCoRJXW/bSuGZhQjpijJR0TNF/GUq8G4TH1MlcHYSxoYTkWsr\nX/5EjiZUeTQRWAHxUqqE0GNof1UYTAPT3VDgyktI6Uua0FePeWtgoufYO31Mton2\nTjsz9tl2ierIK0epqI7gBr3t9IBxXbRuME9Tjv1RhDkUtsmT+MBbXuSOE1w+uar+\nqsww0o6p0Vkycefxi8kN3U7HxeS4lmd8WWyaTciVO+LAA1Zf3ig34LhDPGpqQYhM\ncTrw5+fZ04d1ffvr6Fv5CVfIu4CqU4BZAj4H3Q9r3O3uOSgh8sFCvnS1een4Rr6U\noNrNjyN1u/sE5l17N1s5u2dZ8NirXt4VEkaciJ2MKM6kXykl3hegsJK9qhQEX9Aw\nyh6DE05ET3VpSMmzowNfIs9gaq7RvaCSG++PO+xsgn701W4HwmjGR5/00Ht/3AN0\n7epnHSLJGp91DF7y7V7gJz1MV6OESs15F9yRZSxkAk8pT0oH9kfzEOD2FLY9G74s\neqbviDYVikJ/MwMnWX/7CzqlTz+WF+4Gg6+5jVel7CRzPX29rKUy3z/Wn2amfLP5\nufG8+TGc5s5O1JfX5fZzW1rbvu/14X0HbsBlCX3LZ8Np3nokiL7saAENgXlDIR6c\nuNz8Jl8PQXnOcotb7xU+cFSeA0dlHSy4uGdZXtCvlRwkiBMeWW5nziLwy7tJ5bLL\n6diF2j6QZux67D+5F4POPXC/+wI7fqPnym05JfQUT4iUbz9Jge5aJj+8+/GoTFB3\ns9dxvXkxQW+KyKlre+zf/VrENj4kHTl5NLLVlOr2ODp+3Zxzd7scDHW+YRbV9WVY\nqoAiCpc+1iHX+L5eSTAoc3ywOL7re3zcvYCguf1LTs3L9jxrMOYkJuDZ3I1LG/01\n+2vT/j26MrBK9Zq9/jZ/GqcuHkwXzrfvHdG9HzF1oRtT6ScO1BNCEImeeyJEpt8g\nQiRObkOJmZZ6JDQ08cMhPYiEmJoLcDfzh3o9e3iYr2c7aZc7Sbb8zFbCX0H+ZrV/\np52MS6/VcfnuO8mWPdTHBwvJE4iMpYkG2N7RISjwOaZdbIjWK6ViCinhu4fFy933\ni+Xjqu2jdnowK+D24848nOKyTvb7d79OYwNCaaU/hgE6f9zFVffqRgznVrMJ/dJF\noYI6YG200FQ6iBQ0RaugMJQ7+u0R9BUMVGRqkbnsU8GmZSzZWFy+R4jU9RLPwYKA\ngQ+bYY8zNxTXtEeW06mXJ5V/DBPJP/+oFyrAUEgzL11o/4riD44tdloCoipM6Xoq\nJ/JrCOWJvHLRhqqoilGHoqbq1YAsSeMRmtPE4sR9YVagOY4oVMdBkwl2A4ooBLmT\nZ8OWQU0LntNl3FsTwc8LDkGbyZKUPF/Y4nmA50Bddadgegx7CHRIwkflckLU5qqV\n40UrPJch9pNWUjfk9TiVqkSA04vPbgi8MjVKfdBPjKm5UYgUyXPX/PL75LkAGQ+U\nJgoKmKtbKX7BeauhctHQvGz5Oio0B1A4Qw0nJJCdllMCJR1LvQLzUxULi3f8o0PI\n6ndqlh1Gq3oteQJhM32Hq0BEnELR7WLOi1qdry8uK8pLcqOgBeeARkHlu1FQkRsF\nIUA0AUI0fWce2ZLn68XH1o+xOL/RXXzSDMfgVtBsJ2R8ZCaVbkwmwpREiExbkSZu\nosEmidZL6whJYsSLHWXQhjwQHLRp0Zo3TPe/uHaI4JxO2+tTf53f/rpa18s1wqMd\n2S3/sX+VPoi039hnAGm/bzwBRCYuhOIjLXFBEoC7mQvfjoZO6jII526QDKaknMAD\nFFygM9OCLTPVUzrsMtPInWYJ8mAt1ItLWVuqdUciKLVGv/VzMqEfJzdQDiEGVYds\n6NT1NvEMgyrEFSVZwKTJCK55iCAYsWlZuez+U5EzzNFfQc5giPz9X6EbcAp4UtDX\nBxQICyh8WUAM9fwsL8krZlSkPzzD7ED449gO1xfRb1CaZuWwNoN4zsn2lJMlcWLg\nXRCTih5TtZQ9EluPoWsYLlEvywsyZUvZnMC4Gz5acUxs4jRPILzz4eVmdbucP28T\nptVqth79VD/JhGTZIi3sMdBXONBTPzJCnePXHdebrzt+3H7dS8c9QmTaVojVhDSu\n796Zk2Zsu/d8ZHTINTY52NMiGiWuErkxS75ZX4Nh2vThAykfl0674gnUVU3GyKkv\nF+pqMArKcnCvAXVehjwpwzIjc7GbDdJp0XJ/lDbYsXyrb4MdgLZrG0yHr4ltsLDq\ns0Kkvm6XE+EDFTkQlt/Ee55cJJnL3q09uwV1bmRLbiEO5FM2wMYn/lyUYHYE0blb\nIAxCX7534qh0Qd+NE9VuBHWD31+DkOrdDv1BRvc2GB/ZS7G+tN9AAlCUGHqxjcUE\nH8TTHLxoYaJ/4ZlfDBI+JX0FL2xRCHKItpkupo4Vc88TfxmUPImHtUxK4rYXwijE\nSVGNbxLC5TZzRKhATUQh9xoMPBTS0isnRZp4KBcI6NSjZoQRWBpjk0bV5OZo9jiL\nMQQzM0tS+pmC1o4GZSP1uJzBhqGh2MowWIf0ZEuCDEV66hy1NoNdfsuwADGwvbci\n0U+vEAaIUIeSWyUWpvGhmHrP0vzpezzz0duTFS0aL1B3wZONM6gbZ/BWsaJlQJ9Q\nrzpkTzKIUa3lJ0wrdFlanPckd5StfhtPg9apCvs1VWetRDMg7faoGNJ4O8JpWJl9\nSi9NqYyLaFd8Dd2BTMpnO6RI/SwjIizCOcnd/K7E6X8V0bB7RF1GtY/0PpTeDvw+\nssZAgl+EE8FZXpGrlHpuMH1hqAfMiwk0McHfNKFThwpFfPG6kZJvjC2YZZSeysJa\n4E1NxbEECVZqRGRbPzJBKQGabjRB0t8Hf9arTJFJPy1dhH8ExkhEzAmFI5P8hH6G\nz2JinXdM/Ys5yiGSzMVO9pVFFG3LyUa0jK3IrCNLMpuC4unOZ6Ct4FBQ1O98DqXJ\nkNLXw5E6aFxtswsf7cmSlD7b2ZTK4Sq5w6mr8AvkIqGvFjdc8SZe9PRWIzfd9P5y\nCuR5AnU7TMf28DNtp7vN2IbaWmS3y98kOymnZBd2to8HmJ12vtqn7WcM7NbUi48I\nyQBtrxVtoxX3Lqsvg2qYJuDueNd6ICb565QDncu2qGrgILvKfKgsE7nL2UXaZbTz\nwojfFQalqj4S30BBllPcovJAhrmx4XOi82JnODPEIYz1Yik9/Og/pXd6nUnoNpfi\n6uzCxo3YrMa3zUslWmMcstl/SowWYTFE2FRF4CNYDu2i4O5fuZZOhMgce0IWl0x9\nr9+olN2hy16b1T76Yr/oDIgaProZuh44sZsRQO+7pLMRgC2LmFihu2HqcH8ctzzj\n8lfWSNRFP5104u/MG+dcly5WdEo/1zq50mJRH/D4m/n8fi/A4p75IMj9aZnbSxoQ\nKsNoRBAykzhGu/mTes6DBmHYSGI9IhmvQdKldaHyEhb7pZhp/kMumRpyRXFFXq6r\np/pjqnoKNqbDkhcc6z/asl5KX32s5DeRinlstYuIa3liop++32lCc0mtwsWewz01\nttCzu6oWU9zJEv0eUXO9yCDyplxkL2VFtcije+n32DmdPalfrE5Zqe57mfrFFq8l\nAtbv+6ZCYHNW62XSGoa9Aye8WUKf29qylzS+xJLxqOAr2S4ZMruMt64uo+66jPZF\nC8pCzONjqF+IeXgWXRdi6h5D0kLMAOLfBFz6Z+CpYMA4W1c9YsRN3sGAHqBhQNQa\nnxEIas4EePAO6L2CO+A6XVeWm2eHfmucs+NZXrnMurYGlHAltD3jlLGEtuebxpTK\npGLqQhmlskXZcvjBiKJe/FFe2G/YwQ17892BjnHWOwF50oi1Onrk7VoS1k8N9Mb8\n6OLzbq7ZJ7JPy4qcGOnPR1Dq+uwHIyKbHUsNR+wRJfkTejUAn17XHKDpNVawJITe\nYRGXrCIvMnvrOMKLVaPNySYVmdus7VHhZ48ZODohdquGXJ+aJ56vSxEYWPvDb2wj\nVYYrU5fPwprQ0QRgsqgNMiyMAZzVfmlrq9Oy8MccwMx6+b1mFdy6wEHXQwiXw2TG\n9RCnK2d5ls1GQzfOsspltSZu89zBZDxvnitY8+S+sYd+RsIOe6BhB1ttznjXMr5q\nXVpO/G3Xp+Zl/s4loQaLo83NMpG4VCuODg3pyTy6sDhLFLnIIdwFXoIrjk4LwFze\nL8GpzoZc+CU49X15+1EvVCOOrf0WU9MtS+jOqdV/ABoPnjoOvp74OPoMmcjJ7Wjz\nogLaUnPPkFi5qiDareZZklrYyzvAXmYO9qJg2/ZjL++s7cUvSTdN6EfDibtYCFtY\nuPevxAnJMgHuz4ZXTCAXurXYTnz3GVqkp4h9WWJz0ustcNKrdjjppQj+oWwnTOkH\nEU62baKeX+4Zvi9lai8V9EUqeo4Avif6umZeyfxKWmsTeRI4odS3DIc/sadc99RM\nvtMKLrtAw4rpaZUQcBf6Vjsyyh+qj5wxvlV+jDfK53RuiGqGjXjShyudVE63RUj8\nTAV94TwUn1BObh+g+Lr+rzaYOPJAlSRkbbaQtHEWt3beF6ZA1b0N5IZSVctFCeFB\nsCnQ6mTitnOoewM8S8bbLYKLNj/1XWD6vmoFP+P9owz3MENj3vyYdddAy9E4vO9g\nw78T+mzf2dpvoF/Ghqxjx9NZTp9lVS43xDS//K0yARcdxtQOSw37tGxRGQ6O8eCw\nL6NXnOYgO4/KVII5Sn2zk2Kb0clTSCfwARAUyjq9AMJXPG1Ndg5SDhjkEgj9aj3p\nPgWX8/syPF+WVy6YAbqtqRhaZx1Xj4ekLMCeM9zPJDQyeTuYkYUWKXyQ3wfuzMBx\nXH3eK0Dsz4iW4yqE0F9ztFqoj13F5XPVdDA7uMQkhdbJ6ncposrzh2WKfNsYdtsU\nI6zNy0ycDHrMLRNqr4SjSRJPcE3STOtMzCvo9JQUTyczg2Gj5GDz1bgsh5pZ8XVZ\nh06qPCESS3+N3Fvkb/etTg3U3bfByF6INNd6C+JGCgP0UCykcIUe8D6KoE5YFi4b\n7k9W4ZK2bfMuIeh75faQbTIDJw5nKTaMxhOD4SvPHe3mi2E5Zklmsaz3nX5Z78xu\n/lw3hBD4fu9c5BBtgzIpiGuAcpECoLnBiyYFKDk5qdbbmbMIcKueAxoObqGeayZS\nVuRcWb8Vj34ZzvU8SlBH4TxGhjwH8dp3s+f7Q6V0693SNwK7Kx9VZlre38oPGcu3\n3Xk7vnJT80G7TPINna8bQN1DqgyKRm4qw60nPtEYG0HkRGEx0USyyUSfc9IGE6Bk\nc993czg5AY8ihJRnSkzmTNRsYTLUHkM1JHPfZWgGZF/OGE9eOdEz0Uc0KzVG8Nkj\nsjqcydYnEqm2/U9dxoqckHryFsjh8tcFMDrJNTP9+Sja2I2npHLQcZshL41nwv7K\nSXtpEyajObT9qFgLXLgRX95STvREAno+STm1zHAjOMAryxK6uuydxR07UeBXrjOm\nFrdOQgsTaQ7uYIKpsjSOLC85tkc+2RCUWGlCLkMCEOlSYTysc+hxbpSRRgMezrLZ\njI4c7HvkP7atnQX4crpbWU4eXVeCMJRSGfeexUtsgUuShnojUGlkmDlT9hwDKBim\nJSVkYBf1Eqb+l8eFGczT/0u3rRn+ogw7NFBl/FnlsnUIlTaeb/z1kjYWdmljWKhA\nFKmfU44gTUkxGuOHp1S5JTehh3n1CW8tlLOiJZH4SKxEpD4yoUEJZXpzo9afsYVn\n1opznLmQNCBtnZk4fAPOAXpQg34OkKaGAHCdNAAtrrPiHmOtgGtsdhBTGPKwj0gd\nY8+JAmk3DXlXRQ512HDQm1v00SE1qdncOmgnUQ6dZWBNaxAdgzRPoNxVX54ukPmp\n11EjnT04jRqFFfIzMSXXoEtVooNqUHq8Wa/HzBZ9nECqZDLr9LOFwYABdPmm90yT\nF3sN2dLP6YfltCQkQEne7ndrT91bHGEMAC+nhkyFvl8Lu5CbbXVD77u4vY5HZDZT\n1u/0U9YzuylrxezQgFPWnfkgkdAf11aU3a+VRLWfdrslfQxany8H3S2YjLkPRSdc\nH4saZrKoA/FH554H5oWmJTiPbtFuAosThxYTS42u1VaKs0yXI47gQMz2/TMNTBse\ngQjXtGGlIbV/AdzQtHChhp6weikz8JzT7xfeqchz8Ba722wVcaqKf54qnpwA1AxU\nscOUMHiXSHwRuyO0XCxik5a6NoLzwsswGyP8rh4Cx+XAZYhICpHXy3qIdYixF2kn\nlcvh75OCE265RKfuxLhrv1N+il1PQghHGsPJ8kpsE91vBbef7vmQFdyEzu7abvSA\nDuzYVwjDua1jUew6OXBJHgw6hnQMBGPrHUXYMUoqP+07PAD2zVNUlRl7b+INe2DU\nfjP+eSsDe7uNL6YPdbbN673Qqcsp8FOzIh4NZdzjNfDV0EEJWsJxxcEJNkPuLfK8\ns1CN1L6AYmmWtC8qkdqMJiJW020k86+MTUcq54q595gLEI9RDhaiNqsZ9uBwniu8\nTHai6phOaR+eCCGJecLrSwtBWQ6eDkWtcSFucOFblRf13WT6aQZi4Zmv3BxdkVl+\n9M2yfpI/sJX3z5uvvf03Kgbw6P3Tx+VmtvDldv0iP6fNVjXq6ac//3H002y1qj/N\nnz41Ql+u5BMqf/hqKxYZk5q3VEpnpwf5VweDpfAxOx8+yhzu/T4uP40f9+80zhif\npOaTrrP4nqgDrM+nBDs+VRH23M32t96rp2JQkOqar61yAvCu0nIIFVaU5WCA56le\n2CqFe9VEWDGcZC3NgHlUVzVCrZrv5bugtSLGmw/lUYi43r93TApJCd09lD4oRiL4\nzAPPrwtFFfmUQHc0BROrKMIUPqIh8MigQegc6YNGAVhCoQsXDMVwmhKCKYBLp2QN\nqzROiR6/BXf8JiwLD8lHWYeLro8yKATyVB52uev9VVQL3OHr5FScS0O4jNg2ZJel\nHO2gnGlBRQ9UkdR/LgjFkjiSdWVU0XM/LaOKRT1FsNdTbPaVDV2ha1epj2r5eVnf\nPsxGf6pf2+2gvfSbyTQpPSm3vzzLj501XMPFcu2h9FYJ+qr/7sic6ottyujtX8m8\nnGH2shqv7+fLu+d6uf48XjSvHP9dvpLQK5RvgpugOL57GPsasions+ToGsDNNOoV\nQbZlG31EZ86H5m9qYUaVHzOqWM1I25OimxHX9KT0YSVZ+IUf4ReswtchlGF9mGpU\nMqVv/qU//uZGrEED9l4L8/jHU/ip6Ecy6HaCQvOckQZjNXFEGrWluWxM9aBDjME5\n6xBjdzH26yqnDekufhID8njRXWyFjkq47L5x0RXGTfL6x5B1VajS6bS5Q3Sin2+3\na8KROfLz822ZN+Cx+dPVgQcn/3H3q359tRINZX3zP78rM+oUbm79uxT8w+JZPiYN\nD3S2lun+t6NjnRiay91OhJ4+NLtZz7v1hgi6vL8hV4/la7bPyW6cs7wut5/UGd15\nXW+/c881/R4Ox2x/7XYdbZqTp36qRnnvv/1p9MviN6nhH9+ZZwzlT4+fNz85lqZH\nnC88KGz/Bt3zb2YT3j/toRM8q/H85vEgoq52LHKOM+2cbfgwLpHvqKu77cPa3NTa\n23M+YTO7BE1aYFpYk3QdetfepRthWiQQdVMd7VoZBhTu/s9i+etq3czdnSrzt+Nf\ntQIfOfs4KLP1fpvw1/pkdQwcJI3sIRS25NDZLDyF7FStbIyWt8D5VMH7UeSDbi2U\naphqaanywo/gSR9LL5JqwYxp1EuFaciTX2b3ihz9UnpX+8Kz3gVCHB5bqygovq+w\ntY+20yuuCxPmvyQjKTReTlqKxRVos6Ggwb996DIZChyfLgGI2MUmAhBB5t32OsQl\n3pcKOlT5t80WWY0pooOVrygVTHiC1qi71aMK2C4KL/UoIDZdWD2qOLcHqUqIemeP\nNJBKZFPfZUGLc93lU4h0b587IQMTW0S6JN0p4lBagOxjVxdKxvnWzpSA9i/Oo2rL\nGhAtwrVjQy5heVEvpoJ1YTrWlq7gQ7OO6YGFDfupUwJGfJnZgtaWi8Su+0rQM1ip\ndNWuYbHYF6DY8xUi8O4B59QeWX121ilQhL5Mnaq2MRaJXcwl2Ckyo3Eu13yhDlhV\nriFvpNVWa/BdeIbm+xfQc5dOlauWYAF3ewC6l5WjatEPRFhyTVSR4MfaHnHY58Ky\nFtUM5zS3uFEKc2IIDakuNcZzZ4q+0+4SXC6vdaJhrKt1Aij2wqxTDV+5qrloF8vm\nXC8pUiq54lnTKj5dzrv4uP6tXs5G3y0eHma3G++0Op/FvkKyyVXM8DwpoRqU8kvA\nz0zVPTY4eveXD5rHZ3m/ut24qM1ggf/pnObdr9OIJuISEDApVYL3yJ1FCqBiykYx\nVPeMHcbZqyfYzS+qKZwJyK5y0lBldrd7e/GwiScMnQx1g3MK1vCUavRVwtubF+dt\nuq0ie55KHOo+ZwJvu3czS5uI5uo4QzFST6HNSkNcQY0vnIWJNtRGAx6UdnKCdlbD\nNqw9kEv0Yj0TsD9hjdVRgIMRavRiL8PhDKj/a+31UACDEVlcjN5UMD8BqY2u+NAm\naLFtvYrFNSozMpAN5xrFUB6S797KBUN5tcu0CnWeqtJ7c2PbQXyJGbZyo2RzWBzq\nEf0w/3Q/evtaz6Uu5g/z9WeefZPaDRrKlRmiIM9/m36PEv5NjASD+7pphJ2vzeEq\nzN3LX6Zu/S4R7stOk5y8W8ykwwKjQ1Mzs63Ezj4dtv1iZ1qM/Txrnk682mXlU6eV\nV53qoICzTgPIZaV7JVMJnN0rzbH24FKb7Clo/0meOnb2nzTH2YPH1CkpLL+YCt+6\n6vB2PIW8I5fHzUM278EQ9PYQcYMN+1fqgaPTtUFoVNa/DSJxaOETh6KV2e+lX78m\nSl7d5stE0RrtWqi1UokGiiQ3h2WZoiBTy50hDNbVll6RKBrQxLHCWLksvyLfBHZO\nK5BGWfl0s+ikIqa+svSsnoMk3rOSfSq/Nz1BrOG5zny7Gbdfa6PZWQ8Wpk4sBjSn\nduurQFbctwx+n5TUrCqs2qXNN/Hd0LEbM9i86vSZiKmTY0VrVq6WLyC/rFelZ7ak\n1UgeSpEhNnF8aTCdlFZkZJIGkd04PxqMsSXnbURkUtrbo2/aqyfXGhibYQi1Sjdr\nb6R+Haxn1xocvcijX7XiFiFVRjFBRtu7DPWpiQ3lucbO1PDjor4bfVs/1E+3s2W/\nRzRTUUAPGPrrunIXHm565i48yF/kZvd7xMhbECBs9qs7U1VRqzy2qmJHe9FWFKUS\nydV+JyXStMestkA7222GoWLe9ufn2dOHdX37q0v9QkwziKFy+JxR+SYZtcpY5hUz\nO/Ut5KtXm1eP5av5pgAPH3MtPyaqcrDUAEQu0WuAInt2qYc5RqQSeV5B3u4o8uJE\n5KjLjkfJy5czEq2PCpCfEyO1SuQlVD/VqKI0+p9SrQk2jnRXEcH6H+VdkwxqJmr9\nzy8P9Vr+4+Po/eaXl4nfkmwfG88037+6D0tpPq3xVxGaS5ZUeHPJpbJwZ+uPwsm9\nuCvYSvII5K82FohGoQ/WFpbRR+SI1BTEVLTasurbFnpdfC9/Hq2FzZv34I/2HxOD\n9NMKLAkehf/94mG1eBz9spy9zme/GeP2Xv6rtTS/j83r+gja20+KLW5D8yKkuG0X\nsPuJ1NFkFukEPKl6VIrYxGfYCgTvo/9pOf/HPx4+Bypj5eq4Eg9Y361Ws9+PngeW\n9vP2RzkaDUeZzzbf6vIaDgfXVE3AU4n6BBsdmgvu0NzkcjFFZZlN403jNJsmZgp+\nChu4fDp0eKr2UvjwfOKlsPho76vYaCanHuuS6SYST+FTawSeohfHj6iKv0x+xFbB\nYl6Vfyv11OmNJo4KUmhko69tZ2rj7bBuTr5q9lg/cacfzYfEg8GkIrTGQlQEMezs\n9dFH6NmrJcLwkyUV1JU/KRRSKoTspcGYDEHbSiIaAq2bsbeDXoojWzMINlKo4Rc+\nmp/AL5NHUuIvPl7oKQD7Avih6STHMxIE1OI4qaT0ETX2BZUIo4bMH/FJy2n+SEkc\n2TPGaAKIDNR4LkITqGlxIu+n652HnEkon/QK38g7rVDRUjsvvANcrSpYDahJOPgO\n0qkGKLJnl3qYvkbdtMMnBadNO3SU3XXt+knQmrZdhJFWqgLv9k9VgdZBH8IP8+lX\nAkuBL44LINKe4MoeIuweVgbr49WTJ4rRbOrkyZXzfIkAYa0Fu50+iMDnEi9jCkGA\n4clGTdRZHzZbjnzQJxMFeesMZkbk+3q1Xm58LllTH3evJKts/8JTtV2KqgRIzrLQ\n1HZ5Bl47XPOa56M7zIrp6+6l0ubAi3eONkcOYgejI0czmtVFHMUYRung27N6G+Qr\nTw+osGGNkrwQimaUFtbIZYY93jL1Y3zkNYdY46OiE94NMEMglAFtToDtPJvUAK9M\n7nQg+BHkrEmhT2T+3cPi5W70/unjcuNTXpqMHJutKw/85uBqRNVHmrrnt6umHHbY\nmuehEl9tn5/OCpHbldRzmKWZ2/m4bK8zzMHd2zoZa+HHqZB9jC1ppRx0tfdc2K3K\nk5oJrZH2odr7/sPPp+Ked8W95yHMVwukvHevwIh8LkUu3zh8SRcQKIMErXUhGnFT\nXQlR6JF4E/DyECR2vVfRyJ3sXYiCj8zBQEU5SP54wbNJPMAe0rmcoaxeFzXhcMkT\nJ6MQaqtOSYqOqqh4IlV8NKRINeBQ2GY/JsYE6a/z5fqlfpj/o94s6nNB7CJNCQl3\n93NHP9VP9afZo3zD0dtP8r93GwOpVBv5T6/jx0+P63G9eReW5bmdT7gWlzMJo1oy\nkaeEPpxSp8uReCNwVLWNbB/H8sc5D1jKj7iWHxEoptLwFVLwgrZeDT/IVy1fpbPS\nTXZ35H/PJfX7EKOQTtxpCgUjnLzVA6wnArcYXJXSBES+f9Mw5ZsQWllgpMDNDZ2G\nBj4GxnmICDqN0FRZMzCJRplABZfMq6458MTs+4uO02kxJZylBC2qMOqr0JmUc9TW\nXYoZDnSRlaO4nyaBsU/lnAFjC0jMBoYvY5GFmjBNaDtpkXCKwWAbDJxyot+eNpx7\niUOVs2fbyL0goISN+AtmfLDRQhEjLpDYzR4XKLAbNi/0GmfwyC3YOKOEbLlrAWZj\nKjnRVPIeTCWP0lQmlHX4Wn1kRH1kPegji1IfyZRAx9PpAxnAGaUfT/CWEgd73iiR\nI+ooG5m7rACDhB5yQUUm65m9nBXZOrB4rZWoE0S+TyWOxatKUbC6yOShmPoseBUa\nH6RNzHtJycM4C6rKvzPKlV2TcRCqWGxj3v0Ws3w8/VL+9qlzV/6ovdlbBfDty965\nsMABkEIReZ75CMdvSmxAflM6huRS0XvfItAy6IAsob8HqLmB/pS+acbfN83C9TwK\nNeS5cC1W7J53xcluRN11awLeOT17CwgzD1BHAB9FvJxmDjm/OeRRmUOaZq4FibNG\nhFUBj/si8sVSdNQ+rlX1cwrqKieHyATdA73ZzQUT6FWerZr6iDC6jE7Rl2BtSIQZ\nUVSDl3nqox0niLVVzrWBR2pa6KmFGvBWPrxQhk4tMs5qn8S5wXgddSB3TS/OA7lF\nCO8leF8GpUDdr3OtCu5QMRYPsyLhmGKHlzIIui/xhrUz8Sbw3kSHTOvsq8hX9E4d\nF29dMC7ep7pG6KNpjVxifkwfPKTqpmJhTGm6jAsO/qlbMEc18pwI6DpriOlYUppM\n3bMJUibBn0cE73yUtQzw8A7S+ZCyutKLNkzuJ0JdSC8ETmQi4SkSJeWsKCkPGyVV\nzgyBXR2JEnYL/gp5EVXoTYupzxlWgHWs5Wu4uyM8bSN016QgdMgw4aO7Ch6q8NLC\nMweGaJLmNAXPnWOYfPDywjOkxLy4cCC4NEzBCdzQQmIJEtg4npR4PtV3aWpTZyeE\nbcvwyAWt0NvLmEU8bjCZeiiPkFAaO0aLCqHJtMTeGBQ+DO28vHqty+hpqJk+9tCs\nW7rCaIaN3RmmQ1IJPE0JC97pw8VWNXamaD9o4jLQ3IDPPm8BU7a0KakfylZ4A/7s\nalXkr1KtPm22MIUys0J7UeVlBDtlHUL4KNppmHfYWRNP/TMzBy9YiKjymml73seh\nf2aahSsVENFpFg5a5BS9Aam5AT6XCbhuC2Sd2Ypkr4CSEiB8sPc1bg4NMH116syO\nLvRyuNLfOVhRe1sduizrY7rOvCswdDWoW3heiPgFumFasDZMi6AbphJD+5xlKRAl\nbTOUdk93g+3ZDZIjpQ7LbM4wHMalcTKaL6Xip2wM+qn4ETuD3lpKQcWhYRSYeKmo\no3saHpYjmJUWLLhWk9F9cBmwa4necC4mehNTI6+qWqDZHq2laLSWsqK1NGy0VlHO\nbpuETaG3pfz0tjQqZyPV4Mok2KmBxK9Ne5iaTKNMGV1Cr7n+Rat89VLzCjM2qAoq\nk8K1P7ObZcXubWHd2BKm3NUcQx+Uc3zd/kAvtKjckxcHXmbukHnogKGT9IO+GHmg\nl5yo23u1s0Qdn+zxL3u5oNsOahvz0H4hqu1gaayK65N8OJDqXOfZzvc0WF276aFY\ndtklauUl7LS5CaE6U/j9YrkTsuU1vVSAI6nHD9qdRnz39Gn+NKM8Jrcfx/KBSLkf\nj+ZjrntP0QZZxyUycBFOS3EtI99pr1BOTEoJPs7GxWZG8niQnlpPat7k0G16k8cw\nra3yqgIc0tOZBir+7Y2CrXi0N4eoSkcCpKKa/RHBETF6oMtF9wK8k6M1CpxqGA0h\nngqFmKBOy2+l/OHzaj17xIt5xSfmVVRilkEUInfAMVQDgJSR1K4+bYinERaj5bMN\n1Qe0zzY+udw/5rzJ5f6Jv+TkUmTCFWmqNpjt7UN4RJoiVqQ5KaC2pVHCZy5/L9ys\nLVw3r5O1ZBuNg0+nFbjiyihZTYlfKV+rCr9ByjE9wTKSEmC7JpKq/boykFrlTIY4\nGlOKJApX1KK4DrqXcnqUMnkH9Il80+A9huqIT5FBrXLYYeAlbJOHDi3mQUbgREYA\njRr/gvIs/nxKmM+8GuERcnoNwDM7b+HbeYtInbdEJG5oGglGHJF0rDhETOGdpnBw\n1Iq447sdRZzGIGLVxIQAJ2LMFVpKbZw9fe+1QD5MwXZC6GKoyi2EQgtjieUyoI26\nok6ANt2KOqn5ykeOHajv6gn7QMwyGPugUI8/vBMNsJS+hyDckzYGpcrL2ULttcDr\nSeqEWozK42PdyqofTsfqC+F0iAI8I4msPZiTsfMKhBXCMuDZiwFUKvw7KZwqRIBy\nMt+ZchZrpiwmhKrESfAgeTBWYDSE8/JUZSYQAzWJNMEP+XjUh3BBnorOTv2/wjAq\npxS2Fx5CGhEPQSl0N+R/jLYUyTugpXDEP0zYLZ3AEaSlzDtPJ4vIPtSZMaFwpMmM\nAaEL70IXcQq9taihGZ0+EfSHej17eJivZ6Pv6ufVS1PVtqb850nVArDqGvnZB47K\njac7TP6Wow/NV/9q9If3H342YKzV/o3Gt9s3Gss3Gs9XC593LuSH7N/+Wr79tXx7\nsr7v1+tnqW8vllNVUAKukm+ili8KyqrEnDAC267Ek5hM7dBSTiYQwIWsgLhFVW0L\nLBtVTy0iWDSs2gOZgPUrgmJsVMKsjDDrt8qr81aaSEbj0c/Pm+HC+sFhGee5bha7\nN/Xk3HQrJVr6OnxkFF5OaUzgwTe1MfGr0EfhBTC3tvrCr8KoLRAC4XYW6GR6fdpc\nRM6yssETGlWVKGhhwH8dhbH1x7RqCxZwqJEgVH4jAA5Lx9iLP4zVDcqU1VVDJeD7\ngIzVyXbgjDVML6fObW00AXs5yzTXMyQk+7nQjUnp7qZQJdUOEtrlwB1EyJ0MdwFh\nsEFKDS8gmhihqGSHKfqCEtEhCKkciBNr5xWd3GGffjCmAAbRCgh2ZGNBPdhONNqQ\n0NtGG5pY5MdwOMFeN/7EpCa7KpLfjoYfqg6MxiMEddKtgVdhCH6N3tRL3Jp6OL82\nfGMPov5BMnbqTHBX3gKOHeraqI1T0mjDtoHnARFjNRMsIlY38eySTK/pipfJADhe\nBKsYpQ+zQlwaq7EudvbUv4uiRqP2beDZEIKalOEc0I9DOMcqps9wrhayXUmFvRDW\nT1CJpGOjji7g6V1Cy4ZuHk4UNkyTZmDTkAK26TvDeblzM5M/pEdSI1an6TYODdaa\ne3Omh9Q9LrKHWn026SXcmHFqyfTVjAk+7zwqqvGN+gX7P86fXn4f/TD/dD96+1rP\npdTnUryfW7rZaeYKyeKWon6+bf53Xu//Uf63/FslwTurSsKtP/jbHp+k8ej7erVe\n1re/ah6q+/rI6D88YB93ryE8SvuXnEKaw2N0L79v3fq64T8+x7nGhHBRGNZO0dzj\nev/tT6NfFr9tlARuWWkrqWj++Lx5peuyleZNtNeFzxQGB9b9Q7952m0Vt/l6lHEl\n+wGz+c3jVo7dwT6fqob6G23FHk90+G83qY3vzNgOHmrowCodIuE+CsUhkmzt4BD9\nbDUyukN22NqXYSk86LSEchOiA+1q0wR2u66zrU6+u+xnuqVC2wNscDHH/hypynwJ\nF8Vs8QzViA+ohmrIdGwTbA6qNE6vuipQpQOlWTrXCTxCGZ+W6NeyvLpSZGdAaU98\n/QBnBxqAWWWky9Z0CEMEL1ywhTeLGxCzyKyPcILZIuuzSfjsPWSQuZ7f3E1anNc8\nXY06yG7yADvI/pKOOyL0k9LOvKZ6muoKva7SQ0UFcJ7xl1OmJeEKND3xowJMP2l8\noChzyHxPFF5tuFR6XnwFzVf9unRHPsGU1KZ+g2NBTxwKf4lD2JUXr7vbU88e9BSF\n4rV3jI8OCiRGSLT+woOjIveaP5TU/K/0lf/RmgrMHrGvKKdcsOnVFHEcG6VG2Ub6\nXCBMIHFOZoFeW3gQK0OZ8/VRE1O38ALI6KQGvBoKjqep1AMbKTPqir/IvVYmTyMT\n1ZvxnowZyqUNGqigSQ4n/WIRY+m53YrWMB30R6roqV/aWEEIdYWHUEerk0WQqyVe\n/aqmkmmTsLlaYMhZ27AVTpmge3W25wk6SdE9pOQnxhhe4i3xp9fM+7TzSu4AeYp/\nQXR+BuzIisIr9QE5LaFENHx7qwYGM17Bidc8/LT3Q+z69NHvwda/om/2MKWPNm32\n856Pnza7sfUTrU1K3XntAql1Ry0A+CVmGjUXTz1T/r/8hRcL+cn7IaZ6UnycTtL8\ntkgmIq8S+acqvcnEx7zONxcM/vWv/w9UI5b8\n-----END ENTITLEMENT DATA-----\n-----BEGIN RSA SIGNATURE-----\nYpDSebGd/NMfCOD3Hh41423TP3LhIWdrLN+FztAi9GzKOHr95Q6Nu3+7H4DK+5IS\n76RjEoV5fDd9JprYuNDhe+QePjHAlJW6F6EXr1soikg0veXwlGakK7hCPBkvpjS3\nAlbzuB4i+g+CycaNMiPDs/dUJcGsj/lXq4Pj2Aqpjc2OHF7kxoLiTM5Lb2DAmNaO\nyWQEDct8PD6nkQQ8YKXwJM7LrXgfBpFYyYGs/+YtXyYEPP33/666lHZlX17Dhy5D\ngg8cyE9w86WfDQ0HBbv4HDbf6kdobgkVXZNMY4m+qfke7bOHYPZ8FAuaoW6QA6Pf\nszqz1Kv3lMxV75zPpwq0zY5JBY16PIjwyrx7oyMZirQijGW9/dDamDzowH4keh3f\nq/rphE+78tN5QgDi1LynaYRnIkyTSh4ozz+4YUu2YOotQK0UNv2G7N69DLa+VlyJ\ndt+W12x6/Gt/wBj5+rNvv80AQ1UVCe/zkCs57EDaxa6pp98ZnBDfr7XDNjsjnIbK\nHFDOdkeEsWXL3284F9vDEvbc4INqqRBy1w85fxwMplAMiop76b7rnM944c2XW/De\njD60LA8Uro5a4mtFkaw+wuJrraYyrmYYCJqwdOYk7RZQ3byPoEq8xRBsJpCAqn4J\nhyXWotl+O5JwZavDQc1Nb9GVBmCTOjJgX9nwBnyFMew=\n-----END RSA SIGNATURE-----\n","id":"8a85f98a4e009a5b014e1529b8927f19","serial":{"id":4718060395689248000,"revoked":false,"collected":false,"expiration":"2016-03-31T03:59:59.000+0000","serial":4718060395689248000,"created":"2015-06-21T08:08:52.000+0000","updated":"2015-06-21T08:08:52.000+0000"},"created":"2015-06-21T08:08:52.000+0000","updated":"2015-06-21T08:08:52.000+0000"}],"quantity":5,"startDate":"2015-03-31T04:00:00.000+0000","endDate":"2016-03-31T03:59:59.000+0000","href":"/entitlements/8a85f9834e009a85014e01e1f11737ea","created":"2015-06-17T14:17:41.000+0000","updated":"2015-06-21T08:08:52.000+0000"},{"id":"8a85f9844df26b1c014e152980df7f85","consumer":{"id":"8a85f9874df26cde014dfcf1b4f65e08","uuid":"50f73b81-0242-4f9e-bcd5-d9fac11715af","name":"tzach","href":"/consumers/50f73b81-0242-4f9e-bcd5-d9fac11715af"},"pool":{"id":"8a85f9814a192108014a1adf1c7b6b39","owner":{"id":"8a85f9814a192108014a1adef5826b38","key":"7473998","displayName":"7473998","href":"/owners/7473998"},"activeSubscription":true,"sourceEntitlement":null,"quantity":10,"startDate":"2014-12-05T05:00:00.000+0000","endDate":"2015-12-05T04:59:59.000+0000","productId":"RV00007","derivedProductId":null,"providedProducts":[{"id":"8a85f9894adf01b8014adfd14ae81246","productId":"220","productName":"Red Hat OpenStack Beta","created":"2015-01-12T20:24:03.000+0000","updated":"2015-01-12T20:24:03.000+0000"},{"id":"8a85f9894adf01b8014adfd14ae81247","productId":"201","productName":"Red Hat Software Collections (for RHEL Server)","created":"2015-01-12T20:24:03.000+0000","updated":"2015-01-12T20:24:03.000+0000"},{"id":"8a85f9894adf01b8014adfd14ae81248","productId":"269","productName":"Red Hat Satellite Capsule","created":"2015-01-12T20:24:03.000+0000","updated":"2015-01-12T20:24:03.000+0000"},{"id":"8a85f9894adf01b8014adfd14ae81249","productId":"150","productName":"Red Hat Enterprise Virtualization","created":"2015-01-12T20:24:03.000+0000","updated":"2015-01-12T20:24:03.000+0000"},{"id":"8a85f9894adf01b8014adfd14ae9124a","productId":"239","productName":"Red Hat Enterprise MRG Messaging","created":"2015-01-12T20:24:03.000+0000","updated":"2015-01-12T20:24:03.000+0000"},{"id":"8a85f9894adf01b8014adfd14ae9124b","productId":"84","productName":"Red Hat Enterprise Linux High Availability (for RHEL Server) - Extended Update Support","created":"2015-01-12T20:24:03.000+0000","updated":"2015-01-12T20:24:03.000+0000"},{"id":"8a85f9894adf01b8014adfd14ae9124c","productId":"180","productName":"Red Hat Beta","created":"2015-01-12T20:24:03.000+0000","updated":"2015-01-12T20:24:03.000+0000"},{"id":"8a85f9894adf01b8014adfd14ae9124d","productId":"70","productName":"Red Hat Enterprise Linux Server - Extended Update Support","created":"2015-01-12T20:24:03.000+0000","updated":"2015-01-12T20:24:03.000+0000"},{"id":"8a85f9894adf01b8014adfd14ae9124e","productId":"246","productName":"Oracle Java (for RHEL Server) - Extended Update Support","created":"2015-01-12T20:24:03.000+0000","updated":"2015-01-12T20:24:03.000+0000"},{"id":"8a85f9894adf01b8014adfd14ae9124f","productId":"183","productName":"JBoss Enterprise Application Platform","created":"2015-01-12T20:24:03.000+0000","updated":"2015-01-12T20:24:03.000+0000"},{"id":"8a85f9894adf01b8014adfd14ae91250","productId":"240","productName":"Oracle Java (for RHEL Server)","created":"2015-01-12T20:24:03.000+0000","updated":"2015-01-12T20:24:03.000+0000"},{"id":"8a85f9894adf01b8014adfd14ae91252","productId":"191","productName":"Red Hat OpenStack","created":"2015-01-12T20:24:03.000+0000","updated":"2015-01-12T20:24:03.000+0000"},{"id":"8a85f9894adf01b8014adfd14ae91251","productId":"86","productName":"Red Hat Enterprise Linux Load Balancer (for RHEL Server) - Extended Update Support","created":"2015-01-12T20:24:03.000+0000","updated":"2015-01-12T20:24:03.000+0000"},{"id":"8a85f9894adf01b8014adfd14ae91254","productId":"83","productName":"Red Hat Enterprise Linux High Availability (for RHEL Server)","created":"2015-01-12T20:24:03.000+0000","updated":"2015-01-12T20:24:03.000+0000"},{"id":"8a85f9894adf01b8014adfd14ae91253","productId":"69","productName":"Red Hat Enterprise Linux Server","created":"2015-01-12T20:24:03.000+0000","updated":"2015-01-12T20:24:03.000+0000"},{"id":"8a85f9894adf01b8014adfd14ae91255","productId":"250","productName":"Red Hat Satellite","created":"2015-01-12T20:24:03.000+0000","updated":"2015-01-12T20:24:03.000+0000"},{"id":"8a85f9894adf01b8014adfd14ae91256","productId":"205","productName":"Red Hat Software Collections Beta (for RHEL Server)","created":"2015-01-12T20:24:03.000+0000","updated":"2015-01-12T20:24:03.000+0000"},{"id":"8a85f9894adf01b8014adfd14ae91257","productId":"85","productName":"Red Hat Enterprise Linux Load Balancer (for RHEL Server)","created":"2015-01-12T20:24:03.000+0000","updated":"2015-01-12T20:24:03.000+0000"},{"id":"8a85f9894adf01b8014adfd14ae91258","productId":"167","productName":"Red Hat CloudForms","created":"2015-01-12T20:24:03.000+0000","updated":"2015-01-12T20:24:03.000+0000"}],"derivedProvidedProducts":[],"attributes":[],"productAttributes":[{"id":"8a85f9874a65e793014a70f74d145dce","name":"ph_product_line","value":"RHCI","productId":"RV00007","created":"2014-12-22T07:47:42.000+0000","updated":"2014-12-22T07:47:42.000+0000"},{"id":"8a85f9874a65e793014a70f74d145dcf","name":"name","value":"Red Hat Cloud Infrastructure with Smart Management, Premium (2-sockets)","productId":"RV00007","created":"2014-12-22T07:47:42.000+0000","updated":"2014-12-22T07:47:42.000+0000"},{"id":"8a85f9874a65e793014a70f74d145dd0","name":"product_family","value":"Red Hat Cloud Infrastructure","productId":"RV00007","created":"2014-12-22T07:47:42.000+0000","updated":"2014-12-22T07:47:42.000+0000"},{"id":"8a85f9874a65e793014a70f74d145dd1","name":"ph_product_name","value":"RHCI","productId":"RV00007","created":"2014-12-22T07:47:42.000+0000","updated":"2014-12-22T07:47:42.000+0000"},{"id":"8a85f9874a65e793014a70f74d145dd2","name":"management_enabled","value":"1","productId":"RV00007","created":"2014-12-22T07:47:42.000+0000","updated":"2014-12-22T07:47:42.000+0000"},{"id":"8a85f9874a65e793014a70f74d145dd3","name":"variant","value":"Cloud","productId":"RV00007","created":"2014-12-22T07:47:42.000+0000","updated":"2014-12-22T07:47:42.000+0000"},{"id":"8a85f9874a65e793014a70f74d145dd4","name":"sockets","value":"2","productId":"RV00007","created":"2014-12-22T07:47:42.000+0000","updated":"2014-12-22T07:47:42.000+0000"},{"id":"8a85f9874a65e793014a70f74d145dd5","name":"multi-entitlement","value":"yes","productId":"RV00007","created":"2014-12-22T07:47:42.000+0000","updated":"2014-12-22T07:47:42.000+0000"},{"id":"8a85f9874a65e793014a70f74d145dd6","name":"support_type","value":"L1-L3","productId":"RV00007","created":"2014-12-22T07:47:42.000+0000","updated":"2014-12-22T07:47:42.000+0000"},{"id":"8a85f9874a65e793014a70f74d145dd7","name":"arch","value":"x86_64,ppc64le,ppc64,ia64,ppc,s390,x86,s390x","productId":"RV00007","created":"2014-12-22T07:47:42.000+0000","updated":"2014-12-22T07:47:42.000+0000"},{"id":"8a85f9874a65e793014a70f74d145dd8","name":"description","value":"Red Hat Cloud Infrastructure","productId":"RV00007","created":"2014-12-22T07:47:42.000+0000","updated":"2014-12-22T07:47:42.000+0000"},{"id":"8a85f9874a65e793014a70f74d145dd9","name":"stacking_id","value":"RV00007","productId":"RV00007","created":"2014-12-22T07:47:42.000+0000","updated":"2014-12-22T07:47:42.000+0000"},{"id":"8a85f9874a65e793014a70f74d145ddb","name":"type","value":"MKT","productId":"RV00007","created":"2014-12-22T07:47:42.000+0000","updated":"2014-12-22T07:47:42.000+0000"},{"id":"8a85f9874a65e793014a70f74d145dda","name":"enabled_consumer_types","value":"satellite","productId":"RV00007","created":"2014-12-22T07:47:42.000+0000","updated":"2014-12-22T07:47:42.000+0000"},{"id":"8a85f9874a65e793014a70f74d145ddc","name":"ph_category","value":"Subscriptions","productId":"RV00007","created":"2014-12-22T07:47:42.000+0000","updated":"2014-12-22T07:47:42.000+0000"},{"id":"8a85f9874a65e793014a70f74d145ddd","name":"virt_limit","value":"unlimited","productId":"RV00007","created":"2014-12-22T07:47:42.000+0000","updated":"2014-12-22T07:47:42.000+0000"},{"id":"8a85f9874a65e793014a70f74d145dde","name":"support_level","value":"Premium","productId":"RV00007","created":"2014-12-22T07:47:42.000+0000","updated":"2014-12-22T07:47:42.000+0000"},{"id":"8a85f9874a65e793014a70f74d145ddf","name":"subtype","value":"Premium","productId":"RV00007","created":"2014-12-22T07:47:42.000+0000","updated":"2014-12-22T07:47:42.000+0000"}],"derivedProductAttributes":[],"restrictedToUsername":null,"contractNumber":"10593540","accountNumber":"5530698","orderNumber":null,"consumed":7,"exported":6,"productName":"Red Hat Cloud Infrastructure with Smart Management, Premium (2-sockets)","derivedProductName":null,"branding":[{"productId":"69","name":"Red Hat Cloud Infrastructure","type":"OS","created":"2014-12-05T14:33:57.000+0000","updated":"2014-12-05T14:33:57.000+0000"}],"calculatedAttributes":{"compliance_type":"Stackable"},"type":"NORMAL","stacked":true,"stackId":"RV00007","href":"/pools/8a85f9814a192108014a1adf1c7b6b39","created":"2014-12-05T14:33:57.000+0000","updated":"2015-01-12T20:24:03.000+0000","subscriptionSubKey":"master","sourceStackId":null,"subscriptionId":"3456439","sourceConsumer":null},"certificates":[{"key":"-----BEGIN RSA PRIVATE KEY-----\nMIIEogIBAAKCAQEAqGQybHnChDrZhX25NFLMsR78scdXSuOumCnlupAdiFevlEXM\nbaM6UPmSk4lriKQj+wnlvAocgHxD8nDv0UGqVOmotENQC9eGRUvsZ006yHpBuJmO\nv498R6s3lfMpVDjFU55eosgtgnXy3rQLEp5u6QgD6yLoeFDhGYI2OYavaOGDe/VT\nSFPEuLekOoNtn7P7pJT32eaFEyLJqpBekmC5mEQpWEIaI4d3O286/nichOcp37+J\nd6UJS2gpzuN+wkYVH/5kQiCXKfX/GdwHBakpbVWL6JSVZn3lX9xR5p+UsSgfa5J3\n4uJNkS5nEgnvrg7vHPOEVTT67RNNgKHOl3pClQIDAQABAoIBAB1e9KiVCEeWGDC/\ngBlPQ+K0+/BqS6CFXAOwcyB6WJxaZwaesgyBhv9uuJFBS99WeewkisykmtoSUqur\n5TiDkpki9EkU4JZgLkxR9NcD0nf7UxFGv25MMaoyhAyEkDXffRObsPgFoGJ7/jO4\nBaJmvgOpYT2XJiMuQET5wEmCY4AQY9uz3zc+38pJFd/uLDAm9r2t+mfrKJ1jSJne\nEU2gVWc9zMPh/AhjKwnhY5GAMZMO/2c7FsPc2q5A5H3Mj9otS/j0pnp1rsQt7Olr\nPo5qZ+WSPWY89HmsDj4WuYUICRL1ey8pXkKZIjSoca0NpqkwGE3WpZk1QLO5fgiF\nVB88pPUCgYEA+/FASGum7vBABwkkLaIgY2gizyGr0yKbUso7mm2ziyG0paq5s05I\n4bWSS8og+ER/zMWoUtN3ytWVf+SJ0Sa5+N01FsJpgi91zKbv5wj4QF9xN9+GTivw\nX9CrjMElkVKokfuNl2AR5CkWYM9FK5WP50LlawZirmGS1G1nYvmSuC8CgYEAqxp3\n4gKth057r7afaOCBDcY6TaySNCfZAXRkuuxcT8Y9AplLCmZFhF33r8iaqzu12UGK\nQgTpCc5+xuEfTTOyfhPgcx7UaiaU3acfRrdPuvzeU7YNE0e1lrX61CgbWJsFKMdq\nUWf5zXNpSg/9xK57jGNn+8tR6LrXTgI+mAlLfHsCgYBBgKzU52BEeSQ8cAz+7Er9\nbWK3daqlvzag5MFwWhs3DjFYbTXQv4bFYB7EI65EvhJ4G9+ygRaBHty6nqGSRj5N\nzL1zyGIEHfDDn5d5+uQIYIggHbZedqANWURw2Pq6eMIpCjz64VhleKU/0EPMnBsI\n5mSdWdCoQ+gX4MXjfr29swKBgCqdrgxBxHy15IKQRsX1XM9UdwMPn16UKi19kvUn\nl5pa8qkqCxGtBVWBngZPPY62kYVqGIh29p/1qYfZXFV7MdLLGpUxsZA6ycsnK9gO\nIjKddrZ82mbZ7nV6H94lmyIHglJ00Jsz/XjZbPkAYKFTH/yIacbCDkWb+7I3RuXR\nMtbvAoGAdUdLQNRlUSH1ZY1yjlsc2ZKSsyVZ1tSkF9JNnX2OPv6JzkWST5bDSYvX\nBeNZwXG6us2GLnsI1LSqMpzeCLKjpH24337rO8fbbN9g5SuenOSlq3Tne1gXwGpW\nc0PemYSdl20++metc/5y74lqo+0hbiDc8guaQpOITff5k/1kqdE=\n-----END RSA PRIVATE KEY-----\n","cert":"-----BEGIN CERTIFICATE-----\nMIIKcjCCCFqgAwIBAgIIUF0cdyO4/2MwDQYJKoZIhvcNAQEFBQAwgaQxCzAJBgNV\nBAYTAlVTMRcwFQYDVQQIDA5Ob3J0aCBDYXJvbGluYTEWMBQGA1UECgwNUmVkIEhh\ndCwgSW5jLjEYMBYGA1UECwwPUmVkIEhhdCBOZXR3b3JrMSQwIgYDVQQDDBtSZWQg\nSGF0IENhbmRsZXBpbiBBdXRob3JpdHkxJDAiBgkqhkiG9w0BCQEWFWNhLXN1cHBv\ncnRAcmVkaGF0LmNvbTAeFw0xNDEyMDUwNTAwMDBaFw0xNTEyMDUwNDU5NTlaMCsx\nKTAnBgNVBAMTIDhhODVmOTg0NGRmMjZiMWMwMTRlMTUyOTgwZGY3Zjg1MIIBIjAN\nBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAqGQybHnChDrZhX25NFLMsR78scdX\nSuOumCnlupAdiFevlEXMbaM6UPmSk4lriKQj+wnlvAocgHxD8nDv0UGqVOmotENQ\nC9eGRUvsZ006yHpBuJmOv498R6s3lfMpVDjFU55eosgtgnXy3rQLEp5u6QgD6yLo\neFDhGYI2OYavaOGDe/VTSFPEuLekOoNtn7P7pJT32eaFEyLJqpBekmC5mEQpWEIa\nI4d3O286/nichOcp37+Jd6UJS2gpzuN+wkYVH/5kQiCXKfX/GdwHBakpbVWL6JSV\nZn3lX9xR5p+UsSgfa5J34uJNkS5nEgnvrg7vHPOEVTT67RNNgKHOl3pClQIDAQAB\no4IGHjCCBhowEQYJYIZIAYb4QgEBBAQDAgWgMAsGA1UdDwQEAwIEsDCB3gYDVR0j\nBIHWMIHTgBR3LqXNNw2o4dPqYcVWZ0PokcdtHKGBt6SBtDCBsTELMAkGA1UEBhMC\nVVMxFzAVBgNVBAgMDk5vcnRoIENhcm9saW5hMRYwFAYDVQQKDA1SZWQgSGF0LCBJ\nbmMuMRgwFgYDVQQLDA9SZWQgSGF0IE5ldHdvcmsxMTAvBgNVBAMMKFJlZCBIYXQg\nRW50aXRsZW1lbnQgT3BlcmF0aW9ucyBBdXRob3JpdHkxJDAiBgkqhkiG9w0BCQEW\nFWNhLXN1cHBvcnRAcmVkaGF0LmNvbYIBPzAdBgNVHQ4EFgQUH4sIAAAAAAAAAAMA\nAAAAAAAAAAAwEwYDVR0lBAwwCgYIKwYBBQUHAwIwEgYJKwYBBAGSCAkGBAUMAzMu\nMjCCBM0GCSsGAQQBkggJBwSCBL4EggS6eNpNkk2T2jAMht8fs1dnFvLBudPpcWc6\n5dCzYkTixY4zlhMWfn1loAsHOY4s6X0sOY09NlWNOZ45Gc+wcco8ZcyJV8dndH9j\nOkmm7OKE9qd35fDAa47RC2c0P/boORPkIpmDuYIXQVPV1TuG5K5Xf8GRJCeyJ9h7\n+jEmDjSBRfgL5xcBF2hgQZx5Upc9GadfHJwuza890milLA51tVXboFX2RqXaqtH/\nBt2DsFZ/XXVqLSzPo7nxqrKXGCBLLza5uWgaUopslEelE9btenaK9qXEgg32f35/\n7HF0XrF2e06rxtijES6rZbRPX2B0ipRGMY+LttVOrVBu1d6xRYO19DYeFpvd6vIF\nIQ0moHuUURWh/KC9DQUnZ0t/UinXgV66cwu1NMuig6sLwj1P3ey9y2zi7Yrk4SMd\nevI0Wa2YRl6N3lYJy1bVtVuddu+l3jO1U/DPnmkuwf6WMd5LhCHk7zpi/VNY/42N\nIehId7qf/oMt8+w5aAKlC6K+CRX6pJXwrSb3PrQY3TDqifPUO18a5STiLbFnEi4h\nnT7DfhkQtW5cks7irdcjSnbEPxp+71+BlFej9vBd3zNLc6vvQOcPv4o453s3k3u3\nwv3s3g5Y5u3wt2l62bwcybrY3bCcWTiToa4XqaAc72bwcybrY3bCcmaoa4XqaAc7\n1/c76yu9D2D2j++vPd9RfZNDu8jQm7/k/vMvvqV3fhaYae52bVevuq7U7ed3qin9\nkGbufS7pN9lseGO8/Lv8f3+cQU72bwcybUcscrY3bmcoajS4Xqa72bVnN2+Fu9m8\nm7HN2+F++qXfQLvXkO+nrt/B2gp3M4OZ3C8LlH92x5O6Y/ee/u6F2l62bwcybemi\nmw8PWxu2E5M0snEnQ1zckE4XqaAc7heA5Gt2XKP7tjyd0x+/sfefo4w4053nj76+\n+85Opxu7yNNP72bwcybscrY3bmcoajS4Xqa76Nd3/9IKeb7zFdqme2bwcybeCKbO\nZ9LcrHK2N25nIk4HKGo0j/jY0nxMbhepp0529J/dO/3np3ed13m+Ed9z5+7cvvrj\ndiId4OdzNDmd9ef7F7nd+1pxT1Xclm7BufHGThu593O8SVpJJLZvBzJtRw7j2OVs\nbtrJxJwOLs1DUaXC7Nyprt+D99Q+1cX3dr76e+82d31L76s92/a79Aezu9m8HMmz\nnLHK2N25nIk4HKGo0hzOF6mu73mm331Jdy6TW07XcxaAr6Pr8q7/OdyCd4krSSSW\nzeDmTb1MptRwPTHG7HK2N25nFk4k4HF7FDXNyNI/42NJuTG4XZpVNOnO87Oxg/ep\n0/kg0d40OzCcMTiOl0G72bwcUcsc3b4W7vP0PYPaP78u3d4GgNO/70DnO7QU+lPN\nQ0oSURqd3Vu8+AiN3ne76su+qnd1G76U76s/dmexvxF3cSl8Tu6v315u7rPu75+n\n136xe8QLEKxdmexvxHS6z/2Wx4Yca76y++kXbinb9Du//3o13ya72bd292+Fu4Z/\nf9l2413/6+86LvpzvRxhxpzvM7stjtxzvk52LkO0SnfTP+9HO+qP3u3wt30L7hud\noOd7N0m92+Fu5TfcpvJvvJvdvhbvZvJvdvhbvvZvdvhbsDANBgkqhkiG9w0BAQUF\nAAOCAgEAPZi2gLv97xjFoN+rZSY4Z8YoWbqz1BGh1PVHexUnOSq0fk3m6s5BH75t\nkc9aotvkViaWkp4yed/7Nr7sC0fgP4vwwQLQDGdxsr0Ac+PdOnJ1uR09W/+YgA+E\n4D4eZ4VaommfRs17ITY4mwOPfEKkc7FeZOksihCMKYFdrIhdFDx6sGxKRxVH0MaX\nl+DX8IXOxQ6guemWA/Z7tZQ6iB7ET45d0fo9xLZ2aC9OhQoDCmcPyklq2Jzuroet\n5nq7hV2/RvBXP6WJOJjKActci3aWu7HPVRCvnWU/RrZfMnDBX0ahTc5OayuhfBOi\nlOb2NHboeXyMV5TPLVPCeM5UqoVejKsIcK/4t6T2SoRaxv25sGQXd0mc+Nv5LxhZ\nO6ZQywAUeSlMD3IRAbH5AEOQutE/Yqyt8x60OUFN8rdvWkJsFqu2BuKumHSNef/C\nhnxF8dgQaTJ9/MoYR9LBnF8gGjT4Y6SD1zQ0/oW4ApkzoobOxBbepzrl3rdtzphN\ngIP97jnNoq4u0vsyVft3DMynK/5JmIXV2xt1LR1GsaQi5i8Bd8KlU1FvevrucFRO\nj8/KSOmI2ekVs+iVfX51FMe+ZvEn1yDoEvTQo2nbBvRRNyVdIHUxm3f+v+w8ZY2X\nD+duzspDP5ClQ2AN25R7qHUrcNx1LJsK4gUGaOec2FT60zpE4KU=\n-----END CERTIFICATE-----\n-----BEGIN ENTITLEMENT DATA-----\neJzlff1zI8eN9r/CUt0PcZW5mpmeD9K/rX3reHP22ZW95K333rpKjSTuirEk6khK\n9iaV//1tDr9myO4G0N2Y6ebepZK1V/wQMAAeAA+Af17dLp5WL4+z5dU3V0XysRI3\nk3ScZHk2zj9OZ+Ob27tifDf9WN+maZUW9cerr6/+96V+Ws/Xn6++Sb++Wr3crG6X\n8+f1fPF09c0/r1a/vsh3+vNfE/l/lfzhp/pxtvkXs7vRD/V69N3D4uVu9P7p47Je\nrZcvt+uX5Wz023x9P/rwWC/Xo5/qp/rT7HH2tP569Mty9jh/eRz9IRuvFre/ztar\nr+Qb7v549U329dXj4aevvpHvNpN/O1u+zm9nm2/yMHudPciP3r2NfOn68/Pmu/yY\njn8UV/+SP7yub3+dP3362/yu9Z3lXyyWdxuB/LP9qybNzy/lJ11lSZqP02ycFP+V\nFN8kifzPf8u3nz3dbf+y2P9l/k0xlf/Z/KUU83pZ325enibFVBR5Iv9tfXu7eNl8\n+6uiEEk5nWw+/Xm5uJOSkb/i//vnVfPVsuaHd6L8Wb7Nw2z0p/q1Hv3h42I5+vMP\n734cfZC/+Gy5EZD8n1WjjKvNByxv7+frWSPnzRte/T4p/1bm8m/kH67+Z/u9Gvkd\nPquclkdZfW4Ed6LEd/Ily+flfDUb/Th/evl9VOw+fjQetb/dt7O1/Ip//uWnRnEP\n9U2jj+X97GFcjFfNK8br+/ny7lnK9fN40bx0/Hf50vGNfOl4+fy4an6hp7vF8vj5\n8l891+t7+S+ud9/+evPj15s3vt6+7XVx/W/L2cOsXs02//RvN/IPG1Fctz7jerFq\nlFbfPMzkL/6xfljNtgJTS+rT86e/vSw3v8HH+cPsm+vr69n69vr51/m1/J5j+bfX\n8jcd//GXP47/493/HS9nd/f1uvk9vib8/O5Ly099lK+8q9f132a/P8+XUvyTMk/k\nQ7ic/e+L/Oe7v63rT8337Mjz6n/+9fVRkZOjIjffAaHJUq3JP7z/8PO5EktAifPV\nAqm/u/lq3dFfidCffHtLBd6v189SIWQpl0opC0/mYmcpeCM5E3IoRuLxoRdZUZIf\n+srkvpRPfoVxX/jH/8x9VW6PvJeHvVJKV/iSrp1gHVxK5c+lcMk3q5KE6kx0HvvD\n4mV5OxspfQrkuFfNa11cC8Z/bz/l+oP8ih/CdTIKny/NYEJVk9HHmHSFcjVkhaE9\nDlVJoQMlldWV04zs1XQxXOnVoBju4NUwMbx/oKSCo1WS+oKjhsgMuTbXyBwTMK28\n5nEmJ4VK59ydFOZh7zeqDJjfyShEVrAxCtmHH4a4g8s7QlebGkMXntTmhBvcMR4G\nUPcFH/zCgdxXRu/iM90VFJ679FvemvrKlaySJObsKOTCiwpuVAm5DmZEdy75qye4\nEV4S21fcUuPJVtxyy5IM+B2FJB3we0z5UubVoOwtidmELqkPo64WkfGEDvBZIT1m\niMeL1D0Au5ZNFcm58D/U69nDw3w9u0L3Tldimvyu7J7mSQqh+8PnjYo3VauDK433\n82o9exz991dg9Gt+cPyP8Wr/XmP5Xk6IcfeOWoM9fNK1/CR81DtIqmd8Mr95PEip\nbYtVmhLUU7bUU2DVU6jVU3pRjy58tdVThq6eQqeePKnw1lO+STfusWGe1A8tTe2d\n51eQvzyqZ7F7l7F8Uzd/WW0/W6Waw6dcy08J3222lAKWx7taUarC3O47CmmjAacu\nn0EDjeCH7qFWJdTja0sz6UaIvTT/fXbz8glIjtoyTcZ3m1dwJK1t6SbXzceE+GQr\nkJl8siGqE83dGLQCOR1n9RBcT7A6UnsfCD0jnA+qUNr1QT7qo5ArirA6KqoE6n0b\nEBRGH8W5PlzRkzn1t8ROA+lEUSqQSQfYWkVlHbqOqjrdsIrStDwDitUK/GrfQtWC\n0jQhStfcmfYgRWxExsgwpHhcQiV9RDy2Rkl+43F5XUYfj1XVrCqZUqxBEwDMtd+u\n52dgx3Rdfp8Zgdp9Q5Veg/c2proan8OaBWx8TpjJrfJxrmjZGFsK4CFD01VrlW4n\n4FRNmQakUHsRYSOonqK/mirFYkKHnUrbAWmwiEoGpYbBXr2Ixm9JqEQrXXipInHD\noujQkFQDxQRgxGqFVftBqdHYhuj04FAQFZ+wOcFRTCiwg6NDRYAUj54M7TRaH62H\nBhrwrAfXNitta6RWgZjP40TmaKqS0q5M3HqUjgAITA4CBkDKOjQpIShdk2ZLt0Px\n+2HKXu328f5GK3tyMuajB4DTRJTJWIlntmiTMaJONi6pD51sPFOEOsmTiqITTe+S\n0rRk7VaG6Z/UsYHAWDHgUl2VWo1LnfphfirVHvthWrQppUuhOJa6ZiOF2+gI+r3E\n3+CojCUeAGkr1z6aZX1wiyKpXKuDAEVPmiBAayvwE4rCrtQpY0JB6FtqARK2ULSx\nCtZC0cYM+uxbqiEnNICMSH+pT3YffbKwnYyyPVYSSp7aEhD+6Xbi6MIloOGfbEpB\nDY6txLyqE1x7SLC60TXOTIviimAmL5Ew2mnHMDNHu12Z0JWlpvRSOBdw08zeunwo\ni9BCC11Z6g4nzbL81JXYFROrPmRoonAkYcKSFVWpP5JSREWnBG8oWl4khRHPToUP\nU/aqVUgVqdAKG4V9+PeB14gmEroXU1do8fQlQw3RYkzazxyu5z5SYLXFPCE1+LTz\nJLTx9R7m1mMr8aatkELrY1jP9Tj2MfxQnPqY65FIClwVjahf4eeanSqCuJrV8LPN\ntoxgl2HNXmJuvKG2xE+XYGpZVkWs/qpXYYLWViZ3VE06EUdl/OnbxWrV3gT09vn5\nYX5bb3610S8P9Vrq4vEKvaLm+fnWeOYjTwtdHon6JvJREfJZ2D4bm8fk/bc/jX5Z\n/KZ8RP5+M57Vz/JBEGP5o+OdRDZ/fN68wurpaF6pfTj+fiM/UD4PAnoetnIaJuQ3\nv0IbdqXaTVFUnRhSSpUyDhkmQ06JVkVoGyZzoWU3Y9WRn6tDE90OWskVWuGbfd8r\nJ493EaiYTHR8FKSazpWkbkrudaTQkHNPElAQvhsZjF6k+ejAINV8qrMIY1ZQ24iq\nVpyx19I22uhA4tGKYDUNE3AqXcDRlWEcAg6gG1XY4TYfGXwiNKBUu+CdDtFIcKD0\nAAeckVloG47zVEu4o6qD7M/EMP4MYzUh+TNRFrpclwYFQH7SORSovPkyQCtxEZNS\n7bUDhwgDYWhViOHH0CJeDC2xmq6B5pDq4EFaf0AAA9FC044ockckTa7U9FynialK\nI7XhWDnTagPwa2qlODg2nG7QXi0oLU0mjrU0ctgZIuhEHXJcc099eYBaGOAsCQTp\n2tT4OS0yt0BToPPNos9ss4gt1xRF4YjHtKaBdmKVzxgD5TSBxxhN+UxoJyGpLoyM\nBdqerE80QOkUBIYHHKs3+M5ar321oF2bIu7LGOMGzHJCkzPvt8kpPw7NQAhGIdKL\nORbNWl4MLjPn/ZaZQfwVWuiX9uEWVJT2YY4majPhTl621hJxApO4MmgUNTNStYy1\nThay3ajdmCt5Rg/GqCiME34FmU+qQZf0ZW45foE2kKJP8wg7n1SCLle2Hz7C9xrf\ng1aEOrF35JSRa149V7zC9E/aepebWSjqXWakpSp78Q34771VHBhLbS6+Gvo0xsUg\nfIvI2BYScfkCwIZ5ZHXp3j2wOBfuQyJZaEc83JlJBK5FnxVjCtsiJKNJC+35R2sk\nRmgb9xRyYulLqmh+InVlXer7koSifq/GFHxRXxuBXCmZitIlqfPSl0FFM6GhNKnM\nF7sMTcxUwgVuaiaFXRYEbtAe8HEgmBMAQ4/mEws5U5UEld7IAHTIUPlTkTcOQEgW\n5IrmDFO0JEPqkQEQPPLWMABKb6U3Qg20h1Q1qkTV14AzpmIg+q0YYCeawlCEr7EM\nfFBR6oM9rFhE/jAU5GsyEw+ZVfphh8yEycwA9JIWmVt1QNHRRHcMemNmxNIxUA7N\nau/guNdCqUVQzupnRG02mf/7WqRBiDaqAgB/tKGXaQb0akcVNRuZT9ZCtbTy4/zp\n5fed6Efj0bvfpXDu5I/95Vl+7mz04eX5ebFcX6G3E81r43KiNNOSdbVfrgS/Xmez\nlXmL1exlddxfhX9a5MtQRYnDwqrI2AvlBLwyYKeXzZ8eZo9ShvXyM3SHYKOcVfsF\nhL16WA113h+7Vk+hJ49HCSYTaGv6mewLC9kb7nEUeg00GG7+9HFhpwbtPuKOGgiT\nu10HMzQoyRItjUGru3z09oNBb2oHlo/rVaMdC59Vr65znb9aXVlJ+WW1vF7d18vZ\n9d3i9ror13H+9kNb7GQ5b37XDvBr94KQzqmCDQRY8LkRtr370aGJgfd4pmVBjr82\nvobqZewjMc7BYMNxWN5FPvngaSurJ3+HsGED2MFq/3aww9JDr7UVQrut/If/HP3X\nYvGwanJFF+Mwrr3t2MTy/mm83nwmPZ3BmsXhIywKAWEZRzaZQqcB7FzZn38Yfbd4\nfJRpKhoyLe/Ht81LuODS4QMihkqTKbR63llfBEvbK4zR0vYqi93S8jQhgwZEFKIk\nKBVbgqINUHYJSgCVbIkaoDO+duoCaiyV5xqLTjPEGksAGhEJeNpJkSW+s8kSZ9ZZ\n4qzvLPGda5Y4a2eJaTZpwQF/JSxEycp/kSqQslQvqSI6ZnfdPlvc7jr+2GO3zHC0\nwcBfhkNJbThzmjjTfOm6yAEb47ngTghDA0QTKgLpc+T69UtIc8CUV2B45MMcdPiI\nag4BACRpAeA9LCsTMBW6Sq+FLm2/iVTo4o3oIqnoGAkCoiYRH/CovXgNsJQqWp3X\nt5XwCQLNUwHdyPKSJlMTZP8exqa2HoCXydOcp47RqkBhXP++9MTh+vc1p2iUkiVa\n8rZ1B9VQSDr0Uan0R0w31WNttt8Ga06uzFLtAnX6z3NlFraSiBhdB6iUCI4yOiEN\nZ0u8I0+1U0E3I1TB5K/z5fqlfpj/Y0uexKvqdc2nrdd1/ApLBJ31RrAlJSRW2ZJ9\n1gHY0mDQWE1mgC6Du7Yl0EHm0J1gizGHJkWEIUamiRaQDJUlmrsW9tqAs0SPXqrP\ntoa0Gt1YCneJyr9NKGuDATzweWd320kg8FcWhOlWx7Kgf8bVsSw4MOmqnJCfaBuq\nucnjGBjnzhEBRzyPYwxLUUPMptpLEm7qg4oope8iik5R1CJKMKpJM/ogAaaIbiin\ndJRiXVIBFBL4XS9VoV0ILeEDF0889fc8tJn0ZkLtugainDxNePhRhABkKNezpSRu\nASgAmCb9GzmDJDQJEUiBDRvEigbSRHuMza3mdUjqf1ku7l5u1/PX+fpze4Z4hWdn\nP7fewjlI6Sou7Q+Jl6SdJoKD9IUhCHnXiC1rsXfyD9mCiBPRaP/mrywGzkdH6/FE\nUrbyH08cCjN5wi9rIhy6hPY6kVOVBTtF4BoIdDArplGBVNAZEVYtK1SviqVJFScl\nNEsKG6aWmRah8TK1tZcxUCEG9DIdboMENBlZkBhEAzf3/Hf1QmrnySeU7DqgB9Tc\nJKpdm0SGx7XvJpFfAk82mbI85J2iLPzAH4uy/h/9Y1E2JCOQ6S9P/MSkv8TElznl\njTPOShDKQ307Zl9YPHpIvriA6SH3igqhJoJjyh9dO+IqF0VbIcrTnCNtw65d0HBF\nuWzGYu9CCEZT0gk8Ni12am+du6keWSNKJCWZCQFVkozU95kj9d1QVeqN+u6XXiWE\nvt7tbzwWv0Zm367lCjvHpm20AUhqTGs1/nrrWM6DP5XBffb4eBBZUrTgtacylnng\nsHYdOISrBKHUtiYWGy9sNjQgeOyelrbidjKEVAHI04T+hNuwSRC7+jwpAccfGXqR\npaCnIVadC2zsfl2zBe3XdbzROptMeSpkEF1UU5nk3PMWZwksm2oPX3gj9OLRlK+E\nHib3xoemcv3NbI9TCoRJXW/bSuGZhQjpijJR0TNF/GUq8G4TH1MlcHYSxoYTkWsr\nX/5EjiZUeTQRWAHxUqqE0GNof1UYTAPT3VDgyktI6Uua0FePeWtgoufYO31Mton2\nTjsz9tl2ierIK0epqI7gBr3t9IBxXbRuME9Tjv1RhDkUtsmT+MBbXuSOE1w+uar+\nqsww0o6p0Vkycefxi8kN3U7HxeS4lmd8WWyaTciVO+LAA1Zf3ig34LhDPGpqQYhM\ncTrw5+fZ04d1ffvr6Fv5CVfIu4CqU4BZAj4H3Q9r3O3uOSgh8sFCvnS1een4Rr6U\noNrNjyN1u/sE5l17N1s5u2dZ8NirXt4VEkaciJ2MKM6kXykl3hegsJK9qhQEX9Aw\nyh6DE05ET3VpSMmzowNfIs9gaq7RvaCSG++PO+xsgn701W4HwmjGR5/00Ht/3AN0\n7epnHSLJGp91DF7y7V7gJz1MV6OESs15F9yRZSxkAk8pT0oH9kfzEOD2FLY9G74s\neqbviDYVikJ/MwMnWX/7CzqlTz+WF+4Gg6+5jVel7CRzPX29rKUy3z/Wn2amfLP5\nufG8+TGc5s5O1JfX5fZzW1rbvu/14X0HbsBlCX3LZ8Np3nokiL7saAENgXlDIR6c\nuNz8Jl8PQXnOcotb7xU+cFSeA0dlHSy4uGdZXtCvlRwkiBMeWW5nziLwy7tJ5bLL\n6diF2j6QZux67D+5F4POPXC/+wI7fqPnym05JfQUT4iUbz9Jge5aJj+8+/GoTFB3\ns9dxvXkxQW+KyKlre+zf/VrENj4kHTl5NLLVlOr2ODp+3Zxzd7scDHW+YRbV9WVY\nqoAiCpc+1iHX+L5eSTAoc3ywOL7re3zcvYCguf1LTs3L9jxrMOYkJuDZ3I1LG/01\n+2vT/j26MrBK9Zq9/jZ/GqcuHkwXzrfvHdG9HzF1oRtT6ScO1BNCEImeeyJEpt8g\nQiRObkOJmZZ6JDQ08cMhPYiEmJoLcDfzh3o9e3iYr2c7aZc7Sbb8zFbCX0H+ZrV/\np52MS6/VcfnuO8mWPdTHBwvJE4iMpYkG2N7RISjwOaZdbIjWK6ViCinhu4fFy933\ni+Xjqu2jdnowK+D24848nOKyTvb7d79OYwNCaaU/hgE6f9zFVffqRgznVrMJ/dJF\noYI6YG200FQ6iBQ0RaugMJQ7+u0R9BUMVGRqkbnsU8GmZSzZWFy+R4jU9RLPwYKA\ngQ+bYY8zNxTXtEeW06mXJ5V/DBPJP/+oFyrAUEgzL11o/4riD44tdloCoipM6Xoq\nJ/JrCOWJvHLRhqqoilGHoqbq1YAsSeMRmtPE4sR9YVagOY4oVMdBkwl2A4ooBLmT\nZ8OWQU0LntNl3FsTwc8LDkGbyZKUPF/Y4nmA50Bddadgegx7CHRIwkflckLU5qqV\n40UrPJch9pNWUjfk9TiVqkSA04vPbgi8MjVKfdBPjKm5UYgUyXPX/PL75LkAGQ+U\nJgoKmKtbKX7BeauhctHQvGz5Oio0B1A4Qw0nJJCdllMCJR1LvQLzUxULi3f8o0PI\n6ndqlh1Gq3oteQJhM32Hq0BEnELR7WLOi1qdry8uK8pLcqOgBeeARkHlu1FQkRsF\nIUA0AUI0fWce2ZLn68XH1o+xOL/RXXzSDMfgVtBsJ2R8ZCaVbkwmwpREiExbkSZu\nosEmidZL6whJYsSLHWXQhjwQHLRp0Zo3TPe/uHaI4JxO2+tTf53f/rpa18s1wqMd\n2S3/sX+VPoi039hnAGm/bzwBRCYuhOIjLXFBEoC7mQvfjoZO6jII526QDKaknMAD\nFFygM9OCLTPVUzrsMtPInWYJ8mAt1ItLWVuqdUciKLVGv/VzMqEfJzdQDiEGVYds\n6NT1NvEMgyrEFSVZwKTJCK55iCAYsWlZuez+U5EzzNFfQc5giPz9X6EbcAp4UtDX\nBxQICyh8WUAM9fwsL8krZlSkPzzD7ED449gO1xfRb1CaZuWwNoN4zsn2lJMlcWLg\nXRCTih5TtZQ9EluPoWsYLlEvywsyZUvZnMC4Gz5acUxs4jRPILzz4eVmdbucP28T\nptVqth79VD/JhGTZIi3sMdBXONBTPzJCnePXHdebrzt+3H7dS8c9QmTaVojVhDSu\n796Zk2Zsu/d8ZHTINTY52NMiGiWuErkxS75ZX4Nh2vThAykfl0674gnUVU3GyKkv\nF+pqMArKcnCvAXVehjwpwzIjc7GbDdJp0XJ/lDbYsXyrb4MdgLZrG0yHr4ltsLDq\ns0Kkvm6XE+EDFTkQlt/Ee55cJJnL3q09uwV1bmRLbiEO5FM2wMYn/lyUYHYE0blb\nIAxCX7534qh0Qd+NE9VuBHWD31+DkOrdDv1BRvc2GB/ZS7G+tN9AAlCUGHqxjcUE\nH8TTHLxoYaJ/4ZlfDBI+JX0FL2xRCHKItpkupo4Vc88TfxmUPImHtUxK4rYXwijE\nSVGNbxLC5TZzRKhATUQh9xoMPBTS0isnRZp4KBcI6NSjZoQRWBpjk0bV5OZo9jiL\nMQQzM0tS+pmC1o4GZSP1uJzBhqGh2MowWIf0ZEuCDEV66hy1NoNdfsuwADGwvbci\n0U+vEAaIUIeSWyUWpvGhmHrP0vzpezzz0duTFS0aL1B3wZONM6gbZ/BWsaJlQJ9Q\nrzpkTzKIUa3lJ0wrdFlanPckd5StfhtPg9apCvs1VWetRDMg7faoGNJ4O8JpWJl9\nSi9NqYyLaFd8Dd2BTMpnO6RI/SwjIizCOcnd/K7E6X8V0bB7RF1GtY/0PpTeDvw+\nssZAgl+EE8FZXpGrlHpuMH1hqAfMiwk0McHfNKFThwpFfPG6kZJvjC2YZZSeysJa\n4E1NxbEECVZqRGRbPzJBKQGabjRB0t8Hf9arTJFJPy1dhH8ExkhEzAmFI5P8hH6G\nz2JinXdM/Ys5yiGSzMVO9pVFFG3LyUa0jK3IrCNLMpuC4unOZ6Ct4FBQ1O98DqXJ\nkNLXw5E6aFxtswsf7cmSlD7b2ZTK4Sq5w6mr8AvkIqGvFjdc8SZe9PRWIzfd9P5y\nCuR5AnU7TMf28DNtp7vN2IbaWmS3y98kOymnZBd2to8HmJ12vtqn7WcM7NbUi48I\nyQBtrxVtoxX3Lqsvg2qYJuDueNd6ICb565QDncu2qGrgILvKfKgsE7nL2UXaZbTz\nwojfFQalqj4S30BBllPcovJAhrmx4XOi82JnODPEIYz1Yik9/Og/pXd6nUnoNpfi\n6uzCxo3YrMa3zUslWmMcstl/SowWYTFE2FRF4CNYDu2i4O5fuZZOhMgce0IWl0x9\nr9+olN2hy16b1T76Yr/oDIgaProZuh44sZsRQO+7pLMRgC2LmFihu2HqcH8ctzzj\n8lfWSNRFP5104u/MG+dcly5WdEo/1zq50mJRH/D4m/n8fi/A4p75IMj9aZnbSxoQ\nKsNoRBAykzhGu/mTes6DBmHYSGI9IhmvQdKldaHyEhb7pZhp/kMumRpyRXFFXq6r\np/pjqnoKNqbDkhcc6z/asl5KX32s5DeRinlstYuIa3liop++32lCc0mtwsWewz01\nttCzu6oWU9zJEv0eUXO9yCDyplxkL2VFtcije+n32DmdPalfrE5Zqe57mfrFFq8l\nAtbv+6ZCYHNW62XSGoa9Aye8WUKf29qylzS+xJLxqOAr2S4ZMruMt64uo+66jPZF\nC8pCzONjqF+IeXgWXRdi6h5D0kLMAOLfBFz6Z+CpYMA4W1c9YsRN3sGAHqBhQNQa\nnxEIas4EePAO6L2CO+A6XVeWm2eHfmucs+NZXrnMurYGlHAltD3jlLGEtuebxpTK\npGLqQhmlskXZcvjBiKJe/FFe2G/YwQ17892BjnHWOwF50oi1Onrk7VoS1k8N9Mb8\n6OLzbq7ZJ7JPy4qcGOnPR1Dq+uwHIyKbHUsNR+wRJfkTejUAn17XHKDpNVawJITe\nYRGXrCIvMnvrOMKLVaPNySYVmdus7VHhZ48ZODohdquGXJ+aJ56vSxEYWPvDb2wj\nVYYrU5fPwprQ0QRgsqgNMiyMAZzVfmlrq9Oy8MccwMx6+b1mFdy6wEHXQwiXw2TG\n9RCnK2d5ls1GQzfOsspltSZu89zBZDxvnitY8+S+sYd+RsIOe6BhB1ttznjXMr5q\nXVpO/G3Xp+Zl/s4loQaLo83NMpG4VCuODg3pyTy6sDhLFLnIIdwFXoIrjk4LwFze\nL8GpzoZc+CU49X15+1EvVCOOrf0WU9MtS+jOqdV/ABoPnjoOvp74OPoMmcjJ7Wjz\nogLaUnPPkFi5qiDareZZklrYyzvAXmYO9qJg2/ZjL++s7cUvSTdN6EfDibtYCFtY\nuPevxAnJMgHuz4ZXTCAXurXYTnz3GVqkp4h9WWJz0ustcNKrdjjppQj+oWwnTOkH\nEU62baKeX+4Zvi9lai8V9EUqeo4Avif6umZeyfxKWmsTeRI4odS3DIc/sadc99RM\nvtMKLrtAw4rpaZUQcBf6Vjsyyh+qj5wxvlV+jDfK53RuiGqGjXjShyudVE63RUj8\nTAV94TwUn1BObh+g+Lr+rzaYOPJAlSRkbbaQtHEWt3beF6ZA1b0N5IZSVctFCeFB\nsCnQ6mTitnOoewM8S8bbLYKLNj/1XWD6vmoFP+P9owz3MENj3vyYdddAy9E4vO9g\nw78T+mzf2dpvoF/Ghqxjx9NZTp9lVS43xDS//K0yARcdxtQOSw37tGxRGQ6O8eCw\nL6NXnOYgO4/KVII5Sn2zk2Kb0clTSCfwARAUyjq9AMJXPG1Ndg5SDhjkEgj9aj3p\nPgWX8/syPF+WVy6YAbqtqRhaZx1Xj4ekLMCeM9zPJDQyeTuYkYUWKXyQ3wfuzMBx\nXH3eK0Dsz4iW4yqE0F9ztFqoj13F5XPVdDA7uMQkhdbJ6ncposrzh2WKfNsYdtsU\nI6zNy0ycDHrMLRNqr4SjSRJPcE3STOtMzCvo9JQUTyczg2Gj5GDz1bgsh5pZ8XVZ\nh06qPCESS3+N3Fvkb/etTg3U3bfByF6INNd6C+JGCgP0UCykcIUe8D6KoE5YFi4b\n7k9W4ZK2bfMuIeh75faQbTIDJw5nKTaMxhOD4SvPHe3mi2E5Zklmsaz3nX5Z78xu\n/lw3hBD4fu9c5BBtgzIpiGuAcpECoLnBiyYFKDk5qdbbmbMIcKueAxoObqGeayZS\nVuRcWb8Vj34ZzvU8SlBH4TxGhjwH8dp3s+f7Q6V0693SNwK7Kx9VZlre38oPGcu3\n3Xk7vnJT80G7TPINna8bQN1DqgyKRm4qw60nPtEYG0HkRGEx0USyyUSfc9IGE6Bk\nc993czg5AY8ihJRnSkzmTNRsYTLUHkM1JHPfZWgGZF/OGE9eOdEz0Uc0KzVG8Nkj\nsjqcydYnEqm2/U9dxoqckHryFsjh8tcFMDrJNTP9+Sja2I2npHLQcZshL41nwv7K\nSXtpEyajObT9qFgLXLgRX95STvREAno+STm1zHAjOMAryxK6uuydxR07UeBXrjOm\nFrdOQgsTaQ7uYIKpsjSOLC85tkc+2RCUWGlCLkMCEOlSYTysc+hxbpSRRgMezrLZ\njI4c7HvkP7atnQX4crpbWU4eXVeCMJRSGfeexUtsgUuShnojUGlkmDlT9hwDKBim\nJSVkYBf1Eqb+l8eFGczT/0u3rRn+ogw7NFBl/FnlsnUIlTaeb/z1kjYWdmljWKhA\nFKmfU44gTUkxGuOHp1S5JTehh3n1CW8tlLOiJZH4SKxEpD4yoUEJZXpzo9afsYVn\n1opznLmQNCBtnZk4fAPOAXpQg34OkKaGAHCdNAAtrrPiHmOtgGtsdhBTGPKwj0gd\nY8+JAmk3DXlXRQ512HDQm1v00SE1qdncOmgnUQ6dZWBNaxAdgzRPoNxVX54ukPmp\n11EjnT04jRqFFfIzMSXXoEtVooNqUHq8Wa/HzBZ9nECqZDLr9LOFwYABdPmm90yT\nF3sN2dLP6YfltCQkQEne7ndrT91bHGEMAC+nhkyFvl8Lu5CbbXVD77u4vY5HZDZT\n1u/0U9YzuylrxezQgFPWnfkgkdAf11aU3a+VRLWfdrslfQxany8H3S2YjLkPRSdc\nH4saZrKoA/FH554H5oWmJTiPbtFuAosThxYTS42u1VaKs0yXI47gQMz2/TMNTBse\ngQjXtGGlIbV/AdzQtHChhp6weikz8JzT7xfeqchz8Ba722wVcaqKf54qnpwA1AxU\nscOUMHiXSHwRuyO0XCxik5a6NoLzwsswGyP8rh4Cx+XAZYhICpHXy3qIdYixF2kn\nlcvh75OCE265RKfuxLhrv1N+il1PQghHGsPJ8kpsE91vBbef7vmQFdyEzu7abvSA\nDuzYVwjDua1jUew6OXBJHgw6hnQMBGPrHUXYMUoqP+07PAD2zVNUlRl7b+INe2DU\nfjP+eSsDe7uNL6YPdbbN673Qqcsp8FOzIh4NZdzjNfDV0EEJWsJxxcEJNkPuLfK8\ns1CN1L6AYmmWtC8qkdqMJiJW020k86+MTUcq54q595gLEI9RDhaiNqsZ9uBwniu8\nTHai6phOaR+eCCGJecLrSwtBWQ6eDkWtcSFucOFblRf13WT6aQZi4Zmv3BxdkVl+\n9M2yfpI/sJX3z5uvvf03Kgbw6P3Tx+VmtvDldv0iP6fNVjXq6ac//3H002y1qj/N\nnz41Ql+u5BMqf/hqKxYZk5q3VEpnpwf5VweDpfAxOx8+yhzu/T4uP40f9+80zhif\npOaTrrP4nqgDrM+nBDs+VRH23M32t96rp2JQkOqar61yAvCu0nIIFVaU5WCA56le\n2CqFe9VEWDGcZC3NgHlUVzVCrZrv5bugtSLGmw/lUYi43r93TApJCd09lD4oRiL4\nzAPPrwtFFfmUQHc0BROrKMIUPqIh8MigQegc6YNGAVhCoQsXDMVwmhKCKYBLp2QN\nqzROiR6/BXf8JiwLD8lHWYeLro8yKATyVB52uev9VVQL3OHr5FScS0O4jNg2ZJel\nHO2gnGlBRQ9UkdR/LgjFkjiSdWVU0XM/LaOKRT1FsNdTbPaVDV2ha1epj2r5eVnf\nPsxGf6pf2+2gvfSbyTQpPSm3vzzLj501XMPFcu2h9FYJ+qr/7sic6ottyujtX8m8\nnGH2shqv7+fLu+d6uf48XjSvHP9dvpLQK5RvgpugOL57GPsasions+ToGsDNNOoV\nQbZlG31EZ86H5m9qYUaVHzOqWM1I25OimxHX9KT0YSVZ+IUf4ReswtchlGF9mGpU\nMqVv/qU//uZGrEED9l4L8/jHU/ip6Ecy6HaCQvOckQZjNXFEGrWluWxM9aBDjME5\n6xBjdzH26yqnDekufhID8njRXWyFjkq47L5x0RXGTfL6x5B1VajS6bS5Q3Sin2+3\na8KROfLz822ZN+Cx+dPVgQcn/3H3q359tRINZX3zP78rM+oUbm79uxT8w+JZPiYN\nD3S2lun+t6NjnRiay91OhJ4+NLtZz7v1hgi6vL8hV4/la7bPyW6cs7wut5/UGd15\nXW+/c881/R4Ox2x/7XYdbZqTp36qRnnvv/1p9MviN6nhH9+ZZwzlT4+fNz85lqZH\nnC88KGz/Bt3zb2YT3j/toRM8q/H85vEgoq52LHKOM+2cbfgwLpHvqKu77cPa3NTa\n23M+YTO7BE1aYFpYk3QdetfepRthWiQQdVMd7VoZBhTu/s9i+etq3czdnSrzt+Nf\ntQIfOfs4KLP1fpvw1/pkdQwcJI3sIRS25NDZLDyF7FStbIyWt8D5VMH7UeSDbi2U\naphqaanywo/gSR9LL5JqwYxp1EuFaciTX2b3ihz9UnpX+8Kz3gVCHB5bqygovq+w\ntY+20yuuCxPmvyQjKTReTlqKxRVos6Ggwb996DIZChyfLgGI2MUmAhBB5t32OsQl\n3pcKOlT5t80WWY0pooOVrygVTHiC1qi71aMK2C4KL/UoIDZdWD2qOLcHqUqIemeP\nNJBKZFPfZUGLc93lU4h0b587IQMTW0S6JN0p4lBagOxjVxdKxvnWzpSA9i/Oo2rL\nGhAtwrVjQy5heVEvpoJ1YTrWlq7gQ7OO6YGFDfupUwJGfJnZgtaWi8Su+0rQM1ip\ndNWuYbHYF6DY8xUi8O4B59QeWX121ilQhL5Mnaq2MRaJXcwl2Ckyo3Eu13yhDlhV\nriFvpNVWa/BdeIbm+xfQc5dOlauWYAF3ewC6l5WjatEPRFhyTVSR4MfaHnHY58Ky\nFtUM5zS3uFEKc2IIDakuNcZzZ4q+0+4SXC6vdaJhrKt1Aij2wqxTDV+5qrloF8vm\nXC8pUiq54lnTKj5dzrv4uP6tXs5G3y0eHma3G++0Op/FvkKyyVXM8DwpoRqU8kvA\nz0zVPTY4eveXD5rHZ3m/ut24qM1ggf/pnObdr9OIJuISEDApVYL3yJ1FCqBiykYx\nVPeMHcbZqyfYzS+qKZwJyK5y0lBldrd7e/GwiScMnQx1g3MK1vCUavRVwtubF+dt\nuq0ie55KHOo+ZwJvu3czS5uI5uo4QzFST6HNSkNcQY0vnIWJNtRGAx6UdnKCdlbD\nNqw9kEv0Yj0TsD9hjdVRgIMRavRiL8PhDKj/a+31UACDEVlcjN5UMD8BqY2u+NAm\naLFtvYrFNSozMpAN5xrFUB6S797KBUN5tcu0CnWeqtJ7c2PbQXyJGbZyo2RzWBzq\nEf0w/3Q/evtaz6Uu5g/z9WeefZPaDRrKlRmiIM9/m36PEv5NjASD+7pphJ2vzeEq\nzN3LX6Zu/S4R7stOk5y8W8ykwwKjQ1Mzs63Ezj4dtv1iZ1qM/Txrnk682mXlU6eV\nV53qoICzTgPIZaV7JVMJnN0rzbH24FKb7Clo/0meOnb2nzTH2YPH1CkpLL+YCt+6\n6vB2PIW8I5fHzUM278EQ9PYQcYMN+1fqgaPTtUFoVNa/DSJxaOETh6KV2e+lX78m\nSl7d5stE0RrtWqi1UokGiiQ3h2WZoiBTy50hDNbVll6RKBrQxLHCWLksvyLfBHZO\nK5BGWfl0s+ikIqa+svSsnoMk3rOSfSq/Nz1BrOG5zny7Gbdfa6PZWQ8Wpk4sBjSn\nVtm2RGjkx0V9N/q2fqifbjeH0fs8ESRjL+Hgl/nrulZmH256rsw+yF/kZvd7xFiV\nFQXZWTvpzoSZtMpjw0wd7UWLl6QSybmMkxJp2mNWW6B1uzZ1oThXiLJjup3A8jlS\nkFWFFd2l+Sa+G/J2Y2KbV53G9Jg68VZjKcrTIKCr1qvSM9vdaqQapcgQm/C+NJhO\nSqthEpIGkWwKPxqMkVLhbcRvUtrbo++xBU+uNTA22hBqlW7W3kj9OljPrjU4eqhH\nv2rFDUWqjGKCjLZ3GepTIuR0qpi3/fl59vRhXd/+6oJ/xTSDGCqHzxmVb5JRq4xl\nXjGz0/5Cvnq1efVYvppvCvDwMdfyY6IqB0sNQOQSvQYosmeXephjRCqR5xUUwo4i\nL05EjrrseJS8fDkj0fqoAPk5MVKrRF5C+bdGFaXR/5RqTbBxpLuKCNb/KO+aZFAz\nUet/fnmo1/IfH0fvN7+8BA5Lsn1sPNN8/+o+LKX5tMZfRWguWVLhzSWXysKdrT8K\nJ/firmArySOQv9pYIBqFPlhbWEYfkSNSUxBT0WrLqm9b6HXxvfx5tBY2b96DP9p/\nTAzSTyswpTwK//vFw2rxOPplOXudz34zxu29/FdraX4fm9f1EbS3nxRb3IbmRUhx\n2y5g9xOpo8ks0gl4UvWoFLGJz7AVCN5H/9Ny/o9/PHwOVMbK1XElHrC+W61mvx89\nDyzt5+2PchSqjjKfbb7V5RWsDq6pmoCnEvUJNjo0F9yhucnlYorKMpvGm8ZpNk3M\nFPwUNnD5dOjwVO2l8OH5xEth8dHeV7G1KU891iW3KyWewqfWCDxFL44fURV/mfyI\nrYLFvCr/Vuqp0xtNHBWk0MhGX9tG1cbbYd2cfNXssX7iTj+aD4kHg0lFaI2FqAhi\n2Nnro4/Qs1dLhOEnSyqIfHFSKKRUCNlLgzEZgraVRDQEWjdjbwe9FEe2ZhBspFDD\nL3w0P4FfJo+kxF98vKJTAPYF8IvSSY5nJAioxXFSSekjauwLKhFGDZk/4pOW0/yR\nkjiyZ4zRBBAZqPFchCZQ0+JE3k/XOw85k1A+6RW+kXdaoaKldl54B7haVbAaUJNw\n8B2kUw1QZM8u9TB9jbpph08KTpt26Ci769r1k6A1bbsII61UBd7tn6oCrYM+hB/m\n068ElgJfHBdApD3BlT1E2D2sDNbHq1dqKkb7qLPZV84T2AKEtRbzn/RRXT6XeBlz\nugIMTzZqok7Ds9ly5KPwmSjIW2cwU9Tf16v1cuNzyZr6uHslWWX7F56q7VJUJUBy\nloWmtsPXeO1wzfucD7czK6avu5dKmwMv3jnaHDmIHYyOHM1oVhdxFGNYNgHfntXb\nIF95ekCFDWuU5IVQNKO0sEYuM+zxlqkf4yOvOcQaHxWd8G4QGAKhDGhzAmzn2aQG\neGVypwPhL+lpUugTmX/3sHi5G71/+rjc+JSXJiPHZuvKA785uBpR9ZGm7vntqimH\nHbbmeajEV9vnpzOCfruSeg6zNHM7H5ftdYY5uHtbJ2Mt/DgVso+xJa2Ug672ngu7\nVXlSM6E10j5Ue99/+PlU3POuuPc8hPlqgZT37hUYkc+lyOUbhy/pAgJlkKC1LkQj\nbqorIQo9Em8CXh6CxK73Khq5k70LUfCRORioKAfJHy94NokH2EM6lzOU1euiJhwu\neeJkFEJt1SlJ0VEVFU+kio+GFKkGHArb7MfEmCD9db5cv9QP83/Um0VPLohdpCkh\n4e5+7uin+qn+NHuUbzh6+0n+927jFJVqI//pdfz46XE9rjfvwrJ8sfMJ1+JyJmFU\nSybylNCHU+p0ORJvBI6qtpHt41j+OOcBS/kR1/IjAsVUGr5CCl7Q1qvhB/mq5at0\nVrrJ7o7877mkfh9iFNKJO02hYISTt3qA9UTgFoOrUpqAyPdvGqZ8E0IrC4wUuLmh\n09DAx8A4DxFBpxGaKmsGJtEoE6jgknnVNQeemH1/0XE6LaaEs5SgRRVGfRU6k3KO\n2rpLMcOBLrJyFPfTJDD2qZwzYGwBidnA8GUsslATpgltJy0STjEYbIOBU07029OG\nXC9xqHL2bBu5FwSUsBF/wYwPNlooYsQFErvZ4wIFdsPmhV7jDB65BRtnlJAtdy3A\nbEwlJ5pK3oOp5FGayoRyMEqrj4yoj6wHfWRR6iOZEuh4On0gAzij9OMJ3lLiYM8b\nJXJEHWUjc5cVYJDQQy6oyGQ9s5ezIlsHFq+1EnWCyPepxLF4VSkKVheZPBRTnwWv\nQuODtIl5Lyl5GGdBVfl3RrmyazIOQhWLbcy732KWj6dfyt8+de7KH7U3e6sAvn3Z\nOxcWOABSKCLPMx/h+E2JDchvSseQXCp671sEWgYdkCX09wA1N9Cf0jfN+PumWbie\nR6GGPBeuxYrd86442Y2ou25NwDunZ28BYeYB6gjgo4iX08wh5zeHPCpzSNPMtSBx\n1oiwKuBxX9S8WIqO2se1qn5OQV3l5BCZoHugN7u5YAK9yrNVUx8RRpfRKfoSrA2J\nMCOKavAyT3204wSxtsq5NvBITQs9tVAD3sqHF8rQqUXGWe2TODcYr6MO5K7pxXkg\ntwjhvQTvy6AUqPt1rlXBHSrG4mFWJBxT7PBSBkH3Jd6wdibeBN6b6JBpnX0V+Yre\nqePirQvGxftU1wh9NK2RS8yP6YOHVN1ULIwpTZdxwcE/dQvmqEaeEwFdZw0xHUtK\nk6l7NkHKJPjziOCdj7KWAR7eQTofUlZXetGGyf1EqAvphcCJTCQ8RaKknBUl5WGj\npMqZIbCrI1HCbsFfIS+iCr1pMfU5wwqwjrV8DXd3hKdthO6aFIQOGSZ8dFfBQxVe\nWnjmwBBN0pym4LlzDJMPXl54hpSYFxcOBJeGKTiBG1pILEECG8eTEs+n+i5Nbers\nhLBtGR65oBV6exmziMcNJlMP5RESSmPHaFEhNJmW2BuDwoehnZdXr3UZPQ0108ce\nmnVLVxjNsLE7w3RIKoGnKWHBO3242KrGzhTtB01cBpob8NnnLWDKljYl9UPZCm/A\nn12tivxVqtWnzRamUGZWaC+qvIxgp6xDCB9FOw3zDjtr4ql/ZubgBQsRVV4zbc/7\nOPTPTLNwpQIiOs3CQYucojcgNTfA5zIB122BrDNbkewVUFIChA/2vsbNoQGmr06d\n2dGFXg5X+jsHK2pvq0OXZX1M15l3BYauBnULzwsRv0A3TAvWhmkRdMNUYmifsywF\noqRthtLu6W6wPbtBcqTUYZnNGYbDuDRORvOlVPyUjUE/FT9iZ9BbSymoODSMAhMv\nFXV0T8PDcgSz0oIF12oyug8uA3Yt0RvOxURvYmrkVVULNNujtRSN1lJWtJaGjdYq\nytltk7Ap9LaUn96WRuVspBpcmQQ7NZD4tWkPU5NplCmjS+g1179ola9eal5hxgZV\nQWVSuPZndrOs2L0trBtbwpS7mmPog3KOr9sf6IUWlXvy4sDLzB0yDx0wdJJ+0Bcj\nD/SSE3V7r3aWqOOTPf5lLxd020FtYx7aL0S1HSyNVXF9kg8HUp3rPNv5ngarazc9\nFMsuu0StvISdNjchVGcKv18sd0K2vKaXCnAk9fhBu9OI754+zZ9mlMfk9uNYPhAp\n9+PRfMx17ynaIOu4RAYuwmkprmXkO+0VyolJKcHH2bjYzEgeD9JT60nNmxy6TW/y\nGKa1VV5VgEN6OtNAxb+9UbAVj/bmEFXpSIBUVLM/IjgiRg90uehegHdytEaBUw2j\nIcRToRAT1Gn5rZQ/fF6tZ494Ma/4xLyKSswyiELkDjiGagCQMpLa1acN8TTCYrR8\ntqH6gPbZxieX+8ecN7ncP/GXnFyKTLgiTdUGs719CI9IU8SKNCcF1LY0SvjM5e+F\nm7WF6+Z1spZso3Hw6bQCV1wZJasp8Svla1XhN0g5pidYRlICbNdEUrVfVwZSq5zJ\nEEdjSpFE4YpaFNdB91JOj1Im74A+kW8avMdQHfEpMqhVDjsMvIRt8tChxTzICJzI\nCKBR419QnsWfTwnzmVcjPEJOrwF4ZuctfDtvEanzlojEDU0jwYgjko4Vh4gpvNMU\nDo5aEXd8t6OI0xhErJqYEOBEjLlCS6mNs6fvvRbIhynYTghdDFW5hVBoYSyxXAa0\nUVfUCdCmW1EnNV/5yLED9V09YR+IWQZjHxTq8Yd3ogGW0vcQhHvSxqBUeTlbqL0W\neD1JnVCLUXl8rFtZ9cPpWH0hnA5RgGckkbUHczJ2XoGwQlgGPHsxgEqFfyeFU4UI\nUE7mO1POYs2UxYRQlTgJHiQPxgqMhnBenqrMBGKgJpEm+CEfj/oQLshT0dmp/1cY\nRuWUwvbCQ0gj4iEohe6G/I/RliJ5B7QUjviHCbulEziCtJR55+lkEdmHOjMmFI40\nmTEgdOFd6CJOobcWNTSj0yeC/lCvZw8P8/Vs9F39vHppqtrWlP88qVoAVl0jP/vA\nUbnxdIfJ33L0ofnqX43+8P7DzwaMtdq/0fh2+0Zj+Ubj+Wrh886F/JD921/Lt7+W\nb0/W9/16/Sz17cVyqgpKwFXyTdTyRUFZlZgTRmDblXgSk6kdWsrJBAK4kBUQt6iq\nbYFlo+qpRQSLhlV7IBOwfkVQjI1KmJURZv1WeXXeShPJaDz6+XkzXFg/OCzjPNfN\nYvemnpybbqVES1+Hj4zCyymNCTz4pjYmfhX6KLwA5tZWX/hVGLUFQiDczgKdTK9P\nm4vIWVY2eEKjqhIFLQz4r6Mwtv6YVm3BAg41EoTKbwTAYekYe/GHsbpBmbK6aqgE\nfB+QsTrZDpyxhunl1LmtjSZgL2eZ5nqGhGQ/F7oxKd3dFKqk2kFCuxy4gwi5k+Eu\nIAw2SKnhBUQTIxSV7DBFX1AiOgQhlQNxYu28opM77NMPxhTAIFoBwY5sLKgH24lG\nGxJ622hDE4v8GA4n2OvGn5jUZFdF8tvR8EPVgdF4hKBOujXwKgzBr9GbeolbUw/n\n14Zv7EHUP0jGTp0J7spbwLFDXRu1cUoabdg28DwgYqxmgkXE6iaeXZLpNV3xMhkA\nx4tgFaP0YVaIS2M11sXOnvp3UdRo1L4NPBtCUJMynAP6cQjnWMX0Gc7VQrYrqbAX\nwvoJKpF0bNTRBTy9S2jZ0M3DicKGadIMbBpSwDZ9Zzgvd25m8of0SGrE6jTdxqHB\nWnNvzvSQusdF9lCrzya9hBszTi2ZvpoxweedR0U1vlG/YP/H+dPL76Mf5p/uR29f\n67mU+lyK93NLNzvNXCFZ3FLUz7fN/87r/T/K/5Z/qyR4Z1VJuPUHf9vjkzQefV+v\n1sv69lfNQ3VfHxn9hwfs4+41hEdp/5JTSHN4jO7l961bXzf8x+c415gQLgrD2ima\ne1zvv/1p9Mvit42SwC0rbSUVzR+fN690XbbSvIn2uvCZwuDAun/oN0+7reI2X48y\nrmQ/YDa/edzKsTvY51PVUH+jrdjjiQ7/7Sa18Z0Z28FDDR1YpUMk3EehOESSrR0c\nop+tRkZ3yA5b+zIshQedllBuQnSgXW2awG7XdbbVyXeX/Uy3VGh7gA0u5tifI1WZ\nL+GimC2eoRrxAdVQDZmObYLNQZXG6VVXBap0oDRL5zqBRyjj0xL9WpZXV4rsDCjt\nia8f4OxAAzCrjHTZmg5hiOCFC7bwZnEDYhaZ9RFOMFtkfTYJn72HDDLX85u7SYvz\nmqerUQfZTR5gB9lf0nFHhH5S2pnXVE9TXaHXVXqoqADOM/5yyrQkXIGmJ35UgOkn\njQ8UZQ6Z74nCqw2XSs+Lr6D5ql+X7sgnmJLa1G9wLOiJQ+EvcQi78uJ1d3vq2YOe\nolC89o7x0UGBxAiJ1l94cFTkXvOHkpr/lb7yP1pTgdkj9hXllAs2vZoijmOj1Cjb\nSJ8LhAkkzsks0GsLD2JlKHO+Pmpi6hZeABmd1IBXQ8HxNJV6YCNlRl3xF7nXyuRp\nZKJ6M96TMUO5tEEDFTTJ4aRfLGIsPbdb0Rqmg/5IFT31SxsrCKGu8BDqaHWyCHK1\nxKtf1VQybRI2VwsMOWsbtsIpE3SvzvY8QScpuoeU/MQYw0u8Jf70mnmfdl7JHSBP\n8S+Izs+AHVlReKU+IKcllIiGb2/VwGDGKzjxmoef9n6IXZ8++j3Y+lf0zR6m9NGm\nzX7e8/HTZje2fqK1Sak7r10gte6oBQC/xEyj5uKpZ8r/l7/wYiE/eT/EVE+Kj9NJ\nmtfpNEuTSbL5U333Mb2tbsobMb3617/+P7+Kl4E=\n-----END ENTITLEMENT DATA-----\n-----BEGIN RSA SIGNATURE-----\nB4DymaXten9DL+pFWjjx/8qC9n5c42qTEUgTdJpYh7oFBwBjUTVrycYiQipmRs02\nl7+lEEv9n8lIP9GPcHbNaQ3mDnm5arH9yfvzl9+ig7pqmcjhk8ND2tqSpO2Hln95\nJN7KlzUgjyTsE0zmmX4wbX1Lg7zsT3t1BEKQRiz90WLDq+kadXeUdBFR7YCptiZS\nvvSQxLNV7kvn4OTjKPdRchsf4gyezOaAmmzkgxis7kNbFrRxLUMVCAVzj9fZRhBv\nEQnhEwefkObYY6M5qfKyqsOkCSNt1gAkj+zDbG9K94P3gPmGIOHwi0iVlrUMa2Dr\nmZH5rtac4N6MCruJFSB1VIEIdPPqyElL2h08VKm7QzCzMI7MFWAeqmGEHbBgGEPa\nhqd1QYb3gOXn6pbOxXry+d3Ig5x72WyGpZomQVXelnhnMyfAHzOj5Xi9EuvERWCK\nySm0d7VH0UC1BiWw5HIumwRHzgERgM69bw7sIeOTT3eso8X0zyUD73fBADZH4UX1\nqRpTOs35j+44GsCBMThWeImUXRwEbDy0MBjULcCpxtzlX07XT4guhuAuFCcIa5To\n0mFvtGml55vidqytpv356OjDKQzQ48ZejxkCEChZ9UDlYmZTl2IP+Uo7cwYSEhPW\nFn5eUhtX7YYAmbLc78gtYZjEbWpoEOJFYxq35rN6U0Q=\n-----END RSA SIGNATURE-----\n","id":"8a85f9844df26b1c014e15299b0c7f86","serial":{"id":5790815993894339000,"revoked":false,"collected":false,"expiration":"2015-12-05T04:59:59.000+0000","serial":5790815993894339000,"created":"2015-06-21T08:08:44.000+0000","updated":"2015-06-21T08:08:44.000+0000"},"created":"2015-06-21T08:08:45.000+0000","updated":"2015-06-21T08:08:45.000+0000"}],"quantity":1,"startDate":"2014-12-05T05:00:00.000+0000","endDate":"2015-12-05T04:59:59.000+0000","href":"/entitlements/8a85f9844df26b1c014e152980df7f85","created":"2015-06-21T08:08:38.000+0000","updated":"2015-06-21T08:08:38.000+0000"},{"id":"8a85f98a4e009a5b014e1528052877d8","consumer":{"id":"8a85f9874df26cde014dfcf1b4f65e08","uuid":"50f73b81-0242-4f9e-bcd5-d9fac11715af","name":"tzach","href":"/consumers/50f73b81-0242-4f9e-bcd5-d9fac11715af"},"pool":{"id":"8a85f9814a192108014a1adf1c7b6b39","owner":{"id":"8a85f9814a192108014a1adef5826b38","key":"7473998","displayName":"7473998","href":"/owners/7473998"},"activeSubscription":true,"sourceEntitlement":null,"quantity":10,"startDate":"2014-12-05T05:00:00.000+0000","endDate":"2015-12-05T04:59:59.000+0000","productId":"RV00007","derivedProductId":null,"providedProducts":[{"id":"8a85f9894adf01b8014adfd14ae81246","productId":"220","productName":"Red Hat OpenStack Beta","created":"2015-01-12T20:24:03.000+0000","updated":"2015-01-12T20:24:03.000+0000"},{"id":"8a85f9894adf01b8014adfd14ae81247","productId":"201","productName":"Red Hat Software Collections (for RHEL Server)","created":"2015-01-12T20:24:03.000+0000","updated":"2015-01-12T20:24:03.000+0000"},{"id":"8a85f9894adf01b8014adfd14ae81248","productId":"269","productName":"Red Hat Satellite Capsule","created":"2015-01-12T20:24:03.000+0000","updated":"2015-01-12T20:24:03.000+0000"},{"id":"8a85f9894adf01b8014adfd14ae81249","productId":"150","productName":"Red Hat Enterprise Virtualization","created":"2015-01-12T20:24:03.000+0000","updated":"2015-01-12T20:24:03.000+0000"},{"id":"8a85f9894adf01b8014adfd14ae9124a","productId":"239","productName":"Red Hat Enterprise MRG Messaging","created":"2015-01-12T20:24:03.000+0000","updated":"2015-01-12T20:24:03.000+0000"},{"id":"8a85f9894adf01b8014adfd14ae9124b","productId":"84","productName":"Red Hat Enterprise Linux High Availability (for RHEL Server) - Extended Update Support","created":"2015-01-12T20:24:03.000+0000","updated":"2015-01-12T20:24:03.000+0000"},{"id":"8a85f9894adf01b8014adfd14ae9124c","productId":"180","productName":"Red Hat Beta","created":"2015-01-12T20:24:03.000+0000","updated":"2015-01-12T20:24:03.000+0000"},{"id":"8a85f9894adf01b8014adfd14ae9124d","productId":"70","productName":"Red Hat Enterprise Linux Server - Extended Update Support","created":"2015-01-12T20:24:03.000+0000","updated":"2015-01-12T20:24:03.000+0000"},{"id":"8a85f9894adf01b8014adfd14ae9124e","productId":"246","productName":"Oracle Java (for RHEL Server) - Extended Update Support","created":"2015-01-12T20:24:03.000+0000","updated":"2015-01-12T20:24:03.000+0000"},{"id":"8a85f9894adf01b8014adfd14ae9124f","productId":"183","productName":"JBoss Enterprise Application Platform","created":"2015-01-12T20:24:03.000+0000","updated":"2015-01-12T20:24:03.000+0000"},{"id":"8a85f9894adf01b8014adfd14ae91250","productId":"240","productName":"Oracle Java (for RHEL Server)","created":"2015-01-12T20:24:03.000+0000","updated":"2015-01-12T20:24:03.000+0000"},{"id":"8a85f9894adf01b8014adfd14ae91252","productId":"191","productName":"Red Hat OpenStack","created":"2015-01-12T20:24:03.000+0000","updated":"2015-01-12T20:24:03.000+0000"},{"id":"8a85f9894adf01b8014adfd14ae91251","productId":"86","productName":"Red Hat Enterprise Linux Load Balancer (for RHEL Server) - Extended Update Support","created":"2015-01-12T20:24:03.000+0000","updated":"2015-01-12T20:24:03.000+0000"},{"id":"8a85f9894adf01b8014adfd14ae91254","productId":"83","productName":"Red Hat Enterprise Linux High Availability (for RHEL Server)","created":"2015-01-12T20:24:03.000+0000","updated":"2015-01-12T20:24:03.000+0000"},{"id":"8a85f9894adf01b8014adfd14ae91253","productId":"69","productName":"Red Hat Enterprise Linux Server","created":"2015-01-12T20:24:03.000+0000","updated":"2015-01-12T20:24:03.000+0000"},{"id":"8a85f9894adf01b8014adfd14ae91255","productId":"250","productName":"Red Hat Satellite","created":"2015-01-12T20:24:03.000+0000","updated":"2015-01-12T20:24:03.000+0000"},{"id":"8a85f9894adf01b8014adfd14ae91256","productId":"205","productName":"Red Hat Software Collections Beta (for RHEL Server)","created":"2015-01-12T20:24:03.000+0000","updated":"2015-01-12T20:24:03.000+0000"},{"id":"8a85f9894adf01b8014adfd14ae91257","productId":"85","productName":"Red Hat Enterprise Linux Load Balancer (for RHEL Server)","created":"2015-01-12T20:24:03.000+0000","updated":"2015-01-12T20:24:03.000+0000"},{"id":"8a85f9894adf01b8014adfd14ae91258","productId":"167","productName":"Red Hat CloudForms","created":"2015-01-12T20:24:03.000+0000","updated":"2015-01-12T20:24:03.000+0000"}],"derivedProvidedProducts":[],"attributes":[],"productAttributes":[{"id":"8a85f9874a65e793014a70f74d145dce","name":"ph_product_line","value":"RHCI","productId":"RV00007","created":"2014-12-22T07:47:42.000+0000","updated":"2014-12-22T07:47:42.000+0000"},{"id":"8a85f9874a65e793014a70f74d145dcf","name":"name","value":"Red Hat Cloud Infrastructure with Smart Management, Premium (2-sockets)","productId":"RV00007","created":"2014-12-22T07:47:42.000+0000","updated":"2014-12-22T07:47:42.000+0000"},{"id":"8a85f9874a65e793014a70f74d145dd0","name":"product_family","value":"Red Hat Cloud Infrastructure","productId":"RV00007","created":"2014-12-22T07:47:42.000+0000","updated":"2014-12-22T07:47:42.000+0000"},{"id":"8a85f9874a65e793014a70f74d145dd1","name":"ph_product_name","value":"RHCI","productId":"RV00007","created":"2014-12-22T07:47:42.000+0000","updated":"2014-12-22T07:47:42.000+0000"},{"id":"8a85f9874a65e793014a70f74d145dd2","name":"management_enabled","value":"1","productId":"RV00007","created":"2014-12-22T07:47:42.000+0000","updated":"2014-12-22T07:47:42.000+0000"},{"id":"8a85f9874a65e793014a70f74d145dd3","name":"variant","value":"Cloud","productId":"RV00007","created":"2014-12-22T07:47:42.000+0000","updated":"2014-12-22T07:47:42.000+0000"},{"id":"8a85f9874a65e793014a70f74d145dd4","name":"sockets","value":"2","productId":"RV00007","created":"2014-12-22T07:47:42.000+0000","updated":"2014-12-22T07:47:42.000+0000"},{"id":"8a85f9874a65e793014a70f74d145dd5","name":"multi-entitlement","value":"yes","productId":"RV00007","created":"2014-12-22T07:47:42.000+0000","updated":"2014-12-22T07:47:42.000+0000"},{"id":"8a85f9874a65e793014a70f74d145dd6","name":"support_type","value":"L1-L3","productId":"RV00007","created":"2014-12-22T07:47:42.000+0000","updated":"2014-12-22T07:47:42.000+0000"},{"id":"8a85f9874a65e793014a70f74d145dd7","name":"arch","value":"x86_64,ppc64le,ppc64,ia64,ppc,s390,x86,s390x","productId":"RV00007","created":"2014-12-22T07:47:42.000+0000","updated":"2014-12-22T07:47:42.000+0000"},{"id":"8a85f9874a65e793014a70f74d145dd8","name":"description","value":"Red Hat Cloud Infrastructure","productId":"RV00007","created":"2014-12-22T07:47:42.000+0000","updated":"2014-12-22T07:47:42.000+0000"},{"id":"8a85f9874a65e793014a70f74d145dd9","name":"stacking_id","value":"RV00007","productId":"RV00007","created":"2014-12-22T07:47:42.000+0000","updated":"2014-12-22T07:47:42.000+0000"},{"id":"8a85f9874a65e793014a70f74d145ddb","name":"type","value":"MKT","productId":"RV00007","created":"2014-12-22T07:47:42.000+0000","updated":"2014-12-22T07:47:42.000+0000"},{"id":"8a85f9874a65e793014a70f74d145dda","name":"enabled_consumer_types","value":"satellite","productId":"RV00007","created":"2014-12-22T07:47:42.000+0000","updated":"2014-12-22T07:47:42.000+0000"},{"id":"8a85f9874a65e793014a70f74d145ddc","name":"ph_category","value":"Subscriptions","productId":"RV00007","created":"2014-12-22T07:47:42.000+0000","updated":"2014-12-22T07:47:42.000+0000"},{"id":"8a85f9874a65e793014a70f74d145ddd","name":"virt_limit","value":"unlimited","productId":"RV00007","created":"2014-12-22T07:47:42.000+0000","updated":"2014-12-22T07:47:42.000+0000"},{"id":"8a85f9874a65e793014a70f74d145dde","name":"support_level","value":"Premium","productId":"RV00007","created":"2014-12-22T07:47:42.000+0000","updated":"2014-12-22T07:47:42.000+0000"},{"id":"8a85f9874a65e793014a70f74d145ddf","name":"subtype","value":"Premium","productId":"RV00007","created":"2014-12-22T07:47:42.000+0000","updated":"2014-12-22T07:47:42.000+0000"}],"derivedProductAttributes":[],"restrictedToUsername":null,"contractNumber":"10593540","accountNumber":"5530698","orderNumber":null,"consumed":7,"exported":6,"productName":"Red Hat Cloud Infrastructure with Smart Management, Premium (2-sockets)","derivedProductName":null,"branding":[{"productId":"69","name":"Red Hat Cloud Infrastructure","type":"OS","created":"2014-12-05T14:33:57.000+0000","updated":"2014-12-05T14:33:57.000+0000"}],"calculatedAttributes":{"compliance_type":"Stackable"},"type":"NORMAL","stacked":true,"stackId":"RV00007","href":"/pools/8a85f9814a192108014a1adf1c7b6b39","created":"2014-12-05T14:33:57.000+0000","updated":"2015-01-12T20:24:03.000+0000","subscriptionSubKey":"master","sourceStackId":null,"subscriptionId":"3456439","sourceConsumer":null},"certificates":[{"key":"-----BEGIN RSA PRIVATE KEY-----\nMIIEogIBAAKCAQEAqGQybHnChDrZhX25NFLMsR78scdXSuOumCnlupAdiFevlEXM\nbaM6UPmSk4lriKQj+wnlvAocgHxD8nDv0UGqVOmotENQC9eGRUvsZ006yHpBuJmO\nv498R6s3lfMpVDjFU55eosgtgnXy3rQLEp5u6QgD6yLoeFDhGYI2OYavaOGDe/VT\nSFPEuLekOoNtn7P7pJT32eaFEyLJqpBekmC5mEQpWEIaI4d3O286/nichOcp37+J\nd6UJS2gpzuN+wkYVH/5kQiCXKfX/GdwHBakpbVWL6JSVZn3lX9xR5p+UsSgfa5J3\n4uJNkS5nEgnvrg7vHPOEVTT67RNNgKHOl3pClQIDAQABAoIBAB1e9KiVCEeWGDC/\ngBlPQ+K0+/BqS6CFXAOwcyB6WJxaZwaesgyBhv9uuJFBS99WeewkisykmtoSUqur\n5TiDkpki9EkU4JZgLkxR9NcD0nf7UxFGv25MMaoyhAyEkDXffRObsPgFoGJ7/jO4\nBaJmvgOpYT2XJiMuQET5wEmCY4AQY9uz3zc+38pJFd/uLDAm9r2t+mfrKJ1jSJne\nEU2gVWc9zMPh/AhjKwnhY5GAMZMO/2c7FsPc2q5A5H3Mj9otS/j0pnp1rsQt7Olr\nPo5qZ+WSPWY89HmsDj4WuYUICRL1ey8pXkKZIjSoca0NpqkwGE3WpZk1QLO5fgiF\nVB88pPUCgYEA+/FASGum7vBABwkkLaIgY2gizyGr0yKbUso7mm2ziyG0paq5s05I\n4bWSS8og+ER/zMWoUtN3ytWVf+SJ0Sa5+N01FsJpgi91zKbv5wj4QF9xN9+GTivw\nX9CrjMElkVKokfuNl2AR5CkWYM9FK5WP50LlawZirmGS1G1nYvmSuC8CgYEAqxp3\n4gKth057r7afaOCBDcY6TaySNCfZAXRkuuxcT8Y9AplLCmZFhF33r8iaqzu12UGK\nQgTpCc5+xuEfTTOyfhPgcx7UaiaU3acfRrdPuvzeU7YNE0e1lrX61CgbWJsFKMdq\nUWf5zXNpSg/9xK57jGNn+8tR6LrXTgI+mAlLfHsCgYBBgKzU52BEeSQ8cAz+7Er9\nbWK3daqlvzag5MFwWhs3DjFYbTXQv4bFYB7EI65EvhJ4G9+ygRaBHty6nqGSRj5N\nzL1zyGIEHfDDn5d5+uQIYIggHbZedqANWURw2Pq6eMIpCjz64VhleKU/0EPMnBsI\n5mSdWdCoQ+gX4MXjfr29swKBgCqdrgxBxHy15IKQRsX1XM9UdwMPn16UKi19kvUn\nl5pa8qkqCxGtBVWBngZPPY62kYVqGIh29p/1qYfZXFV7MdLLGpUxsZA6ycsnK9gO\nIjKddrZ82mbZ7nV6H94lmyIHglJ00Jsz/XjZbPkAYKFTH/yIacbCDkWb+7I3RuXR\nMtbvAoGAdUdLQNRlUSH1ZY1yjlsc2ZKSsyVZ1tSkF9JNnX2OPv6JzkWST5bDSYvX\nBeNZwXG6us2GLnsI1LSqMpzeCLKjpH24337rO8fbbN9g5SuenOSlq3Tne1gXwGpW\nc0PemYSdl20++metc/5y74lqo+0hbiDc8guaQpOITff5k/1kqdE=\n-----END RSA PRIVATE KEY-----\n","cert":"-----BEGIN CERTIFICATE-----\nMIIKcjCCCFqgAwIBAgIICkY9q4aY/OcwDQYJKoZIhvcNAQEFBQAwgaQxCzAJBgNV\nBAYTAlVTMRcwFQYDVQQIDA5Ob3J0aCBDYXJvbGluYTEWMBQGA1UECgwNUmVkIEhh\ndCwgSW5jLjEYMBYGA1UECwwPUmVkIEhhdCBOZXR3b3JrMSQwIgYDVQQDDBtSZWQg\nSGF0IENhbmRsZXBpbiBBdXRob3JpdHkxJDAiBgkqhkiG9w0BCQEWFWNhLXN1cHBv\ncnRAcmVkaGF0LmNvbTAeFw0xNDEyMDUwNTAwMDBaFw0xNTEyMDUwNDU5NTlaMCsx\nKTAnBgNVBAMTIDhhODVmOThhNGUwMDlhNWIwMTRlMTUyODA1Mjg3N2Q4MIIBIjAN\nBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAqGQybHnChDrZhX25NFLMsR78scdX\nSuOumCnlupAdiFevlEXMbaM6UPmSk4lriKQj+wnlvAocgHxD8nDv0UGqVOmotENQ\nC9eGRUvsZ006yHpBuJmOv498R6s3lfMpVDjFU55eosgtgnXy3rQLEp5u6QgD6yLo\neFDhGYI2OYavaOGDe/VTSFPEuLekOoNtn7P7pJT32eaFEyLJqpBekmC5mEQpWEIa\nI4d3O286/nichOcp37+Jd6UJS2gpzuN+wkYVH/5kQiCXKfX/GdwHBakpbVWL6JSV\nZn3lX9xR5p+UsSgfa5J34uJNkS5nEgnvrg7vHPOEVTT67RNNgKHOl3pClQIDAQAB\no4IGHjCCBhowEQYJYIZIAYb4QgEBBAQDAgWgMAsGA1UdDwQEAwIEsDCB3gYDVR0j\nBIHWMIHTgBR3LqXNNw2o4dPqYcVWZ0PokcdtHKGBt6SBtDCBsTELMAkGA1UEBhMC\nVVMxFzAVBgNVBAgMDk5vcnRoIENhcm9saW5hMRYwFAYDVQQKDA1SZWQgSGF0LCBJ\nbmMuMRgwFgYDVQQLDA9SZWQgSGF0IE5ldHdvcmsxMTAvBgNVBAMMKFJlZCBIYXQg\nRW50aXRsZW1lbnQgT3BlcmF0aW9ucyBBdXRob3JpdHkxJDAiBgkqhkiG9w0BCQEW\nFWNhLXN1cHBvcnRAcmVkaGF0LmNvbYIBPzAdBgNVHQ4EFgQUH4sIAAAAAAAAAAMA\nAAAAAAAAAAAwEwYDVR0lBAwwCgYIKwYBBQUHAwIwEgYJKwYBBAGSCAkGBAUMAzMu\nMjCCBM0GCSsGAQQBkggJBwSCBL4EggS6eNpNkk2T2jAMht8fs1dnFvLBudPpcWc6\n5dCzYkTixY4zlhMWfn1loAsHOY4s6X0sOY09NlWNOZ45Gc+wcco8ZcyJV8dndH9j\nOkmm7OKE9qd35fDAa47RC2c0P/boORPkIpmDuYIXQVPV1TuG5K5Xf8GRJCeyJ9h7\n+jEmDjSBRfgL5xcBF2hgQZx5Upc9GadfHJwuza890milLA51tVXboFX2RqXaqtH/\nBt2DsFZ/XXVqLSzPo7nxqrKXGCBLLza5uWgaUopslEelE9btenaK9qXEgg32f35/\n7HF0XrF2e06rxtijES6rZbRPX2B0ipRGMY+LttVOrVBu1d6xRYO19DYeFpvd6vIF\nIQ0moHuUURWh/KC9DQUnZ0t/UinXgV66cwu1NMuig6sLwj1P3ey9y2zi7Yrk4SMd\nevI0Wa2YRl6N3lYJy1bVtVuddu+l3jO1U/DPnmkuwf6WMd5LhCHk7zpi/VNY/42N\nIehId7qf/oMt8+w5aAKlC6K+CRX6pJXwrSb3PrQY3TDqifPUO18a5STiLbFnEi4h\nnT7DfhkQtW5cks7irdcjSnbEPxp+71+BlFeu+y2PDDjXfWm76k/v84gp2kFs3g5k\n29oKbD8/Wxu2E5M0slElQ1zckD4XqaAc7wc70/T/u/x/dPZ3e96Ou4RC/o8RvvII\nn37e7dmUcajkDXcXapVs3g5k292KbOFy11Y5Wxu3M5ElA5Q1Gmf0b8SdE/HC9TTp\nztXF9v9Xf5zvQ9g9o/u/5pEny++rPdvwO9eQ7/9ffWn9zs92TQ72bwcybOcscrY3\nbmciSgcoajTHM4Xqa7u4d6op/yg43aCn0p5qGlCSiNTvZvBxRyxzdvhbvy99zODm\nd9A3fVbvrJ2+87zod7N4OZN1sbthOTNUNcL1NAOd3bfYNz44ycN3Pu52YAMORBrq\nKXyd2kFs3g5k3Wxu2E4slElQ1wvU0A53npd3v9Oc+buEQGT9b2v6PEb7yCJ9+5mh\nzO+qrtxTuXce2va4ULSZX3rX4nd3ee72byb3b4X7zBd9QXezeTdjm7fC/fr/7O7v\nm9M8/32bRtfcrsDtq7zL7MAGHIGu399TXedvvqzu39O7+KOOd40O+t3d1PvM0Ir7\n1/c76Ju0FO88ffVTu7Ddi9zvOd3da76U72bwcybUcscrY3bmcoajT4Xqa7zZu7yt\nMP3bl9iId7N4OZN2OVsbtzOUNRp8L1NdyUu5A++mf99bXfUzstjwx36he4QKEKhd\n7N4OWObt8Ld4k7SaSezeDmTb2sptRwNnx0XY5Wxu3M4slElA4v5qGubkaZ/RvxJZ\n+T8cLs06mnTnezas5u3wt31V93/9Ead331K76h96jb8lBhd5/WOx3eS0kd0m++pf\nbzO7zs1Oy7zud/Y+8/Rxhxpzu8rSjd3n6HsHtH99A/eJO0mkns3g5k2o4dXscrY3\nbWSiSgcXZUNRp8Ls3Kmu77+iKez/3p+nO7nn95o4ln3bjXejjDjTnfJztxztEp3o\n13nB+8zu+nO//ndwz+y2O+TXd/zv/H72bd292+Fuxch31ld6Od9Yu92+Fu+n3aDn\ncNzvZuk3u3wt3Kb7lN5N95N7t8Ld7N5N7t8Ld97N7t8LdjANBgkqhkiG9w0BAQUF\nAAOCAgEAqFlHQoP568EGy03dINsV7iQnsq4U63lkjchg/mhNx0mmkDGrZW/Tkx1d\n7wHuv83D1iJyKzjFIrB3vkGP5PxV53WqkI8HlUxgmGs2NCvVwb3D3VpJtygAYXwi\n6gsnplPEjPLHGQ7VuPAY8t1eahJ/ipaTKgw64pN8f1gmo/wlUsQ+05DN63/k2HoE\n65ZRcZJyrgCcGNS/jJgkuNqRry7+Yugwp+F9ei6HbbsaP8rs3W/EIym4Tnuce0Az\ngJaxKPpyMqepp7O5w7I2IRK3Eq2r59LN2gB2nYLEWodp2R1PdIKvb2bwF7ZtCkWk\nkD61geJpzpm/8J5aUOA1HxkRCC4E3fzOqJM6JamnhWqXHmLUMAfahssTKSc1jG6D\nd2YZuWkEKUwVe4pl71WEaP2zkmQm/XHsQW2/DJGvEy2LKZTBVOmRsfdKTXBp8mk1\nq/8/hVIlLZqiqsnIZTpsJwcYWW2VHWiPCqw1ZxbXh2080Q3VOZAky0mAiwzr3Y1s\nb/A/mXVS4QK8F7ltt2+uU0OEGhgQf0udAUovN95Kntybh7RI0t5dUgImp/bA6q0+\nf/rHMng7GVapTkpRwd9RNn11Z3U2Sav2bexBq8HlSXo5fSWaw9BFfNU7Yze9r8wV\n9wuQDnTpjG7vSfg3oXP0Xw+j5OqnhmQloRLJsW6Neipf6idUPf0=\n-----END CERTIFICATE-----\n-----BEGIN ENTITLEMENT DATA-----\neJzlff1zI8eN9r/CUt0PcZW5mpmeD9K/rX3reHP22ZW95K333rpKjSTuirEk6khK\n9iaV//1tDr9myO4G0N2Y6ebepZK1V/wQMAAeAA+Af17dLp5WL4+z5dU3V0XysRI3\nk3ScZHk2zj9OZ+Ob27tifDf9WN+maZUW9cerr6/+96V+Ws/Xn6++Sb++Wr3crG6X\n8+f1fPF09c0/r1a/vsh3+vNfE/l/lfzhp/pxtvkXs7vRD/V69N3D4uVu9P7p47Je\nrZcvt+uX5Wz023x9P/rwWC/Xo5/qp/rT7HH2tP569Mty9jh/eRz9IRuvFre/ztar\nr+Qb7v549U329dXj4aevvpHvNpN/O1u+zm9nm2/yMHudPciP3r2NfOn68/Pmu/yY\njn8UV/+SP7yub3+dP3362/yu9Z3lXyyWdxuB/LP9qybNzy/lJ11lSZqP02ycFP+V\nFN8kifzPf8u3nz3dbf+y2P9l/k0xlf/Z/KUU83pZ325enibFVBR5Iv9tfXu7eNl8\n+6uiEEk5nWw+/Xm5uJOSkb/i//vnVfPVsuaHd6L8Wb7Nw2z0p/q1Hv3h42I5+vMP\n734cfZC/+Gy5EZD8n1WjjKvNByxv7+frWSPnzRte/T4p/1bm8m/kH67+Z/u9Gvkd\nPquclkdZfW4Ed6LEd/Ily+flfDUb/Th/evl9VOw+fjQetb/dt7O1/Ip//uWnRnEP\n9U2jj+X97GFcjFfNK8br+/ny7lnK9fN40bx0/Hf50vGNfOl4+fy4an6hp7vF8vj5\n8l891+t7+S+ud9/+evPj15s3vt6+7XVx/W/L2cOsXs02//RvN/IPG1Fctz7jerFq\nlFbfPMzkL/6xfljNtgJTS+rT86e/vSw3v8HH+cPsm+vr69n69vr51/m1/J5j+bfX\n8jcd//GXP47/493/HS9nd/f1uvk9vib8/O5Ly099lK+8q9f132a/P8+XUvyTMk/k\nQ7ic/e+L/Oe7v63rT8337Mjz6n/+9fVRkZOjIjffAaHJUq3JP7z/8PO5EktAifPV\nAqm/u/lq3dFfidCffHtLBd6v189SIWQpl0opC0/mYmcpeCM5E3IoRuLxoRdZUZIf\n+srkvpRPfoVxX/jH/8x9VW6PvJeHvVJKV/iSrp1gHVxK5c+lcMk3q5KE6kx0HvvD\n4mV5OxspfQrkuFfNa11cC8Z/bz/l+oP8ih/CdTIKny/NYEJVk9HHmHSFcjVkhaE9\nDlVJoQMlldWV04zs1XQxXOnVoBju4NUwMbx/oKSCo1WS+oKjhsgMuTbXyBwTMK28\n5nEmJ4VK59ydFOZh7zeqDJjfyShEVrAxCtmHH4a4g8s7QlebGkMXntTmhBvcMR4G\nUPcFH/zCgdxXRu/iM90VFJ679FvemvrKlaySJObsKOTCiwpuVAm5DmZEdy75qye4\nEV4S21fcUuPJVtxyy5IM+B2FJB3we0z5UubVoOwtidmELqkPo64WkfGEDvBZIT1m\niMeL1D0Au5ZNFcm58D/U69nDw3w9u0L3Tldimvyu7J7mSQqh+8PnjYo3VauDK433\n82o9exz991dg9Gt+cPyP8Wr/XmP5Xk6IcfeOWoM9fNK1/CR81DtIqmd8Mr95PEip\nbYtVmhLUU7bUU2DVU6jVU3pRjy58tdVThq6eQqeePKnw1lO+STfusWGe1A8tTe2d\n51eQvzyqZ7F7l7F8Uzd/WW0/W6Waw6dcy08J3222lAKWx7taUarC3O47CmmjAacu\nn0EDjeCH7qFWJdTja0sz6UaIvTT/fXbz8glIjtoyTcZ3m1dwJK1t6SbXzceE+GQr\nkJl8siGqE83dGLQCOR1n9RBcT7A6UnsfCD0jnA+qUNr1QT7qo5ArirA6KqoE6n0b\nEBRGH8W5PlzRkzn1t8ROA+lEUSqQSQfYWkVlHbqOqjrdsIrStDwDitUK/GrfQtWC\n0jQhStfcmfYgRWxExsgwpHhcQiV9RDy2Rkl+43F5XUYfj1XVrCqZUqxBEwDMtd+u\n52dgx3Rdfp8Zgdp9Q5Veg/c2proan8OaBWx8TpjJrfJxrmjZGFsK4CFD01VrlW4n\n4FRNmQakUHsRYSOonqK/mirFYkKHnUrbAWmwiEoGpYbBXr2Ixm9JqEQrXXipInHD\noujQkFQDxQRgxGqFVftBqdHYhuj04FAQFZ+wOcFRTCiwg6NDRYAUj54M7TRaH62H\nBhrwrAfXNitta6RWgZjP40TmaKqS0q5M3HqUjgAITA4CBkDKOjQpIShdk2ZLt0Px\n+2HKXu328f5GK3tyMuajB4DTRJTJWIlntmiTMaJONi6pD51sPFOEOsmTiqITTe+S\n0rRk7VaG6Z/UsYHAWDHgUl2VWo1LnfphfirVHvthWrQppUuhOJa6ZiOF2+gI+r3E\n3+CojCUeAGkr1z6aZX1wiyKpXKuDAEVPmiBAayvwE4rCrtQpY0JB6FtqARK2ULSx\nCtZC0cYM+uxbqiEnNICMSH+pT3YffbKwnYyyPVYSSp7aEhD+6Xbi6MIloOGfbEpB\nDY6txLyqE1x7SLC60TXOTIviimAmL5Ew2mnHMDNHu12Z0JWlpvRSOBdw08zeunwo\ni9BCC11Z6g4nzbL81JXYFROrPmRoonAkYcKSFVWpP5JSREWnBG8oWl4khRHPToUP\nU/aqVUgVqdAKG4V9+PeB14gmEroXU1do8fQlQw3RYkzazxyu5z5SYLXFPCE1+LTz\nJLTx9R7m1mMr8aatkELrY1jP9Tj2MfxQnPqY65FIClwVjahf4eeanSqCuJrV8LPN\ntoxgl2HNXmJuvKG2xE+XYGpZVkWs/qpXYYLWViZ3VE06EUdl/OnbxWrV3gT09vn5\nYX5bb3610S8P9Vrq4vEKvaLm+fnWeOYjTwtdHon6JvJREfJZ2D4bm8fk/bc/jX5Z\n/KZ8RP5+M57Vz/JBEGP5o+OdRDZ/fN68wurpaF6pfTj+fiM/UD4PAnoetnIaJuQ3\nv0IbdqXaTVFUnRhSSpUyDhkmQ06JVkVoGyZzoWU3Y9WRn6tDE90OWskVWuGbfd8r\nJ493EaiYTHR8FKSazpWkbkrudaTQkHNPElAQvhsZjF6k+ejAINV8qrMIY1ZQ24iq\nVpyx19I22uhA4tGKYDUNE3AqXcDRlWEcAg6gG1XY4TYfGXwiNKBUu+CdDtFIcKD0\nAAeckVloG47zVEu4o6qD7M/EMP4MYzUh+TNRFrpclwYFQH7SORSovPkyQCtxEZNS\n7bUDhwgDYWhViOHH0CJeDC2xmq6B5pDq4EFaf0AAA9FC044ockckTa7U9FynialK\nI7XhWDnTagPwa2qlODg2nG7QXi0oLU0mjrU0ctgZIuhEHXJcc099eYBaGOAsCQTp\n2tT4OS0yt0BToPPNos9ss4gt1xRF4YjHtKaBdmKVzxgD5TSBxxhN+UxoJyGpLoyM\nBdqerE80QOkUBIYHHKs3+M5ar321oF2bIu7LGOMGzHJCkzPvt8kpPw7NQAhGIdKL\nORbNWl4MLjPn/ZaZQfwVWuiX9uEWVJT2YY4majPhTl621hJxApO4MmgUNTNStYy1\nThay3ajdmCt5Rg/GqCiME34FmU+qQZf0ZW45foE2kKJP8wg7n1SCLle2Hz7C9xrf\ng1aEOrF35JSRa149V7zC9E/aepebWSjqXWakpSp78Q34771VHBhLbS6+Gvo0xsUg\nfIvI2BYScfkCwIZ5ZHXp3j2wOBfuQyJZaEc83JlJBK5FnxVjCtsiJKNJC+35R2sk\nRmgb9xRyYulLqmh+InVlXer7koSifq/GFHxRXxuBXCmZitIlqfPSl0FFM6GhNKnM\nF7sMTcxUwgVuaiaFXRYEbtAe8HEgmBMAQ4/mEws5U5UEld7IAHTIUPlTkTcOQEgW\n5IrmDFO0JEPqkQEQPPLWMABKb6U3Qg20h1Q1qkTV14AzpmIg+q0YYCeawlCEr7EM\nfFBR6oM9rFhE/jAU5GsyEw+ZVfphh8yEycwA9JIWmVt1QNHRRHcMemNmxNIxUA7N\nau/guNdCqUVQzupnRG02mf/7WqRBiDaqAgB/tKGXaQb0akcVNRuZT9ZCtbTy4/zp\n5fed6Efj0bvfpXDu5I/95Vl+7mz04eX5ebFcX6G3E81r43KiNNOSdbVfrgS/Xmez\nlXmL1exlddxfhX9a5MtQRYnDwqrI2AvlBLwyYKeXzZ8eZo9ShvXyM3SHYKOcVfsF\nhL16WA113h+7Vk+hJ49HCSYTaGv6mewLC9kb7nEUeg00GG7+9HFhpwbtPuKOGgiT\nu10HMzQoyRItjUGru3z09oNBb2oHlo/rVaMdC59Vr65znb9aXVlJ+WW1vF7d18vZ\n9d3i9ror13H+9kNb7GQ5b37XDvBr94KQzqmCDQRY8LkRtr370aGJgfd4pmVBjr82\nvobqZewjMc7BYMNxWN5FPvngaSurJ3+HsGED2MFq/3aww9JDr7UVQrut/If/HP3X\nYvGwanJFF+Mwrr3t2MTy/mm83nwmPZ3BmsXhIywKAWEZRzaZQqcB7FzZn38Yfbd4\nfJRpKhoyLe/Ht81LuODS4QMihkqTKbR63llfBEvbK4zR0vYqi93S8jQhgwZEFKIk\nKBVbgqINUHYJSgCVbIkaoDO+duoCaiyV5xqLTjPEGksAGhEJeNpJkSW+s8kSZ9ZZ\n4qzvLPGda5Y4a2eJaTZpwQF/JSxEycp/kSqQslQvqSI6ZnfdPlvc7jr+2GO3zHC0\nwcBfhkNJbThzmjjTfOm6yAEb47ngTghDA0QTKgLpc+T69UtIc8CUV2B45MMcdPiI\nag4BACRpAeA9LCsTMBW6Sq+FLm2/iVTo4o3oIqnoGAkCoiYRH/CovXgNsJQqWp3X\nt5XwCQLNUwHdyPKSJlMTZP8exqa2HoCXydOcp47RqkBhXP++9MTh+vc1p2iUkiVa\n8rZ1B9VQSDr0Uan0R0w31WNttt8Ga06uzFLtAnX6z3NlFraSiBhdB6iUCI4yOiEN\nZ0u8I0+1U0E3I1TB5K/z5fqlfpj/Y0uexKvqdc2nrdd1/ApLBJ31RrAlJSRW2ZJ9\n1gHY0mDQWE1mgC6Du7Yl0EHm0J1gizGHJkWEIUamiRaQDJUlmrsW9tqAs0SPXqrP\ntoa0Gt1YCneJyr9NKGuDATzweWd320kg8FcWhOlWx7Kgf8bVsSw4MOmqnJCfaBuq\nucnjGBjnzhEBRzyPYwxLUUPMptpLEm7qg4oope8iik5R1CJKMKpJM/ogAaaIbiin\ndJRiXVIBFBL4XS9VoV0ILeEDF0889fc8tJn0ZkLtugainDxNePhRhABkKNezpSRu\nASgAmCb9GzmDJDQJEUiBDRvEigbSRHuMza3mdUjqf1ku7l5u1/PX+fpze4Z4hWdn\nP7fewjlI6Sou7Q+Jl6SdJoKD9IUhCHnXiC1rsXfyD9mCiBPRaP/mrywGzkdH6/FE\nUrbyH08cCjN5wi9rIhy6hPY6kVOVBTtF4BoIdDArplGBVNAZEVYtK1SviqVJFScl\nNEsKG6aWmRah8TK1tZcxUCEG9DIdboMENBlZkBhEAzf3/Hf1QmrnySeU7DqgB9Tc\nJKpdm0SGx7XvJpFfAk82mbI85J2iLPzAH4uy/h/9Y1E2JCOQ6S9P/MSkv8TElznl\njTPOShDKQ307Zl9YPHpIvriA6SH3igqhJoJjyh9dO+IqF0VbIcrTnCNtw65d0HBF\nuWzGYu9CCEZT0gk8Ni12am+du6keWSNKJCWZCQFVkozU95kj9d1QVeqN+u6XXiWE\nvt7tbzwWv0Zm367lCjvHpm20AUhqTGs1/nrrWM6DP5XBffb4eBBZUrTgtacylnng\nsHYdOISrBKHUtiYWGy9sNjQgeOyelrbidjKEVAHI04T+hNuwSRC7+jwpAccfGXqR\npaCnIVadC2zsfl2zBe3XdbzROptMeSpkEF1UU5nk3PMWZwksm2oPX3gj9OLRlK+E\nHib3xoemcv3NbI9TCoRJXW/bSuGZhQjpijJR0TNF/GUq8G4TH1MlcHYSxoYTkWsr\nX/5EjiZUeTQRWAHxUqqE0GNof1UYTAPT3VDgyktI6Uua0FePeWtgoufYO31Mton2\nTjsz9tl2ierIK0epqI7gBr3t9IBxXbRuME9Tjv1RhDkUtsmT+MBbXuSOE1w+uar+\nqsww0o6p0Vkycefxi8kN3U7HxeS4lmd8WWyaTciVO+LAA1Zf3ig34LhDPGpqQYhM\ncTrw5+fZ04d1ffvr6Fv5CVfIu4CqU4BZAj4H3Q9r3O3uOSgh8sFCvnS1een4Rr6U\noNrNjyN1u/sE5l17N1s5u2dZ8NirXt4VEkaciJ2MKM6kXykl3hegsJK9qhQEX9Aw\nyh6DE05ET3VpSMmzowNfIs9gaq7RvaCSG++PO+xsgn701W4HwmjGR5/00Ht/3AN0\n7epnHSLJGp91DF7y7V7gJz1MV6OESs15F9yRZSxkAk8pT0oH9kfzEOD2FLY9G74s\neqbviDYVikJ/MwMnWX/7CzqlTz+WF+4Gg6+5jVel7CRzPX29rKUy3z/Wn2amfLP5\nufG8+TGc5s5O1JfX5fZzW1rbvu/14X0HbsBlCX3LZ8Np3nokiL7saAENgXlDIR6c\nuNz8Jl8PQXnOcotb7xU+cFSeA0dlHSy4uGdZXtCvlRwkiBMeWW5nziLwy7tJ5bLL\n6diF2j6QZux67D+5F4POPXC/+wI7fqPnym05JfQUT4iUbz9Jge5aJj+8+/GoTFB3\ns9dxvXkxQW+KyKlre+zf/VrENj4kHTl5NLLVlOr2ODp+3Zxzd7scDHW+YRbV9WVY\nqoAiCpc+1iHX+L5eSTAoc3ywOL7re3zcvYCguf1LTs3L9jxrMOYkJuDZ3I1LG/01\n+2vT/j26MrBK9Zq9/jZ/GqcuHkwXzrfvHdG9HzF1oRtT6ScO1BNCEImeeyJEpt8g\nQiRObkOJmZZ6JDQ08cMhPYiEmJoLcDfzh3o9e3iYr2c7aZc7Sbb8zFbCX0H+ZrV/\np52MS6/VcfnuO8mWPdTHBwvJE4iMpYkG2N7RISjwOaZdbIjWK6ViCinhu4fFy933\ni+Xjqu2jdnowK+D24848nOKyTvb7d79OYwNCaaU/hgE6f9zFVffqRgznVrMJ/dJF\noYI6YG200FQ6iBQ0RaugMJQ7+u0R9BUMVGRqkbnsU8GmZSzZWFy+R4jU9RLPwYKA\ngQ+bYY8zNxTXtEeW06mXJ5V/DBPJP/+oFyrAUEgzL11o/4riD44tdloCoipM6Xoq\nJ/JrCOWJvHLRhqqoilGHoqbq1YAsSeMRmtPE4sR9YVagOY4oVMdBkwl2A4ooBLmT\nZ8OWQU0LntNl3FsTwc8LDkGbyZKUPF/Y4nmA50Bddadgegx7CHRIwkflckLU5qqV\n40UrPJch9pNWUjfk9TiVqkSA04vPbgi8MjVKfdBPjKm5UYgUyXPX/PL75LkAGQ+U\nJgoKmKtbKX7BeauhctHQvGz5Oio0B1A4Qw0nJJCdllMCJR1LvQLzUxULi3f8o0PI\n6ndqlh1Gq3oteQJhM32Hq0BEnELR7WLOi1qdry8uK8pLcqOgBeeARkHlu1FQkRsF\nIUA0AUI0fWce2ZLn68XH1o+xOL/RXXzSDMfgVtBsJ2R8ZCaVbkwmwpREiExbkSZu\nosEmidZL6whJYsSLHWXQhjwQHLRp0Zo3TPe/uHaI4JxO2+tTf53f/rpa18s1wqMd\n2S3/sX+VPoi039hnAGm/bzwBRCYuhOIjLXFBEoC7mQvfjoZO6jII526QDKaknMAD\nFFygM9OCLTPVUzrsMtPInWYJ8mAt1ItLWVuqdUciKLVGv/VzMqEfJzdQDiEGVYds\n6NT1NvEMgyrEFSVZwKTJCK55iCAYsWlZuez+U5EzzNFfQc5giPz9X6EbcAp4UtDX\nBxQICyh8WUAM9fwsL8krZlSkPzzD7ED449gO1xfRb1CaZuWwNoN4zsn2lJMlcWLg\nXRCTih5TtZQ9EluPoWsYLlEvywsyZUvZnMC4Gz5acUxs4jRPILzz4eVmdbucP28T\nptVqth79VD/JhGTZIi3sMdBXONBTPzJCnePXHdebrzt+3H7dS8c9QmTaVojVhDSu\n796Zk2Zsu/d8ZHTINTY52NMiGiWuErkxS75ZX4Nh2vThAykfl0674gnUVU3GyKkv\nF+pqMArKcnCvAXVehjwpwzIjc7GbDdJp0XJ/lDbYsXyrb4MdgLZrG0yHr4ltsLDq\ns0Kkvm6XE+EDFTkQlt/Ee55cJJnL3q09uwV1bmRLbiEO5FM2wMYn/lyUYHYE0blb\nIAxCX7534qh0Qd+NE9VuBHWD31+DkOrdDv1BRvc2GB/ZS7G+tN9AAlCUGHqxjcUE\nH8TTHLxoYaJ/4ZlfDBI+JX0FL2xRCHKItpkupo4Vc88TfxmUPImHtUxK4rYXwijE\nSVGNbxLC5TZzRKhATUQh9xoMPBTS0isnRZp4KBcI6NSjZoQRWBpjk0bV5OZo9jiL\nMQQzM0tS+pmC1o4GZSP1uJzBhqGh2MowWIf0ZEuCDEV66hy1NoNdfsuwADGwvbci\n0U+vEAaIUIeSWyUWpvGhmHrP0vzpezzz0duTFS0aL1B3wZONM6gbZ/BWsaJlQJ9Q\nrzpkTzKIUa3lJ0wrdFlanPckd5StfhtPg9apCvs1VWetRDMg7faoGNJ4O8JpWJl9\nSi9NqYyLaFd8Dd2BTMpnO6RI/SwjIizCOcnd/K7E6X8V0bB7RF1GtY/0PpTeDvw+\nssZAgl+EE8FZXpGrlHpuMH1hqAfMiwk0McHfNKFThwpFfPG6kZJvjC2YZZSeysJa\n4E1NxbEECVZqRGRbPzJBKQGabjRB0t8Hf9arTJFJPy1dhH8ExkhEzAmFI5P8hH6G\nz2JinXdM/Ys5yiGSzMVO9pVFFG3LyUa0jK3IrCNLMpuC4unOZ6Ct4FBQ1O98DqXJ\nkNLXw5E6aFxtswsf7cmSlD7b2ZTK4Sq5w6mr8AvkIqGvFjdc8SZe9PRWIzfd9P5y\nCuR5AnU7TMf28DNtp7vN2IbaWmS3y98kOymnZBd2to8HmJ12vtqn7WcM7NbUi48I\nyQBtrxVtoxX3Lqsvg2qYJuDueNd6ICb565QDncu2qGrgILvKfKgsE7nL2UXaZbTz\nwojfFQalqj4S30BBllPcovJAhrmx4XOi82JnODPEIYz1Yik9/Og/pXd6nUnoNpfi\n6uzCxo3YrMa3zUslWmMcstl/SowWYTFE2FRF4CNYDu2i4O5fuZZOhMgce0IWl0x9\nr9+olN2hy16b1T76Yr/oDIgaProZuh44sZsRQO+7pLMRgC2LmFihu2HqcH8ctzzj\n8lfWSNRFP5104u/MG+dcly5WdEo/1zq50mJRH/D4m/n8fi/A4p75IMj9aZnbSxoQ\nKsNoRBAykzhGu/mTes6DBmHYSGI9IhmvQdKldaHyEhb7pZhp/kMumRpyRXFFXq6r\np/pjqnoKNqbDkhcc6z/asl5KX32s5DeRinlstYuIa3liop++32lCc0mtwsWewz01\nttCzu6oWU9zJEv0eUXO9yCDyplxkL2VFtcije+n32DmdPalfrE5Zqe57mfrFFq8l\nAtbv+6ZCYHNW62XSGoa9Aye8WUKf29qylzS+xJLxqOAr2S4ZMruMt64uo+66jPZF\nC8pCzONjqF+IeXgWXRdi6h5D0kLMAOLfBFz6Z+CpYMA4W1c9YsRN3sGAHqBhQNQa\nnxEIas4EePAO6L2CO+A6XVeWm2eHfmucs+NZXrnMurYGlHAltD3jlLGEtuebxpTK\npGLqQhmlskXZcvjBiKJe/FFe2G/YwQ17892BjnHWOwF50oi1Onrk7VoS1k8N9Mb8\n6OLzbq7ZJ7JPy4qcGOnPR1Dq+uwHIyKbHUsNR+wRJfkTejUAn17XHKDpNVawJITe\nYRGXrCIvMnvrOMKLVaPNySYVmdus7VHhZ48ZODohdquGXJ+aJ56vSxEYWPvDb2wj\nVYYrU5fPwprQ0QRgsqgNMiyMAZzVfmlrq9Oy8MccwMx6+b1mFdy6wEHXQwiXw2TG\n9RCnK2d5ls1GQzfOsspltSZu89zBZDxvnitY8+S+sYd+RsIOe6BhB1ttznjXMr5q\nXVpO/G3Xp+Zl/s4loQaLo83NMpG4VCuODg3pyTy6sDhLFLnIIdwFXoIrjk4LwFze\nL8GpzoZc+CU49X15+1EvVCOOrf0WU9MtS+jOqdV/ABoPnjoOvp74OPoMmcjJ7Wjz\nogLaUnPPkFi5qiDareZZklrYyzvAXmYO9qJg2/ZjL++s7cUvSTdN6EfDibtYCFtY\nuPevxAnJMgHuz4ZXTCAXurXYTnz3GVqkp4h9WWJz0ustcNKrdjjppQj+oWwnTOkH\nEU62baKeX+4Zvi9lai8V9EUqeo4Avif6umZeyfxKWmsTeRI4odS3DIc/sadc99RM\nvtMKLrtAw4rpaZUQcBf6Vjsyyh+qj5wxvlV+jDfK53RuiGqGjXjShyudVE63RUj8\nTAV94TwUn1BObh+g+Lr+rzaYOPJAlSRkbbaQtHEWt3beF6ZA1b0N5IZSVctFCeFB\nsCnQ6mTitnOoewM8S8bbLYKLNj/1XWD6vmoFP+P9owz3MENj3vyYdddAy9E4vO9g\nw78T+mzf2dpvoF/Ghqxjx9NZTp9lVS43xDS//K0yARcdxtQOSw37tGxRGQ6O8eCw\nL6NXnOYgO4/KVII5Sn2zk2Kb0clTSCfwARAUyjq9AMJXPG1Ndg5SDhjkEgj9aj3p\nPgWX8/syPF+WVy6YAbqtqRhaZx1Xj4ekLMCeM9zPJDQyeTuYkYUWKXyQ3wfuzMBx\nXH3eK0Dsz4iW4yqE0F9ztFqoj13F5XPVdDA7uMQkhdbJ6ncposrzh2WKfNsYdtsU\nI6zNy0ycDHrMLRNqr4SjSRJPcE3STOtMzCvo9JQUTyczg2Gj5GDz1bgsh5pZ8XVZ\nh06qPCESS3+N3Fvkb/etTg3U3bfByF6INNd6C+JGCgP0UCykcIUe8D6KoE5YFi4b\n7k9W4ZK2bfMuIeh75faQbTIDJw5nKTaMxhOD4SvPHe3mi2E5Zklmsaz3nX5Z78xu\n/lw3hBD4fu9c5BBtgzIpiGuAcpECoLnBiyYFKDk5qdbbmbMIcKueAxoObqGeayZS\nVuRcWb8Vj34ZzvU8SlBH4TxGhjwH8dp3s+f7Q6V0693SNwK7Kx9VZlre38oPGcu3\n3Xk7vnJT80G7TPINna8bQN1DqgyKRm4qw60nPtEYG0HkRGEx0USyyUSfc9IGE6Bk\nc993czg5AY8ihJRnSkzmTNRsYTLUHkM1JHPfZWgGZF/OGE9eOdEz0Uc0KzVG8Nkj\nsjqcydYnEqm2/U9dxoqckHryFsjh8tcFMDrJNTP9+Sja2I2npHLQcZshL41nwv7K\nSXtpEyajObT9qFgLXLgRX95STvREAno+STm1zHAjOMAryxK6uuydxR07UeBXrjOm\nFrdOQgsTaQ7uYIKpsjSOLC85tkc+2RCUWGlCLkMCEOlSYTysc+hxbpSRRgMezrLZ\njI4c7HvkP7atnQX4crpbWU4eXVeCMJRSGfeexUtsgUuShnojUGlkmDlT9hwDKBim\nJSVkYBf1Eqb+l8eFGczT/0u3rRn+ogw7NFBl/FnlsnUIlTaeb/z1kjYWdmljWKhA\nFKmfU44gTUkxGuOHp1S5JTehh3n1CW8tlLOiJZH4SKxEpD4yoUEJZXpzo9afsYVn\n1opznLmQNCBtnZk4fAPOAXpQg34OkKaGAHCdNAAtrrPiHmOtgGtsdhBTGPKwj0gd\nY8+JAmk3DXlXRQ512HDQm1v00SE1qdncOmgnUQ6dZWBNaxAdgzRPoNxVX54ukPmp\n11EjnT04jRqFFfIzMSXXoEtVooNqUHq8Wa/HzBZ9nECqZDLr9LOFwYABdPmm90yT\nF3sN2dLP6YfltCQkQEne7ndrT91bHGEMAC+nhkyFvl8Lu5CbbXVD77u4vY5HZDZT\n1u/0U9YzuylrxezQgFPWnfkgkdAf11aU3a+VRLWfdrslfQxany8H3S2YjLkPRSdc\nH4saZrKoA/FH554H5oWmJTiPbtFuAosThxYTS42u1VaKs0yXI47gQMz2/TMNTBse\ngQjXtGGlIbV/AdzQtHChhp6weikz8JzT7xfeqchz8Ba722wVcaqKf54qnpwA1AxU\nscOUMHiXSHwRuyO0XCxik5a6NoLzwsswGyP8rh4Cx+XAZYhICpHXy3qIdYixF2kn\nlcvh75OCE265RKfuxLhrv1N+il1PQghHGsPJ8kpsE91vBbef7vmQFdyEzu7abvSA\nDuzYVwjDua1jUew6OXBJHgw6hnQMBGPrHUXYMUoqP+07PAD2zVNUlRl7b+INe2DU\nfjP+eSsDe7uNL6YPdbbN673Qqcsp8FOzIh4NZdzjNfDV0EEJWsJxxcEJNkPuLfK8\ns1CN1L6AYmmWtC8qkdqMJiJW020k86+MTUcq54q595gLEI9RDhaiNqsZ9uBwniu8\nTHai6phOaR+eCCGJecLrSwtBWQ6eDkWtcSFucOFblRf13WT6aQZi4Zmv3BxdkVl+\n9M2yfpI/sJX3z5uvvf03Kgbw6P3Tx+VmtvDldv0iP6fNVjXq6ac//3H002y1qj/N\nnz41Ql+u5BMqf/hqKxYZk5q3VEpnpwf5VweDpfAxOx8+yhzu/T4uP40f9+80zhif\npOaTrrP4nqgDrM+nBDs+VRH23M32t96rp2JQkOqar61yAvCu0nIIFVaU5WCA56le\n2CqFe9VEWDGcZC3NgHlUVzVCrZrv5bugtSLGmw/lUYi43r93TApJCd09lD4oRiL4\nzAPPrwtFFfmUQHc0BROrKMIUPqIh8MigQegc6YNGAVhCoQsXDMVwmhKCKYBLp2QN\nqzROiR6/BXf8JiwLD8lHWYeLro8yKATyVB52uev9VVQL3OHr5FScS0O4jNg2ZJel\nHO2gnGlBRQ9UkdR/LgjFkjiSdWVU0XM/LaOKRT1FsNdTbPaVDV2ha1epj2r5eVnf\nPsxGf6pf2+2gvfSbyTQpPSm3vzzLj501XMPFcu2h9FYJ+qr/7sic6ottyujtX8m8\nnGH2shqv7+fLu+d6uf48XjSvHP9dvpLQK5RvgpugOL57GPsasions+ToGsDNNOoV\nQbZlG31EZ86H5m9qYUaVHzOqWM1I25OimxHX9KT0YSVZ+IUf4ReswtchlGF9mGpU\nMqVv/qU//uZGrEED9l4L8/jHU/ip6Ecy6HaCQvOckQZjNXFEGrWluWxM9aBDjME5\n6xBjdzH26yqnDekufhID8njRXWyFjkq47L5x0RXGTfL6x5B1VajS6bS5Q3Sin2+3\na8KROfLz822ZN+Cx+dPVgQcn/3H3q359tRINZX3zP78rM+oUbm79uxT8w+JZPiYN\nD3S2lun+t6NjnRiay91OhJ4+NLtZz7v1hgi6vL8hV4/la7bPyW6cs7wut5/UGd15\nXW+/c881/R4Ox2x/7XYdbZqTp36qRnnvv/1p9MviN6nhH9+ZZwzlT4+fNz85lqZH\nnC88KGz/Bt3zb2YT3j/toRM8q/H85vEgoq52LHKOM+2cbfgwLpHvqKu77cPa3NTa\n23M+YTO7BE1aYFpYk3QdetfepRthWiQQdVMd7VoZBhTu/s9i+etq3czdnSrzt+Nf\ntQIfOfs4KLP1fpvw1/pkdQwcJI3sIRS25NDZLDyF7FStbIyWt8D5VMH7UeSDbi2U\naphqaanywo/gSR9LL5JqwYxp1EuFaciTX2b3ihz9UnpX+8Kz3gVCHB5bqygovq+w\ntY+20yuuCxPmvyQjKTReTlqKxRVos6Ggwb996DIZChyfLgGI2MUmAhBB5t32OsQl\n3pcKOlT5t80WWY0pooOVrygVTHiC1qi71aMK2C4KL/UoIDZdWD2qOLcHqUqIemeP\nNJBKZFPfZUGLc93lU4h0b587IQMTW0S6JN0p4lBagOxjVxdKxvnWzpSA9i/Oo2rL\nGhAtwrVjQy5heVEvpoJ1YTrWlq7gQ7OO6YGFDfupUwJGfJnZgtaWi8Su+0rQM1ip\ndNWuYbHYF6DY8xUi8O4B59QeWX121ilQhL5Mnaq2MRaJXcwl2Ckyo3Eu13yhDlhV\nriFvpNVWa/BdeIbm+xfQc5dOlauWYAF3ewC6l5WjatEPRFhyTVSR4MfaHnHY58Ky\nFtUM5zS3uFEKc2IIDakuNcZzZ4q+0+4SXC6vdaJhrKt1Aij2wqxTDV+5qrloF8vm\nXC8pUiq54lnTKj5dzrv4uP6tXs5G3y0eHma3G++0Op/FvkKyyVXM8DwpoRqU8kvA\nz0zVPTY4eveXD5rHZ3m/ut24qM1ggf/pnObdr9OIJuISEDApVYL3yJ1FCqBiykYx\nVPeMHcbZqyfYzS+qKZwJyK5y0lBldrd7e/GwiScMnQx1g3MK1vCUavRVwtubF+dt\nuq0ie55KHOo+ZwJvu3czS5uI5uo4QzFST6HNSkNcQY0vnIWJNtRGAx6UdnKCdlbD\nNqw9kEv0Yj0TsD9hjdVRgIMRavRiL8PhDKj/a+31UACDEVlcjN5UMD8BqY2u+NAm\naLFtvYrFNSozMpAN5xrFUB6S797KBUN5tcu0CnWeqtJ7c2PbQXyJGbZyo2RzWBzq\nEf0w/3Q/evtaz6Uu5g/z9WeefZPaDRrKlRmiIM9/m36PEv5NjASD+7pphJ2vzeEq\nzN3LX6Zu/S4R7stOk5y8W8ykwwKjQ1Mzs63Ezj4dtv1iZ1qM/Txrnk682mXlU6eV\nV53qoICzTgPIZaV7JVMJnN0rzbH24FKb7Clo/0meOnb2nzTH2YPH1CkpLL+YCt+6\n6vB2PIW8I5fHzUM278EQ9PYQcYMN+1fqgaPTtUFoVNa/DSJxaOETh6KV2e+lX78m\nSl7d5stE0RrtWqi1UokGiiQ3h2WZoiBTy50hDNbVll6RKBrQxLHCWLksvyLfBHZO\nK5BGWfl0s+ikIqa+svSsnoMk3rOSfSq/Nz1BrOG5zny7Gbdfa6PZWQ8Wpk4sBjSn\nduurQFbctwx+n5TUrCqs2qXNN/Hd0LEbM9i86vSZiKmTY0VrVq6WLyC/rFelZ7ak\n1UgeSpEhNnF8aTCdlFZkZJIGkd04PxqMsSXnbURkUtrbo2/aqyfXGhibYQi1Sjdr\nb6R+Haxn1xocvcijX7XiFiFVRjFBRtu7DPWpiQ3lucbO1PDjor4bfVs/1E+3s2W/\nRzRTUUAPGPrrunIXHm565i48yF/kZvd7xMhbECBs9qs7U1VRqzy2qmJHe9FWFKUS\nydV+JyXStMestkA7222GoWLe9ufn2dOHdX37q0v9QkwziKFy+JxR+SYZtcpY5hUz\nO/Ut5KtXm1eP5av5pgAPH3MtPyaqcrDUAEQu0WuAInt2qYc5RqQSeV5B3u4o8uJE\n5KjLjkfJy5czEq2PCpCfEyO1SuQlVD/VqKI0+p9SrQk2jnRXEcH6H+VdkwxqJmr9\nzy8P9Vr+4+Po/eaXl4nfkmwfG88037+6D0tpPq3xVxGaS5ZUeHPJpbJwZ+uPwsm9\nuCvYSvII5K82FohGoQ/WFpbRR+SI1BTEVLTasurbFnpdfC9/Hq2FzZv34I/2HxOD\n9NMKLAkehf/94mG1eBz9spy9zme/GeP2Xv6rtTS/j83r+gja20+KLW5D8yKkuG0X\nsPuJ1NFkFukEPKl6VIrYxGfYCgTvo/9pOf/HPx4+Bypj5eq4Eg9Y361Ws9+PngeW\n9vP2RzkaDUeZzzbf6vIaDgfXVE3AU4n6BBsdmgvu0NzkcjFFZZlN403jNJsmZgp+\nChu4fDp0eKr2UvjwfOKlsPho76vYaCanHuuS6SYST+FTawSeohfHj6iKv0x+xFbB\nYl6Vfyv11OmNJo4KUmhko69tZ2rj7bBuTr5q9lg/cacfzYfEg8GkIrTGQlQEMezs\n9dFH6NmrJcLwkyUV1JU/KRRSKoTspcGYDEHbSiIaAq2bsbeDXoojWzMINlKo4Rc+\nmp/AL5NHUuIvPl7oKQD7Avih6STHMxIE1OI4qaT0ETX2BZUIo4bMH/FJy2n+SEkc\n2TPGaAKIDNR4LkITqGlxIu+n652HnEkon/QK38g7rVDRUjsvvANcrSpYDahJOPgO\n0qkGKLJnl3qYvkbdtMMnBadNO3SU3XXt+knQmrZdhJFWqgLv9k9VgdZBH8IP8+lX\nAkuBL44LINKe4MoeIuweVgbr49WTJ4rRbOrkyZXzfIkAYa0Fu50+iMDnEi9jCkGA\n4clGTdRZHzZbjnzQJxMFeesMZkbk+3q1Xm58LllTH3evJKts/8JTtV2KqgRIzrLQ\n1HZ5Bl47XPOa56M7zIrp6+6l0ubAi3eONkcOYgejI0czmtVFHMUYRung27N6G+Qr\nTw+osGGNkrwQimaUFtbIZYY93jL1Y3zkNYdY46OiE94NMEMglAFtToDtPJvUAK9M\n7nQg+BHkrEmhT2T+3cPi5W70/unjcuNTXpqMHJutKw/85uBqRNVHmrrnt6umHHbY\nmuehEl9tn5/OCpHbldRzmKWZ2/m4bK8zzMHd2zoZa+HHqZB9jC1ppRx0tfdc2K3K\nk5oJrZH2odr7/sPPp+Ked8W95yHMVwukvHevwIh8LkUu3zh8SRcQKIMErXUhGnFT\nXQlR6JF4E/DyECR2vVfRyJ3sXYiCj8zBQEU5SP54wbNJPMAe0rmcoaxeFzXhcMkT\nJ6MQaqtOSYqOqqh4IlV8NKRINeBQ2GY/JsYE6a/z5fqlfpj/o94s6nNB7CJNCQl3\n93NHP9VP9afZo3zD0dtP8r93GwOpVBv5T6/jx0+P63G9eReW5bmdT7gWlzMJo1oy\nkaeEPpxSp8uReCNwVLWNbB/H8sc5D1jKj7iWHxEoptLwFVLwgrZeDT/IVy1fpbPS\nTXZ35H/PJfX7EKOQTtxpCgUjnLzVA6wnArcYXJXSBES+f9Mw5ZsQWllgpMDNDZ2G\nBj4GxnmICDqN0FRZMzCJRplABZfMq6458MTs+4uO02kxJZylBC2qMOqr0JmUc9TW\nXYoZDnSRlaO4nyaBsU/lnAFjC0jMBoYvY5GFmjBNaDtpkXCKwWAbDJxyot+eNpx7\niUOVs2fbyL0goISN+AtmfLDRQhEjLpDYzR4XKLAbNi/0GmfwyC3YOKOEbLlrAWZj\nKjnRVPIeTCWP0lQmlHX4Wn1kRH1kPegji1IfyZRAx9PpAxnAGaUfT/CWEgd73iiR\nI+ooG5m7rACDhB5yQUUm65m9nBXZOrB4rZWoE0S+TyWOxatKUbC6yOShmPoseBUa\nH6RNzHtJycM4C6rKvzPKlV2TcRCqWGxj3v0Ws3w8/VL+9qlzV/6ovdlbBfDty965\nsMABkEIReZ75CMdvSmxAflM6huRS0XvfItAy6IAsob8HqLmB/pS+acbfN83C9TwK\nNeS5cC1W7J53xcluRN11awLeOT17CwgzD1BHAB9FvJxmDjm/OeRRmUOaZq4FibNG\nhFUBj/si8sVSdNQ+rlX1cwrqKieHyATdA73ZzQUT6FWerZr6iDC6jE7Rl2BtSIQZ\nUVSDl3nqox0niLVVzrWBR2pa6KmFGvBWPrxQhk4tMs5qn8S5wXgddSB3TS/OA7lF\nCO8leF8GpUDdr3OtCu5QMRYPsyLhmGKHlzIIui/xhrUz8Sbw3kSHTOvsq8hX9E4d\nF29dMC7ep7pG6KNpjVxifkwfPKTqpmJhTGm6jAsO/qlbMEc18pwI6DpriOlYUppM\n3bMJUibBn0cE73yUtQzw8A7S+ZCyutKLNkzuJ0JdSC8ETmQi4SkSJeWsKCkPGyVV\nzgyBXR2JEnYL/gp5EVXoTYupzxlWgHWs5Wu4uyM8bSN016QgdMgw4aO7Ch6q8NLC\nMweGaJLmNAXPnWOYfPDywjOkxLy4cCC4NEzBCdzQQmIJEtg4npR4PtV3aWpTZyeE\nbcvwyAWt0NvLmEU8bjCZeiiPkFAaO0aLCqHJtMTeGBQ+DO28vHqty+hpqJk+9tCs\nW7rCaIaN3RmmQ1IJPE0JC97pw8VWNXamaD9o4jLQ3IDPPm8BU7a0KakfylZ4A/7s\nalXkr1KtPm22MIUys0J7UeVlBDtlHUL4KNppmHfYWRNP/TMzBy9YiKjymml73seh\nf2aahSsVENFpFg5a5BS9Aam5AT6XCbhuC2Sd2Ypkr4CSEiB8sPc1bg4NMH116syO\nLvRyuNLfOVhRe1sduizrY7rOvCswdDWoW3heiPgFumFasDZMi6AbphJD+5xlKRAl\nbTOUdk93g+3ZDZIjpQ7LbM4wHMalcTKaL6Xip2wM+qn4ETuD3lpKQcWhYRSYeKmo\no3saHpYjmJUWLLhWk9F9cBmwa4necC4mehNTI6+qWqDZHq2laLSWsqK1NGy0VlHO\nbpuETaG3pfz0tjQqZyPV4Mok2KmBxK9Ne5iaTKNMGV1Cr7n+Rat89VLzCjM2qAoq\nk8K1P7ObZcXubWHd2BKm3NUcQx+Uc3zd/kAvtKjckxcHXmbukHnogKGT9IO+GHmg\nl5yo23u1s0Qdn+zxL3u5oNsOahvz0H4hqu1gaayK65N8OJDqXOfZzvc0WF276aFY\ndtklauUl7LS5CaE6U/j9YrkTsuU1vVSAI6nHD9qdRnz39Gn+NKM8Jrcfx/KBSLkf\nj+ZjrntP0QZZxyUycBFOS3EtI99pr1BOTEoJPs7GxWZG8niQnlpPat7k0G16k8cw\nra3yqgIc0tOZBir+7Y2CrXi0N4eoSkcCpKKa/RHBETF6oMtF9wK8k6M1CpxqGA0h\nngqFmKBOy2+l/OHzaj17xIt5xSfmVVRilkEUInfAMVQDgJSR1K4+bYinERaj5bMN\n1Qe0zzY+udw/5rzJ5f6Jv+TkUmTCFWmqNpjt7UN4RJoiVqQ5KaC2pVHCZy5/L9ys\nLVw3r5O1ZBuNg0+nFbjiyihZTYlfKV+rCr9ByjE9wTKSEmC7JpKq/boykFrlTIY4\nGlOKJApX1KK4DrqXcnqUMnkH9Il80+A9huqIT5FBrXLYYeAlbJOHDi3mQUbgREYA\njRr/gvIs/nxKmM+8GuERcnoNwDM7b+HbeYtInbdEJG5oGglGHJF0rDhETOGdpnBw\n1Iq447sdRZzGIGLVxIQAJ2LMFVpKbZw9fe+1QD5MwXZC6GKoyi2EQgtjieUyoI26\nok6ANt2KOqn5ykeOHajv6gn7QMwyGPugUI8/vBMNsJS+hyDckzYGpcrL2ULttcDr\nSeqEWozK42PdyqofTsfqC+F0iAI8I4msPZiTsfMKhBXCMuDZiwFUKvw7KZwqRIBy\nMt+ZchZrpiwmhKrESfAgeTBWYDSE8/JUZSYQAzWJNMEP+XjUh3BBnorOTv2/wjAq\npxS2Fx5CGhEPQSl0N+R/jLYUyTugpXDEP0zYLZ3AEaSlzDtPJ4vIPtSZMaFwpMmM\nAaEL70IXcQq9taihGZ0+EfSHej17eJivZ6Pv6ufVS1PVtqb850nVArDqGvnZB47K\njac7TP6Wow/NV/9q9If3H342YKzV/o3Gt9s3Gss3Gs9XC593LuSH7N/+Wr79tXx7\nsr7v1+tnqW8vllNVUAKukm+ili8KyqrEnDAC267Ek5hM7dBSTiYQwIWsgLhFVW0L\nLBtVTy0iWDSs2gOZgPUrgmJsVMKsjDDrt8qr81aaSEbj0c/Pm+HC+sFhGee5bha7\nN/Xk3HQrJVr6OnxkFF5OaUzgwTe1MfGr0EfhBTC3tvrCr8KoLRAC4XYW6GR6fdpc\nRM6yssETGlWVKGhhwH8dhbH1x7RqCxZwqJEgVH4jAA5Lx9iLP4zVDcqU1VVDJeD7\ngIzVyXbgjDVML6fObW00AXs5yzTXMyQk+7nQjUnp7qZQJdUOEtrlwB1EyJ0MdwFh\nsEFKDS8gmhihqGSHKfqCEtEhCKkciBNr5xWd3GGffjCmAAbRCgh2ZGNBPdhONNqQ\n0NtGG5pY5MdwOMFeN/7EpCa7KpLfjoYfqg6MxiMEddKtgVdhCH6N3tRL3Jp6OL82\nfGMPov5BMnbqTHBX3gKOHeraqI1T0mjDtoHnARFjNRMsIlY38eySTK/pipfJADhe\nBKsYpQ+zQlwaq7EudvbUv4uiRqP2beDZEIKalOEc0I9DOMcqps9wrhayXUmFvRDW\nT1CJpGOjji7g6V1Cy4ZuHk4UNkyTZmDTkAK26TvDeblzM5M/pEdSI1an6TYODdaa\ne3Omh9Q9LrKHWn026SXcmHFqyfTVjAk+7zwqqvGN+gX7P86fXn4f/TD/dD96+1rP\npdTnUryfW7rZaeYKyeKWon6+bf53Xu//Uf63/FslwTurSsKtP/jbHp+k8ej7erVe\n1re/ah6q+/rI6D88YB93ryE8SvuXnEKaw2N0L79v3fq64T8+x7nGhHBRGNZO0dzj\nev/tT6NfFr9tlARuWWkrqWj++Lx5peuyleZNtNeFzxQGB9b9Q7952m0Vt/l6lHEl\n+wGz+c3jVo7dwT6fqob6G23FHk90+G83qY3vzNgOHmrowCodIuE+CsUhkmzt4BD9\nbDUyukN22NqXYSk86LSEchOiA+1q0wR2u66zrU6+u+xnuqVC2wNscDHH/hypynwJ\nF8Vs8QzViA+ohmrIdGwTbA6qNE6vuipQpQOlWTrXCTxCGZ+W6NeyvLpSZGdAaU98\n/QBnBxqAWWWky9Z0CEMEL1ywhTeLGxCzyKyPcILZIuuzSfjsPWSQuZ7f3E1anNc8\nXY06yG7yADvI/pKOOyL0k9LOvKZ6muoKva7SQ0UFcJ7xl1OmJeEKND3xowJMP2l8\noChzyHxPFF5tuFR6XnwFzVf9unRHPsGU1KZ+g2NBTxwKf4lD2JUXr7vbU88e9BSF\n4rV3jI8OCiRGSLT+woOjIveaP5TU/K/0lf/RmgrMHrGvKKdcsOnVFHEcG6VG2Ub6\nXCBMIHFOZoFeW3gQK0OZ8/VRE1O38ALI6KQGvBoKjqep1AMbKTPqir/IvVYmTyMT\n1ZvxnowZyqUNGqigSQ4n/WIRY+m53YrWMB30R6roqV/aWEEIdYWHUEerk0WQqyVe\n/aqmkmmTsLlaYMhZ27AVTpmge3W25wk6SdE9pOQnxhhe4i3xp9fM+7TzSu4AeYp/\nQXR+BuzIisIr9QE5LaFENHx7qwYGM17Bidc8/LT3Q+z69NHvwda/om/2MKWPNm32\n856Pnza7sfUTrU1K3XntAql1Ry0A+CVmGjUXTz1T/r/8hRcL+cn7IaZ6UnycTtK8\nTqdZmkySzZ/qu4/pbXVT3ojp1b/+9f8BUgCXgQ==\n-----END ENTITLEMENT DATA-----\n-----BEGIN RSA SIGNATURE-----\nQd5q5cQw0XpDAdKD9HzrWltdqfPYrmP7LGp1a3rJhq+Tk3P+kqVByrrYJHaJm521\nGYDmsc3rK7oB+zXEzdPNo4PzwuqVuDUsVkgV0vhI7FEn2ouee95snKcbDSd42D3U\nOM3ozV90fCP0YhMEOr0xSuAzxePHoRuwtsocxEndzcHfHPJL2C2o8CrJF1GqKOFa\njqW4MEX69HX0ElF/9UZuKh5w7U1Xk0X+jmzAcSBfgZQqXdou6bUFmqk/v1tlA23X\njoJQyzECPyH+pVg8MFN9Z44ujqHCbod+zp+Ok+70meWrjmNRcsYfPnpJw6XAZv08\n7KXDA0RNFCzIwGu2FrWUXXRs4Oh88J1J4ecy4Ly/MSF6wKsKmpLTzvkepQ/DTTNa\nSJgHeGbjciN/EcnofI0/wPCs/JBXOc69GjaT69dVZN7Rf7QAbbq5AT4I2Q07gU9f\nRr79mLC0if5Gma0Yb3KE0fNR94B3D1nZdVZGYbGbowqMqG1WzxLIs+Xz+PsLOl/k\nmvT9X8ZaUKkn0s9VuW0uHIQ2LSYWBtNL8xfFzJ+t2C3FtsYXGvCfxc0ZnPPoa9TS\nRn6VIzzMFF7Qpm8QiVeeN9amf40IapsRTn1IgEFn4elKp0iThLAdilxiXng29max\nWtGe8jz8ZS6Z5rzwPWWsjZbfjMI/mgOUEElnS6yKZOU=\n-----END RSA SIGNATURE-----\n","id":"8a85f98a4e009a5b014e1529b66c7f18","serial":{"id":740346995655900400,"revoked":false,"collected":false,"expiration":"2015-12-05T04:59:59.000+0000","serial":740346995655900400,"created":"2015-06-21T08:08:51.000+0000","updated":"2015-06-21T08:08:51.000+0000"},"created":"2015-06-21T08:08:52.000+0000","updated":"2015-06-21T08:08:52.000+0000"}],"quantity":1,"startDate":"2014-12-05T05:00:00.000+0000","endDate":"2015-12-05T04:59:59.000+0000","href":"/entitlements/8a85f98a4e009a5b014e1528052877d8","created":"2015-06-21T08:07:01.000+0000","updated":"2015-06-21T08:08:52.000+0000"}];});
define('fusor-ember-cli/mirage/scenarios/default', ['exports'], function (exports) {
                                    exports['default'] = function (server) {

                                                                        // Seed your development database using your factories. This
                                                                        // data will not be loaded in your tests.

                                                                        server.loadFixtures();

                                                                        var org = server.create('organization', { name: 'Default Organization' });
                                                                        var env = server.create('lifecycle_environment', { name: 'Library',
                                                                                                            label: 'Library',
                                                                                                            library: true });

                                                                        var engine = server.create('discovered_host', { is_virtual: true });
                                                                        var hypervisor1 = server.create('discovered_host', { is_virtual: false, memory_human_size: '21.8 GB' });
                                                                        var hypervisor2 = server.create('discovered_host', { is_virtual: true, memory_human_size: '21.8 GB' });

                                                                        server.createList('discovered_host', 2, { is_virtual: true });
                                                                        server.createList('discovered_host', 2, { is_virtual: false });

                                                                        var domain = server.create('domain', { name: 'example.com' });
                                                                        var hostgroup = server.create('hostgroup', { name: 'Fusor Base', domain_id: domain.id });

                                                                        server.create('deployment', { name: 'rhev_only',
                                                                                                            deploy_rhev: true,
                                                                                                            organization_id: org.id,
                                                                                                            lifecycle_environment_id: env.id,
                                                                                                            discovered_host_id: engine.id,
                                                                                                            discovered_host_ids: [hypervisor1.id, hypervisor2.id]
                                                                        });

                                                                        var osp_d1 = server.create('openstack_deployment');

                                                                        server.create('deployment', { name: 'osp_only',
                                                                                                            deploy_openstack: true,
                                                                                                            organization_id: org.id,
                                                                                                            lifecycle_environment_id: env.id,
                                                                                                            openstack_deployment_id: osp_d1.id
                                                                        });

                                                                        server.create('deployment', { name: 'rhev_and_cfme_deployment',
                                                                                                            deploy_rhev: true,
                                                                                                            deploy_cfme: true,
                                                                                                            organization_id: org.id,
                                                                                                            lifecycle_environment_id: env.id,
                                                                                                            discovered_host_id: engine.id,
                                                                                                            discovered_host_ids: [hypervisor2.id]
                                                                        });

                                                                        var osp_d2 = server.create('openstack_deployment');

                                                                        server.create('deployment', {
                                                                                                            name: 'osp_and_cfme_deployment',
                                                                                                            deploy_openstack: true,
                                                                                                            deploy_cfme: true,
                                                                                                            organization_id: org.id,
                                                                                                            lifecycle_environment_id: env.id,
                                                                                                            openstack_deployment_id: osp_d2.id
                                                                        });

                                                                        server.create('deployment', { name: 'rhev_and_openshift_deployment',
                                                                                                            deploy_rhev: true,
                                                                                                            deploy_openshift: true,
                                                                                                            organization_id: org.id,
                                                                                                            lifecycle_environment_id: env.id,
                                                                                                            discovered_host_id: engine.id,
                                                                                                            discovered_host_ids: [hypervisor1.id, hypervisor2.id]
                                                                        });

                                                                        server.create('deployment', { name: 'rhev_openshift_cfme_deployment',
                                                                                                            deploy_rhev: true,
                                                                                                            deploy_openshift: true,
                                                                                                            deploy_cfme: true,
                                                                                                            organization_id: org.id,
                                                                                                            lifecycle_environment_id: env.id,
                                                                                                            discovered_host_id: engine.id,
                                                                                                            discovered_host_ids: [hypervisor1.id, hypervisor2.id]
                                                                        });

                                                                        server.create('deployment', { name: 'all 4 products',
                                                                                                            deploy_rhev: true,
                                                                                                            deploy_openstack: true,
                                                                                                            deploy_openshift: true,
                                                                                                            deploy_cfme: true,
                                                                                                            organization_id: org.id,
                                                                                                            lifecycle_environment_id: env.id,
                                                                                                            openstack_deployment_id: osp_d1.id,
                                                                                                            openshift_install_loc: 'RHEV',
                                                                                                            discovered_host_id: engine.id,
                                                                                                            discovered_host_ids: [hypervisor1.id, hypervisor2.id]
                                                                        });

                                                                        server.createList('deployment', 100);
                                    };
});
define('fusor-ember-cli/mixins/active-link', ['exports', 'ember-cli-active-link-wrapper/mixins/active-link'], function (exports, _emberCliActiveLinkWrapperMixinsActiveLink) {
  exports['default'] = _emberCliActiveLinkWrapperMixinsActiveLink['default'];
});
define('fusor-ember-cli/mixins/common-password-mixin', ['exports', 'ember', 'fusor-ember-cli/utils/validators'], function (exports, _ember, _fusorEmberCliUtilsValidators) {
  exports['default'] = _ember['default'].Mixin.create({

    passwordValidator: _fusorEmberCliUtilsValidators.PasswordValidator.create({}),

    confirmCommonPasswordValidator: _ember['default'].computed('commonPassword', function () {
      return _fusorEmberCliUtilsValidators.EqualityValidator.create({ equals: this.get('commonPassword') });
    }),

    isValidCommonPassword: _ember['default'].computed('commonPassword', 'confirmCommonPassword', 'confirmCommonPasswordValidator', function () {
      return this.get('passwordValidator').isValid(this.get('commonPassword')) && this.get('confirmCommonPasswordValidator').isValid(this.get('confirmCommonPassword'));
    })
  });
});
define("fusor-ember-cli/mixins/configure-environment-mixin", ["exports", "ember", "fusor-ember-cli/mixins/needs-deployment-mixin"], function (exports, _ember, _fusorEmberCliMixinsNeedsDeploymentMixin) {
  exports["default"] = _ember["default"].Mixin.create(_fusorEmberCliMixinsNeedsDeploymentMixin["default"], {

    selectedEnvironment: _ember["default"].computed.alias("model"),

    step1DRouteName: 'satellite.access-insights',

    useDefaultOrgViewForEnv: _ember["default"].computed('model', function () {
      return _ember["default"].isBlank(this.get('model'));
    }),

    nonLibraryEnvironments: _ember["default"].computed.filterBy('lifecycleEnvironments', 'library', false),
    libraryEnvironments: _ember["default"].computed.filterBy('lifecycleEnvironments', 'library', true),
    libraryEnv: _ember["default"].computed('libraryEnvironments', function () {
      return this.get('libraryEnvironments').get('firstObject');
    }),

    priorLibraryEnvironments: _ember["default"].computed.filter('lifecycleEnvironments', function (item) {
      return item.get('prior_id') === 1;
    }),

    fields_env: {},

    showAlertMessage: false,

    hasNoEnvironments: _ember["default"].computed('lifecycleEnvironments.[]', function () {
      return _ember["default"].isEmpty(this.get('lifecycleEnvironments'));
    }),

    hasOnlyLibraryEnvironment: _ember["default"].computed('lifecycleEnvironments.[]', function () {
      return this.get('lifecycleEnvironments.length') === 1;
    }),

    envSetup: _ember["default"].computed('useDefaultOrgViewForEnv', function () {
      return this.get('useDefaultOrgViewForEnv') ? "immediately" : "after_publishing";
    }),

    isImmediate: _ember["default"].computed('envSetup', function () {
      return this.get('envSetup') === 'immediately';
    }),

    actions: {
      envSetupChanged: function envSetupChanged() {
        this.set('useDefaultOrgViewForEnv', this.get('isImmediate'));
      },
      newEnvironment: function newEnvironment() {
        this.set('name', null);
        this.set('description', null);
        this.set('showValidationError', false);
        this.set('openModal', true);
      }
    }

  });
});
define('fusor-ember-cli/mixins/deployment-controller-mixin', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Mixin.create({

    applicationController: _ember['default'].inject.controller('application'),
    subscriptionsController: _ember['default'].inject.controller('subscriptions'),
    configureEnvironmentController: _ember['default'].inject.controller('configure-environment'),
    selectSubscriptionsController: _ember['default'].inject.controller('subscriptions/select-subscriptions'),

    isRhev: _ember['default'].computed.alias("model.deploy_rhev"),
    isOpenStack: _ember['default'].computed.alias("model.deploy_openstack"),
    isCloudForms: _ember['default'].computed.alias("model.deploy_cfme"),
    isOpenShift: _ember['default'].computed.alias("model.deploy_openshift"),

    // default is downstream
    isUpstream: false,
    hideSubscriptions: false,
    isSubscriptions: _ember['default'].computed('isUpstream', 'hideSubscriptions', function () {
      return !(this.get('hideSubscriptions') && !this.get('isUpstream'));
    }),

    // will be overwritten be routes
    isHideWizard: null,

    // declared in controllers, and not in mixin
    // isRhev
    // isOpenStack
    // isCloudForms

    disableNextOnStart: _ember['default'].computed('isRhev', 'isOpenStack', 'isCloudForms', 'isOpenShift', function () {
      return !(this.get('isRhev') || this.get('isOpenStack') || this.get('isCloudForms') || this.get('isOpenShift'));
    }),

    // names
    nameRHCI: _ember['default'].computed('isUpstream', function () {
      if (this.get('isUpstream')) {
        return "Fusor";
      } else {
        return "QCI";
      }
    }),

    nameRedHat: _ember['default'].computed('isUpstream', function () {
      if (this.get('isUpstream')) {
        return "";
      } else {
        return "Red Hat";
      }
    }),

    nameSatellite: _ember['default'].computed('isUpstream', function () {
      if (this.get('isUpstream')) {
        return "Foreman";
      } else {
        return "Satellite";
      }
    }),

    nameRhev: _ember['default'].computed('isUpstream', function () {
      if (this.get('isUpstream')) {
        return "oVirt";
      } else {
        return "RHV";
      }
    }),

    nameOpenStack: _ember['default'].computed('isUpstream', function () {
      if (this.get('isUpstream')) {
        return "RDO";
      } else {
        return "RHOSP";
      }
    }),

    nameCloudForms: _ember['default'].computed('isUpstream', function () {
      if (this.get('isUpstream')) {
        return "ManageIQ";
      } else {
        return "CloudForms";
      }
    }),

    nameOpenShift: "OpenShift",

    fullnameRhev: _ember['default'].computed('isUpstream', function () {
      if (this.get('isUpstream')) {
        return "oVirt Project";
      } else {
        return "Red Hat Virtualization";
      }
    }),

    fullnameOpenStack: _ember['default'].computed('isUpstream', function () {
      if (this.get('isUpstream')) {
        return "RDO Project";
      } else {
        return "Red Hat OpenStack Platform";
      }
    }),

    fullnameCloudForms: _ember['default'].computed('isUpstream', function () {
      if (this.get('isUpstream')) {
        return "ManageIQ";
      } else {
        return "Red Hat Cloud Forms Management Engine";
      }
    }),

    fullnameOpenShift: "OpenShift Enterprise by Red Hat",

    fullnameSatellite: "Red Hat Satellite",

    // logo
    logoPath: _ember['default'].computed('isUpstream', function () {
      if (this.get('isUpstream')) {
        return "assets/foreman.png";
      } else {
        return "assets/Header-logotype.png";
      }
    }),

    currentStepNumber: null, //set by setupController,

    numberProducts: _ember['default'].computed('isRhev', 'isOpenStack', 'isCloudForms', 'isOpenShift', function () {
      var rhev = this.get('isRhev') ? 1 : 0;
      var osp = this.get('isOpenStack') ? 1 : 0;
      var cfme = this.get('isCloudForms') ? 1 : 0;
      var osh = this.get('isOpenShift') ? 1 : 0;
      return rhev + osp + cfme + osh;
    }),

    // steps
    stepNumberRhev: _ember['default'].computed('isRhev', function () {
      if (this.get('isRhev')) {
        return 2;
      }
    }),

    stepNumberOpenstack: _ember['default'].computed('stepNumberRhev', 'isOpenStack', function () {
      if (this.get('isOpenStack')) {
        if (this.get('stepNumberRhev')) {
          return this.get('stepNumberRhev') + 1;
        } else {
          return 2;
        }
      }
    }),

    stepNumberOpenShift: _ember['default'].computed('stepNumberOpenstack', 'isOpenShift', function () {
      if (this.get('isOpenShift')) {
        if (this.get('stepNumberOpenstack')) {
          return this.get('stepNumberOpenstack') + 1;
        } else if (this.get('stepNumberRhev')) {
          return this.get('stepNumberRhev') + 1;
        } else {
          return 2;
        }
      }
    }),

    stepNumberCloudForms: _ember['default'].computed('stepNumberOpenShift', 'isCloudForms', function () {
      if (this.get('isCloudForms')) {
        if (this.get('stepNumberOpenShift')) {
          return this.get('stepNumberOpenShift') + 1;
        } else if (this.get('stepNumberOpenstack')) {
          return this.get('stepNumberOpenstack') + 1;
        } else if (this.get('stepNumberRhev')) {
          return this.get('stepNumberRhev') + 1;
        } else {
          return 2;
        }
      }
    }),

    stepNumberSubscriptions: _ember['default'].computed('numberProducts', 'isSubscriptions', function () {
      if (this.get('isSubscriptions')) {
        return this.get('numberProducts') + 2;
      }
    }),

    // calculate temporary without isSubscriptions
    stepNumberReviewTemp: _ember['default'].computed('numberProducts', 'isSubscriptions', function () {
      if (this.get('isSubscriptions')) {
        return this.get('numberProducts') + 3;
      } else {
        return this.get('numberProducts') + 2;
      }
    }),

    stepNumberReview: _ember['default'].computed('stepNumberReviewTemp', 'isSubscriptions', function () {
      if (this.get('isSubscriptions')) {
        return this.get('stepNumberReviewTemp');
      } else {
        return this.get('stepNumberReviewTemp') - 1;
      }
    }),

    step2RouteName: _ember['default'].computed('isRhev', 'isOpenStack', function () {
      if (this.get('isRhev')) {
        return 'rhev';
      } else if (this.get('isOpenStack')) {
        return 'openstack';
      }
    }),

    step3RouteName: _ember['default'].computed('step2RouteName', 'isOpenStack', 'isOpenShift', 'isCloudForms', 'isSubscriptions', function () {
      if (this.get('step2RouteName') === 'rhev') {
        if (this.get('isOpenStack')) {
          return 'openstack';
        } else if (this.get('isOpenShift')) {
          return 'openshift';
        } else if (this.get('isCloudForms')) {
          return 'cloudforms';
        } else if (this.get('isSubscriptions')) {
          return 'subscriptions';
        } else {
          return 'review';
        }
      } else if (this.get('step2RouteName') === 'openstack') {
        if (this.get('isOpenShift')) {
          return 'openshift';
        } else if (this.get('isCloudForms')) {
          return 'cloudforms';
        } else if (this.get('isSubscriptions')) {
          return 'subscriptions';
        } else {
          return 'review';
        }
      }
    })

  });
});
define('fusor-ember-cli/mixins/deployment-new-controller-mixin', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Mixin.create({

    beforeModel: function beforeModel() {
      if (this.controllerFor('deployment-new').get('disableNextOnStart')) {
        return this.transitionTo('deployment-new.start');
      }
    }

  });
});
define('fusor-ember-cli/mixins/deployment-new-satellite-route-mixin', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Mixin.create({

    beforeModel: function beforeModel() {
      if (this.controllerFor('deployment-new').get('disableNextOnStart')) {
        return this.transitionTo('deployment-new.start');
      }
    }

  });
});
define('fusor-ember-cli/mixins/deployment-route-mixin', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Mixin.create({

    actions: {
      saveDeployment: function saveDeployment(routeNameForTransition) {
        var deployment = this.get('controller.model');
        deployment.trimFieldsForSave();
        var self = this;
        var isNew = _ember['default'].isBlank(deployment.get('id'));

        deployment.save().then(function (result) {
          if (isNew) {
            self.updateOpenstackDefaults(result);
            if (routeNameForTransition === 'satellite.access-insights') {
              self.controllerFor('deployment').set('backRouteNameOnSatIndex', 'deployment.start');
            }
          }

          if (routeNameForTransition) {
            if (routeNameForTransition === 'deployments') {
              return self.transitionTo('deployments');
            } else {
              return self.transitionTo(routeNameForTransition, result);
            }
          }
        }, function (error) {
          self.set('errorMsg', 'error saving organization' + error);
        });
      }
    },

    updateOpenstackDefaults: function updateOpenstackDefaults(deployment) {
      //override me
    }
  });
});
define('fusor-ember-cli/mixins/disable-tab-mixin', ['exports', 'ember', 'fusor-ember-cli/mixins/validates-deployment-name-mixin'], function (exports, _ember, _fusorEmberCliMixinsValidatesDeploymentNameMixin) {
  exports['default'] = _ember['default'].Mixin.create(_fusorEmberCliMixinsValidatesDeploymentNameMixin['default'], {

    deploymentController: _ember['default'].inject.controller('deployment'),
    applicationController: _ember['default'].inject.controller('application'),
    configureEnvironmentController: _ember['default'].inject.controller('configure-environment'),

    hasName: _ember['default'].computed('model.name', function () {
      return this.get('model.name.length') > 0;
    }),
    hasNoName: _ember['default'].computed.not('hasName'),

    hasOrganization: _ember['default'].computed('model.organization.id', function () {
      return !!this.get('model.organization.id');
    }),
    hasNoOrganization: _ember['default'].computed.not('hasOrganization'),

    isValidDeploymentName: _ember['default'].computed('model.name', 'deploymentNameValidator', function () {
      return this.get('deploymentNameValidator').isValid(this.get('model.name'));
    }),
    hasInvalidDeploymentName: _ember['default'].computed.not('isValidDeploymentName'),

    // disable Next on Lifecycle Environment if no lifecycle environment is selected
    // note: hasNoLifecycleEnvironment and hasNoLifecycleEnvironment is defined in /app/controllers/deployment.js
    //       and app/controllers/deployment-new.js rather than in this mixin
    disableNextOnLifecycleEnvironment: _ember['default'].computed.or('hasNoLifecycleEnvironment', 'disableAll'),

    // Satellite Tabs Only
    disableTabDeploymentName: false, // always enable tab for entering deployment name
    disableTabAccessInsights: _ember['default'].computed.alias('satelliteInvalid')

  });
});
define('fusor-ember-cli/mixins/discovered-host-route-mixin', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Mixin.create({

    setupController: function setupController(controller, model) {
      controller.set('model', model);
      if (this.modelFor('deployment').get('isNotStarted')) {
        this.loadDiscoveredHosts();
      }
    },

    actions: {
      refreshDiscoveredHosts: function refreshDiscoveredHosts() {
        console.log('refresh allDiscoveredHosts');
        this.loadDiscoveredHosts();
      }
    },

    loadDiscoveredHosts: function loadDiscoveredHosts() {
      var _this = this;

      var controller = this.get('controller');
      controller.set('isLoadingHosts', true);
      return _ember['default'].RSVP.hash({
        deployingHosts: this.getDeployingHosts(),
        discoveredHosts: this.store.query('discovered-host', { per_page: 1000 })
      }).then(function (hash) {
        _this.set('controller.deployingHosts', hash.deployingHosts);
        _this.set('controller.allDiscoveredHosts', hash.discoveredHosts.filterBy('is_discovered', true));
      })['finally'](function () {
        return controller.set('isLoadingHosts', false);
      });
    },

    getDeployingHosts: function getDeployingHosts() {
      var currentDeployment = this.modelFor('deployment');
      var discoveredHostRequests = [];

      return this.getRunningDeployments().then(function (deployments) {
        deployments.forEach(function (deployment) {
          if (deployment.get('id') !== currentDeployment.get('id')) {
            discoveredHostRequests.push(deployment.get('discovered_host'));
            discoveredHostRequests.push(deployment.get('discovered_hosts'));
          }
        });

        return _ember['default'].RSVP.all(discoveredHostRequests);
      }).then(function (results) {
        var flattenedHosts = [];
        results.forEach(function (result) {
          if (_ember['default'].isArray(result)) {
            result.forEach(function (host) {
              return flattenedHosts.push(host);
            });
          } else {
            flattenedHosts.push(result);
          }
        });
        return flattenedHosts.uniq();
      });
    },

    getRunningDeployments: function getRunningDeployments() {
      var deployments = this.modelFor('application');
      return this.getDeploymentTasks(deployments).then(function (tasks) {
        var runningDeploymentTasks = tasks.filterBy('state', 'running');
        return deployments.filter(function (deployment) {
          return runningDeploymentTasks.any(function (task) {
            return task.get('id') === deployment.get('foreman_task_uuid');
          });
        });
      });
    },

    getDeploymentTasks: function getDeploymentTasks(deployments) {
      var _this2 = this;

      var deploymentTaskRequests = deployments.mapBy('foreman_task_uuid').compact().map(function (foremanTaskUuid) {
        return _this2.get('store').findRecord('foreman-task', foremanTaskUuid);
      });
      return _ember['default'].RSVP.all(deploymentTaskRequests);
    }

  });
});
define('fusor-ember-cli/mixins/needs-deployment-mixin', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Mixin.create({

    deploymentController: _ember['default'].inject.controller('deployment'),
    applicationController: _ember['default'].inject.controller('application'),

    isStarted: _ember['default'].computed.alias("deploymentController.isStarted"),
    isNotStarted: _ember['default'].computed.alias("deploymentController.isNotStarted"),

    isNew: false,

    ////////////////////////////////////////////////////////////
    // ALIASES AND COMMONLY USED COMPUTED PROPS
    // Consolidates these and makes them available for free to any mixee
    // Prevents littering leaf controllers with duplicated aliases
    ////////////////////////////////////////////////////////////
    deploymentId: _ember['default'].computed.alias("deploymentController.model.id"),
    deploymentName: _ember['default'].computed.alias("deploymentController.model.name"),
    upstreamConsumerUuid: _ember['default'].computed.alias('deploymentController.model.upstream_consumer_uuid'),
    hasUpstreamConsumerUuid: _ember['default'].computed('upstreamConsumerUuid', function () {
      return _ember['default'].isPresent(this.get('upstreamConsumerUuid'));
    }),
    upstreamConsumerName: _ember['default'].computed.alias('deploymentController.model.upstream_consumer_name'),

    // Product names
    fullnameSatellite: _ember['default'].computed.alias('deploymentController.fullnameSatellite'),
    fullnameRhev: _ember['default'].computed.alias('deploymentController.fullnameRhev'),
    fullnameOpenStack: _ember['default'].computed.alias('deploymentController.fullnameOpenStack'),
    fullnameCloudForms: _ember['default'].computed.alias('deploymentController.fullnameCloudForms'),
    fullnameOpenShift: _ember['default'].computed.alias('deploymentController.fullnameOpenShift'),

    isRhev: _ember['default'].computed.alias("deploymentController.model.deploy_rhev"),
    isOpenStack: _ember['default'].computed.alias("deploymentController.model.deploy_openstack"),
    isCloudForms: _ember['default'].computed.alias("deploymentController.model.deploy_cfme"),
    isOpenShift: _ember['default'].computed.alias("deploymentController.model.deploy_openshift"),
    isSubscriptions: _ember['default'].computed.alias("deploymentController.model.isSubscriptions")
  });
});
define('fusor-ember-cli/mixins/needs-deployment-new-mixin', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Mixin.create({

    deploymentNewController: _ember['default'].inject.controller('deployment-new'),
    applicationController: _ember['default'].inject.controller('application'),

    isStarted: _ember['default'].computed.alias("deploymentNewController.isStarted"),
    isNotStarted: _ember['default'].computed.alias("deploymentNewController.isNotStarted"),

    isNew: true,

    deploymentName: _ember['default'].computed.alias("deploymentNewController.model.name")

  });
});
define('fusor-ember-cli/mixins/needs-discovered-hosts-ajax', ['exports', 'ember', 'ic-ajax'], function (exports, _ember, _icAjax) {
  exports['default'] = _ember['default'].Mixin.create({
    postDiscoveredHostIds: function postDiscoveredHostIds(deployment, hypervisorIds) {
      var token = _ember['default'].$('meta[name="csrf-token"]').attr('content');
      return (0, _icAjax['default'])({
        url: '/fusor/api/v21/deployments/' + deployment.get('id'),
        type: 'PUT',
        data: JSON.stringify({ 'deployment': { 'discovered_host_ids': hypervisorIds } }),
        headers: {
          'Accept': 'application/json',
          'Content-Type': 'application/json',
          'X-CSRF-Token': token
        }
      }).then(function () {
        return deployment.reload();
      }); // Reload to update models
    }
  });
});
define('fusor-ember-cli/mixins/needs-existing-manifest-helpers', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Mixin.create({
    shouldUseExistingManifest: function shouldUseExistingManifest() {
      var orgId = this.modelFor('deployment').get('organization.id');
      var modelUpstreamConsumerUuid = this.modelFor('deployment').get('upstream_consumer_uuid');
      var hasModelUpstreamConsumerUuid = _ember['default'].isPresent(modelUpstreamConsumerUuid);

      return new _ember['default'].RSVP.Promise(function (res, rej) {
        var url = '/katello/api/v2/organizations/' + orgId + '/subscriptions';
        _ember['default'].$.getJSON(url).then(function (response) {

          var satManifestExists = response.results.filter(function (sub) {
            return sub.name !== 'Fusor';
          }).length > 0;

          res(satManifestExists);
        }, function () {
          return rej(false);
        });
      });
    },

    loadSubscriptions: function loadSubscriptions() {
      var orgId = this.modelFor('deployment').get('organization.id');
      var subsUrl = '/katello/api/v2/organizations/' + orgId + '/subscriptions';
      return new _ember['default'].RSVP.Promise(function (res, rej) {
        _ember['default'].$.getJSON(subsUrl).then(function (response) {
          if (_ember['default'].isNone(response.results)) {
            res(_ember['default'].A());
          } else {
            var subs = _ember['default'].A(response.results).filter(function (sub) {
              return sub.name !== 'Fusor';
            }).map(function (sub) {
              return _ember['default'].Object.create({
                product_name: sub.name,
                contract_number: sub.contract_number,
                start_date: sub.start_date,
                end_date: sub.end_date,
                quantity_attached: sub.quantity
              });
            });
            res(subs);
          }
        }, function (err) {
          console.log('ERROR: Something went wrong loading subscription info ' + 'during existing manifest load!');
          rej(err);
        });
      });
    }
  });
});
define('fusor-ember-cli/mixins/openshift-mixin', ['exports', 'ember', 'fusor-ember-cli/mixins/needs-deployment-mixin', 'fusor-ember-cli/utils/validators'], function (exports, _ember, _fusorEmberCliMixinsNeedsDeploymentMixin, _fusorEmberCliUtilsValidators) {
  exports['default'] = _ember['default'].Mixin.create(_fusorEmberCliMixinsNeedsDeploymentMixin['default'], {

    deployment: _ember['default'].computed.alias('deploymentController.model'),
    openshiftInstallLoc: _ember['default'].computed.alias("deployment.openshift_install_loc"),
    cfmeInstallLoc: _ember['default'].computed.alias("deployment.cfme_install_loc"),
    isRhev: _ember['default'].computed.alias("deployment.deploy_rhev"),
    isOpenStack: _ember['default'].computed.alias("deployment.deploy_openstack"),
    isCloudForms: _ember['default'].computed.alias("deployment.deploy_cfme"),

    positiveIntegerValidator: _fusorEmberCliUtilsValidators.AllValidator.create({
      validators: [_fusorEmberCliUtilsValidators.IntegerValidator.create({}), _fusorEmberCliUtilsValidators.NumberValidator.create({ min: 1 })]
    }),

    numNodes: _ember['default'].computed.alias("deployment.numNodes"),
    numNodesDisplay: _ember['default'].computed('numNodes', 'positiveIntegerValidator', function () {
      var numNodes = this.get('numNodes');
      var validator = this.get('positiveIntegerValidator');
      return validator.isValid(numNodes) ? numNodes : '?';
    }),

    numMasterNodes: _ember['default'].computed.alias("deployment.openshift_number_master_nodes"),
    numWorkerNodes: _ember['default'].computed.alias("deployment.openshift_number_worker_nodes"),

    storageSize: _ember['default'].computed.alias("deployment.openshift_storage_size"),

    masterVcpu: _ember['default'].computed.alias("deployment.openshift_master_vcpu"),
    workerVcpu: _ember['default'].computed.alias("deployment.openshift_node_vcpu"),
    cfmeVcpu: _ember['default'].computed.alias("deployment.cloudforms_vcpu"),

    masterRam: _ember['default'].computed.alias("deployment.openshift_master_ram"),
    workerRam: _ember['default'].computed.alias("deployment.openshift_node_ram"),
    cfmeRam: _ember['default'].computed.alias("deployment.cloudforms_ram"),

    masterDisk: _ember['default'].computed.alias("deployment.openshift_master_disk"),
    workerDisk: _ember['default'].computed.alias("deployment.openshift_node_disk"),
    cfmeDisk: _ember['default'].computed.alias("deployment.cfmeDisk"),

    totalMasterCpus: _ember['default'].computed('numMasterNodes', 'masterVcpu', function () {
      return this.get('numMasterNodes') * this.get('masterVcpu');
    }),

    totalWorkerCpus: _ember['default'].computed('numWorkerNodes', 'workerVcpu', function () {
      return this.get('numWorkerNodes') * this.get('workerVcpu');
    }),

    totalMasterRam: _ember['default'].computed('numMasterNodes', 'masterRam', function () {
      return this.get('numMasterNodes') * this.get('masterRam');
    }),

    totalWorkerRam: _ember['default'].computed('numWorkerNodes', 'workerRam', function () {
      return this.get('numWorkerNodes') * this.get('workerRam');
    }),

    totalMasterDisk: _ember['default'].computed('numMasterNodes', 'masterDisk', function () {
      return this.get('numMasterNodes') * this.get('masterDisk');
    }),

    totalWorkerDisk: _ember['default'].computed('numWorkerNodes', 'workerDisk', function () {
      return this.get('numWorkerNodes') * this.get('workerDisk');
    }),

    totalWorkerStorage: _ember['default'].computed('numWorkerNodes', 'storageSize', function () {
      return this.get('numWorkerNodes') * this.get('storageSize');
    }),

    totalWorkerDiskPlusStorage: _ember['default'].computed('totalWorkerDisk', 'totalWorkerStorage', function () {
      return this.get('totalWorkerDisk') + this.get('totalWorkerStorage');
    }),

    ignoreCfme: _ember['default'].computed("isCloudForms", "isRhev", "isOpenStack", "openshiftInstallLoc", "cfmeInstallLoc", function () {
      // ignore if CFME is not selected OR if both RHEV and OSP are selected
      // but locations of CFME and OSE are different
      return !this.get('isCloudForms') || this.get('isRhev') && this.get('isOpenStack') && (this.get('openshiftInstallLoc') === 'RHEV' && this.get('cfmeInstallLoc') === 'OpenStack' || this.get('openshiftInstallLoc') === 'OpenStack' && this.get('cfmeInstallLoc') === 'RHEV');
    }),
    substractCfme: _ember['default'].computed.not('ignoreCfme'),

    diskAvailableMinusCfme: _ember['default'].computed("deployment.openshift_available_disk", "cfmeDisk", function () {
      var rawDisk = this.get("deployment.openshift_available_disk") - this.get("cfmeDisk");
      return Math.floor(rawDisk * 100) / 100;
    }),

    diskAvailable: _ember['default'].computed("deployment.openshift_available_disk", "ignoreCfme", "diskAvailableMinusCfme", function () {
      if (this.get('ignoreCfme')) {
        return this.get('deployment.openshift_available_disk');
      } else {
        return this.get('diskAvailableMinusCfme');
      }
    }),

    ramAvailableMinusCfme: _ember['default'].computed("deployment.openshift_available_ram", "deployment.cloudforms_ram", function () {
      var rawVal = this.get("deployment.openshift_available_ram") - this.get("deployment.cloudforms_ram");
      return Math.floor(rawVal * 100) / 100; // Make sure to truncate since we can get some weird fp nums
    }),

    ramAvailable: _ember['default'].computed("deployment.openshift_available_ram", "ignoreCfme", "ramAvailableMinusCfme", function () {
      if (this.get('ignoreCfme')) {
        return this.get('deployment.openshift_available_ram');
      } else {
        return this.get('ramAvailableMinusCfme');
      }
    }),

    vcpuAvailableMinusCfme: _ember['default'].computed("deployment.openshift_available_vcpu", "deployment.cloudforms_vcpu", function () {
      return this.get("deployment.openshift_available_vcpu") - this.get("deployment.cloudforms_vcpu");
    }),

    vcpuAvailable: _ember['default'].computed("deployment.openshift_available_vcpu", "ignoreCfme", "vcpuAvailableMinusCfme", function () {
      if (this.get('ignoreCfme')) {
        return this.get('deployment.openshift_available_vcpu');
      } else {
        return this.get('vcpuAvailableMinusCfme');
      }
    }),

    vcpuNeeded: _ember['default'].computed('numMasterNodes', 'numWorkerNodes', 'masterVcpu', 'workerVcpu', 'totalMasterCpus', 'totalWorkerCpus', function () {
      if (this.get('numMasterNodes') > 0 && this.get('masterVcpu') > 0 && this.get('numWorkerNodes') >= 0 && this.get('workerVcpu') > 0) {
        return this.get('totalMasterCpus') + this.get('totalWorkerCpus');
      } else {
        return 0;
      }
    }),

    ramNeeded: _ember['default'].computed('numMasterNodes', 'numWorkerNodes', 'masterRam', 'workerRam', 'totalMasterRam', 'totalWorkerRam', function () {
      if (this.get('numMasterNodes') > 0 && this.get('masterRam') > 0 && this.get('numWorkerNodes') >= 0 && this.get('workerRam') > 0) {
        return this.get('totalMasterRam') + this.get('totalWorkerRam');
      } else {
        return 0;
      }
    }),

    diskNeeded: _ember['default'].computed('numMasterNodes', 'masterDisk', 'numWorkerNodes', 'workerDisk', 'storageSize', 'totalMasterDisk', 'totalWorkerDiskPlusStorage', function () {
      var hasMasterDisk = this.get('numMasterNodes') > 0 && this.get('masterDisk') > 0;
      var hasWorkerDiskPlusStorage = this.get('numWorkerNodes') >= 0 && this.get('workerDisk') > 0 && this.get('storageSize') > 0;
      var shouldPerformDiskCalc = hasMasterDisk && hasWorkerDiskPlusStorage;

      return shouldPerformDiskCalc ? this.get('totalMasterDisk') + this.get('totalWorkerDiskPlusStorage') : 0;
    }),

    isOverCapacityVcpu: _ember['default'].computed('vcpuNeeded', 'vcpuAvailable', function () {
      return this.get('vcpuNeeded') > this.get('vcpuAvailable');
    }),
    isOverCapacityRam: _ember['default'].computed('ramNeeded', 'ramAvailable', function () {
      return this.get('ramNeeded') > this.get('ramAvailable');
    }),
    isOverCapacityDisk: _ember['default'].computed('diskNeeded', 'diskAvailable', function () {
      return this.get('diskNeeded') > this.get('diskAvailable');
    }),

    errorTypes: _ember['default'].computed('isOverCapacityVcpu', 'isOverCapacityRam', 'isOverCapacityDisk', function () {
      var errorTypes = [];
      if (this.get('isOverCapacityVcpu')) {
        errorTypes.push('CPU');
      }
      if (this.get('isOverCapacityRam')) {
        errorTypes.push('RAM');
      }
      if (this.get('isOverCapacityDisk')) {
        errorTypes.push('Disk');
      }
      return errorTypes.join(', ');
    }),

    isError: _ember['default'].computed('isOverCapacityVcpu', 'isOverCapacityRam', 'isOverCapacityDisk', function () {
      return this.get('isOverCapacityVcpu') || this.get('isOverCapacityRam') || this.get('isOverCapacityDisk');
    }),

    cfmeTooltipError: _ember['default'].computed('cfmeVcpu', 'cfmeRam', 'cfmeDisk', function () {
      return _ember['default'].Object.create({
        cpu: 'CloudForms has ' + this.get('cfmeVcpu') + ' reserved cpus',
        ram: 'CloudForms has reserved ' + this.get('cfmeRam') + ' GB of RAM',
        disk: 'CloudForms has reserved ' + this.get('cfmeDisk') + ' GB of disk'
      });
    })
  });
});
define('fusor-ember-cli/mixins/osp-node-form-mixin', ['exports', 'ember', 'fusor-ember-cli/utils/validators'], function (exports, _ember, _fusorEmberCliUtilsValidators) {
  exports['default'] = _ember['default'].Mixin.create({

    drivers: [{ label: 'Select a driver', value: null }, { label: 'IPMI Driver', value: 'pxe_ipmitool' }, { label: 'PXE + SSH', value: 'pxe_ssh' }],

    ipmiVendors: [{ label: 'Dell', value: 'dell' }],

    ipmiVendor: 'dell',

    virtVendors: [{ label: 'KVM', value: 'kvm' }],

    virtVendor: 'kvm',

    helpText: _ember['default'].Object.create({
      ipAddress: 'Address to the system that manages the nodes you want to register',
      driver: 'Type of power management interface that manages the nodes you want to register',
      username: 'Administrator username for the system that manages the nodes you want to register',
      password: 'Password for the system that manages the nodes you want to register'
    }),

    vendors: _ember['default'].computed('nodeInfo.driver', function () {
      switch (this.get('nodeInfo.driver')) {
        case 'pxe_ssh':
          return this.get('virtVendors');
        case 'pxe_ipmitool':
          return this.get('ipmiVendors');
        default:
          return [{ label: 'Select a vendor', value: null }];
      }
    }),

    manualMacAddressesValidator: _ember['default'].computed('ports', function () {
      var unavailableMacAddresses = this.getPortMacAddresses();

      return _fusorEmberCliUtilsValidators.Validator.create({
        isValid: function isValid(value) {
          if (_ember['default'].isBlank(value)) {
            return false;
          }

          var macArray = this.getMacAddressArray(value);
          var singleValidator = this.createSingleMacValidators(macArray);

          return macArray.every(function (macAddress) {
            return singleValidator.isValid(macAddress);
          });
        },

        getMessages: function getMessages(value) {
          if (_ember['default'].isBlank(value)) {
            return ['This field cannot be blank.'];
          }

          var macArray = this.getMacAddressArray(value);
          var singleValidator = this.createSingleMacValidators(macArray);
          var messages = [];

          macArray.forEach(function (macAddress) {
            var messagesForSingleMac = singleValidator.getMessages(macAddress);
            messagesForSingleMac.forEach(function (message) {
              messages.push(macAddress + ': ' + message);
            });
          });

          return messages.uniq();
        },

        createSingleMacValidators: function createSingleMacValidators(macAddressArray) {
          var existingValues = macAddressArray.concat(unavailableMacAddresses);

          return _fusorEmberCliUtilsValidators.AllValidator.create({
            validators: [_fusorEmberCliUtilsValidators.MacAddressValidator.create({}), _fusorEmberCliUtilsValidators.UniquenessValidator.create({ selfIncluded: true, existingValues: existingValues })]
          });
        },

        getMacAddressArray: function getMacAddressArray(macAddressesString) {
          if (_ember['default'].isBlank(macAddressesString)) {
            return [];
          }

          return macAddressesString.split('\n').filter(function (mac) {
            return _ember['default'].isPresent(mac);
          }).map(function (mac) {
            return mac.trim();
          });
        }
      });
    }),

    hostAddressValidator: _fusorEmberCliUtilsValidators.AllValidator.create({
      validators: [_fusorEmberCliUtilsValidators.PresenceValidator.create({}), _fusorEmberCliUtilsValidators.HostAddressValidator.create({})]
    }),

    newNodeVendorLabel: _ember['default'].computed('nodeInfo.driver', function () {
      if (this.get('nodeInfo.driver') === 'pxe_ipmitool') {
        return 'IPMI Vendor';
      }

      return 'Vendor';
    }),

    newNodeUsernameLabel: _ember['default'].computed('nodeInfo.driver', function () {
      switch (this.get('nodeInfo.driver')) {
        case 'pxe_ssh':
          return 'SSH User';
        case 'pxe_ipmitool':
          return 'IPMI User';
        default:
          return 'Username';
      }
    }),

    newNodePasswordLabel: _ember['default'].computed('nodeInfo.driver', function () {
      switch (this.get('nodeInfo.driver')) {
        case 'pxe_ssh':
          return 'SSH Password';
        case 'pxe_ipmitool':
          return 'IPMI Password';
        default:
          return 'Password';
      }
    }),

    isValidConnectionInfo: _ember['default'].computed('nodeInfo.driver', 'nodeInfo.address', 'nodeInfo.username', 'nodeInfo.password', function () {
      return _ember['default'].isPresent(this.get('nodeInfo.driver')) && _ember['default'].isPresent(this.get('nodeInfo.address')) && _ember['default'].isPresent(this.get('nodeInfo.username')) && _ember['default'].isPresent(this.get('nodeInfo.password')) && this.get('hostAddressValidator').isValid(this.get('nodeInfo.address'));
    }),

    isValidNewNodeManual: _ember['default'].computed('isNewNodeMethodManual', 'isValidConnectionInfo', 'manualMacAddresses', 'manualMacAddressesValidator', function () {
      var manualMacAddressesValidator = this.get('manualMacAddressesValidator');

      if (!manualMacAddressesValidator) {
        return false;
      }

      return this.get('isNewNodeMethodManual') && this.get('isValidConnectionInfo') && manualMacAddressesValidator.isValid(this.get('manualMacAddresses'));
    }),

    getPortMacAddresses: function getPortMacAddresses() {
      return this.get('ports') ? this.get('ports').map(function (port) {
        return port.address;
      }) : [];
    },

    prepManualNodeInfo: function prepManualNodeInfo() {
      var macAddressesArray = this.get('manualMacAddresses').split('\n').filter(function (mac) {
        return _ember['default'].isPresent(mac);
      }).map(function (mac) {
        return _ember['default'].Object.create({ value: mac.trim() });
      });

      this.get('nodeInfo').set('macAddresses', macAddressesArray);
    }
  });
});
define('fusor-ember-cli/mixins/pagination-controller-mixin', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Mixin.create({

    queryParams: ['search', 'page', 'sort_by', 'dir'],

    sortByDirection: _ember['default'].computed('dir', function () {
      if (this.get('dir') === 'DESC') {
        return 'ASC';
      } else {
        return 'DESC';
      }
    })

  });
});
define('fusor-ember-cli/mixins/pagination-route-mixin', ['exports', 'ember', 'lodash/lodash'], function (exports, _ember, _lodashLodash) {
  exports['default'] = _ember['default'].Mixin.create({

    queryParams: {
      search: {
        refreshModel: true
      },
      page: {
        refreshModel: true
      },
      sort_by: {
        refreshModel: true
      },
      dir: {
        refreshModel: true
      }
    }

  });
});
define('fusor-ember-cli/mixins/polling-promise-mixin', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Mixin.create({

    onPollInterval: 5000, //default of 5 seconds

    schedulePoll: function schedulePoll(fname) {
      var names = this.getNames(fname);
      var f = this.get(names.pollingFunction);
      var interval = _ember['default'].isPresent(this.get(names.interval)) ? this.get(names.interval) : this.get('onPollInterval');

      if (!f) {
        throw new Error('Polling function "' + names.pollingFunction + '" not found.');
      }

      if (this.get(names.started)) {
        _ember['default'].run.later(this, function () {
          var _this = this;

          f.apply(this).then(function () {
            _this.set(names.timer, _this.schedulePoll(names.pollingFunction));
          });
        }, interval);
      }
    },

    startPolling: function startPolling(fname) {
      var names = this.getNames(fname);

      this.set(names.started, true);
      this.set(names.timer, this.schedulePoll(names.pollingFunction));
    },

    stopPolling: function stopPolling(fname) {
      var names = this.getNames(fname);

      this.set(names.started, false);
      _ember['default'].run.cancel(this.get(names.timer));
    },

    getNames: function getNames(fname) {
      var functionName = fname || 'onPoll';

      return {
        pollingFunction: functionName,
        started: functionName + 'Started',
        timer: functionName + 'Timer',
        interval: functionName + 'Interval'
      };
    }

  });
});
define('fusor-ember-cli/mixins/progress-bar-mixin', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Mixin.create({

    intervalPolling: _ember['default'].computed(function () {
      return 5000; // Time between refreshing (in ms)
    }).readOnly(),

    scheduleNextRefresh: function scheduleNextRefresh(f) {
      return _ember['default'].run.later(this, function () {
        f.apply(this);
        this.set('timer', this.scheduleNextRefresh(f));
      }, this.get('intervalPolling'));
    },

    // executes `refreshModelOnRoute` for every intervalPolling.
    startPolling: function startPolling() {
      this.set('timer', this.scheduleNextRefresh(this.get('refreshModelOnRoute'))); //and then repeats
    },

    stopPolling: function stopPolling() {
      _ember['default'].run.cancel(this.get('timer'));
    },

    refreshModelOnRoute: function refreshModelOnRoute() {
      return this.send('refreshModelOnOverviewRoute');
    }

  });
});
define('fusor-ember-cli/mixins/start-controller-mixin', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Mixin.create({

    isUpstream: false,

    // declared in controllers, and not in mixin
    // isRhev
    // isOpenStack
    // isCloudForms

    // route of Next button. It will be overwrriten by active hook in routes/start.js and routes/deployment-new/start.js
    satelliteTabRouteName: null,

    // disable Next button if none selected
    disableNextOnStart: _ember['default'].computed('isRhev', 'isOpenStack', 'isCloudForms', 'isOpenShift', function () {
      return !(this.get('isRhev') || this.get('isOpenStack') || this.get('isCloudForms') || this.get('isOpenShift'));
    }),

    // names
    nameRHCI: _ember['default'].computed('isUpstream', function () {
      if (this.get('isUpstream')) {
        return "Fusor";
      } else {
        return "QCI";
      }
    }),

    nameRedHat: _ember['default'].computed('isUpstream', function () {
      if (this.get('isUpstream')) {
        return "";
      } else {
        return "Red Hat";
      }
    }),

    nameSatellite: _ember['default'].computed('isUpstream', function () {
      if (this.get('isUpstream')) {
        return "Foreman";
      } else {
        return "Satellite";
      }
    }),

    nameRhev: _ember['default'].computed('isUpstream', function () {
      if (this.get('isUpstream')) {
        return "oVirt";
      } else {
        return "RHV";
      }
    }),

    nameOpenStack: _ember['default'].computed('isUpstream', function () {
      if (this.get('isUpstream')) {
        return "RDO";
      } else {
        return "RHOSP";
      }
    }),

    nameCloudForms: _ember['default'].computed('isUpstream', function () {
      if (this.get('isUpstream')) {
        return "ManageIQ";
      } else {
        return "CloudForms";
      }
    }),

    nameOpenShift: "OpenShift",

    // TODO DRY names mixins
    fullnameRhev: _ember['default'].computed('isUpstream', function () {
      if (this.get('isUpstream')) {
        return "oVirt Project";
      } else {
        return "Red Hat Virtualization";
      }
    }),

    fullnameOpenStack: _ember['default'].computed('isUpstream', function () {
      if (this.get('isUpstream')) {
        return "RDO Project";
      } else {
        return "Red Hat OpenStack Platform";
      }
    }),

    fullnameCloudForms: _ember['default'].computed('isUpstream', function () {
      if (this.get('isUpstream')) {
        return "ManageIQ";
      } else {
        return "Red Hat CloudForms";
      }
    }),

    fullnameOpenShift: "OpenShift Enterprise by Red Hat"

  });
});
define('fusor-ember-cli/mixins/textarea-f-mixin', ['exports', 'ember', 'fusor-ember-cli/mixins/validated-input-mixin'], function (exports, _ember, _fusorEmberCliMixinsValidatedInputMixin) {
  exports['default'] = _ember['default'].Mixin.create(_fusorEmberCliMixinsValidatedInputMixin['default'], {

    numRows: _ember['default'].computed('rows', function () {
      return this.getWithDefault('rows', '2');
    }),

    numCols: _ember['default'].computed('cols', function () {
      return this.getWithDefault('cols', '20');
    }),

    spellcheckEnabled: _ember['default'].computed('spellcheck', function () {
      return this.getWithDefault('spellcheck', true);
    })
  });
});
define('fusor-ember-cli/mixins/tr-engine-hypervisor-mixin', ['exports', 'ember', 'ic-ajax'], function (exports, _ember, _icAjax) {
  exports['default'] = _ember['default'].Mixin.create({

    tagName: 'tr',

    classNameBindings: ['bgColor'],

    bgColor: _ember['default'].computed('isChecked', function () {
      if (this.get('isChecked')) {
        return 'white-on-blue';
      }
    }),

    cssHostHostId: _ember['default'].computed('host.id', function () {
      return 'host_' + this.get('host.id');
    }),

    cssIdHostId: _ember['default'].computed('host.id', function () {
      return 'select_rhev_id_' + this.get('host.id');
    }),

    selectedIds: _ember['default'].computed('model.[]', function () {
      if (this.get('model')) {
        return this.get('model').getEach("id");
      }
    }),

    isInvalidHostname: _ember['default'].computed('host.name', function () {
      // HOST_REGEXP taken from Foreman code HOST_REGEXP in file /lib/net/validations.rb
      // But replaced /A with ^ and /z with $
      var hostnameRegex = new RegExp(/^(([a-z0-9]|[a-z0-9][a-z0-9\-]*[a-z0-9])\.)*([a-z0-9]|[a-z0-9][a-z0-9\-]*[a-z0-9])$/);
      var invalidHostname = _ember['default'].isEmpty(this.get('host.name').match(hostnameRegex));

      this.sendAction('setIfHostnameInvalid', invalidHostname, this.get('host.id'));

      return invalidHostname;
    }),
    isValidHostname: _ember['default'].computed.not('isInvalidHostname'),

    actions: {
      saveHostname: function saveHostname() {
        var host = this.get('host');
        var self = this;
        var token = _ember['default'].$('meta[name="csrf-token"]').attr('content');
        if (this.get('isValidHostname')) {
          (0, _icAjax['default'])({
            url: '/api/v21/discovered_hosts/' + host.get('id') + '/rename',
            type: "PUT",
            data: JSON.stringify({ 'discovered_host': { 'name': host.get('name') } }),
            headers: {
              "Accept": "application/json",
              "Content-Type": "application/json",
              "X-CSRF-Token": token,
              "Authorization": "Basic " + self.get('session.basicAuthToken')
            }
          }).then(function (response) {
            self.sendAction('setIfHostnameInvalid', false, host.get('id'));
          }, function (error) {
            console.log(error);
          });
        } else {
          this.sendAction('setIfHostnameInvalid', true, host.get('id'));
        }
      }
    }

  });
});
define('fusor-ember-cli/mixins/uses-ose-defaults', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Mixin.create({
    shouldUseOseDefault: function shouldUseOseDefault(value) {
      return _ember['default'].isBlank(value) || value <= 0;
    }
  });
});
define('fusor-ember-cli/mixins/validated-input-mixin', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Mixin.create({

    didInsertElement: function didInsertElement() {
      var _this = this;

      var resetErrorsMessageKey = this.get('resetErrorsMessageKey');
      if (resetErrorsMessageKey) {
        this.eventBus.on(resetErrorsMessageKey, function () {
          return _this.send('resetValidationErrors');
        });
      }
    },
    willClearRender: function willClearRender() {
      var resetErrorsMessageKey = this.get('resetErrorsMessageKey');
      if (resetErrorsMessageKey) {
        this.eventBus.off(resetErrorsMessageKey);
      }
    },

    validIsRequiredAndBlank: _ember['default'].computed('value', 'isRequired', function () {
      return this.get('isRequired') && _ember['default'].isBlank(this.get('value'));
    }),

    isValid: _ember['default'].computed('value', 'validator', 'errors.name', 'validIsRequiredAndBlank', function () {
      if (_ember['default'].isPresent(this.get('errors.name')) || this.get('validIsRequiredAndBlank')) {
        return false;
      }

      var validator = this.get('validator');
      return validator ? validator.isValid(this.get('value')) : true;
    }),

    isInvalid: _ember['default'].computed.not('isValid'),

    hasError: _ember['default'].computed('showValidationError', 'errors.name', 'isInvalid', function () {
      return this.get('showValidationError') && this.get('isInvalid');
    }),

    validationMessages: _ember['default'].computed('value', 'validator', 'validIsRequiredAndBlank', function () {
      if (this.get('validIsRequiredAndBlank')) {
        return ['This field cannot be blank.'];
      }

      var validator = this.get('validator');
      return validator ? validator.getMessages(this.get('value')) : [];
    }),

    actions: {
      // this action is triggered on focus-out
      showValidationErrors: function showValidationErrors() {
        this.set("showValidationError", true);
      },

      // this action is triggered on key-down. it cancels any existing time
      // and sets new timer of 1 second until showing any validation errors
      showValidationErrorsKeyDown: function showValidationErrorsKeyDown() {
        var _this2 = this;

        var showValidationTimer = this.get('showValidationTimer');

        if (showValidationTimer) {
          _ember['default'].run.cancel(showValidationTimer);
        }

        this.set("showValidationError", false);
        showValidationTimer = _ember['default'].run.later(function () {
          return _this2.set("showValidationError", true);
        }, 1000);
        this.set('showValidationTimer', showValidationTimer);
      },

      resetValidationErrors: function resetValidationErrors() {
        this.set("showValidationError", false);
      }
    }
  });
});
define('fusor-ember-cli/mixins/validated-model-mixin', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Mixin.create({
    validate: function validate() {
      if (arguments.length <= 0) {
        return this.validateAll();
      }

      for (var i = 0; i < arguments.length; i++) {
        if (!this.validateField(arguments[i])) {
          return false;
        }
      }

      return true;
    },

    validateField: function validateField(fieldName) {
      var validation = this.get('validations').get(fieldName);
      return validation ? validation.isValid(this.get(fieldName)) : true;
    },

    validateAll: function validateAll() {
      var validations = this.get('validations');

      if (_ember['default'].isEmpty(validations)) {
        return true;
      }

      for (var fieldName in validations) {
        if (validations.hasOwnProperty(fieldName) && !this.validateField(fieldName)) {
          return false;
        }
      }

      return true;
    }
  });
});
define('fusor-ember-cli/mixins/validates-deployment-name-mixin', ['exports', 'ember', 'fusor-ember-cli/utils/validators'], function (exports, _ember, _fusorEmberCliUtilsValidators) {
  exports['default'] = _ember['default'].Mixin.create({
    applicationController: _ember['default'].inject.controller('application'),
    deployments: _ember['default'].computed.alias('applicationController.model'),

    deploymentNameValidator: _ember['default'].computed('deployments', 'model.id', function () {
      var otherNames = [],
          otherLabels = [],
          deploymentId = this.get('model.id');

      this.get('deployments').forEach(function (otherDeployment) {
        var otherDeploymentId = otherDeployment.get('id');

        if (otherDeploymentId && deploymentId !== otherDeploymentId) {
          otherNames.pushObject(otherDeployment.get('name'));
          otherLabels.pushObject(otherDeployment.get('label'));
        }
      });

      var LabelValidator = _fusorEmberCliUtilsValidators.UniquenessValidator.extend({
        isValid: function isValid(value) {
          return this._super(this.labelize(value));
        },

        labelize: function labelize(value) {
          return _ember['default'].isPresent(value) ? value.trim().replace(/([^a-z0-9_])/gi, '_') : '';
        },

        getMessages: function getMessages(value) {
          if (this.isValid(value)) {
            return [];
          }
          return ['generated label "' + this.labelize(value) + '" is not unique'];
        }
      });

      return _fusorEmberCliUtilsValidators.AllValidator.create({
        validators: [_fusorEmberCliUtilsValidators.PresenceValidator.create({}), _fusorEmberCliUtilsValidators.UniquenessValidator.create({ existingValues: otherNames }), _fusorEmberCliUtilsValidators.LengthValidator.create({ max: 64 }), LabelValidator.create({ existingValues: otherLabels })]
      });
    })
  });
});
define('fusor-ember-cli/models/base/base-discovered-host', ['exports', 'ember-data'], function (exports, _emberData) {
  exports['default'] = _emberData['default'].Model.extend({
    name: _emberData['default'].attr('string'),
    ip: _emberData['default'].attr('string'),
    mac: _emberData['default'].attr('string'),
    memory: _emberData['default'].attr('number'),
    disk_count: _emberData['default'].attr('number'),
    disks_size: _emberData['default'].attr('number'),
    cpus: _emberData['default'].attr('number'),
    memory_human_size: _emberData['default'].attr('string'),
    disks_human_size: _emberData['default'].attr('string'),
    subnet_to_s: _emberData['default'].attr('string'),
    is_virtual: _emberData['default'].attr('boolean'),

    type: _emberData['default'].attr('string'),
    is_managed: _emberData['default'].attr('boolean'),
    is_discovered: _emberData['default'].attr('boolean'),

    created_at: _emberData['default'].attr('date'),
    updated_at: _emberData['default'].attr('date'),

    environment_name: _emberData['default'].attr('string'),
    hostgroup_name: _emberData['default'].attr('string'),
    compute_resource_name: _emberData['default'].attr('string'),
    domain_name: _emberData['default'].attr('string')
  });
});
define('fusor-ember-cli/models/consumer', ['exports', 'ember-data'], function (exports, _emberData) {
  exports['default'] = _emberData['default'].Model.extend({
    name: _emberData['default'].attr('string'),
    type: _emberData['default'].attr('string'),
    entitlementCount: _emberData['default'].attr('number'),
    uuid: _emberData['default'].attr('string')
  });
});
define('fusor-ember-cli/models/coordinator', ['exports', 'ember', 'fusor-ember-cli/models/obj-hash'], function (exports, _ember, _fusorEmberCliModelsObjHash) {
  exports['default'] = _ember['default'].Object.extend(_ember['default'].Evented, {
    objectMap: _ember['default'].computed(function () {
      return _fusorEmberCliModelsObjHash['default'].create();
    }),

    getObject: function getObject(id, ops) {
      ops = ops || {};
      var payload = this.get('objectMap').getObj(id);

      if (payload.ops.source) {
        payload.ops.source.sendAction('action', payload.obj);
      }

      if (payload.ops.target) {
        payload.ops.target.sendAction('action', payload.obj);
      }

      this.trigger("objectMoved", { obj: payload.obj, source: payload.ops.source, target: ops.target });

      return payload.obj;
    },

    setObject: function setObject(obj, ops) {
      ops = ops || {};
      return this.get('objectMap').add({ obj: obj, ops: ops });
    }
  });
});
define('fusor-ember-cli/models/deployment-plan', ['exports', 'ember', 'ember-data'], function (exports, _ember, _emberData) {
  exports['default'] = _emberData['default'].Model.extend({
    name: _emberData['default'].attr('string'),
    parameters: _emberData['default'].attr(),
    roles: _emberData['default'].attr(),

    getParam: function getParam(fieldName) {
      return this.get('parameters')[fieldName];
    },

    getParamValue: function getParamValue(fieldName) {
      var param = this.getParam(fieldName);
      return param ? param.Default : undefined;
    }
  });
});
define('fusor-ember-cli/models/deployment', ['exports', 'ember-data', 'ember', 'fusor-ember-cli/mixins/uses-ose-defaults', 'ic-ajax'], function (exports, _emberData, _ember, _fusorEmberCliMixinsUsesOseDefaults, _icAjax) {
  exports['default'] = _emberData['default'].Model.extend(_fusorEmberCliMixinsUsesOseDefaults['default'], {
    name: _emberData['default'].attr('string'),
    label: _emberData['default'].attr('string'),
    description: _emberData['default'].attr('string'),
    organization: _emberData['default'].belongsTo('organization', { async: true }),
    lifecycle_environment: _emberData['default'].belongsTo('lifecycle-environment', { async: true }),

    deploy_rhev: _emberData['default'].attr('boolean'),
    deploy_cfme: _emberData['default'].attr('boolean'),
    deploy_openstack: _emberData['default'].attr('boolean'),
    deploy_openshift: _emberData['default'].attr('boolean'),

    is_disconnected: _emberData['default'].attr('boolean'),
    has_content_error: _emberData['default'].attr('boolean'),
    rhev_is_self_hosted: _emberData['default'].attr('boolean'),

    rhev_engine_admin_password: _emberData['default'].attr('string'),
    rhev_data_center_name: _emberData['default'].attr('string'),
    rhev_cluster_name: _emberData['default'].attr('string'),
    rhev_storage_name: _emberData['default'].attr('string'),
    rhev_storage_type: _emberData['default'].attr('string'),
    rhev_storage_address: _emberData['default'].attr('string'),
    rhev_cpu_type: _emberData['default'].attr('string'),
    rhev_share_path: _emberData['default'].attr('string'),

    cfme_install_loc: _emberData['default'].attr('string'),

    rhev_root_password: _emberData['default'].attr('string'),
    cfme_root_password: _emberData['default'].attr('string'),
    cfme_admin_password: _emberData['default'].attr('string'),
    cfme_db_password: _emberData['default'].attr('string'),

    foreman_task_uuid: _emberData['default'].attr('string'),
    upstream_consumer_uuid: _emberData['default'].attr('string'),
    upstream_consumer_name: _emberData['default'].attr('string'),

    rhev_export_domain_name: _emberData['default'].attr('string'),
    rhev_export_domain_address: _emberData['default'].attr('string'),
    rhev_export_domain_path: _emberData['default'].attr('string'),

    hosted_storage_name: _emberData['default'].attr('string'),
    hosted_storage_address: _emberData['default'].attr('string'),
    hosted_storage_path: _emberData['default'].attr('string'),

    rhev_local_storage_path: _emberData['default'].attr('string'),

    host_naming_scheme: _emberData['default'].attr('string'),
    custom_preprend_name: _emberData['default'].attr('string'),
    enable_access_insights: _emberData['default'].attr('boolean'),
    cfme_address: _emberData['default'].attr('string'),
    cfme_hostname: _emberData['default'].attr('string'),

    cdn_url: _emberData['default'].attr('string'),
    manifest_file: _emberData['default'].attr('string'),

    openshift_install_loc: _emberData['default'].attr('string'),

    openshift_number_master_nodes: _emberData['default'].attr('number'),
    openshift_number_worker_nodes: _emberData['default'].attr('number'),

    numNodes: _ember['default'].computed('openshift_number_master_nodes', 'openshift_number_worker_nodes', function () {
      var masterNodes = parseInt(this.get('openshift_number_master_nodes'));
      var workerNodes = parseInt(this.get('openshift_number_worker_nodes'));
      return masterNodes + workerNodes;
    }),

    openshift_storage_size: _emberData['default'].attr('number'),
    openshift_username: _emberData['default'].attr('string'),
    openshift_user_password: _emberData['default'].attr('string'),
    openshift_root_password: _emberData['default'].attr('string'),
    openshift_master_vcpu: _emberData['default'].attr('number'),
    openshift_master_ram: _emberData['default'].attr('number'),
    openshift_master_disk: _emberData['default'].attr('number'),
    openshift_node_vcpu: _emberData['default'].attr('number'),
    openshift_node_ram: _emberData['default'].attr('number'),
    openshift_node_disk: _emberData['default'].attr('number'),
    openshift_available_vcpu: _emberData['default'].attr('number'),
    openshift_available_ram: _emberData['default'].attr('number'),
    openshift_available_disk: _emberData['default'].attr('number'),
    openshift_storage_type: _emberData['default'].attr('string'),
    openshift_storage_host: _emberData['default'].attr('string'),
    openshift_export_path: _emberData['default'].attr('string'),
    openshift_subdomain_name: _emberData['default'].attr('string'),
    openshift_sample_helloworld: _emberData['default'].attr('boolean'),

    openshift_hosts: _emberData['default'].hasMany('openshift-host', { async: true }),
    openshift_master_hosts: _ember['default'].computed('openshift_hosts', function () {
      var regexFilter = /ose-master\d+\./;
      return this.get('openshift_hosts').filter(function (host) {
        return regexFilter.test(host.get('name'));
      });
    }),

    openshift_worker_hosts: _ember['default'].computed('openshift_hosts', function () {
      var regexFilter = /ose-node\d+\./;
      return this.get('openshift_hosts').filter(function (host) {
        return regexFilter.test(host.get('name'));
      });
    }),

    cloudforms_vcpu: _emberData['default'].attr('number'),
    cloudforms_ram: _emberData['default'].attr('number'),
    cloudforms_vm_disk_size: _emberData['default'].attr('number'),
    cloudforms_db_disk_size: _emberData['default'].attr('number'),

    cfmeDisk: _ember['default'].computed('cloudforms_vm_disk_size', 'cloudforms_db_disk_size', function () {
      return this.get('cloudforms_vm_disk_size') + this.get('cloudforms_db_disk_size');
    }),

    created_at: _emberData['default'].attr('date'),
    updated_at: _emberData['default'].attr('date'),

    // has one Engine - discovered_host is an alias for rhev_engine_host_id
    discovered_host: _emberData['default'].belongsTo('discovered-host', { async: true }),
    rhev_engine_host_id: _emberData['default'].attr('number'),

    // has many Hypervisors
    discovered_hosts: _emberData['default'].hasMany('discovered-host', { async: true }),

    // has many Subscriptions
    subscriptions: _emberData['default'].hasMany('subscription', { inverse: 'deployment', async: true }),
    introspection_tasks: _emberData['default'].hasMany('introspection-task', { async: true }),

    // has one foreman_task
    foreman_task: _emberData['default'].belongsTo('foreman-task', { async: true }),

    openstack_deployment: _emberData['default'].belongsTo('openstack-deployment', { async: true }),

    // Ember Data doesn't have DS.attr('array') so I did this
    rhev_hypervisor_host_ids: _ember['default'].computed('discovered_hosts', function () {
      var discovered_hosts = this.get('discovered_hosts');
      if (_ember['default'].isPresent(discovered_hosts)) {
        return discovered_hosts.getEach('id');
      } else {
        return [];
      }
    }),

    // controller.deployment.isStarted returns false if refreshing child route,
    // so best to have it on model as well
    isStarted: _ember['default'].computed('foreman_task_uuid', function () {
      return _ember['default'].isPresent(this.get('foreman_task_uuid'));
    }),
    isNotStarted: _ember['default'].computed.not('isStarted'),

    // also put these in model rather than controller so it is accessible
    progress: null,
    state: null,

    isComplete: _ember['default'].computed('progress', function () {
      return this.get('progress') === '1';
    }),

    isInProgress: _ember['default'].computed('isStarted', 'isComplete', function () {
      return this.get('isStarted') && !this.get('isComplete');
    }),

    setProgress: _ember['default'].observer('foreman_task', 'foreman_task_uuid', function () {
      var self = this;
      if (this.get('foreman_task')) {
        this.get('foreman_task').then((function (result) {
          if (result) {
            self.set('progress', result.get('progress'));
            self.set('state', result.get('state'));
          }
        }).bind(this));
      }
    }),

    trimFieldsForSave: function trimFieldsForSave() {
      this.set('rhev_storage_name', this.get('rhev_storage_name') ? this.get('rhev_storage_name').trim() : null);
      this.set('rhev_storage_address', this.get('rhev_storage_address') ? this.get('rhev_storage_address').trim() : null);
      this.set('rhev_share_path', this.get('rhev_share_path') ? this.get('rhev_share_path').trim() : null);
      this.set('rhev_export_domain_name', this.get('rhev_export_domain_name') ? this.get('rhev_export_domain_name').trim() : null);
      this.set('rhev_export_domain_address', this.get('rhev_export_domain_address') ? this.get('rhev_export_domain_address').trim() : null);
      this.set('rhev_export_domain_path', this.get('rhev_export_domain_path') ? this.get('rhev_export_domain_path').trim() : null);
      this.set('hosted_storage_name', this.get('hosted_storage_name') ? this.get('hosted_storage_name').trim() : null);
      this.set('hosted_storage_address', this.get('hosted_storage_address') ? this.get('hosted_storage_address').trim() : null);
      this.set('hosted_storage_path', this.get('hosted_storage_path') ? this.get('hosted_storage_path').trim() : null);
      this.set('openshift_storage_host', this.get('openshift_storage_host') ? this.get('openshift_storage_host').trim() : null);
      this.set('openshift_export_path', this.get('openshift_export_path') ? this.get('openshift_export_path').trim() : null);
      this.set('openshift_subdomain_name', this.get('openshift_subdomain_name') ? this.get('openshift_subdomain_name').trim() : null);
    },

    progressPercent: _ember['default'].computed('progress', function () {
      if (this.get('progress')) {
        return (this.get('progress') * 100).toFixed(1) + '%';
      }
    }),

    handleReset: function handleReset(shouldReset, prop) {
      if (shouldReset) {
        this.set(prop, null);
      }
    },

    setOpenshiftDefault: function setOpenshiftDefault(prop, value) {
      if (this.shouldUseOseDefault(this.get(prop))) {
        this.set(prop, value);
      }
    },

    loadOpenshiftDefaults: function loadOpenshiftDefaults(settings, opt) {
      var _this = this;

      if (this.get('deploy_openshift')) {
        (function () {
          var shouldReset = opt && (opt.reset || false);

          ['openshift_master_vcpu', 'openshift_master_ram', 'openshift_master_disk', 'openshift_node_vcpu', 'openshift_node_ram', 'openshift_node_disk'].forEach(function (prop) {
            _this.handleReset(shouldReset, prop);
            _this.setOpenshiftDefault(prop, settings.findBy('name', prop).value);
          });

          _this.handleReset(shouldReset, 'openshift_number_master_nodes');
          _this.handleReset(shouldReset, 'openshift_number_worker_nodes');
          _this.handleReset(shouldReset, 'openshift_storage_size');

          _this.setOpenshiftDefault('openshift_number_master_nodes', 1);
          _this.setOpenshiftDefault('openshift_number_worker_nodes', 1);
          _this.setOpenshiftDefault('openshift_storage_size', 30);
        })();
      }
    },

    loadCloudformsDefaults: function loadCloudformsDefaults(settings, opt) {
      var _this2 = this;

      if (this.get('deploy_cfme')) {
        var shouldReset = opt && (opt.reset || false);

        ['cloudforms_vcpu', 'cloudforms_ram', 'cloudforms_vm_disk_size', 'cloudforms_db_disk_size'].forEach(function (prop) {
          _this2.set(prop, settings.findBy('name', prop).value);
        });
      }
    }
  });
});
define('fusor-ember-cli/models/discovered-host', ['exports', 'fusor-ember-cli/models/base/base-discovered-host'], function (exports, _fusorEmberCliModelsBaseBaseDiscoveredHost) {
  exports['default'] = _fusorEmberCliModelsBaseBaseDiscoveredHost['default'].extend({});
});
define('fusor-ember-cli/models/domain', ['exports', 'ember-data'], function (exports, _emberData) {
  exports['default'] = _emberData['default'].Model.extend({
    name: _emberData['default'].attr('string'),
    fullname: _emberData['default'].attr('string'),
    dns_id: _emberData['default'].attr('number'),
    total_hosts: _emberData['default'].attr('number'),
    hostgroups_count: _emberData['default'].attr('number'),
    created_at: _emberData['default'].attr('date'),
    updated_at: _emberData['default'].attr('date'),
    hostgroups: _emberData['default'].hasMany('hostgroup', { async: true })
  });
});
define('fusor-ember-cli/models/entitlement', ['exports', 'ember-data'], function (exports, _emberData) {
  exports['default'] = _emberData['default'].Model.extend({

    //pool node attributes
    poolId: _emberData['default'].attr('string'),
    poolType: _emberData['default'].attr('string'),
    poolQuantity: _emberData['default'].attr('number'),
    subscriptionId: _emberData['default'].attr('string'),
    activeSubscription: _emberData['default'].attr('boolean'),
    contractNumber: _emberData['default'].attr('string'),
    accountNumber: _emberData['default'].attr('string'),
    consumed: _emberData['default'].attr('number'),
    exported: _emberData['default'].attr('number'),
    productName: _emberData['default'].attr('string'),

    //attributes not returned in 'pool' node
    quantity: _emberData['default'].attr('number'),
    startDate: _emberData['default'].attr('date'),
    endDate: _emberData['default'].attr('date'),
    href: _emberData['default'].attr('string'),
    created: _emberData['default'].attr('date'),
    updated: _emberData['default'].attr('date')

  });
});
define('fusor-ember-cli/models/environment', ['exports', 'ember-data'], function (exports, _emberData) {
  exports['default'] = _emberData['default'].Model.extend({
    name: _emberData['default'].attr('string')
    //  organization: DS.belongsTo('organization')
  });
});
define('fusor-ember-cli/models/flavor', ['exports', 'ember-data'], function (exports, _emberData) {
  exports['default'] = _emberData['default'].Model.extend({
    name: _emberData['default'].attr('string'),
    ram: _emberData['default'].attr('number'),
    vcpus: _emberData['default'].attr('number'),
    disk: _emberData['default'].attr('number'),
    extra_specs: _emberData['default'].attr(),

    matchingNodeCount: function matchingNodeCount(nodes) {
      var _this = this;

      return nodes.reduce(function (nodeCount, node) {
        return nodeCount + (node.matchesProfile(_this) ? 1 : 0);
      }, 0);
    }
  });
});
define('fusor-ember-cli/models/foreman-task', ['exports', 'ember', 'ember-data', 'fusor-ember-cli/utils/foreman-task-util'], function (exports, _ember, _emberData, _fusorEmberCliUtilsForemanTaskUtil) {
  exports['default'] = _emberData['default'].Model.extend({
    label: _emberData['default'].attr('string'),
    pending: _emberData['default'].attr('boolean'),
    humanized_name: _emberData['default'].attr('string'),
    username: _emberData['default'].attr('string'),
    started_at: _emberData['default'].attr('string'),
    ended_at: _emberData['default'].attr('string'),
    state: _emberData['default'].attr('string'),
    result: _emberData['default'].attr('string'),
    external_id: _emberData['default'].attr('string'),
    progress: _emberData['default'].attr('string'),
    humanized_errors: _emberData['default'].attr('string'),
    humanized_output: _emberData['default'].attr('string'),
    humanized_input: _emberData['default'].attr('string'),
    repository: _emberData['default'].attr('string'),
    taskUrl: _ember['default'].computed('id', function () {
      return '/foreman_tasks/tasks/' + this.get('id');
    }),
    resume: function resume() {
      var csrfToken = _ember['default'].$('meta[name="csrf-token"]').attr('content');
      var taskUtil = new _fusorEmberCliUtilsForemanTaskUtil['default'](csrfToken);
      return taskUtil.resume(this.get('id'));
    },
    subtasks: _ember['default'].computed('id', function () {
      return this.store.query('foreman-task', {
        search: 'parent_task_id = ' + this.get('id')
      });
    })
  });
});
define('fusor-ember-cli/models/host', ['exports', 'ember-data'], function (exports, _emberData) {
  exports['default'] = _emberData['default'].Model.extend({
    name: _emberData['default'].attr('string'),
    hostgroup: _emberData['default'].attr('string'),
    mac: _emberData['default'].attr('string'),
    domain: _emberData['default'].attr('string'),
    subnet: _emberData['default'].attr('string'),
    operatingsystem: _emberData['default'].attr('string'),
    environment: _emberData['default'].attr('string'),
    model: _emberData['default'].attr('string'),
    location: _emberData['default'].attr('string'),
    organization: _emberData['default'].attr('string'),
    cpu: _emberData['default'].attr('string'),
    memory: _emberData['default'].attr('string'),
    vendor: _emberData['default'].attr('string')
  });
});
define('fusor-ember-cli/models/hostgroup', ['exports', 'ember-data'], function (exports, _emberData) {
  exports['default'] = _emberData['default'].Model.extend({
    name: _emberData['default'].attr('string'),
    title: _emberData['default'].attr('string'),
    parent_id: _emberData['default'].attr('number'),
    created_at: _emberData['default'].attr('date'),
    updated_at: _emberData['default'].attr('date'),
    domain: _emberData['default'].belongsTo('domain', { async: true })
  });
});
define('fusor-ember-cli/models/image', ['exports', 'ember-data'], function (exports, _emberData) {
  exports['default'] = _emberData['default'].Model.extend({
    name: _emberData['default'].attr('string'),
    checksum: _emberData['default'].attr('string'),
    container_format: _emberData['default'].attr('string'),
    deleted: _emberData['default'].attr('boolean'),
    deleted_at: _emberData['default'].attr('date'),
    disk_format: _emberData['default'].attr('string'),
    is_public: _emberData['default'].attr('boolean'),
    min_disk: _emberData['default'].attr('number'),
    min_ram: _emberData['default'].attr('number'),
    owner: _emberData['default'].attr('string'),
    'protected': _emberData['default'].attr('boolean'),
    size: _emberData['default'].attr('number'),
    status: _emberData['default'].attr('string'),
    updated_at: _emberData['default'].attr('date'),
    virtual_size: _emberData['default'].attr('string')

  });
});
define('fusor-ember-cli/models/introspection-task', ['exports', 'ember-data'], function (exports, _emberData) {
  exports['default'] = _emberData['default'].Model.extend({
    task_id: _emberData['default'].attr('string'),
    deployment: _emberData['default'].belongsTo('deployment', { async: true }),
    node_uuid: _emberData['default'].attr('string'),
    mac_address: _emberData['default'].attr('string'),
    poll: _emberData['default'].attr('boolean', { defaultValue: true })

  });
});
define('fusor-ember-cli/models/lifecycle-environment', ['exports', 'ember-data'], function (exports, _emberData) {
  exports['default'] = _emberData['default'].Model.extend({
    name: _emberData['default'].attr('string'),
    label: _emberData['default'].attr('string'),
    description: _emberData['default'].attr('string'),
    library: _emberData['default'].attr('boolean'),
    prior: _emberData['default'].attr('number'),
    prior_id: _emberData['default'].attr('number'),
    created_at: _emberData['default'].attr('date'),
    updated_at: _emberData['default'].attr('date'),
    organization: _emberData['default'].belongsTo('organization', { async: true })
  });
});
define('fusor-ember-cli/models/management-application', ['exports', 'ember-data'], function (exports, _emberData) {
  exports['default'] = _emberData['default'].Model.extend({
    // uuid is not listed here since serializer defines it as primaryKey so it's retreived as id
    name: _emberData['default'].attr('string'),
    releaseVer: _emberData['default'].attr('string'),
    username: _emberData['default'].attr('string'),
    entitlementStatus: _emberData['default'].attr('string'),
    serviceLevel: _emberData['default'].attr('string'),
    environment: _emberData['default'].attr('string'),
    entitlementCount: _emberData['default'].attr('number'),
    lastCheckin: _emberData['default'].attr('date'),
    canActivate: _emberData['default'].attr('boolean'),
    hypervisorId: _emberData['default'].attr('string'),
    autoheal: _emberData['default'].attr('boolean'),
    href: _emberData['default'].attr('string'),
    created: _emberData['default'].attr('date'),
    updated: _emberData['default'].attr('date')

  });

  // These objects are in the JSON response but removed in the serializer
  // and not saved in the store
  //
  // "releaseVer": {
  //     "releaseVer": null
  // },
  // "type": {
  //     "id": "9",
  //     "label": "satellite",
  //     "manifest": true
  // },
  // "owner": {
  //     "id": "8a85f9814a192108014a1adef5826b38",
  //     "key": "7473998",
  //     "displayName": "7473998",
  //     "href": "/owners/7473998"
  // },
  // "installedProducts": [],
  // "guestIds": [],
  // "capabilities": [],
});
define('fusor-ember-cli/models/node', ['exports', 'ember', 'ember-data'], function (exports, _ember, _emberData) {
  exports['default'] = _emberData['default'].Model.extend({
    uuid: _emberData['default'].attr('string'),
    driver: _emberData['default'].attr('string'),
    provision_state: _emberData['default'].attr('string'),
    driver_info: _emberData['default'].attr(),
    properties: _emberData['default'].attr(),
    address: _emberData['default'].attr('string'),
    power_state: _emberData['default'].attr('string'),
    last_error: _emberData['default'].attr('string'),

    ready: _ember['default'].computed('properties.cpus', 'properties.memory_mb', 'properties.local_gb', function () {
      return _ember['default'].isPresent(this.get('properties.cpus')) && _ember['default'].isPresent(this.get('properties.memory_mb')) && _ember['default'].isPresent(this.get('properties.local_gb'));
    }),

    getMacAddress: function getMacAddress(ports) {
      var port = ports ? ports.findBy('node_uuid', this.get('id')) : null;
      return port ? port.address : null;
    },

    getIntrospectionTask: function getIntrospectionTask(introspectionTasks) {
      return introspectionTasks ? introspectionTasks.findBy('node_uuid', this.get('id')) : null;
    },

    getForemanTask: function getForemanTask(introspectionTasks, foremanTasks) {
      if (!introspectionTasks || !foremanTasks) {
        return null;
      }

      var introspectionTask = this.getIntrospectionTask(introspectionTasks);
      return introspectionTask ? foremanTasks.findBy('id', introspectionTask.get('task_id')) : null;
    },

    matchesProfile: function matchesProfile(profile) {
      var nodeMemory = this.get('properties.memory_mb');
      var nodeCPUs = this.get('properties.cpus');
      var workerDisk = this.get('properties.local_gb');
      var nodeCPUArch = this.get('properties.cpu_arch');
      var profileMemory = profile.get('ram');
      var profileCPUs = profile.get('vcpus');
      var profileDisk = profile.get('disk');
      var profileCPUArch = profile.get('extra_specs.cpu_arch');

      return nodeMemory == profileMemory && nodeCPUs == profileCPUs && workerDisk == profileDisk && nodeCPUArch == profileCPUArch;
    }
  });
});
define('fusor-ember-cli/models/obj-hash', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Object.extend({
    content: {},
    contentLength: 0,

    add: function add(obj) {
      var id = this.generateId();
      this.get('content')[id] = obj;
      this.incrementProperty("contentLength");
      return id;
    },

    getObj: function getObj(key) {
      var res = this.get('content')[key];
      if (!res) {
        throw "no obj for key " + key;
      }
      return res;
    },

    generateId: function generateId() {
      var num = Math.random() * 1000000000000.0;
      num = parseInt(num);
      num = "" + num;
      return num;
    },

    keys: function keys() {
      var res = [];
      for (var key in this.get('content')) {
        res.push(key);
      }
      return _ember['default'].A(res);
    },

    lengthBinding: "contentLength"
  });
});
define('fusor-ember-cli/models/openshift-host', ['exports', 'fusor-ember-cli/models/base/base-discovered-host'], function (exports, _fusorEmberCliModelsBaseBaseDiscoveredHost) {
  exports['default'] = _fusorEmberCliModelsBaseBaseDiscoveredHost['default'].extend({});
});
define('fusor-ember-cli/models/openstack-deployment', ['exports', 'ember-data', 'ember', 'fusor-ember-cli/mixins/validated-model-mixin', 'fusor-ember-cli/utils/validators'], function (exports, _emberData, _ember, _fusorEmberCliMixinsValidatedModelMixin, _fusorEmberCliUtilsValidators) {

  var PresentHostAddressValidator = _fusorEmberCliUtilsValidators.AllValidator.extend({
    validators: [_fusorEmberCliUtilsValidators.PresenceValidator.create({}), _fusorEmberCliUtilsValidators.HostAddressValidator.create({})]
  });

  var FlavorValidator = _fusorEmberCliUtilsValidators.AllValidator.extend({
    validators: [_fusorEmberCliUtilsValidators.PresenceValidator.create({}), _fusorEmberCliUtilsValidators.EqualityValidator.create({ doesNotEqual: 'baremetal' })]
  });

  var PresentIpValidator = _fusorEmberCliUtilsValidators.AllValidator.extend({
    validators: [_fusorEmberCliUtilsValidators.PresenceValidator.create({}), _fusorEmberCliUtilsValidators.IpAddressValidator.create({})]
  });

  var PresentCidrValidator = _fusorEmberCliUtilsValidators.AllValidator.extend({
    validators: [_fusorEmberCliUtilsValidators.PresenceValidator.create({}), _fusorEmberCliUtilsValidators.CidrValidator.create({})]
  });

  exports['default'] = _emberData['default'].Model.extend(_fusorEmberCliMixinsValidatedModelMixin['default'], {
    undercloud_admin_password: _emberData['default'].attr('string'),
    undercloud_ip_address: _emberData['default'].attr('string'),
    undercloud_ssh_username: _emberData['default'].attr('string'),
    undercloud_ssh_password: _emberData['default'].attr('string'),

    overcloud_deployed: _emberData['default'].attr('boolean'),

    overcloud_address: _emberData['default'].attr('string'),
    overcloud_ext_net_interface: _emberData['default'].attr('string'),
    overcloud_private_net: _emberData['default'].attr('string'),
    overcloud_float_net: _emberData['default'].attr('string'),
    overcloud_float_gateway: _emberData['default'].attr('string'),
    overcloud_password: _emberData['default'].attr('string'),
    overcloud_libvirt_type: _emberData['default'].attr('string'),

    overcloud_node_count: _emberData['default'].attr('number'),
    overcloud_compute_flavor: _emberData['default'].attr('string'),
    overcloud_compute_count: _emberData['default'].attr('number'),
    overcloud_controller_flavor: _emberData['default'].attr('string'),
    overcloud_controller_count: _emberData['default'].attr('number'),
    overcloud_ceph_storage_flavor: _emberData['default'].attr('string'),
    overcloud_ceph_storage_count: _emberData['default'].attr('number'),
    overcloud_block_storage_flavor: _emberData['default'].attr('string'),
    overcloud_block_storage_count: _emberData['default'].attr('number'),
    overcloud_object_storage_flavor: _emberData['default'].attr('string'),
    overcloud_object_storage_count: _emberData['default'].attr('number'),

    overcloud_hostname: _emberData['default'].attr('string'),
    undercloud_hostname: _emberData['default'].attr('string'),

    external_ceph_storage: _emberData['default'].attr('boolean'),
    ceph_ext_mon_host: _emberData['default'].attr('string'),
    ceph_cluster_fsid: _emberData['default'].attr('string'),
    ceph_client_username: _emberData['default'].attr('string'),
    ceph_client_key: _emberData['default'].attr('string'),
    nova_rbd_pool_name: _emberData['default'].attr('string'),
    cinder_rbd_pool_name: _emberData['default'].attr('string'),
    glance_rbd_pool_name: _emberData['default'].attr('string'),

    validations: _ember['default'].Object.create({
      undercloud_admin_password: _fusorEmberCliUtilsValidators.PresenceValidator.create({}),
      undercloud_ip_address: PresentHostAddressValidator.create({}),
      undercloud_ssh_username: _fusorEmberCliUtilsValidators.PresenceValidator.create({}),
      undercloud_ssh_password: _fusorEmberCliUtilsValidators.PresenceValidator.create({}),
      overcloud_deployed: _fusorEmberCliUtilsValidators.EqualityValidator.create({ equals: false }),
      overcloud_node_count: _fusorEmberCliUtilsValidators.NumberValidator.create({ min: 2 }),
      overcloud_compute_flavor: FlavorValidator.create({}),
      overcloud_compute_count: _fusorEmberCliUtilsValidators.NumberValidator.create({ min: 1 }),
      overcloud_controller_flavor: FlavorValidator.create({}),
      overcloud_controller_count: _fusorEmberCliUtilsValidators.NumberValidator.create({ min: 1 }),
      overcloud_ext_net_interface: _fusorEmberCliUtilsValidators.PresenceValidator.create({}),
      overcloud_private_net: PresentCidrValidator.create({}),
      overcloud_float_net: PresentCidrValidator.create({}),
      overcloud_float_gateway: PresentIpValidator.create({}),
      overcloud_password: _fusorEmberCliUtilsValidators.PresenceValidator.create({}),
      external_ceph_storage: null,
      ceph_ext_mon_host: null,
      ceph_cluster_fsid: null,
      ceph_client_username: null,
      ceph_client_key: null,
      nova_rbd_pool_name: null,
      cinder_rbd_pool_name: null,
      glance_rbd_pool_name: null
    }),

    onOvercloudFloatNetChanged: _ember['default'].on('init', _ember['default'].observer('overcloud_float_net', function () {
      this.set('validations.overcloud_float_gateway', _fusorEmberCliUtilsValidators.IpSubnetValidator.create({ subnet: this.get('overcloud_float_net') }));
    })),

    onExternalCephStorageChanged: _ember['default'].on('init', _ember['default'].observer('external_ceph_storage', function () {
      if (this.get('external_ceph_storage')) {
        this.set('validations.ceph_ext_mon_host', PresentIpValidator.create({}));
        this.set('validations.ceph_cluster_fsid', _fusorEmberCliUtilsValidators.PresenceValidator.create({}));
        this.set('validations.ceph_client_username', _fusorEmberCliUtilsValidators.PresenceValidator.create({}));
        this.set('validations.ceph_client_key', _fusorEmberCliUtilsValidators.PresenceValidator.create({}));
        this.set('validations.nova_rbd_pool_name', _fusorEmberCliUtilsValidators.PresenceValidator.create({}));
        this.set('validations.cinder_rbd_pool_name', _fusorEmberCliUtilsValidators.PresenceValidator.create({}));
        this.set('validations.glance_rbd_pool_name', _fusorEmberCliUtilsValidators.PresenceValidator.create({}));
      } else {
        this.set('validations.ceph_ext_mon_host', null);
        this.set('validations.ceph_cluster_fsid', null);
        this.set('validations.ceph_client_username', null);
        this.set('validations.ceph_client_key', null);
        this.set('validations.nova_rbd_pool_name', null);
        this.set('validations.cinder_rbd_pool_name', null);
        this.set('validations.glance_rbd_pool_name', null);
      }
    })),

    isUndercloudConnected: _ember['default'].computed('undercloud_admin_password', 'undercloud_ip_address', 'undercloud_ssh_username', 'undercloud_ssh_password', function () {
      return this.validate('undercloud_admin_password', 'undercloud_ip_address', 'undercloud_ssh_username', 'undercloud_ssh_password');
    }),

    isUndercloudReady: _ember['default'].computed('isUndercloudConnected', 'overcloud_deployed', function () {
      return this.get('isUndercloudConnected') && this.validate('overcloud_deployed');
    }),

    areNodesRegistered: _ember['default'].computed('overcloud_node_count', function () {
      return this.validate('overcloud_node_count');
    }),

    hasValidNodeAssignments: _ember['default'].computed('overcloud_compute_flavor', 'overcloud_compute_count', 'overcloud_controller_flavor', 'overcloud_controller_count', function () {
      return this.validate('overcloud_compute_flavor', 'overcloud_compute_count', 'overcloud_controller_flavor', 'overcloud_controller_count');
    }),

    isValidOvercloud: _ember['default'].computed('overcloud_ext_net_interface', 'overcloud_private_net', 'overcloud_float_net', 'overcloud_float_gateway', 'validations.overcloud_float_gateway', 'overcloud_password', 'ceph_ext_mon_host', 'validations.ceph_ext_mon_host', 'ceph_cluster_fsid', 'validations.ceph_cluster_fsid', 'ceph_client_username', 'validations.ceph_client_username', 'ceph_client_key', 'validations.ceph_client_key', 'nova_rbd_pool_name', 'validations.nova_rbd_pool_name', 'cinder_rbd_pool_name', 'validations.cinder_rbd_pool_name', 'glance_rbd_pool_name', 'validations.glance_rbd_pool_name', function () {
      return this.validate('overcloud_ext_net_interface', 'overcloud_private_net', 'overcloud_float_net', 'overcloud_float_gateway', 'overcloud_password', 'ceph_ext_mon_host', 'ceph_cluster_fsid', 'ceph_client_username', 'ceph_client_key', 'nova_rbd_pool_name', 'cinder_rbd_pool_name', 'glance_rbd_pool_name');
    }),

    //TODO investigate a cleaner way to watch all fields for changes
    areAllAttributesValid: _ember['default'].computed('undercloud_admin_password', 'undercloud_ip_address', 'undercloud_ssh_username', 'undercloud_ssh_password', 'overcloud_deployed', 'overcloud_compute_flavor', 'overcloud_compute_count', 'overcloud_controller_flavor', 'overcloud_controller_count', 'overcloud_ext_net_interface', 'overcloud_private_net', 'overcloud_float_net', 'overcloud_float_gateway', 'validations.overcloud_float_gateway', 'overcloud_password', 'ceph_ext_mon_host', 'validations.ceph_ext_mon_host', 'ceph_cluster_fsid', 'validations.ceph_cluster_fsid', 'ceph_client_username', 'validations.ceph_client_username', 'ceph_client_key', 'validations.ceph_client_key', 'nova_rbd_pool_name', 'validations.nova_rbd_pool_name', 'cinder_rbd_pool_name', 'validations.cinder_rbd_pool_name', 'glance_rbd_pool_name', 'validations.glance_rbd_pool_name', function () {
      return this.validateAll();
    }),

    cephStorageStatus: _ember['default'].computed('external_ceph_storage', function () {
      if (this.get('external_ceph_storage')) {
        return 'External';
      } else {
        return 'None';
      }
    })
  });
});
define('fusor-ember-cli/models/organization', ['exports', 'ember-data'], function (exports, _emberData) {
  exports['default'] = _emberData['default'].Model.extend({
    name: _emberData['default'].attr('string'),
    title: _emberData['default'].attr('string'),
    label: _emberData['default'].attr('string'),
    description: _emberData['default'].attr('string'),
    lifecycle_environments: _emberData['default'].hasMany('lifecycle-environment', { async: true })
    //  subnets: DS.hasMany('subnet', { async: true })
  });
});
define('fusor-ember-cli/models/pool', ['exports', 'ember', 'ember-data'], function (exports, _ember, _emberData) {
  exports['default'] = _emberData['default'].Model.extend({

    type: _emberData['default'].attr('string'),
    subscriptionId: _emberData['default'].attr('string'),
    activeSubscription: _emberData['default'].attr('boolean'),
    contractNumber: _emberData['default'].attr('string'),
    accountNumber: _emberData['default'].attr('string'),
    consumed: _emberData['default'].attr('number'),
    exported: _emberData['default'].attr('number'),
    productName: _emberData['default'].attr('string'),

    quantity: _emberData['default'].attr('number'),
    startDate: _emberData['default'].attr('date'),
    endDate: _emberData['default'].attr('date'),
    href: _emberData['default'].attr('string'),
    created: _emberData['default'].attr('date'),
    updated: _emberData['default'].attr('date'),

    qtyAvailable: _ember['default'].computed('quantity', 'consumed', function () {
      return this.get('quantity') - this.get('consumed');
    }),

    qtyAvailableOfTotal: _ember['default'].computed('qtyAvailable', 'quantity', function () {
      if (this.get('qtyAvailable') < 0) {
        return "Unlimited";
      } else {
        return this.get('qtyAvailable') + ' of ' + this.get('quantity');
      }
    })

  });
});
define('fusor-ember-cli/models/session-portal', ['exports', 'ember-data'], function (exports, _emberData) {
  exports['default'] = _emberData['default'].Model.extend({
    identification: _emberData['default'].attr('string'),
    ownerKey: _emberData['default'].attr('string'),
    consumerUUID: _emberData['default'].attr('string'),
    isAuthenticated: _emberData['default'].attr('boolean')
  });
});
define('fusor-ember-cli/models/subnet', ['exports', 'ember-data'], function (exports, _emberData) {
  exports['default'] = _emberData['default'].Model.extend({
    network: _emberData['default'].attr('string'),
    mask: _emberData['default'].attr('string'),
    priority: _emberData['default'].attr('number'),
    name: _emberData['default'].attr('string'),
    vlanid: _emberData['default'].attr('string'),
    created_at: _emberData['default'].attr('date'),
    updated_at: _emberData['default'].attr('date'),
    dhcp_id: _emberData['default'].attr('number'),
    tftp_id: _emberData['default'].attr('number'),
    from: _emberData['default'].attr('string'),
    to: _emberData['default'].attr('string'),
    gateway: _emberData['default'].attr('string'),
    dns_primary: _emberData['default'].attr('string'),
    dns_secondary: _emberData['default'].attr('string'),
    dns_id: _emberData['default'].attr('number'),
    sort_network_id: _emberData['default'].attr('number'),
    boot_mode: _emberData['default'].attr('string'),
    ipam: _emberData['default'].attr('string'),
    organization: _emberData['default'].belongsTo('organization', { async: false })
  });
});
define('fusor-ember-cli/models/subscription', ['exports', 'ember', 'ember-data'], function (exports, _ember, _emberData) {
  exports['default'] = _emberData['default'].Model.extend({

    contract_number: _emberData['default'].attr('string'),
    product_name: _emberData['default'].attr('string'),
    quantity_to_add: _emberData['default'].attr('number'),
    quantity_attached: _emberData['default'].attr('number'),
    start_date: _emberData['default'].attr('date'),
    end_date: _emberData['default'].attr('date'),
    total_quantity: _emberData['default'].attr('number'),
    source: _emberData['default'].attr('string'),
    deployment: _emberData['default'].belongsTo('deployment', { inverse: 'subscriptions', async: true }),

    qtySumAttached: _ember['default'].computed('quantity_to_add', 'quantity_attached', function () {
      return parseInt(this.get('quantity_to_add')) + parseInt(this.get('quantity_attached'));
    })

  });
});
define('fusor-ember-cli/router', ['exports', 'ember', 'fusor-ember-cli/config/environment'], function (exports, _ember, _fusorEmberCliConfigEnvironment) {

  var Router = _ember['default'].Router.extend({
    location: _fusorEmberCliConfigEnvironment['default'].locationType,
    // log when Ember generates a controller or a route from a generic class
    LOG_ACTIVE_GENERATION: true,
    // log when Ember looks up a template or a view
    LOG_VIEW_LOOKUPS: true
  });

  exports['default'] = Router.map(function () {

    this.route('deployments', { resetNamespace: true });

    this.route("deployment-new", { path: '/deployments/new', resetNamespace: true }, function () {
      this.route("start");
      this.route('satellite', function () {
        this.route('configure-environment');
      });
    });

    this.route('deployment', { path: '/deployments/:deployment_id', resetNamespace: true }, function () {
      this.route("start");

      this.route('satellite', { resetNamespace: true }, function () {
        this.route('configure-environment', { resetNamespace: true });
        this.route('access-insights');
      });

      this.route('rhev', { resetNamespace: true }, function () {
        this.route('rhev-setup', { path: 'setup', resetNamespace: true });
        this.route('engine', { resetNamespace: true }, function () {
          this.route('discovered-host');
        });
        this.route('hypervisor', { resetNamespace: true }, function () {
          this.route('discovered-host');
        });
        this.route('rhev-options', { path: 'configuration', resetNamespace: true });
        this.route('storage', { resetNamespace: true });
      });

      this.route('openstack', { resetNamespace: true }, function () {
        this.route('undercloud-deploy');
        this.route('register-nodes');
        this.route('assign-nodes');
        this.route('overcloud');
      });

      this.route('cloudforms', { resetNamespace: true }, function () {
        this.route('where-install', { resetNamespace: true });
        this.route('cfme-configuration', { path: 'configuration' });
      });

      this.route('openshift', { resetNamespace: true }, function () {
        this.route('openshift-nodes', { path: 'nodes' });
        this.route('openshift-configuration', { path: 'configuration' });
      });

      this.route('subscriptions', { resetNamespace: true }, function () {
        this.route('credentials');
        this.route('management-application', function () {
          this.route('consumer', { path: '/:management_application_uuid' });
        });
        this.route('select-subscriptions', { path: 'select' });
        this.route('review-subscriptions', { path: 'review' });
      });

      this.route('review', { resetNamespace: true }, function () {
        this.route('installation');
        this.route('progress', function () {
          this.route('overview');
          this.route('details');
          this.route('log');
        });
        this.route('summary');
      });
    });

    this.route('readme'); // for demo only, not used in app
  });
});
define('fusor-ember-cli/routes/application', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({
    model: function model() {
      return this.store.findAll('deployment');
    },

    actions: {
      invalidateSession: function invalidateSession() {
        return this.transitionTo('login');
      },
      loading: function loading() {
        this.controllerFor('deployments').set('isLoading', true);
      }
    }
  });
});
// app/routes/application.js
define('fusor-ember-cli/routes/cloudforms/cfme-configuration', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({
    deactivate: function deactivate() {
      return this.send('saveDeployment', null);
    }
  });
});
define('fusor-ember-cli/routes/cloudforms/index', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({
    beforeModel: function beforeModel() {
      this.transitionTo('where-install');
    }
  });
});
define('fusor-ember-cli/routes/cloudforms', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({

    setupController: function setupController(controller, model) {
      controller.set('model', model);
      var stepNumberCloudForms = this.controllerFor('deployment').get('stepNumberCloudForms');
      return this.controllerFor('deployment').set('currentStepNumber', stepNumberCloudForms);
    }

  });
});
define('fusor-ember-cli/routes/configure-environment', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({

    model: function model() {
      return this.modelFor('deployment').get('lifecycle_environment');
    },

    setupController: function setupController(controller, model) {
      controller.set('model', model);
      var self = this;
      var organization = this.modelFor('deployment').get('organization');
      var lifecycleEnvironments = this.store.query('lifecycle-environment', { organization_id: organization.get('id') });
      lifecycleEnvironments.then(function (results) {
        controller.set('lifecycleEnvironments', results);
        // nullify environment if organization has no environments
        if (results.get('length') === 0) {
          controller.set('selectedEnvironment', null);
        } else {
          controller.set('selectedEnvironment', model);
        }
      });
    },

    deactivate: function deactivate() {
      this.get('controller').set('showAlertMessage', false);
      this.send('saveDeployment', null);
    }
  });
});
define('fusor-ember-cli/routes/consumer', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({});
});
define('fusor-ember-cli/routes/deployment/index', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({
    afterModel: function afterModel() {
      this.transitionTo('satellite');
    }
  });
});
define('fusor-ember-cli/routes/deployment/start', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({

    setupController: function setupController(controller, model) {
      controller.set('model', model);
      controller.set('satelliteTabRouteName', 'satellite.index');
      if (model.get('deploy_rhev') || model.get('deploy_openstack')) {
        controller.set('isDisabledOpenShift', false);
        controller.set('isDisabledCfme', false);
      } else {
        controller.set('isDisabledOpenShift', true);
        controller.set('isDisabledCfme', true);
      }
    },

    activate: function activate() {
      this.controllerFor('deployment').set('isHideWizard', true);
    },

    deactivate: function deactivate() {
      this.controllerFor('deployment').set('isHideWizard', false);
      this.controllerFor('deployment').set('backRouteNameOnSatIndex', 'deployment.start');
      return this.send('saveDeployment', null);
    }

  });
});
define('fusor-ember-cli/routes/deployment-new/index', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({

    // if user manually hits this route (deployments/news), then redirecto to deployments/news/start
    beforeModel: function beforeModel() {
      return this.transitionTo('deployment-new.start');
    }

  });
});
define('fusor-ember-cli/routes/deployment-new/satellite/configure-environment', ['exports', 'ember', 'fusor-ember-cli/mixins/deployment-new-satellite-route-mixin'], function (exports, _ember, _fusorEmberCliMixinsDeploymentNewSatelliteRouteMixin) {
  exports['default'] = _ember['default'].Route.extend(_fusorEmberCliMixinsDeploymentNewSatelliteRouteMixin['default'], {

    model: function model() {
      return this.modelFor('deployment-new').get('lifecycle_environment');
    },

    setupController: function setupController(controller, model) {
      controller.set('model', model);
      var lifecycleEnvironments = this.store.query('lifecycle-environment', { organization_id: 1 });
      lifecycleEnvironments.then(function (results) {
        controller.set('lifecycleEnvironments', results);
      });
    },

    deactivate: function deactivate() {
      this.get('controller').set('showAlertMessage', false);
    }

  });
});
define('fusor-ember-cli/routes/deployment-new/satellite/index', ['exports', 'ember', 'fusor-ember-cli/mixins/deployment-new-satellite-route-mixin'], function (exports, _ember, _fusorEmberCliMixinsDeploymentNewSatelliteRouteMixin) {
  exports['default'] = _ember['default'].Route.extend(_fusorEmberCliMixinsDeploymentNewSatelliteRouteMixin['default'], {

    setupController: function setupController(controller, model) {
      controller.set('model', model);
      // reset common password fields
      controller.set('commonPassword', null);
      controller.set('confirmCommonPassword', null);
      this.store.findRecord('organization', 1).then(function (result) {
        model.set('organization', result);
      });
    },

    deactivate: function deactivate() {
      var deploymentName = this.get('controller.model.name');
      if (_ember['default'].isPresent(deploymentName)) {
        this.set('controller.model.name', deploymentName.trim());
      }
      this.prePopulatePasswords();
    },

    prePopulatePasswords: function prePopulatePasswords() {
      var commonPassword = this.get('controller.commonPassword');
      var deploymentNewController = this.controllerFor('deployment-new');
      var deployment = deploymentNewController.get('model');
      var isValidDeployment = deployment && !deployment.get('isDeleted');
      var isValidCommonPassword = commonPassword && deploymentNewController.get('isValidCommonPassword');

      if (isValidDeployment && isValidCommonPassword) {
        deployment.set('rhev_engine_admin_password', commonPassword);
        deployment.set('rhev_root_password', commonPassword);
        deployment.set('cfme_root_password', commonPassword);
        deployment.set('cfme_admin_password', commonPassword);
        deployment.set('cfme_db_password', commonPassword);
        deployment.set('openshift_user_password', commonPassword);
        deployment.set('openshift_root_password', commonPassword);

        // confirmation fields on the deployment controller, not the model
        deploymentNewController.set('confirmRhevRootPassword', commonPassword);
        deploymentNewController.set('confirmRhevEngineAdminPassword', commonPassword);
        deploymentNewController.set('confirmCfmeRootPassword', commonPassword);
        deploymentNewController.set('confirmCfmeAdminPassword', commonPassword);
        deploymentNewController.set('confirmCfmeDbPassword', commonPassword);
      }
    }

  });
});
define('fusor-ember-cli/routes/deployment-new/satellite', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({});
});
define('fusor-ember-cli/routes/deployment-new/start', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({

    setupController: function setupController(controller, model) {
      controller.set('model', model);
      controller.set('satelliteTabRouteName', 'deployment-new.satellite.index');
      if (model.get('deploy_rhev') || model.get('deploy_openstack')) {
        controller.set('isDisabledOpenShift', false);
        controller.set('isDisabledCfme', false);
      } else {
        controller.set('isDisabledOpenShift', true);
        controller.set('isDisabledCfme', true);
      }
    },

    activate: function activate() {
      this.controllerFor('deployment-new').set('isHideWizard', true);
    },

    deactivate: function deactivate() {
      this.controllerFor('deployment-new').set('isHideWizard', false);
      this.controllerFor('deployment-new').set('backRouteNameOnSatIndex', 'deployment-new.start');
    }

  });
});
define('fusor-ember-cli/routes/deployment-new', ['exports', 'ember', 'fusor-ember-cli/mixins/deployment-route-mixin'], function (exports, _ember, _fusorEmberCliMixinsDeploymentRouteMixin) {
  exports['default'] = _ember['default'].Route.extend(_fusorEmberCliMixinsDeploymentRouteMixin['default'], {

    model: function model() {
      return this.store.createRecord('deployment', {
        enable_access_insights: false,
        rhev_cluster_name: 'Default',
        rhev_storage_name: 'my_storage',
        rhev_export_domain_name: 'my_export',
        hosted_storage_name: 'my_hosted_storage',
        rhev_data_center_name: 'Default',
        rhev_storage_type: 'NFS'
      });
    },

    setupController: function setupController(controller, model) {
      controller.set('model', model);
      controller.set('satelliteTabRouteName', 'deployment-new.satellite.index');
      controller.set('lifecycleEnvironmentTabRouteName', 'deployment-new.satellite.configure-environment');
      this.controllerFor('application').set('isNewDeployment', true);
    },

    // rollback if new deployment not saved
    // TODO modal confirm/cancel
    deactivate: function deactivate() {
      var deployment = this.modelFor('deployment-new');
      if (deployment.get('isNew')) {
        return deployment.rollbackAttributes();
      }
    },

    actions: {
      cancelAndRollbackNewDeployment: function cancelAndRollbackNewDeployment() {
        this.get('controller.model').rollbackAttributes();
        return this.transitionTo('deployments');
      }
    },

    updateOpenstackDefaults: function updateOpenstackDefaults(deployment) {
      var satelliteIndexController = this.controllerFor('deployment-new/satellite/index');
      var commonPassword = satelliteIndexController.get('commonPassword');

      if (commonPassword && !deployment.get('isStarted') && deployment.get('deploy_openstack')) {
        deployment.get('openstack_deployment').then(function (openstackDeployment) {
          openstackDeployment.set('overcloud_password', commonPassword);
          openstackDeployment.save();
        });
      }
    }
  });
});
define('fusor-ember-cli/routes/deployment', ['exports', 'ember', 'fusor-ember-cli/mixins/deployment-route-mixin', 'ic-ajax'], function (exports, _ember, _fusorEmberCliMixinsDeploymentRouteMixin, _icAjax) {
  exports['default'] = _ember['default'].Route.extend(_fusorEmberCliMixinsDeploymentRouteMixin['default'], {

    model: function model(params) {
      return this.store.findRecord('deployment', params.deployment_id);
    },

    setupController: function setupController(controller, model) {
      controller.set('model', model);
      controller.set('satelliteTabRouteName', 'satellite.index');
      controller.set('lifecycleEnvironmentTabRouteName', 'configure-environment');
      controller.set('model.host_naming_scheme', 'Freeform');
      controller.set('confirmRhevRootPassword', model.get('rhev_root_password'));
      controller.set('confirmRhevEngineAdminPassword', model.get('rhev_engine_admin_password'));
      controller.set('confirmCfmeRootPassword', model.get('cfme_root_password'));
      controller.set('confirmCfmeAdminPassword', model.get('cfme_admin_password'));
      controller.set('confirmCfmeDbPassword', model.get('cfme_db_password'));
      model.get('openstack_deployment').then(function (result) {
        if (_ember['default'].isPresent(result)) {
          controller.set('confirmOvercloudPassword', result.get('overcloud_password'));
        }
      });

      this.loadDefaultDomainName(controller);
      this.loadUpstreamConsumer(controller, model);

      this.loadDefaultData(model);
    },

    loadDefaultDomainName: function loadDefaultDomainName(controller) {
      this.store.findAll('hostgroup').then(function (hostgroups) {
        return hostgroups.filterBy('name', 'Fusor Base').get('firstObject').get('domain.name');
      }).then(function (domainName) {
        return controller.set('defaultDomainName', domainName);
      });
    },

    loadUpstreamConsumer: function loadUpstreamConsumer(controller, model) {
      // check if org has upstream UUID using Katello V2 API
      var url = '/katello/api/v2/organizations/' + model.get('organization.id');
      _ember['default'].$.getJSON(url).then(function (results) {
        var shouldSetUpstreamConsumer = _ember['default'].isPresent(results.owner_details) && _ember['default'].isPresent(results.owner_details.upstreamConsumer) && _ember['default'].isBlank(controller.get('model.upstream_consumer_uuid'));

        if (shouldSetUpstreamConsumer) {
          controller.set('model.upstream_consumer_uuid', results.owner_details.upstreamConsumer.uuid);
          controller.set('model.upstream_consumer_name', results.owner_details.upstreamConsumer.name);
        }
      });
    },

    loadDefaultData: function loadDefaultData(model, opt) {
      _ember['default'].RSVP.all([(0, _icAjax['default'])('/api/v2/settings?search=openshift').then(function (settings) {
        model.loadOpenshiftDefaults(settings['results'], opt);
      }), (0, _icAjax['default'])('/api/v2/settings?search=cloudforms').then(function (settings) {
        model.loadCloudformsDefaults(settings['results'], opt);
      })]);
    },

    actions: {
      installDeployment: function installDeployment() {
        var self = this;
        var deployment = self.modelFor('deployment');
        var token = _ember['default'].$('meta[name="csrf-token"]').attr('content');

        var controller = this.controllerFor('review/installation');

        if (controller.get('modalOpen')) {
          controller.closeContinueDeployModal();
        }

        controller.set('spinnerTextMessage', 'Building task list');
        controller.set('showSpinner', true);

        (0, _icAjax['default'])({
          url: '/fusor/api/v21/deployments/' + deployment.get('id') + '/deploy',
          type: "PUT",
          headers: {
            "Accept": "application/json",
            "Content-Type": "application/json",
            "X-CSRF-Token": token,
            "Authorization": "Basic " + self.get('session.basicAuthToken')
          }
        }).then(function (_) {
          deployment.reload().then(function () {
            controller.set('showSpinner', false);
            self.transitionTo('review.progress.overview');
          })['catch'](function () {
            controller.set('showSpinner', false);
            controller.set('errorMsg', 'Error reloading deployment task');
            controller.set('showErrorMessage', true);
          });
        }, function (response) {
          controller.set('showSpinner', false);

          if (response.jqXHR.status === 422 && response.jqXHR.responseJSON && response.jqXHR.responseJSON.errors) {
            var prop;

            (function () {
              // rails is sending back validation errors as a 422 with an errors hash that looks like
              // errors: {field => [error_messages]}
              var validationErrors = [];
              var errors = response.jqXHR.responseJSON.errors;
              var addValidationError = function addValidationError(error) {
                return validationErrors.push(error);
              };

              for (prop in errors) {
                if (errors.hasOwnProperty(prop)) {
                  errors[prop].forEach(addValidationError);
                }
              }
              controller.set('validationErrors', validationErrors);
            })();
          } else {
            controller.set('errorMsg', response.jqXHR.responseText);
            controller.set('showErrorMessage', true);
          }
        });
      },

      attachSubscriptions: function attachSubscriptions() {
        var self = this;
        var token = _ember['default'].$('meta[name="csrf-token"]').attr('content');
        var sessionPortal = this.modelFor('subscriptions').sessionPortal;
        var consumerUUID = sessionPortal.get('consumerUUID');
        var subscriptionPools = this.controllerFor('subscriptions/select-subscriptions').get('subscriptionPools');

        var controller = this.controllerFor('review/installation');

        controller.set('buttonDeployDisabled', true);
        controller.set('spinnerTextMessage', 'Attaching Subscriptions in Red Hat Customer Portal');
        controller.set('showSpinner', true);

        subscriptionPools.forEach(function (item) {
          console.log(item);
          console.log('qtyToAttach is');
          console.log(item.get('qtyToAttach'));
          console.log('pool ID is');
          console.log(item.get('id'));
          console.log('isSelectedSubscription is');
          console.log(item.get('isSelectedSubscription'));

          if (item.get('qtyToAttach') > 0) {
            // POST /customer_portal/consumers/#{CONSUMER['uuid']}/entitlements?pool=#{POOL['id']}&quantity=#{QUANTITY}
            var url = '/customer_portal/consumers/' + consumerUUID + "/entitlements?pool=" + item.get('id') + "&quantity=" + item.get('qtyToAttach');
            console.log('POST attach subscriptions using following URL');
            console.log(url);

            (0, _icAjax['default'])({
              url: url,
              type: "POST",
              headers: {
                "Accept": "application/json",
                "Content-Type": "application/json",
                "X-CSRF-Token": token
              }
            }).then(function (response) {
              console.log('successfully attached ' + item.qtyToAttach + ' subscription for pool ' + item.id);
              self.send('installDeployment');
            }, function (error) {
              console.log('error on attachSubscriptions');
              return self.send('error');
            });
          }
        });
      },

      saveAndCancelDeployment: function saveAndCancelDeployment() {
        return this.send('saveDeployment', 'deployments');
      },

      cancelAndDeleteDeployment: function cancelAndDeleteDeployment() {
        var deployment = this.get('controller.model');
        var self = this;
        deployment.destroyRecord().then(function () {
          return self.transitionTo('deployments');
        });
      },

      error: function error(reason) {
        console.log(reason);
        var controller = this.controllerFor('deployment');

        if (typeof reason === 'string') {
          controller.set('errorMsg', reason);
        } else if (reason && typeof reason === 'object') {
          if (reason.responseJSON && reason.responseJSON.error && reason.responseJSON.error.message) {
            controller.set('errorMsg', reason.responseJSON.error.message);
          } else if (reason.responseText) {
            controller.set('errorMsg', reason.responseText);
          }
        }
      },

      refreshModel: function refreshModel() {
        console.log('refreshModelOnDeploymentRoute');
        return this.refresh();
      },

      loadDefaultData: function loadDefaultData(model, opt) {
        this.loadDefaultData(model, opt);
      }
    }
  });
});
define('fusor-ember-cli/routes/deployments', ['exports', 'ember', 'fusor-ember-cli/mixins/pagination-route-mixin', 'lodash/lodash'], function (exports, _ember, _fusorEmberCliMixinsPaginationRouteMixin, _lodashLodash) {
  exports['default'] = _ember['default'].Route.extend(_fusorEmberCliMixinsPaginationRouteMixin['default'], {

    model: function model(params) {
      // server-side deployments controller uses scoped search params[:order] for sorting
      var sort_by = params['sort_by'] || 'updated_at';
      var dir = params['dir'] || 'DESC';
      var page = params['page'] || 1;
      params['order'] = sort_by + ' ' + dir;
      var controller = this.controllerFor('deployments');
      return this.store.query('deployment', params);
    },

    setupController: function setupController(controller, model) {
      controller.set('model', model);
      controller.set('totalCnt', model.get('meta.total'));
      controller.set('pageNumber', model.get('meta.page'));
      controller.set('totalPages', model.get('meta.total_pages'));
      controller.set('pageRange', _lodashLodash['default'].range(1, model.get('meta.total_pages') + 1));
      controller.set('isLoading', false);
    },

    actions: {
      deleteDeployment: function deleteDeployment(item) {
        return this.store.findRecord('deployment', item.get('id')).then(function (deployment) {
          deployment.deleteRecord();
          deployment.save();
        });
      },

      willTransition: function willTransition() {
        this.controllerFor('deployment').set('backRouteNameOnSatIndex', 'deployments');
      }
    }

  });
});
define('fusor-ember-cli/routes/engine/discovered-host', ['exports', 'ember', 'fusor-ember-cli/mixins/discovered-host-route-mixin'], function (exports, _ember, _fusorEmberCliMixinsDiscoveredHostRouteMixin) {
  exports['default'] = _ember['default'].Route.extend(_fusorEmberCliMixinsDiscoveredHostRouteMixin['default'], {
    model: function model() {
      return this.modelFor('deployment').get('discovered_host');
    },

    deactivate: function deactivate() {
      return this.send('saveDeployment', null);
    }

  });
});
define('fusor-ember-cli/routes/engine', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({
    beforeModel: function beforeModel() {
      this.transitionTo('engine.discovered-host');
    }
  });
});
define('fusor-ember-cli/routes/hypervisor/discovered-host', ['exports', 'ember', 'fusor-ember-cli/mixins/discovered-host-route-mixin', 'fusor-ember-cli/mixins/needs-discovered-hosts-ajax'], function (exports, _ember, _fusorEmberCliMixinsDiscoveredHostRouteMixin, _fusorEmberCliMixinsNeedsDiscoveredHostsAjax) {
  exports['default'] = _ember['default'].Route.extend(_fusorEmberCliMixinsDiscoveredHostRouteMixin['default'], _fusorEmberCliMixinsNeedsDiscoveredHostsAjax['default'], {
    model: function model() {
      return this.modelFor('deployment').get('discovered_hosts');
    },

    deactivate: function deactivate() {
      return this.send('saveHyperVisors', null);
    },

    actions: {
      saveHyperVisors: function saveHyperVisors(redirectPath) {
        var _this = this;

        var deployment = this.modelFor('deployment');
        var hypervisorModelIds = this.controllerFor('hypervisor/discovered-host').get('hypervisorModelIds');

        this.postDiscoveredHostIds(deployment, hypervisorModelIds).then(function () {
          if (redirectPath) {
            _this.transitionTo('rhev-options');
          }
        })['catch'](function (err) {
          console.log(err);
        });
      }
    }
  });
});
define('fusor-ember-cli/routes/hypervisor', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({
    beforeModel: function beforeModel() {
      this.transitionTo('hypervisor.discovered-host');
    }
  });
});
define('fusor-ember-cli/routes/index', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({

    beforeModel: function beforeModel() {
      return this.transitionTo('deployment-new');
    }

  });
});
define('fusor-ember-cli/routes/openshift/index', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({
    beforeModel: function beforeModel() {
      this.transitionTo('openshift.openshift-nodes');
    }
  });
});
define('fusor-ember-cli/routes/openshift/openshift-configuration', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({

    setupController: function setupController(controller, model) {
      controller.set('model', model);

      controller.set('confirmUserPassword', model.get('openshift_user_password'));

      if (_ember['default'].isEmpty(model.get('openshift_storage_type'))) {
        model.set('openshift_storage_type', 'NFS');
      }
      if (_ember['default'].isEmpty(model.get('openshift_username'))) {
        model.set('openshift_username', 'cloudsuite-install');
      }
      this.store.findAll('hostgroup').then(function (results) {
        var fusorBaseHostgroup = results.filterBy('name', 'Fusor Base').get('firstObject');
        controller.set('domainName', fusorBaseHostgroup.get('domain.name'));
      });
    },

    deactivate: function deactivate() {
      return this.send('saveDeployment', null);
    }

  });
});
define('fusor-ember-cli/routes/openshift/openshift-nodes', ['exports', 'ember', 'ic-ajax', 'fusor-ember-cli/mixins/uses-ose-defaults', 'fusor-ember-cli/utils/humanize'], function (exports, _ember, _icAjax, _fusorEmberCliMixinsUsesOseDefaults, _fusorEmberCliUtilsHumanize) {
  exports['default'] = _ember['default'].Route.extend(_fusorEmberCliMixinsUsesOseDefaults['default'], {

    beforeModel: function beforeModel() {
      // Ensure the deployment has been persisted so the server is capable
      // of mounting and reading available disk space on the specified NFS mount
      // If the deployment is not saved, can end up in a race condition and
      // the server load will fail on first route.
      var deployment = this.modelFor('openshift');
      return deployment.save();
    },

    model: function model() {
      var deployment = this.modelFor('openshift');
      return _ember['default'].RSVP.hash({
        deployment: deployment,
        maxResources: this.loadMaxResources(deployment)
      });
    },

    setupController: function setupController(controller, model) {
      var deployment = model.deployment;
      var maxRes = model.maxResources;
      controller.set('model', model.deployment);
      controller._initWorkerNodes(5);

      // Set max resources to smart values
      deployment.set('openshift_available_vcpu', maxRes.get('vcpuAvailable'));
      deployment.set('openshift_available_ram', maxRes.get('ramAvailable'));
      if (maxRes.diskAvailable === 0) {
        controller.set('errorMsg', 'Failed to mount NFS share, could not load available disk space');
      } else {
        deployment.set('openshift_available_disk', maxRes.get('diskAvailable'));
      }

      var isRhev = this.controllerFor('deployment').get('isRhev');
      var isOpenStack = this.controllerFor('deployment').get('isOpenStack');
      if (isRhev && !isOpenStack) {
        deployment.set('openshift_install_loc', 'RHEV');
      } else if (!isRhev && isOpenStack) {
        deployment.set('openshift_install_loc', 'OpenStack');
      }

      var result = {
        vcpuAvailable: 8,
        ramAvailable: 32,
        diskAvailable: 250
      };

      if (this.shouldUseOseDefault(deployment.get('openshift_available_vcpu'))) {
        deployment.set('openshift_available_vcpu', result['vcpuAvailable']);
      }
      if (this.shouldUseOseDefault(deployment.get('openshift_available_ram'))) {
        deployment.set('openshift_available_ram', result['ramAvailable']);
      }
      if (this.shouldUseOseDefault(deployment.get('openshift_available_disk'))) {
        deployment.set('openshift_available_disk', result['diskAvailable']);
      }
    },

    loadMaxResources: function loadMaxResources(deployment) {
      // Calculate aggregate available resources based on hypervisors chosen
      // and disk space available. cpus + ram are available from discovered-hosts,
      // but we need to hit an ad hoc endpoint to retrieve the available disk
      // space from fusor server.
      //
      // load disk space -> load discovered hosts -> aggregate and return
      // composite Ember object.
      //
      // f(diskSpace, hypervisors) = maxResources

      var diskSpaceP = this.loadDiskSpace(deployment);

      return diskSpaceP.then(function (disk) {
        // Load hosts if not already available
        return _ember['default'].RSVP.hash({
          disk: disk,
          hvs: deployment.get('discovered_hosts')
        });
      }).then(function (hash) {
        // Calculate aggregates
        var hvs = hash.hvs;

        var cpus = hvs.reduce(function (accum, hv) {
          var cpu = hv.get('cpus') || 0;
          return accum + cpu;
        }, 0);

        var ram = _fusorEmberCliUtilsHumanize['default'].rawToHuman(hvs.reduce(function (accum, hv) {
          var mem = hv.get('memory_human_size') || '0 B';
          return accum + _fusorEmberCliUtilsHumanize['default'].humanToRaw(mem);
        }, 0), { output: 'object' }).value;

        var humanDisk = _fusorEmberCliUtilsHumanize['default'].rawToHuman(hash.disk, { output: 'object' });
        var displayVal = humanDisk.suffix === 'TB' ? humanDisk.value * 1024 : humanDisk.value;

        return _ember['default'].Object.create({
          vcpuAvailable: cpus,
          ramAvailable: ram,
          diskAvailable: displayVal
        });
      });
    },

    loadDiskSpace: function loadDiskSpace(deployment) {
      var deploymentId = deployment.get('id');
      var token = _ember['default'].$('meta[name="csrf-token"]').attr('content');
      return (0, _icAjax['default'])({
        url: '/fusor/api/v21/deployments/' + deploymentId + '/openshift_disk_space',
        headers: {
          "Accept": "application/json",
          "X-CSRF-Token": token
        }
      }).then(function (res) {
        return res.openshift_disk_space * 1024 * 1024;
      }) // Server returns MBs
      ['catch'](function (err) {
        // jqXHR.responseJSON
        console.log('An error occurred while loading available disk space!');
        console.log(err);
        return 0;
      });
    },

    deactivate: function deactivate() {
      return this.send('saveDeployment', null);
    }

  });
});
define('fusor-ember-cli/routes/openshift', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({});
});
define('fusor-ember-cli/routes/openstack/assign-nodes', ['exports', 'ember', 'ic-ajax'], function (exports, _ember, _icAjax) {
  exports['default'] = _ember['default'].Route.extend({
    setupController: function setupController(controller, model) {
      var _this = this;

      controller.set('model', model);
      this.loadOpenStack().then(function () {
        return _this.ensureFlavors();
      })['catch'](function (error) {
        controller.set('showSpinner', false);
        controller.set('errorMsg', 'Error retrieving OpenStack data: ' + _this.formatError(error));
        console.log('Error retrieving OpenStack data: ', error);
      })['finally'](function () {
        return controller.set('showSpinner', false);
      });
    },

    deactivate: function deactivate() {
      this.updateOpenstackDeployment();
      this.updateOpenstackDeployment();
      this.updateDeploymentPlan(this.getEditedParams());
      this.send('saveOpenstackDeployment');
    },

    loadOpenStack: function loadOpenStack() {
      var _this2 = this;

      var controller = this.get('controller');
      var deployment = this.get('controller.deployment');
      var deploymentId = this.get('controller.deploymentId');
      var openstackDeployment = this.get('controller.openstackDeployment');

      if (!deployment.get('deploy_openstack') || _ember['default'].isBlank(openstackDeployment.get('undercloud_admin_password'))) {
        controller.set('errorMsg', 'Undercloud not deployed');
        return _ember['default'].RSVP.Promise.reject('Undercloud not deployed');
      }

      controller.set('showSpinner', true);
      controller.set('errorMsg', null);
      controller.set('isOspLoading', true);

      return _ember['default'].RSVP.hash({
        // plan: this.store.findRecord('deployment-plan', deployment.get('id'), {reload: true}),
        // findRecord on deployment-plan is caching and not reloading, so using queryRecord for now.
        plan: this.store.queryRecord('deployment-plan', { deployment_id: deploymentId }),
        images: this.store.query('image', { deployment_id: deploymentId }),
        nodes: this.store.query('node', { deployment_id: deploymentId }),
        profiles: this.store.query('flavor', { deployment_id: deploymentId })
      }).then(function (hash) {
        controller.set('plan', hash.plan);
        controller.set('images', hash.images);
        controller.set('nodes', hash.nodes);
        controller.set('profiles', hash.profiles);
        _this2.updateRoleAssignments();
        _this2.updateEditableParams();
      });
    },

    ensureFlavors: function ensureFlavors() {
      var _this3 = this;

      return this.delayedRetryGetFlavors().then(function () {
        return _this3.delayedRetryGetFlavors();
      }).then(function () {
        return _this3.delayedRetryGetFlavors();
      });
    },

    delayedRetryGetFlavors: function delayedRetryGetFlavors() {
      var _this4 = this;

      var controller = this.get('controller');
      var deploymentId = this.get('controller.deploymentId');

      if (_ember['default'].isPresent(controller.get('profiles'))) {
        return _ember['default'].RSVP.Promise.resolve(true);
      }

      return new _ember['default'].RSVP.Promise(function (resolve, reject) {
        _ember['default'].run.later(_this4, function () {
          _this4.store.query('flavor', { deployment_id: deploymentId }).then(function (profiles) {
            controller.set('profiles', profiles);
            resolve(profiles);
          })['catch'](function (error) {
            return reject(error);
          });
        }, 10000);
      });
    },

    updateRoleAssignments: function updateRoleAssignments() {
      var _this5 = this;

      var roles = this.get('controller.roles');

      roles.forEach(function (role) {
        role.set('flavor', _this5.get('controller.openstackDeployment.' + role.get('flavorDeploymentAttributeName')) || 'baremetal');
        role.set('count', _this5.get('controller.openstackDeployment.' + role.get('countDeploymentAttributeName')) || 0);
      });
    },

    updateEditableParams: function updateEditableParams() {
      var roles = this.get('controller.roles');
      var plan = this.get('controller.plan');
      var params = this.get('controller.plan.parameters');
      var globalParams = [];
      var uneditableParams = {};

      roles.forEach(function (role) {
        role.set('parameters', []);
        role.set('image', plan.getParamValue(role.get('imageParameterName')));
        uneditableParams[role.get('countParameterName')] = true;
        uneditableParams[role.get('flavorParameterName')] = true;
        uneditableParams[role.get('imageParameterName')] = true;
      });

      for (var paramKey in params) {
        if (params.hasOwnProperty(paramKey)) {
          var param = params[paramKey];

          if (uneditableParams[paramKey] || param['Type'] === 'Json') {
            continue;
          }

          var paramObject = _ember['default'].Object.create({
            key: paramKey,
            label: param['Label'],
            isBoolean: param['Type'] === 'Boolean',
            'default': param['Default'],
            value: param['Default'],
            type: param['Type'] === 'Number' ? 'number' : 'text',
            description: param['Description']
          });

          var role = this.findRoleForParamKey(paramKey);

          if (role) {
            role.get('parameters').push(paramObject);
          } else {
            globalParams.push(paramObject);
          }
        }
      }

      this.set('controller.globalPlanParameters', globalParams);
    },

    findRoleForParamKey: function findRoleForParamKey(paramKey) {
      var roles = this.get('controller.roles');
      return this.get('controller.roles').find(function (role) {
        return role.get('parameterPrefixes').find(function (prefix) {
          return paramKey.substring(0, prefix.length) === prefix;
        });
      });
    },

    updateOpenstackDeployment: function updateOpenstackDeployment() {
      var _this6 = this;

      var roles = this.get('controller.roles');
      var profiles = this.get('controller.profiles');
      var hasValidNodeAssignments = this.get('controller.hasValidNodeAssignments');
      var computeFlavor = roles.findBy('name', 'Compute').get('flavor');

      roles.forEach(function (role) {
        if (!role.isAssigned()) {
          role.set('count', 0);
          if (hasValidNodeAssignments) {
            role.set('flavor', computeFlavor);
          }
        }
        _this6.set('controller.openstackDeployment.' + role.get('flavorDeploymentAttributeName'), role.get('flavor'));
        _this6.set('controller.openstackDeployment.' + role.get('countDeploymentAttributeName'), role.get('count'));
      });

      this.set('controller.openstackDeployment.overcloud_ceph_storage_flavor', computeFlavor);
      this.set('controller.openstackDeployment.overcloud_ceph_storage_count', 0);
    },

    getEditedParams: function getEditedParams() {
      var _this7 = this;

      var editedParams = {};
      var globalPlanParameters = this.get('controller.globalPlanParameters');
      var roles = this.get('controller.roles');
      var plan = this.get('controller.plan');

      roles.forEach(function (role) {
        var roleImage = role.get('image');
        var paramKey = role.get('imageParameterName');
        var paramImage = plan.getParamValue(paramKey);

        if (roleImage !== paramImage) {
          editedParams[paramKey] = roleImage;
        }
      });

      this.buildEditedParams(editedParams, globalPlanParameters);
      roles.forEach(function (role) {
        return _this7.buildEditedParams(editedParams, role.get('parameters'));
      });

      return editedParams;
    },

    buildEditedParams: function buildEditedParams(params, paramsArray) {
      paramsArray.forEach(function (gpp) {
        if (gpp.get('value') !== gpp.get('default')) {
          params[gpp.get('key')] = gpp.get('value');
        }
      });
    },

    updateDeploymentPlan: function updateDeploymentPlan(params) {
      if (!params || JSON.stringify(params) === JSON.stringify({})) {
        return;
      }

      var deploymentId = this.get('controller.deploymentId');
      (0, _icAjax['default'])({
        url: '/fusor/api/openstack/deployments/' + deploymentId + '/deployment_plans/overcloud/update_parameters',
        type: 'PUT',
        headers: {
          "Accept": "application/json",
          "Content-Type": "application/json",
          "X-CSRF-Token": _ember['default'].$('meta[name="csrf-token"]').attr('content')
        },
        data: JSON.stringify({ 'parameters': params })
      })['catch'](function (error) {
        error = error.jqXHR;
        console.log('ERROR updating parameters');
        console.log(error);
      });
    },

    formatError: function formatError(error) {
      var errorMessage = '';
      if (_ember['default'].typeOf(error) === 'error') {
        errorMessage = error.message + ': ';
        if (error.errors) {
          error.errors.forEach(function (subError) {
            return errorMessage += ' ' + subError;
          });
        }
      }

      return errorMessage;
    }

  });
});
define('fusor-ember-cli/routes/openstack/index', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({
    beforeModel: function beforeModel() {
      this.transitionTo('openstack.undercloud-deploy');
    }
  });
});
define('fusor-ember-cli/routes/openstack/overcloud', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({

    deactivate: function deactivate() {
      if (!this.get('controller.model.external_ceph_storage')) {
        this.clearCephParams();
      }
      return this.send('saveOpenstackDeployment', null);
    },

    clearCephParams: function clearCephParams() {
      var openstackDeployment = this.get('controller.model');
      openstackDeployment.set('ceph_ext_mon_host', '');
      openstackDeployment.set('ceph_cluster_fsid', '');
      openstackDeployment.set('ceph_client_username', '');
      openstackDeployment.set('ceph_client_key', '');
      openstackDeployment.set('nova_rbd_pool_name', 'vms');
      openstackDeployment.set('cinder_rbd_pool_name', 'volumes');
      openstackDeployment.set('glance_rbd_pool_name', 'images');
    }
  });
});
define('fusor-ember-cli/routes/openstack/register-nodes', ['exports', 'ember', 'ic-ajax', 'fusor-ember-cli/mixins/polling-promise-mixin', 'fusor-ember-cli/utils/osp/osp-node-manager'], function (exports, _ember, _icAjax, _fusorEmberCliMixinsPollingPromiseMixin, _fusorEmberCliUtilsOspOspNodeManager) {
  exports['default'] = _ember['default'].Route.extend(_fusorEmberCliMixinsPollingPromiseMixin['default'], {
    loadAllInterval: 10000,

    setupController: function setupController(controller, model) {
      controller.set('model', model);
      controller.set('nodeManagers', []);
      controller.set('introspectionTasks', []);
      controller.set('errorMsg', null);

      var deploymentId = this.modelFor('deployment').get('id');
      this.store.query('image', { deployment_id: deploymentId }).then(function (results) {
        var bmDeployKernelImage = results.findBy('name', 'bm-deploy-kernel');
        var bmDeployRamdiskImage = results.findBy('name', 'bm-deploy-ramdisk');
        controller.set('bmDeployKernelImage', bmDeployKernelImage);
        controller.set('bmDeployRamdiskImage', bmDeployRamdiskImage);
      });

      controller.set('showSpinner', true);
      this.loadAll().then(function () {
        return controller.set('showSpinner', false);
      });
      this.stopPolling('loadAll');
      this.startPolling('loadAll');
    },

    deactivate: function deactivate() {
      this.stopPolling('loadAll');
      this.send('saveOpenstackDeployment');
    },

    actions: {
      deleteNode: function deleteNode(node) {
        this.set('deleteNode', node);
        this.set('openDeleteNodeConfirmation', true);
        this.set('closeDeleteNodeConfirmation', false);
      },

      restartPolling: function restartPolling() {
        var _this = this;

        this.stopPolling('loadAll');
        this.loadAll().then(function () {
          _this.startPolling('loadAll');
        });
      },

      error: function error(_error, message) {
        console.log(_error, message);
        this.set('controller.errorMsg', this.formatError(_error, message));
      },

      resetError: function resetError() {
        this.set('controller.errorMsg', null);
      },

      loadError: function loadError(error, message) {
        console.log(error, message);
        this.set('controller.loadErrorMsg', this.formatError(error, message));
      },

      resetLoadError: function resetLoadError() {
        this.set('controller.loadErrorMsg', null);
      }
    },

    loadAll: function loadAll() {
      var _this2 = this;

      return _ember['default'].RSVP.Promise.all([this.loadNodes(), this.loadPorts(), this.loadIntrospectionTasks()]).then(function () {
        _this2.organizeNodes();
        _this2.loadForemanTasks();
      }).then(function () {
        _this2.send('resetLoadError');
      })['catch'](function (error) {
        _this2.send('loadError', error, 'Error retrieving OpenStack node data.');
      });
    },

    loadNodes: function loadNodes() {
      var controller = this.get('controller');
      return this.store.query('node', { deployment_id: controller.get('deployment.id') }).then(function (result) {
        controller.set('nodes', result);
      });
    },

    loadPorts: function loadPorts() {
      var controller = this.get('controller');
      var deploymentId = this.get('controller.deployment.id');
      var token = _ember['default'].$('meta[name="csrf-token"]').attr('content');
      var url = '/fusor/api/openstack/deployments/' + deploymentId + '/node_ports';

      return (0, _icAjax['default'])({
        url: url,
        type: 'GET',
        headers: {
          "Accept": "application/json",
          "Content-Type": "application/json",
          "X-CSRF-Token": token
        },
        data: {}
      }).then(function (result) {
        controller.set('ports', result.ports);
      });
    },

    loadIntrospectionTasks: function loadIntrospectionTasks() {
      var controller = this.get('controller');
      var deploymentId = this.get('controller.deployment.id');
      return this.store.findRecord('deployment', deploymentId, { reload: true }).then(function (deployment) {
        controller.set('introspectionTasks', deployment.get('introspection_tasks'));
      });
    },

    organizeNodes: function organizeNodes() {
      var nodes = this.get('controller.nodes');
      var nodeManagers = this.get('controller.nodeManagers');
      var processedNodeIds = {};
      var nodeCount = 0;

      if (!nodes) {
        return;
      }

      nodes.forEach(function (node) {
        processedNodeIds[node.get('id')] = true;

        if (node.get('ready')) {
          nodeCount++;
        }

        var manager = nodeManagers.find(function (mgr) {
          return mgr.driverMatchesNode(node);
        });

        if (!manager) {
          manager = _fusorEmberCliUtilsOspOspNodeManager['default'].create({});
          manager.setDriverInfoFromNode(node);
          nodeManagers.unshiftObject(manager);
        }

        manager.putNode(node);
      });

      nodeManagers.forEach(function (manager) {
        var notDeleted = manager.get('nodes').filter(function (node) {
          return processedNodeIds[node.get('id')];
        });
        manager.set('nodes', notDeleted);
      });

      this.set('controller.openstackDeployment.overcloud_node_count', nodeCount);
    },

    loadForemanTasks: function loadForemanTasks() {
      var _this3 = this;

      var taskPromises = [];
      var introspectionTasks = this.get('controller.introspectionTasks') || [];
      var nodes = this.get('controller.nodes') || [];

      introspectionTasks.forEach(function (introspectionTask) {
        var foremanTaskId = introspectionTask.get('task_id');

        var node = nodes.findBy('id', introspectionTask.get('node_uuid'));
        var nodeNotReady = node && !node.get('ready');

        if (foremanTaskId && nodeNotReady) {
          taskPromises.push(_this3.store.findRecord('foreman-task', foremanTaskId, { reload: true }));
        }
      });

      return _ember['default'].RSVP.all(taskPromises).then(function (resolvedTasks) {
        _this3.get('controller').set('foremanTasks', resolvedTasks);
      });
    },

    formatError: function formatError(error, message) {
      var errorMessage = '';
      switch (_ember['default'].typeOf(error)) {
        case 'string':
          errorMessage = error;
          break;
        case 'error':
          errorMessage = error.message + ': ';
          if (error.errors) {
            error.errors.forEach(function (subError) {
              if (subError.title) {
                errorMessage += subError.title;
              }
              if (subError.status) {
                errorMessage += '  Status: ' + subError.status;
              }
            });
          }
          break;
        case 'object':
          if (error.jqXHR) {
            var _status = error.jqXHR.status;
            var statusText = error.jqXHR.statusText;
            var msg = error.jqXHR.responseJSON ? error.jqXHR.responseJSON.displayMessage : '';
            errorMessage = _status + ' ' + statusText + ': ' + msg;
          }
      }

      return message ? message + ' ' + errorMessage : errorMessage;
    }
  });
});
define('fusor-ember-cli/routes/openstack/undercloud-deploy', ['exports', 'ember', 'ic-ajax', 'fusor-ember-cli/mixins/polling-promise-mixin'], function (exports, _ember, _icAjax, _fusorEmberCliMixinsPollingPromiseMixin) {
  exports['default'] = _ember['default'].Route.extend(_fusorEmberCliMixinsPollingPromiseMixin['default'], {
    setupController: function setupController(controller, model) {
      var _this = this;

      controller.set('model', model);
      this.displayStackStatus()['catch'](function (error) {
        console.log(error);
        _this.set('controller.errorMsg', 'Error trying to retrieve stacks from undercloud.  ' + error.jqXHR.status + ': ' + error.jqXHR.statusText);
        _this.set('controller.showLoadingSpinner', false);
      });
    },

    deactivate: function deactivate() {
      return this.send('saveOpenstackDeployment', null);
    },

    actions: {
      deployUndercloud: function deployUndercloud() {
        var _this2 = this;

        this.deployUndercloudRequest().then(function () {
          return _this2.displayDeployUndercloudStatus();
        }).then(function () {
          return _this2.refreshDeployedUndercloudModel();
        })['catch'](function (error) {
          return _this2.displayDeploymentError(error);
        })['finally'](function () {
          return _this2.set('controller.showLoadingSpinner', false);
        });
      },

      deleteStack: function deleteStack() {
        var _this3 = this;

        this.deleteStackRequest().then(function () {
          return _this3.displayStackStatus();
        })['catch'](function (error) {
          _this3.displayDeleteError(error);
          _this3.set('controller.showLoadingSpinner', false);
        });
      }
    },

    displayStackStatus: function displayStackStatus() {
      var _this4 = this;

      var deployment = this.modelFor('deployment');
      var openstackDeployment = this.get('controller.openstackDeployment');

      if (deployment.get('isStarted') || !openstackDeployment.get('isUndercloudConnected')) {
        return _ember['default'].RSVP.Promise.resolve(null);
      }

      this.set('controller.errorMsg', null);
      this.set('controller.loadingSpinnerText', 'Inspecting Undercloud...');
      this.set('controller.showLoadingSpinner', true);

      return this.getUndercloudStacks().then(function () {
        var stack = _this4.get('controller.stack');
        var stackIsDeleting = _this4.get('controller.stack.stack_status') === 'DELETE_IN_PROGRESS';

        if (stackIsDeleting) {
          _this4.set('controller.showLoadingSpinner', true);
          _this4.set('controller.loadingSpinnerText', 'Deleting stack ' + stack.get('stack_name') + '...');
          _this4.startPolling('pollForDeletedStackStatus');
        } else {
          _this4.set('controller.showLoadingSpinner', false);
        }
      });
    },

    deployUndercloudRequest: function deployUndercloudRequest() {
      var _this5 = this;

      var deploymentId = this.get('controller.deploymentId');
      var openstackDeployment = this.get('controller.openstackDeployment');
      this.set('controller.deploymentError', null);

      this.set('controller.errorMsg', null);
      this.set('controller.loadingSpinnerText', 'Deploying undercloud...');
      this.set('controller.showLoadingSpinner', true);

      return (0, _icAjax['default'])({
        url: '/fusor/api/openstack/deployments/' + deploymentId + '/underclouds',
        type: 'POST',
        data: JSON.stringify({
          'undercloud_host': openstackDeployment.get('undercloud_ip_address'),
          'undercloud_user': openstackDeployment.get('undercloud_ssh_username'),
          'undercloud_password': openstackDeployment.get('undercloud_ssh_password'),
          'deployment_id': deploymentId
        }),
        headers: {
          'Accept': 'application/json',
          'Content-Type': 'application/json',
          'X-CSRF-Token': _ember['default'].$('meta[name="csrf-token"]').attr('content')
        }
      }).then(function (response) {
        if (_this5.get('controller.applicationController.isEmberCliMode')) {
          // only used for development to enabled OSP tabs (disableOspTab: false)
          openstackDeployment.set('openstack_undercloud_password', 'this-passwd-is-populated by fusor/server');
          _this5.send('saveOpenstackDeployment', null);
        }
      });
    },

    displayDeployUndercloudStatus: function displayDeployUndercloudStatus() {
      var _this6 = this;

      var deploymentId = this.get('controller.deploymentId');

      this.set('controller.errorMsg', null);
      this.set('controller.loadingSpinnerText', 'Checking deployment status ...');
      this.set('controller.showLoadingSpinner', true);
      this.set('controller.deploymentError', null);

      return new _ember['default'].RSVP.Promise(function (resolve, reject) {
        (0, _icAjax['default'])({
          url: '/fusor/api/openstack/deployments/' + deploymentId + '/underclouds/' + deploymentId,
          type: 'GET',
          contentType: 'application/json'
        }).then(function (response) {
          if (response.deployed) {
            resolve(null);
          } else {
            reject('There was an issue deploying the undercloud.  Please check foreman logs.');
          }
          _this6.set('controller.showLoadingSpinner', false);
        });
      });
    },

    refreshDeployedUndercloudModel: function refreshDeployedUndercloudModel() {
      var _this7 = this;

      // this.refresh();
      // Refresh doesn't work.  Manually reloading the openstack-deployment object.
      var openstackDeploymentId = this.get('controller.openstackDeployment.id');
      this.set('controller.showLoadingSpinner', true);

      return this.store.findRecord('openstack-deployment', openstackDeploymentId, { reload: true }).then(function (ospd) {
        return _this7.set('controller.openstackDeployment', ospd);
      }).then(function () {
        return _this7.displayStackStatus();
      });
    },

    getUndercloudStacks: function getUndercloudStacks() {
      var _this8 = this;

      var deploymentId = this.modelFor('deployment').get('id');
      var openstackDeployment = this.get('controller.openstackDeployment');

      return (0, _icAjax['default'])({
        url: '/fusor/api/openstack/deployments/' + deploymentId + '/stacks',
        type: 'GET',
        headers: {
          'Accept': 'application/json',
          'Content-Type': 'application/json',
          'X-CSRF-Token': _ember['default'].$('meta[name="csrf-token"]').attr('content')
        }
      }).then(function (response) {
        var stack = response.stacks[0] ? _ember['default'].Object.create(response.stacks[0]) : null;
        _this8.set('controller.stack', stack);
        openstackDeployment.set('overcloud_deployed', _ember['default'].isPresent(stack));
      });
    },

    pollForDeletedStackStatus: function pollForDeletedStackStatus() {
      var _this9 = this;

      return this.getUndercloudStacks().then(function () {
        var stackIsDeleting = _this9.get('controller.stack.stack_status') === 'DELETE_IN_PROGRESS';
        if (!stackIsDeleting) {
          _this9.stopPolling('pollForDeletedStackStatus');
          _this9.set('controller.showLoadingSpinner', false);
        }
      });
    },

    deleteStackRequest: function deleteStackRequest() {
      var deploymentId = this.modelFor('deployment').get('id');
      var controller = this.get('controller');
      var stackName = this.get('controller.stack.stack_name');
      var openstackDeployment = controller.get('openstackDeployment');

      controller.set('errorMsg', null);
      controller.set('loadingSpinnerText', 'Deleting stack ' + stackName + '...');
      controller.set('showLoadingSpinner', true);

      return (0, _icAjax['default'])({
        url: '/fusor/api/openstack/deployments/' + deploymentId + '/stacks/' + stackName,
        type: 'DELETE',
        headers: {
          'Accept': 'application/json',
          'Content-Type': 'application/json',
          'X-CSRF-Token': _ember['default'].$('meta[name="csrf-token"]').attr('content')
        }
      });
    },

    displayDeploymentError: function displayDeploymentError(error) {
      console.log(error);
      if (_ember['default'].typeOf(error) === 'string') {
        this.set('controller.deploymentError', error);
      } else if (_ember['default'].typeOf(error) === 'object' && error.jqXHR && error.jqXHR.responseJSON) {
        this.set('controller.deploymentError', error.jqXHR.responseJSON.errors);
      } else {
        this.set('controller.deploymentError', JSON.stringify(error));
      }
    },

    displayDeleteError: function displayDeleteError(error) {
      console.log(error);
      this.set('controller.errorMsg', 'Error trying to delete stack from undercloud.  ' + error.jqXHR.status + ': ' + error.jqXHR.statusText);
    }
  });
});
define('fusor-ember-cli/routes/openstack', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({

    model: function model() {
      return this.modelFor('deployment').get('openstack_deployment');
    },

    actions: {
      saveOpenstackDeployment: function saveOpenstackDeployment() {
        var deployment = this.modelFor('deployment');
        var openstackDeployment = this.get('controller.model');
        if (!deployment.get('isStarted')) {
          openstackDeployment.save();
        }
      }
    }
  });
});
define('fusor-ember-cli/routes/readme', ['exports', 'ember', 'ic-ajax'], function (exports, _ember, _icAjax) {
  exports['default'] = _ember['default'].Route.extend({

    model: function model() {
      return (0, _icAjax['default'])('https://raw.githubusercontent.com/isratrade/fusor/readme/fusor-ember-cli/readme-demo.md');
    }
  });
});
define('fusor-ember-cli/routes/review/index', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({
    beforeModel: function beforeModel() {
      this.transitionTo('review.installation');
    }
  });
});
define('fusor-ember-cli/routes/review/installation', ['exports', 'ember', 'ic-ajax', 'fusor-ember-cli/mixins/needs-existing-manifest-helpers'], function (exports, _ember, _icAjax, _fusorEmberCliMixinsNeedsExistingManifestHelpers) {
  exports['default'] = _ember['default'].Route.extend(_fusorEmberCliMixinsNeedsExistingManifestHelpers['default'], {

    beforeModel: function beforeModel() {
      // Ensure the models have been persisted so that we're validating/syncing up to date data.
      var deployment = this.modelFor('deployment');

      if (deployment.get('isStarted')) {
        return;
      }

      var promises = {
        deployment: deployment.save()
      };

      if (deployment.get('deploy_openstack')) {
        promises.openstack_deployment = deployment.get('openstack_deployment').then(function (openstack_deployment) {
          return openstack_deployment.save();
        });
      }

      return _ember['default'].RSVP.hash(promises);
    },

    model: function model() {
      var _this = this;

      var reviewModel = this.modelFor('review');
      var subModel = this.modelFor('subscriptions');
      var modelHash = { reviewModel: reviewModel };

      modelHash.subscriptionPools = this.loadSubscriptionPools();

      if (subModel) {
        // Use subscriptions model if the loading has already been done
        modelHash.sessionPortal = subModel.sessionPortal;
        modelHash.useExistingManifest = subModel.useExistingManifest;
        if (modelHash.useExistingManifest) {
          modelHash.subscriptions = subModel.subscriptions;
        }

        return _ember['default'].RSVP.hash(modelHash);
      } else {
        modelHash.sessionPortal = this.loadSessionPortal();

        // subscriptions model isn't available, maybe because of a page refresh
        // Need to load this data independently
        return this.shouldUseExistingManifest().then(function (useExistingManifest) {

          modelHash.useExistingManifest = useExistingManifest;

          if (useExistingManifest) {
            modelHash.subscriptions = _this.loadSubscriptions();
          }

          return _ember['default'].RSVP.hash(modelHash);
        });
      }
    },

    setupController: function setupController(controller, modelHash) {
      var _this2 = this;

      var model = modelHash.reviewModel;
      controller.set('model', model);
      controller.set('showErrorMessage', false);
      controller.set('useExistingManifest', modelHash.useExistingManifest);
      if (model.get('deploy_rhev')) {
        this.store.findAll('hostgroup').then(function (results) {
          var fusorBaseHostgroup = results.filterBy('name', 'Fusor Base').get('firstObject');
          var fusorBaseDomain = fusorBaseHostgroup.get('domain.name');
          controller.set('engineDomain', fusorBaseDomain);
          controller.set('hypervisorDomain', fusorBaseDomain);
        });
      }

      if (modelHash.useExistingManifest) {
        controller.set('useExistingManifest', true);
        controller.set('reviewSubscriptions', modelHash.subscriptions);
      } else if (model.get('is_disconnected')) {
        controller.set('reviewSubscriptions', this.modelFor('subscriptions/review-subscriptions'));
      } else {
        var reviewSubscriptions = model.get('subscriptions').filter(function (sub) {
          return sub.get('source') == 'added';
        });

        var hasSubs = reviewSubscriptions.reduce(function (prev, sub) {
          return prev || sub.get('quantity_to_add') > 0;
        }, false); // initial val

        controller.set('reviewSubscriptions', reviewSubscriptions);
        controller.set('hasSubscriptionsToAttach', hasSubs);
        controller.set('hasSessionPortal', _ember['default'].isPresent(modelHash.sessionPortal));
        controller.set('hasSubscriptionPools', _ember['default'].isPresent(modelHash.subscriptionPools));
      }

      controller.set('validationErrors', []);
      controller.set('validationWarnings', []);

      if (!model.get('isStarted')) {
        // the PUT request from saveDeployment was firing too late and the server was syncing/validating stale data.
        // the model.save ensures the server has the most recent version of deployment before proceeding.
        controller.set('showSpinner', true);
        this.validate().then(function () {
          return _this2.syncOpenStack();
        })['catch'](function (error) {
          console.log('error', error);
          controller.set('errorMsg', error.jqXHR.responseText);
          controller.set('showErrorMessage', true);
        })['finally'](function () {
          controller.set('showSpinner', false);
        });
      }
    },

    validate: function validate() {
      var controller = this.get('controller');
      var deploymentId = this.get('controller.model.id');
      var token = _ember['default'].$('meta[name="csrf-token"]').attr('content');
      var validationErrors = controller.get('validationErrors');

      controller.set('spinnerTextMessage', "Validating deployment...");

      return (0, _icAjax['default'])({
        url: '/fusor/api/v21/deployments/' + deploymentId + '/validate',
        type: "GET",
        headers: {
          "Accept": "application/json",
          "Content-Type": "application/json",
          "X-CSRF-Token": token
        },
        data: {}
      }).then(function (response) {
        controller.set('validationErrors', response.validation.errors);
        controller.set('validationWarnings', response.validation.warnings);
      });
    },

    syncOpenStack: function syncOpenStack() {
      var controller = this.get('controller');
      var deployment = this.get('controller.model');
      var openstack_deployment = this.get('controller.model.openstack_deployment');
      var token = _ember['default'].$('meta[name="csrf-token"]').attr('content');

      if (!deployment.get('deploy_openstack') || !openstack_deployment || _ember['default'].isPresent(controller.get('validationErrors'))) {
        return _ember['default'].RSVP.Promise.resolve('no OpenStack sync needed');
      }

      controller.set('spinnerTextMessage', "Syncing OpenStack...");

      return (0, _icAjax['default'])({
        url: '/fusor/api/v21/openstack_deployments/' + openstack_deployment.get('id') + '/sync_openstack',
        type: "POST",
        headers: {
          "Accept": "application/json",
          "Content-Type": "application/json",
          "X-CSRF-Token": token
        }
      });
    },

    loadSessionPortal: function loadSessionPortal() {
      return this.store.findAll('session-portal').then(function (results) {
        return results.get('firstObject');
      });
    },

    loadSubscriptionPools: function loadSubscriptionPools(deployment_id) {
      var deployment = this.modelFor('deployment');
      return this.store.query('subscription', {
        deployment_id: deployment.get('id'),
        source: 'added'
      });
    }
  });
});
define('fusor-ember-cli/routes/review/progress/details', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({

    beforeModel: function beforeModel() {
      if (_ember['default'].isBlank(this.modelFor('review.progress.overview'))) {
        this.transitionTo('review.progress.overview');
      }
    },

    model: function model() {
      return this.modelFor('review.progress.overview');
    },

    setupController: function setupController(controller, model) {
      controller.set('model', model);
      controller.set('isLoadingMoreTasks', true);

      if (model.manageContentTask) {
        var manageContentTaskUuid = model.manageContentTask.get('id');
        console.log(manageContentTaskUuid);
        return this.store.query('foreman-task', {
          search: "parent_task_id=" + manageContentTaskUuid
        }).then(function (synctasks) {
          controller.set('synctasks', synctasks);
          return controller.set('isLoadingMoreTasks', false);
        });
      } else {
        return controller.set('isLoadingMoreTasks', false);
      }
    }

  });
});
define('fusor-ember-cli/routes/review/progress/log', ['exports', 'ember', 'ic-ajax', 'fusor-ember-cli/mixins/polling-promise-mixin'], function (exports, _ember, _icAjax, _fusorEmberCliMixinsPollingPromiseMixin) {
  exports['default'] = _ember['default'].Route.extend(_fusorEmberCliMixinsPollingPromiseMixin['default'], {

    onPollInterval: 10000,
    CHUNKSIZE: 200,

    model: function model() {
      return _ember['default'].Object.create({
        fusor_log: { path: '' },
        foreman_log: { path: '' },
        foreman_proxy_log: { path: '' },
        candlepin_log: { path: '' },
        ansible_log: { path: '' },
        messages_log: { path: '' }
      });
    },

    setupController: function setupController(controller, model) {
      controller.set('model', model);
      this.initLog();
    },

    deactivate: function deactivate() {
      this.stopPolling();
    },

    actions: {
      updateDisplayedLog: function updateDisplayedLog() {
        var _this = this;

        this.updateDisplayedLog().then(function () {
          return _this.navNextSearchResult();
        });
      },

      search: function search() {
        var _this2 = this;

        this.updateDisplayedLog().then(function () {
          return _this2.navNextSearchResult();
        });
      },

      clearSearch: function clearSearch() {
        this.updateDisplayedLog();
      },

      changeLogType: function changeLogType() {
        var _this3 = this;

        var logType = this.get('controller.logType') || 'fusor_log';

        this.stopPolling();
        this.set('controller.displayedLog', this.get('controller.model.' + logType));

        this.updateDisplayedLog().then(function () {
          return _this3.initLog();
        }).then(function () {
          return _this3.navNextSearchResult();
        });
      }
    },

    updateDisplayedLog: function updateDisplayedLog() {
      var _this4 = this;

      var logType = this.get('controller.logType') || 'fusor_log',
          promises = [],
          entries,
          idx = 0,
          chunksize = 200,
          showLogTruncated;

      this.set('controller.searchResultIdx', 0);
      this.set('controller.searchResults', []);
      this.set('controller.logPath', this.get('controller.model.' + logType + '.path'));
      this.set('controller.displayedLogHtml', '');
      this.set('controller.newEntries', []);

      entries = this.get('controller.model.' + logType + '.entries');

      if (entries) {
        showLogTruncated = entries[0] && entries[0].get('line_number') > 1;
        this.set('controller.showLogTruncated', showLogTruncated);

        while (idx < entries.length) {
          promises.push(this.updateDisplayedLogChunk(logType, entries, idx, chunksize));
          idx += chunksize;
        }
      }

      return _ember['default'].RSVP.Promise.all(promises).then(function (values) {
        _this4.sortSearchResults();
        _this4.set('controller.displayedLogHtml', _ember['default'].String.htmlSafe(values.join('')));
      });
    },

    updateDisplayedLogChunk: function updateDisplayedLogChunk(logType, allLogEntries, firstIndex, chunkSize) {
      var _this5 = this;

      var max = Math.min(firstIndex + chunkSize, allLogEntries.length);
      var controller = this.get('controller');

      return new Promise(function (resolve, reject) {
        var displayedLogHtml = _this5.get('controller.displayedLogHtml') || '';
        var displayedLogEntries = [];
        var controllerLogType = controller.get('logType') || 'fusor_log';

        if (controllerLogType !== logType) {
          return reject('log type has changed');
        }

        for (var i = firstIndex; i < max; i++) {
          var entry = allLogEntries[i];
          if (_this5.isIncluded(entry)) {
            displayedLogEntries.push(_this5.getHtml(entry));
          }
        }

        resolve(displayedLogEntries.join(''));
      });
    },

    initLog: function initLog() {
      var self = this,
          controller = self.get('controller');

      return _ember['default'].RSVP.Promise.all([self.updateForemanTask(), self.updateLog()]).then(function () {
        if (controller.get('deploymentInProgress')) {
          self.startPolling();
        } else {
          self.stopPolling();
        }
      });
    },

    updateLog: function updateLog() {
      var self = this,
          controller = this.get('controller'),
          params = { log_type: controller.get('logType') || 'fusor_log' },
          entries = controller.get('model.' + params.log_type + '.entries');

      if (!entries || entries.length === 0) {
        return self.getFullLog(params);
      }

      params.line_number_gt = entries[entries.length - 1].line_number;
      return self.getJsonLog(params).then(function (response) {
        self.addNewEntries(controller, response);
      }, function (error) {
        self.showError(error);
      });
    },

    updateForemanTask: function updateForemanTask() {
      var self = this,
          deployment = self.modelFor('deployment'),
          controller = this.get('controller');
      return this.store.findRecord('foreman-task', deployment.get('foreman_task_uuid')).then(function (foremanTask) {
        var deploymentInProgress = foremanTask.get('result') === 'pending' && foremanTask.get('progress') !== '1';
        controller.set('deploymentInProgress', deploymentInProgress);
      });
    },

    onPoll: function onPoll() {
      var _this6 = this;

      return this.updateLog().then(function () {
        return _this6.updateForemanTask();
      }).then(function () {
        if (!_this6.get('controller.deploymentInProgress')) {
          _this6.stopPolling();
        }
      });
    },

    getFullLog: function getFullLog(params) {
      var self = this,
          controller = this.get('controller');
      controller.set('isLoading', true);

      return this.getJsonLog(params).then(function (response) {
        self.loadLog(params.log_type, response);
      }, function (error) {
        self.showError(error);
      })['finally'](function () {
        controller.set('isLoading', false);
      });
    },

    loadLog: function loadLog(logType, response) {
      var _this7 = this;

      var promises = [],
          idx = 0,
          chunksize = 200,
          showLogTruncated = undefined;
      var responseLog = response[logType] || { path: '', entries: [] };

      this.set('controller.searchResultIdx', 0);
      this.set('controller.searchResults', []);
      this.set('controller.model.' + logType + '.path', responseLog.path);
      this.set('controller.model.' + logType + '.entries', []);
      this.set('controller.logPath', responseLog.path);
      this.set('controller.displayedLogHtml', '');
      this.set('controller.newEntries', []);

      showLogTruncated = responseLog.entries[0] && responseLog.entries[0].line_number > 1;
      this.set('controller.showLogTruncated', showLogTruncated);

      while (idx < responseLog.entries.length) {
        promises.push(this.loadLogChunk(logType, responseLog.entries, idx, chunksize));
        idx += chunksize;
      }

      return _ember['default'].RSVP.Promise.all(promises).then(function (values) {
        _this7.sortSearchResults();
        _this7.set('controller.displayedLogHtml', _ember['default'].String.htmlSafe(values.join('')));
        _this7.scrollToEnd();
      });
    },

    loadLogChunk: function loadLogChunk(logType, responseEntries, firstIndex, chunkSize) {
      var _this8 = this;

      var max = Math.min(firstIndex + chunkSize, responseEntries.length);
      var controller = this.get('controller');
      var entries = this.get('controller.model.' + logType + '.entries');
      var displayedLogHtml = this.get('controller.displayedLogHtml') || '';
      var displayedLogEntries = [];

      return new Promise(function (resolve, reject) {
        var controllerLogType = controller.get('logType') || 'fusor_log';

        for (var i = firstIndex; i < max; i++) {
          var entryObject = _ember['default'].Object.create(responseEntries[i]);
          entries.pushObject(entryObject);
          if (controllerLogType === logType && _this8.isIncluded(entryObject)) {
            displayedLogEntries.push(_this8.getHtml(entryObject));
          }
        }

        resolve(displayedLogEntries.join(''));
      });
    },

    getJsonLog: function getJsonLog(params) {
      var self = this,
          token = _ember['default'].$('meta[name="csrf-token"]').attr('content'),
          deploymentId = this.modelFor('deployment').get('id'),
          url = '/fusor/api/v21/unlogged/deployments/' + deploymentId + "/log";

      this.set('requestActive', true);
      return (0, _icAjax['default'])({
        url: url,
        type: "GET",
        headers: {
          "Accept": "application/json",
          "Content-Type": "application/json",
          "X-CSRF-Token": token
        },
        data: params
      })['finally'](function () {
        self.set('requestActive', false);
      });
    },

    showError: function showError(error) {
      console.log('ERROR retrieving log');
      console.log(error);
      if (error && error.jqXHR && error.jqXHR.responseJSON && error.jqXHR.responseJSON.displayMessage) {
        this.get('controller').set('errorMessage', error.jqXHR.responseJSON.displayMessage);
      } else {
        this.get('controller').set('errorMessage', 'error retrieving log');
      }
    },

    addNewEntries: function addNewEntries(controller, response) {
      var _this9 = this;

      var newEntries,
          logType,
          promises = [],
          idx = 0,
          chunksize = 200;

      logType = controller.get('logType') || 'fusor_log';

      if (!response[logType] || !response[logType].entries || response[logType].entries.length === 0) {
        return 0;
      }

      newEntries = response[logType].entries;

      while (idx < newEntries.length) {
        promises.push(this.loadLogChunk(logType, newEntries, idx, chunksize));
        idx += chunksize;
      }

      return _ember['default'].RSVP.Promise.all(promises).then(function (values) {
        // concatenating the values to a very large displayedLogHtml hung the UI
        // so we'll add to a list of new entries and display those separately in the
        // template until the next refresh
        _this9.get('controller.newEntries').pushObject(values.join(''));
        _this9.sortSearchResults();
        if (newEntries.length > 0) {
          _this9.scrollToEnd();
        }
      });
    },

    isIncluded: function isIncluded(entry) {
      var controller = this.get('controller');

      switch (entry.get('level')) {
        case 'error':
          return controller.get('errorChecked');
        case 'warn':
          return controller.get('warnChecked');
        case 'info':
          return controller.get('infoChecked');
        case 'debug':
          return controller.get('debugChecked');
        default:
          return true;
      }
    },

    getHtml: function getHtml(entry) {
      var searchExp,
          formattedText,
          searchLogString,
          controller = this.get('controller'),
          searchResults = controller.get('searchResults'),
          entryNumSearchResults = 0,
          entryClass;

      searchLogString = controller.get('searchLogString');
      formattedText = entry.get('text');
      entryClass = entry && entry.level ? 'log-entry log-entry-level-' + entry.level.toLowerCase() : 'log-entry';

      if (searchLogString) {
        searchExp = new RegExp(searchLogString, 'gi');
        formattedText = formattedText.replace(searchExp, function (match) {
          var uniqueIdx = {
            line: entry.line_number,
            idx: entryNumSearchResults,
            cssClass: 'log-entry-search-result-' + entry.line_number + '-' + entryNumSearchResults
          };
          entryNumSearchResults++;
          searchResults.pushObject(uniqueIdx);
          return '<span class="log-entry-search-result ' + uniqueIdx.cssClass + '">' + match + '</span>';
        });
      }

      formattedText = '<p class="' + entryClass + '">' + formattedText + '</p>';
      return formattedText;
    },

    sortSearchResults: function sortSearchResults() {
      var searchResults = this.get('controller.searchResults');

      if (!searchResults) {
        return;
      }

      searchResults.sort(function (resultA, resultB) {
        var cmp = resultA.line - resultB.line;

        if (cmp !== 0) {
          return cmp;
        }

        return resultA.idx - resultB.idx;
      });
    },

    navNextSearchResult: function navNextSearchResult() {
      var _this10 = this;

      _ember['default'].run.later(this, function () {
        _this10.get('controller').send('navNextSearchResult');
      });
    },

    scrollToEnd: function scrollToEnd() {
      var _this11 = this;

      _ember['default'].run.later(this, function () {
        _this11.get('controller').send('scrollToEnd');
      });
    }
  });
});
define('fusor-ember-cli/routes/review/progress/overview', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({
    model: function model() {
      var deployment = this.modelFor('deployment');
      var deployTaskPromise = this.store.findRecord('foreman-task', deployment.get('foreman_task_uuid'));
      var subtasksOfDeployPromise = this.store.query('foreman-task', { search: "parent_task_id = " + deployment.get('foreman_task_uuid') });
      var self = this;
      return _ember['default'].RSVP.Promise.all([deployTaskPromise, subtasksOfDeployPromise]).then(function (results) {
        var deployTask = results[0];
        var subtasksOfDeploy = results[1];
        var manageContentTask = subtasksOfDeploy.findBy('label', 'Actions::Fusor::Content::ManageContent');
        var rhevTask = subtasksOfDeploy.findBy('label', 'Actions::Fusor::Deployment::Rhev::Deploy');
        var configureHostGroupsTask = subtasksOfDeploy.findBy('label', 'Actions::Fusor::ConfigureHostGroupsForProducts');
        var openstackTask = subtasksOfDeploy.findBy('label', 'Actions::Fusor::Deployment::OpenStack::Deploy');
        var cfmeTask = subtasksOfDeploy.findBy('label', 'Actions::Fusor::Deployment::CloudForms::Deploy');
        var openshiftTask = subtasksOfDeploy.findBy('label', 'Actions::Fusor::Deployment::OpenShift::Deploy');

        return _ember['default'].RSVP.hash({
          deployTask: deployTask,
          manageContentTask: manageContentTask,
          configureHostGroupsTask: configureHostGroupsTask,
          rhevTask: rhevTask,
          openstackTask: openstackTask,
          cfmeTask: cfmeTask,
          openshiftTask: openshiftTask,
          deployment: deployment
        });
      });
    },

    setupController: function setupController(controller, model) {
      var _this = this;

      controller.set('model', model);
      controller.set('deployTask', model.deployTask);
      controller.set('manageContentTask', model.manageContentTask);
      controller.set('configureHostGroupsTask', model.configureHostGroupsTask);
      controller.set('rhevTask', model.rhevTask);
      controller.set('openstackTask', model.openstackTask);
      controller.set('cfmeTask', model.cfmeTask);
      controller.set('openshiftTask', model.openshiftTask);
      controller.set('deployment', model.deployment);
      controller.set('katelloSyncErrorTasks', null);
      controller.stopPolling();

      ////////////////////////////////////////////////////////////
      // NOTE: If an error during a pulp sync occurs, the Katello::Sync
      // task scheduled in the Fusor Deploy task tree will throw itself
      // into a skipped/warning state. This ultimately bubbles, sending
      // Fusor::Actions::ManageContent into a paused/error state due to
      // sub-task error.
      //
      // We can push the Deployment task into a clean state by triggering
      // resume on ManageContent. This releases any locks held by the failed
      // task and allows for redeployment, abondonment, or manual content sync.
      //
      // TODO: It's safer for ManageContent to be monitored and resumed
      // serverside once a given deployment has been initiated.
      ////////////////////////////////////////////////////////////
      var contentErrorDiscovered = model.manageContentTask && model.manageContentTask.get('result') === 'error' && model.manageContentTask.get('state') === 'paused';
      ////////////////////////////////////////////////////////////

      if (contentErrorDiscovered) {
        model.deployment.set('has_content_error', true);

        model.deployment.save().then(function () {
          return model.manageContentTask.resume();
        }).then(function (resumeResult) {
          return _this.refresh();
        })['catch'](function (reason) {
          console.log('ERROR: Something broke trying to recover the ManageContentTask');
        });
      } else if (!model.deployment.get('has_content_error')) {
        controller.startPolling();
      } else {
        // has_content_error == true and no contentErrorDiscovered, it's been reset
        model.manageContentTask.get('subtasks').then(function (tasks) {
          controller.set('katelloSyncErrorTasks', tasks.filter(function (task) {
            return task.get('humanized_name') === 'Synchronize' && task.get('state') === 'stopped' && task.get('result') === 'warning';
          }));
        });
      }
    },

    activate: function activate() {
      window.scrollTo(0, 0);
    },

    deactivate: function deactivate() {
      this.get('controller').stopPolling();
    },

    actions: {
      refreshModelOnOverviewRoute: function refreshModelOnOverviewRoute() {
        return this.refresh();
      }
    }

  });
});
define('fusor-ember-cli/routes/review/progress', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({

    beforeModel: function beforeModel() {
      return this.transitionTo('review.progress.overview');
    }

  });
});
define('fusor-ember-cli/routes/review/summary', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({
    model: function model() {
      var deployment_id = this.modelFor('deployment').get('id');
      return this.store.findRecord('deployment', deployment_id);
    }
  });
});
define('fusor-ember-cli/routes/review', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({

    setupController: function setupController(controller, model) {
      controller.set('model', model);
      var stepNumberReview = this.controllerFor('deployment').get('stepNumberReview');
      return this.controllerFor('deployment').set('currentStepNumber', stepNumberReview);
    }

  });
});
define('fusor-ember-cli/routes/rhci', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({});
});
define('fusor-ember-cli/routes/rhev/index', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({
    beforeModel: function beforeModel() {
      return this.transitionTo('rhev-setup');
    }
  });
});
define('fusor-ember-cli/routes/rhev-options', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({
    deactivate: function deactivate() {
      return this.send('saveDeployment', null);
    }
  });
});
define('fusor-ember-cli/routes/rhev-setup', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({
    setupController: function setupController(controller, model) {
      controller.set('model', model);
      var rhevSetup = model.get('rhev_is_self_hosted') ? 'selfhost' : 'rhevhost';
      controller.set('rhevSetup', rhevSetup);
    },

    deactivate: function deactivate() {
      return this.send('saveDeployment', null);
    }
  });
});
define('fusor-ember-cli/routes/rhev', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({

    setupController: function setupController(controller, model) {
      controller.set('model', model);
      return this.controllerFor('deployment').set('currentStepNumber', 2);
    }

  });
});
define('fusor-ember-cli/routes/satellite/access-insights', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({

    model: function model() {
      return this.modelFor('deployment');
    },

    deactivate: function deactivate() {
      return this.send('saveDeployment', null);
    }

  });
});
define('fusor-ember-cli/routes/satellite/index', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({

    setupController: function setupController(controller, model) {
      controller.set('model', model);
      // reset common password fields
      controller.set('commonPassword', null);
      controller.set('confirmCommonPassword', null);
    },

    deactivate: function deactivate() {
      var deploymentName = this.get('controller.model.name');
      if (_ember['default'].isPresent(deploymentName)) {
        this.set('controller.model.name', deploymentName.trim());
      }
      // pre-populate passwords
      var commonPassword = this.get('controller.commonPassword');
      var deployment = this.modelFor('deployment');
      var deploymentController = this.controllerFor('deployment');
      if (commonPassword && deploymentController.get('isValidCommonPassword')) {
        deployment.set('rhev_engine_admin_password', commonPassword);
        deployment.set('rhev_root_password', commonPassword);
        deployment.set('cfme_root_password', commonPassword);
        deployment.set('cfme_admin_password', commonPassword);
        deployment.set('cfme_db_password', commonPassword);
        deployment.set('openshift_user_password', commonPassword);
        deployment.set('openshift_root_password', commonPassword);

        // confirmation fields on the deployment controller, not the model
        deploymentController.set('confirmRhevRootPassword', commonPassword);
        deploymentController.set('confirmRhevEngineAdminPassword', commonPassword);
        deploymentController.set('confirmCfmeRootPassword', commonPassword);
        deploymentController.set('confirmCfmeAdminPassword', commonPassword);
        deploymentController.set('confirmCfmeDbPassword', commonPassword);

        if (!deployment.get('isStarted') && deployment.get('deploy_openstack')) {
          deployment.get('openstack_deployment').then(function (openstackDeployment) {
            openstackDeployment.set('overcloud_password', commonPassword);
            // confirmation fields on the deployment controller, not the openstack_deployment model
            deploymentController.set('confirmOvercloudPassword', commonPassword);
            openstackDeployment.save();
          });
        }
      }
      return this.send('saveDeployment', null);
    }

  });
});
define('fusor-ember-cli/routes/satellite', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({

    setupController: function setupController(controller, model) {
      controller.set('model', model);
      return this.controllerFor('deployment').set('currentStepNumber', 1);
    },

    deactivate: function deactivate() {
      var deployment = this.modelFor('deployment');
      deployment.save().then(function () {
        return console.log('saved deployment successfully');
      });
    }

  });
});
define('fusor-ember-cli/routes/storage', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({
    setupController: function setupController(controller, model) {
      controller.set('model', model);
      // Reset error msg if this has been displayed previously
      controller.set('errorMsg', null);
    },
    deactivate: function deactivate() {
      return this.send('saveDeployment', null);
    }
  });
});
define('fusor-ember-cli/routes/subscriptions/credentials', ['exports', 'ember', 'ic-ajax'], function (exports, _ember, _icAjax) {
  exports['default'] = _ember['default'].Route.extend({

    model: function model() {
      // Verify isAuthenticated: true is accurate, since Satellite session may have changed
      var sessionPortal = this.modelFor('subscriptions').sessionPortal;
      var cachedIsAuthenticated = sessionPortal.get('isAuthenticated');

      if (cachedIsAuthenticated) {
        return this.confirmAuthenticated(sessionPortal).then(function (isAuthenticated) {
          if (isAuthenticated) {
            return sessionPortal;
          } else {
            sessionPortal.set('isAuthenticated', false);
            return sessionPortal.save();
          }
        });
      } else {
        return _ember['default'].RSVP.resolve(sessionPortal);
      }
    },

    setupController: function setupController(controller, model) {
      controller.set('model', model);
      controller.set('showErrorMessage', false);
    },

    deactivate: function deactivate() {
      this.send('saveDeployment', null);
    },

    actions: {
      error: function error() {
        // bubble up this error event:
        return true;
      },

      loginPortal: function loginPortal() {
        var self = this;
        var controller = this.controllerFor('subscriptions/credentials');
        var identification = controller.get('model.identification');
        var password = controller.get('password');
        var token = _ember['default'].$('meta[name="csrf-token"]').attr('content');

        controller.set('nextButtonTitle', "Logging in ...");
        controller.set('disableCredentialsNext', true);

        (0, _icAjax['default'])({
          url: '/customer_portal/login/',
          type: "POST",
          data: JSON.stringify({ username: identification, password: password }),
          headers: {
            "Accept": "application/json",
            "Content-Type": "application/json",
            "X-CSRF-Token": token
          }
        }).then(function (response) {
          //show always be {} empty successful 200 response
          self.send('saveCredentials');
        }, function (error) {
          controller.set('nextButtonTitle', "Next");
          controller.set('disableCredentialsNext', false);
          self.send('error');
        });
      },

      logoutPortal: function logoutPortal() {
        var _this = this;

        (0, _icAjax['default'])({
          url: '/customer_portal/logout/',
          type: "POST",
          headers: {
            "Accept": "application/json",
            "Content-Type": "application/json",
            "X-CSRF-Token": _ember['default'].$('meta[name="csrf-token"]').attr('content')
          }
        }).then(function (response) {
          //show always be {} empty successful 200 response
          _this.clearSessionPortal();
          return _this.clearDeploymentInfo();
        }).then(function (deployment) {
          return _this.getSubscriptions(deployment);
        }).then(function (subscriptions) {
          return _this.deleteSubscriptions(subscriptions);
        })['catch'](function (error) {
          _this.send('error');
        });
      },

      saveCredentials: function saveCredentials() {
        var self = this;
        var controller = this.controllerFor('subscriptions/credentials');
        var identification = controller.get('model.identification');
        var sessionPortal = this.modelFor('subscriptions').sessionPortal;
        if (sessionPortal) {
          sessionPortal.set('identification', identification);
        } else {
          sessionPortal = self.store.createRecord('session-portal', { identification: identification });
        }
        sessionPortal.save().then(function (result) {
          controller.set('showErrorMessage', false);
          self.send('authenticatePortal');
        }, function (response) {
          controller.set('nextButtonTitle', "Next");
          controller.set('disableCredentialsNext', false);
          self.send('error');
        });
      },

      authenticatePortal: function authenticatePortal() {
        var controller = this.controllerFor('subscriptions/credentials');
        var identification = controller.get('model.identification');
        var token = _ember['default'].$('meta[name="csrf-token"]').attr('content');
        var self = this;
        var url = '/customer_portal/users/' + identification + "/owners";

        return new _ember['default'].RSVP.Promise(function (resolve, reject) {
          (0, _icAjax['default'])({
            url: url,
            type: "GET",
            headers: {
              "Accept": "application/json",
              "Content-Type": "application/json",
              "X-CSRF-Token": token
            }
          }).then(function (response) {
            var ownerKey = response[0]['key'];
            var sessionPortal = self.modelFor('subscriptions').sessionPortal;
            sessionPortal.set('ownerKey', ownerKey);
            sessionPortal.set('isAuthenticated', true);
            sessionPortal.save().then(function (result) {
              controller.set('nextButtonTitle', "Next");
              controller.set('disableCredentialsNext', false);
              self.transitionTo('subscriptions.management-application');
            }, function (response) {
              controller.set('nextButtonTitle', "Next");
              controller.set('disableCredentialsNext', false);
            });
          }, function (response) {
            controller.set('nextButtonTitle', "Next");
            controller.set('disableCredentialsNext', false);
            controller.setProperties({
              'showErrorMessage': true,
              'errorMsg': 'Your username or password is incorrect. Please try again.'
            });
          });
        });
      },

      redirectToManagementApplication: function redirectToManagementApplication() {
        this.transitionTo('subscriptions.management-application');
      }
    },

    clearSessionPortal: function clearSessionPortal() {
      var sessionPortal = this.modelFor('subscriptions').sessionPortal;
      sessionPortal.setProperties({
        'isAuthenticated': false,
        'identification': null,
        'ownerKey': null,
        'consumerUUID': null
      });
      this.set('controller.password', null);
      sessionPortal.save();
    },

    clearDeploymentInfo: function clearDeploymentInfo() {
      var deployment = this.modelFor('deployment');
      this.set('controller.password', null);

      deployment.set('upstream_consumer_uuid', null);
      deployment.set('upstream_consumer_name', null);
      return deployment.save();
    },

    getSubscriptions: function getSubscriptions(deployment) {
      return this.store.query('subscription', { deployment_id: deployment.get('id') });
    },

    deleteSubscriptions: function deleteSubscriptions(subscriptions) {
      return _ember['default'].RSVP.all(subscriptions.map(function (subscription) {
        return subscription.destroyRecord();
      }));
    },

    confirmAuthenticated: function confirmAuthenticated(sessionPortal) {
      // If we've previously authenticated, we should find `isAuthenticated`
      // to be true on the session portal that was saved to local storage on
      // a previous login success. This method is called to confirm that our
      // session is still valid, and if not, sets the local storage value to false
      return new _ember['default'].RSVP.Promise(function (resolve, reject) {
        var urlVerify = '/customer_portal/users/' + sessionPortal.get('identification') + '/owners';

        _ember['default'].$.getJSON(urlVerify).then(function () {
          return resolve(true);
        }, function () {
          return resolve(false);
        });
      });
    }
  });
});
define('fusor-ember-cli/routes/subscriptions/index', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({
    beforeModel: function beforeModel() {
      this.transitionTo('subscriptions.credentials');
    }
  });
});
define('fusor-ember-cli/routes/subscriptions/management-application/consumer', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({});
});
define('fusor-ember-cli/routes/subscriptions/management-application', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({

    model: function model() {
      var self = this;
      var deployment = this.modelFor('deployment');
      var sessionPortal = this.modelFor('subscriptions').sessionPortal;
      var ownerKey = sessionPortal.get('ownerKey');

      // Use owner key to get consumers (subscription application manangers)
      // GET /customer_portal/owners/#{OWNER['key']}/consumers?type=satellite
      if (deployment.get('isStarted') && deployment.get('upstream_consumer_uuid') && deployment.get('upstream_consumer_name')) {

        var managementApp = _ember['default'].Object.create({
          id: deployment.get('upstream_consumer_uuid'),
          name: deployment.get('upstream_consumer_name')
        });

        return _ember['default'].A([managementApp]);
      } else {
        return this.store.query('management-application', {
          owner_key: ownerKey
        }).then(function (results) {
          // in case go to this route from URL
          sessionPortal.set('isAuthenticated', true);
          sessionPortal.save();
          return results;
        }, function (results) {
          console.log(results);
          sessionPortal.set('isAuthenticated', false);
          sessionPortal.save().then(function () {
            self.controllerFor('subscriptions.credentials').setProperties({
              'showErrorMessage': true,
              'errorMsg': 'You are not currently logged in. Please log in below.'
            });
            return self.transitionTo('subscriptions.credentials');
          });
        });
      }
    },

    setupController: function setupController(controller, model) {
      controller.set('model', model);
      controller.set('showManagementApplications', true);
      controller.set('newSatelliteName', null);
      controller.set('showAlertMessage', false);
      controller.set('showWaitingMessage', false);
      controller.set('showErrorMessage', false);
      controller.set('errorMsg', null);

      var sessionPortal = this.modelFor('subscriptions').sessionPortal;
      var deployment = this.modelFor('deployment');
      var upstream_consumer_uuid = deployment.get('upstream_consumer_uuid');

      if (deployment.get('isStarted')) {
        sessionPortal.set('consumerUUID', upstream_consumer_uuid);
        controller.set('sessionPortal', sessionPortal);
      } else if (_ember['default'].isPresent(sessionPortal.get('consumerUUID'))) {
        // set controller state. If this hasn't been chosen before, consumerUUID
        // will correctly be set to null, and there will not be a default selection
        sessionPortal.set('consumerUUID', controller.get('upstreamConsumerUuid'));
      } else {
        // check if org has upstream UUID using Katello V2 API
        var orgID = this.modelFor('deployment').get('organization.id');
        var url = '/katello/api/v2/organizations/' + orgID;
        _ember['default'].$.getJSON(url).then(function (results) {
          if (_ember['default'].isPresent(results.owner_details.upstreamConsumer)) {
            sessionPortal.set('consumerUUID', results.owner_details.upstreamConsumer.uuid);
            sessionPortal.save();
            controller.set('sessionPortal', sessionPortal);
            deployment.set('upstream_consumer_uuid', results.owner_details.upstreamConsumer.uuid);
            deployment.set('upstream_consumer_name', results.owner_details.upstreamConsumer.name);
          } else {
            // nullify sessionPortal.consumerUUID since it's probably a different deployment
            sessionPortal.set('consumerUUID', null);
          }
        }, function (results) {
          // also nullify sessionPortal.consumerUUID in case there was an error
          sessionPortal.set('consumerUUID', null);
        });
      }
    },

    deactivate: function deactivate() {
      return this.send('saveDeployment', null);
    },

    actions: {
      error: function error(reason, transition) {
        // bubble up this error event:
        return true;
      }
    }

  });
});
define('fusor-ember-cli/routes/subscriptions/review-subscriptions', ['exports', 'ember', 'fusor-ember-cli/utils/subscription-util'], function (exports, _ember, _fusorEmberCliUtilsSubscriptionUtil) {
  exports['default'] = _ember['default'].Route.extend({
    model: function model() {
      return _ember['default'].RSVP.hash({
        subscriptions: this.loadSubscriptions(),
        sufficientEntitlements: this.loadSubscriptionsValidation()
      });
    },

    setupController: function setupController(controller, model) {
      controller.set('model', model.subscriptions);
      controller.set('useExistingManifest', this.modelFor('subscriptions').useExistingManifest);
      controller.set('sufficientEntitlements', model.sufficientEntitlements);
    },

    loadSubscriptions: function loadSubscriptions() {
      var _this = this;

      ////////////////////////////////////////////////////////////
      // NOTE: Review data can comes from three different sources depending on scenario
      // 1) Connected -> No existing manifest, uploading manifest as part of the deployment
      //    by logging into the CDN as part of the deployment. Review info comes from
      //    customer portal.
      // 2) Disconnected -> No existing manifest, uploading manifest locally. Entitlement
      //    data was previously stored in fusor_subscriptions table as part of that upload.
      //    We ask fusor server for that data via subscription endpoint
      // 3) useExistingManifest -> Manifest was *not* uploaded as part of current deployment,
      //    instead we're using an existing manifest that's been uploaded to Sat previously.
      //    In this case, might not be logged in, and fusor_subscriptions table probably does
      //    not have the data we need, so neither 1) or 2) approaches can be used. Need to
      //    hit Sat to retrieve what it knows about the existing manifest.
      ////////////////////////////////////////////////////////////
      var subModel = this.modelFor('subscriptions');
      var useExistingManifest = subModel.useExistingManifest;

      if (useExistingManifest) {
        // Case 3)
        // Note: subscriptions will only be available if useExistingManifest is true
        return subModel.subscriptions;
      }

      var deploymentId = this.modelFor('deployment').get('id');
      if (this.modelFor('deployment').get('is_disconnected')) {
        // Case 2)
        // GET /fusor/subscriptions?source=imported&deployment_id=ID_OF_DEPLOYMENT
        return this.store.query('subscription', { deployment_id: deploymentId, source: 'imported' });
      } else {
        // Case 1)
        // if there are no added subscriptions we need to show what is in the manifest instead.
        return this.store.query('subscription', {
          deployment_id: deploymentId,
          source: 'added'
        }).then(function (results) {
          var noSubsFound = results.get('length') === 0;

          if (noSubsFound) {
            var _ret = (function () {

              var deployment = _this.modelFor('deployment');
              var consumerUUID = _this.modelFor('deployment').get('upstream_consumer_uuid');

              return {
                v: _this.store.query('entitlement', { uuid: consumerUUID }).then(function (entitlements) {

                  var pseudoSubs = entitlements.map(function (pool) {
                    return _ember['default'].Object.create({
                      contract_number: pool.get('contractNumber'),
                      product_name: pool.get('productName'),
                      quantity_to_add: 0,
                      quantity_attached: pool.get('qtyAttached'),
                      source: 'added',
                      start_date: pool.get('startDate'),
                      end_date: pool.get('endDate'),
                      total_quantity: pool.get('quantity'),
                      deployment: deployment
                    });
                  });

                  return pseudoSubs;
                })
              };
            })();

            if (typeof _ret === 'object') return _ret.v;
          } else {
            return results.filter(function (sub) {
              return sub.get('qtySumAttached') > 0;
            });
          }
        });
      }
    },

    loadSubscriptionsValidation: function loadSubscriptionsValidation() {
      var deploymentId = this.modelFor('deployment').get('id');
      return _fusorEmberCliUtilsSubscriptionUtil['default'].validate(deploymentId);
    }
  });
});
define('fusor-ember-cli/routes/subscriptions/select-subscriptions', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({

    model: function model() {
      // GET /fusor/subscriptions?source=added&deployment_id=ID_OF_DEPLOYMENT
      var deploymentId = this.modelFor('deployment').get('id');
      return this.store.query('subscription', { deployment_id: deploymentId, source: 'added' });
    },

    setupController: function setupController(controller, model) {
      var _this = this;

      controller.set('model', model);
      var deployment = this.modelFor('deployment');
      var deploymentId = deployment.get('id');
      var isDisconnected = this.controllerFor('deployment').get('isDisconnected');
      var sessionPortal = this.modelFor('subscriptions').sessionPortal;

      if (!this.controllerFor('deployment').get('isStarted')) {
        controller.set('isLoading', true);
        controller.set('errorMsg', null);

        var consumerUUID = this.modelFor('deployment').get('upstream_consumer_uuid');

        var entitlements = this.store.query('entitlement', { uuid: consumerUUID });
        var pools = this.store.query('pool', { uuid: consumerUUID });
        var subscriptions = this.store.query('subscription', { deployment_id: deploymentId, source: 'added' });

        return _ember['default'].RSVP.Promise.all([entitlements, pools, subscriptions]).then(function (results) {
          var entitlementsResults = results[0];
          var allPoolsResults = results[1];
          var subscriptionResults = results[2];

          // in case go to this route from URL
          sessionPortal.set('isAuthenticated', true);
          allPoolsResults.forEach(function (pool) {
            pool.set('qtyAttached', 0); //default for loop

            entitlementsResults.forEach(function (entitlement) {
              if (entitlement.get('poolId') === pool.get('id')) {
                pool.incrementProperty('qtyAttached', entitlement.get('quantity'));
              }
            });

            //create Fusor::Subscription records if they don't exist
            var matchingSubscription = subscriptionResults.filterBy('contract_number', pool.get('contractNumber')).get('firstObject');
            if (_ember['default'].isBlank(matchingSubscription)) {
              var sub = _this.store.createRecord('subscription', {
                'contract_number': pool.get('contractNumber'),
                'product_name': pool.get('productName'),
                'quantity_to_add': 0,
                'quantity_attached': pool.get('qtyAttached'),
                'source': 'added',
                'start_date': pool.get('startDate'),
                'end_date': pool.get('endDate'),
                'total_quantity': pool.get('quantity'),
                'deployment': deployment
              });
              sub.save();
            } else {
              // update quantity_attached is it may have changed since record was created
              matchingSubscription.set('quantity_attached', pool.get('qtyAttached'));
              matchingSubscription.save();
            }
          });
          controller.set('subscriptionEntitlements', _ember['default'].A(results[0]));
          controller.set('subscriptionPools', _ember['default'].A(results[1]));
        })['catch'](function (error) {
          console.debug('route::select-subscriptions::setupController: Main RSVP catch block');
          console.debug(error);
          console.debug('route::select-subscriptions::setupController: Saving session portal...');
          console.debug(sessionPortal);
          return sessionPortal.save().then(function () {
            console.debug('route::select-subscriptions::setupController: Session portal successfully saved');
            console.debug(error);
            controller.set('errorMsg', 'An error occurred while loading subscription data');
            controller.set('showErrorMessage', true);
          })['catch'](function (error) {
            console.debug('route::select-subscriptions::setupController: Session portal save catch');
            console.debug(error);
            controller.set('errorMsg', 'An error occurred while persisting login credentials');
            controller.set('showErrorMessage', true);
          });
        })['finally'](function () {
          console.debug('route::select-subscriptions::setupController: finally bringing down spinner');
          controller.set('isLoading', false);
        });
      }
    },

    actions: {
      saveSubscription: function saveSubscription(pool, qty) {
        var _this2 = this;

        // get saved subscriptions and update quantity
        var deployment = this.modelFor('deployment');
        var deploymentId = this.modelFor('deployment').get('id');

        var subProm = this.store.query('subscription', {
          deployment_id: deploymentId, source: 'added'
        }).then(function (subscriptionResults) {
          var matchingSubscription = subscriptionResults.filterBy('contract_number', pool.get('contractNumber')).get('firstObject');

          if (_ember['default'].isPresent(matchingSubscription)) {
            matchingSubscription.set('quantity_to_add', qty);
            return matchingSubscription.save();
          }
        });

        subProm.then(function () {
          _this2.set('subProm', null);
        });

        this.set('subProm', subProm);
      },

      willTransition: function willTransition(transition) {
        var _this3 = this;

        var subProm = this.get('subProm');
        if (subProm) {
          transition.abort();

          subProm.then(function () {
            _this3.transitionTo('subscriptions.review-subscriptions');
          });
        }
      },

      error: function error(reason, transition) {
        // bubble up this error event:
        return true;
      }
    }

  });
});
define('fusor-ember-cli/routes/subscriptions', ['exports', 'ember', 'fusor-ember-cli/mixins/needs-existing-manifest-helpers'], function (exports, _ember, _fusorEmberCliMixinsNeedsExistingManifestHelpers) {
  exports['default'] = _ember['default'].Route.extend(_fusorEmberCliMixinsNeedsExistingManifestHelpers['default'], {

    model: function model() {
      var _this = this;

      return this.shouldUseExistingManifest().then(function (useExistingManifest) {
        var modelHash = { useExistingManifest: useExistingManifest };

        modelHash.sessionPortal = _this.store.findAll('session-portal').then(function (results) {
          if (_ember['default'].isBlank(results)) {
            return _this.store.createRecord('session-portal');
          } else {
            return results.get('firstObject');
          }
        });

        if (useExistingManifest) {
          modelHash.subscriptions = _this.loadSubscriptions();
        }

        return _ember['default'].RSVP.hash(modelHash);
      });
    },

    setupController: function setupController(controller, model) {
      controller.set('model', model.sessionPortal);
      // Check if there's an existing manifest in satellite that should be used
      // If so, we want to streamline subscriptions and simply reuse that manifest
      // Steps A-C in a brand new deployment are no longer needed, so simply display
      // the review and continue.
      controller.set('useExistingManifest', model.useExistingManifest);
      if (model.useExistingManifest) {
        this.transitionTo('subscriptions.review-subscriptions');
      }

      var stepNumberSubscriptions = this.controllerFor('deployment').get('stepNumberSubscriptions');
      return this.controllerFor('deployment').set('currentStepNumber', stepNumberSubscriptions);
    },

    actions: {
      error: function error() {
        return true; // bubbles error event
      }
    }
  });
});
define('fusor-ember-cli/routes/where-install', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({

    setupController: function setupController(controller, model) {
      controller.set('model', model);

      var isRhev = this.controllerFor('deployment').get('isRhev');
      var isOpenStack = this.controllerFor('deployment').get('isOpenStack');
      if (isRhev && !isOpenStack) {
        return this.controllerFor('deployment').set('model.cfme_install_loc', 'RHEV');
      } else if (!isRhev && isOpenStack) {
        return this.controllerFor('deployment').set('model.cfme_install_loc', 'OpenStack');
      }
    },

    deactivate: function deactivate() {
      return this.send('saveDeployment', null);
    }

  });
});
define('fusor-ember-cli/serializers/deployment-plan-parameter', ['exports', 'ember-data'], function (exports, _emberData) {
  exports['default'] = _emberData['default'].RESTSerializer.extend({
    primaryKey: 'name'
  });
});
define('fusor-ember-cli/serializers/deployment-plan', ['exports', 'ember-data'], function (exports, _emberData) {
  exports['default'] = _emberData['default'].RESTSerializer.extend(_emberData['default'].EmbeddedRecordsMixin, {
    primaryKey: 'name',
    attrs: {
      parameters: { embedded: 'always' },
      roles: { embedded: 'always' }
    }
  });
});
define('fusor-ember-cli/serializers/deployment-role', ['exports', 'ember-data'], function (exports, _emberData) {
  exports['default'] = _emberData['default'].RESTSerializer.extend({
    primaryKey: 'uuid'
  });
});
define('fusor-ember-cli/serializers/deployment', ['exports', 'ember-data', 'active-model-adapter'], function (exports, _emberData, _activeModelAdapter) {
  exports['default'] = _activeModelAdapter.ActiveModelSerializer.extend({
    isNewSerializerAPI: true,

    attrs: {
      foreman_task_id: false
    }

  });
});
define('fusor-ember-cli/serializers/entitlement', ['exports', 'ember-data'], function (exports, _emberData) {
  exports['default'] = _emberData['default'].RESTSerializer.extend({

    // add root node 'entitlements' that customer protal JSON response doesn't return
    extractArray: function extractArray(store, type, payload) {
      payload = { entitlements: payload };
      return this._super(store, type, payload);
    },

    // remove attribute keys in the json response that aren't in the model management application
    normalizeHash: {
      entitlements: function entitlements(hash) {
        delete hash.consumer;
        delete hash.certificates;
        // move attributes within the 'pool' node to main level
        hash.poolId = hash.pool.id;
        hash.poolType = hash.pool.type;
        hash.poolQuantity = hash.pool.quantity;
        hash.subscriptionId = hash.pool.subscriptionId;
        hash.activeSubscription = hash.pool.activeSubscription;
        hash.contractNumber = hash.pool.contractNumber;
        hash.accountNumber = hash.pool.accountNumber;
        hash.consumed = hash.pool.consumed;
        hash.exported = hash.pool.exported;
        hash.consumed = hash.pool.consumed;
        hash.productName = hash.pool.productName;
        delete hash.pool;
        return hash;
      }
    }

  });
});
define('fusor-ember-cli/serializers/foreman-task', ['exports', 'ember-data', 'active-model-adapter'], function (exports, _emberData, _activeModelAdapter) {
  exports['default'] = _activeModelAdapter.ActiveModelSerializer.extend({
    isNewSerializerAPI: true,
    attrs: {
      humanized: { embedded: 'always' }
    }
  });
});
define('fusor-ember-cli/serializers/ls-serializer', ['exports', 'ember-localstorage-adapter/serializers/ls-serializer'], function (exports, _emberLocalstorageAdapterSerializersLsSerializer) {
  exports['default'] = _emberLocalstorageAdapterSerializersLsSerializer['default'];
});
define('fusor-ember-cli/serializers/management-application', ['exports', 'ember-data'], function (exports, _emberData) {
  exports['default'] = _emberData['default'].RESTSerializer.extend({

    primaryKey: 'uuid',

    // add root node 'management_applications' that customer protal JSON response doesn't return
    extractArray: function extractArray(store, type, payload) {
      payload = { management_applications: payload };
      return this._super(store, type, payload);
    },

    // remove attribute keys in the json response that aren't in the model management application
    normalizeHash: {
      management_applications: function management_applications(hash) {
        delete hash.releaseVer;
        delete hash.type;
        delete hash.owner;
        delete hash.installedProducts;
        delete hash.guestIds;
        delete hash.capabilities;
        return hash;
      }
    }

  });

  // These objects are in the JSON response but removed in the serializer
  // and not saved in the store
  //
  // "releaseVer": {
  //     "releaseVer": null
  // },
  // "type": {
  //     "id": "9",
  //     "label": "satellite",
  //     "manifest": true
  // },
  // "owner": {
  //     "id": "8a85f9814a192108014a1adef5826b38",
  //     "key": "7473998",
  //     "displayName": "7473998",
  //     "href": "/owners/7473998"
  // },
  // "installedProducts": [],
  // "guestIds": [],
  // "capabilities": [],
});
define('fusor-ember-cli/serializers/node', ['exports', 'ember-data'], function (exports, _emberData) {
  exports['default'] = _emberData['default'].RESTSerializer.extend({
    primaryKey: 'uuid'
  });
});
define('fusor-ember-cli/serializers/pool', ['exports', 'ember-data'], function (exports, _emberData) {
  exports['default'] = _emberData['default'].RESTSerializer.extend({

    // add root node 'entitlements' that customer protal JSON response doesn't return
    extractArray: function extractArray(store, type, payload) {
      payload = { pools: payload };
      return this._super(store, type, payload);
    },

    // remove attribute keys in the json response that aren't in the model management application
    normalizeHash: {
      management_applications: function management_applications(hash) {
        delete hash.releaseVer;
        delete hash.type;
        delete hash.owner;
        delete hash.installedProducts;
        delete hash.guestIds;
        delete hash.capabilities;
        return hash;
      }
    }

  });
});
define('fusor-ember-cli/serializers/session-portal', ['exports', 'ember-localstorage-adapter'], function (exports, _emberLocalstorageAdapter) {
  exports['default'] = _emberLocalstorageAdapter.LSSerializer.extend();
});
define('fusor-ember-cli/service-tests/ember-devtools', ['exports', 'ember-devtools/service-tests/ember-devtools'], function (exports, _emberDevtoolsServiceTestsEmberDevtools) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberDevtoolsServiceTestsEmberDevtools['default'];
    }
  });
});
define('fusor-ember-cli/services/drag-coordinator', ['exports', 'ember-drag-drop/services/drag-coordinator'], function (exports, _emberDragDropServicesDragCoordinator) {
  exports['default'] = _emberDragDropServicesDragCoordinator['default'];
});
define('fusor-ember-cli/services/ember-devtools', ['exports', 'ember'], function (exports, _ember) {

  var map = _ember['default'].ArrayPolyfills.map;
  var $ = _ember['default'].$;

  exports['default'] = _ember['default'].Object.extend({
    init: function init() {
      this.global = this.global || window;
      this.console = this.console || window.console;
      this.registry = this._registry();
      if (DS !== undefined) {
        this.store = this.container.lookup('store:main');
        this.typeMaps = this.store.typeMaps;
      }
    },
    consoleLog: function consoleLog() {
      this.console.log.apply(this.console, arguments);
    },
    app: function app(name) {
      name = name || 'main';
      return this.container.lookup('application:' + name);
    },
    route: function route(name) {
      name = name || this.currentRouteName();
      return this.container.lookup('route:' + name);
    },
    controller: function controller(name) {
      name = name || this.currentRouteName();
      return this.container.lookup('controller:' + name);
    },
    model: function model(name) {
      var controller = this.controller(name);
      return controller && controller.get('model');
    },
    service: function service(name) {
      return this.lookup('service:' + name);
    },
    router: function router(name) {
      name = name || 'main';
      return this.container.lookup('router:' + name).get('router');
    },
    routes: function routes() {
      return _ember['default'].keys(this.router().recognizer.names);
    },
    view: function view(idDomElementOrSelector) {
      if (typeof idDomElementOrSelector === 'object') {
        idDomElementOrSelector = idDomElementOrSelector.id;
      }
      return _ember['default'].View.views[idDomElementOrSelector] || this.views(idDomElementOrSelector)[0];
    },
    views: function views(selectorOrName) {
      var views = _ember['default'].View.views;
      var viewClass = this.lookupFactory('component:' + selectorOrName) || this.lookupFactory('view:' + selectorOrName);

      if (viewClass) {
        return Object.keys(views).map(function (id) {
          return views[id];
        }).filter(function (view) {
          return view instanceof viewClass;
        });
      }

      return map.call($(selectorOrName), function (element) {
        return views[element.id];
      });
    },
    component: function component() {
      return this.view.apply(this, arguments);
    },
    components: function components() {
      return this.views.apply(this, arguments);
    },
    currentRouteName: function currentRouteName() {
      return this.controller('application').get('currentRouteName');
    },
    currentPath: function currentPath() {
      return this.controller('application').get('currentPath');
    },
    log: function log(promise, property, getEach) {
      var self = this;
      return promise.then(function (value) {
        self.global.$E = value;
        if (property) {
          value = value[getEach ? 'getEach' : 'get'].call(value, property);
        }
        self.consoleLog(value);
      }, function (err) {
        self.console.error(err);
      });
    },
    lookup: function lookup(name) {
      return this.container.lookup(name);
    },
    lookupFactory: function lookupFactory(name) {
      return this.container.lookupFactory(name);
    },
    containerNameFor: function containerNameFor(object) {
      var cache = this.container.cache || this.container._defaultContainer.cache;
      var keys = Object.keys(cache);
      for (var i = 0; i < keys.length; i++) {
        if (cache[keys[i]] === object) return keys[i];
      }
    },
    inspect: _ember['default'].inspect,
    logResolver: function logResolver(bool) {
      bool = typeof bool === 'undefined' ? true : bool;
      _ember['default'].ENV.LOG_MODULE_RESOLVER = bool;
    },
    logAll: function logAll(bool) {
      bool = typeof bool === 'undefined' ? true : bool;
      var app = this.app();
      app.LOG_ACTIVE_GENERATION = bool;
      app.LOG_VIEW_LOOKUPS = bool;
      app.LOG_TRANSITIONS = bool;
      app.LOG_TRANSITIONS_INTERNAL = bool;
      this.logResolver(bool);
    },
    globalize: function globalize() {
      var self = this;
      var props = ['app', 'container', 'registry', 'store', 'typeMaps', 'route', 'controller', 'model', 'service', 'routes', 'view', 'currentRouteName', 'currentPath', 'log', 'lookup', 'lookupFactory', 'containerNameFor', 'inspect', 'logResolver', 'logAll'];
      // don't stomp on pre-existing global vars
      var skipGlobalize = this.constructor.skipGlobalize;
      if (skipGlobalize === null) {
        skipGlobalize = this.constructor.skipGlobalize = props.filter(function (prop) {
          return !_ember['default'].isNone(self.global[prop]);
        });
      }
      props.map(function (name) {
        if (skipGlobalize.indexOf(name) !== -1) return;
        var prop = self[name];
        if (typeof prop === 'function') {
          prop = function () {
            return self[name].apply(self, arguments);
          };
        }
        self.global[name] = prop;
      });
    },
    _registry: function _registry() {
      var registry;
      if (this.container._registry) {
        registry = this.container._registry.registrations;
      }
      return registry || this.container.registrations || this.container.registry.dict || this.container.registry;
    }
  }).reopenClass({
    skipGlobalize: null
  });
});
/* global DS */
define("fusor-ember-cli/templates/application", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 3,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/application.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "partial", ["mainmenu"], [], ["loc", [null, [2, 2], [2, 24]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 10,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/application.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [2]);
        var morphs = new Array(4);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createAttrMorph(element0, 'class');
        morphs[2] = dom.createMorphAt(element0, 1, 1);
        morphs[3] = dom.createMorphAt(fragment, 4, 4, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["block", "if", [["get", "isEmberCliMode", ["loc", [null, [1, 6], [1, 20]]]]], [], 0, null, ["loc", [null, [1, 0], [3, 7]]]], ["attribute", "class", ["concat", [["subexpr", "if", [["get", "isContainer", ["loc", [null, [5, 17], [5, 28]]]], "container", "container-fluid"], [], ["loc", [null, [5, 12], [5, 60]]]]]]], ["content", "outlet", ["loc", [null, [6, 2], [6, 12]]]], ["content", "error-modal", ["loc", [null, [9, 0], [9, 15]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("fusor-ember-cli/templates/cloudforms/cfme-configuration", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 64,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/cloudforms/cfme-configuration.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "col-md-12");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("form");
        dom.setAttribute(el3, "class", "form form-horizontal");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "cfme-config-padding");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "cfme-config-padding");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0, 1, 1]);
        var element1 = dom.childAt(element0, [1]);
        var element2 = dom.childAt(element0, [3]);
        var morphs = new Array(7);
        morphs[0] = dom.createMorphAt(element1, 1, 1);
        morphs[1] = dom.createMorphAt(element1, 3, 3);
        morphs[2] = dom.createMorphAt(element2, 1, 1);
        morphs[3] = dom.createMorphAt(element2, 3, 3);
        morphs[4] = dom.createMorphAt(element0, 5, 5);
        morphs[5] = dom.createMorphAt(element0, 7, 7);
        morphs[6] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        return morphs;
      },
      statements: [["inline", "text-f", [], ["label", "Root Password", "type", "password", "value", ["subexpr", "@mut", [["get", "cfmeRootPassword", ["loc", [null, [5, 61], [5, 77]]]]], [], []], "cssId", "cfme_root_password", "isRequired", true, "disabled", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [8, 26], [8, 35]]]]], [], []], "validator", ["subexpr", "@mut", [["get", "passwordValidator", ["loc", [null, [9, 27], [9, 44]]]]], [], []], "help-inline", "Applies to root user account for this CloudForms instance", "placeholder", "Must be 8 or more characters"], ["loc", [null, [5, 8], [11, 61]]]], ["inline", "text-f", [], ["label", "Confirm Root Password", "type", "password", "value", ["subexpr", "@mut", [["get", "confirmCfmeRootPassword", ["loc", [null, [13, 69], [13, 92]]]]], [], []], "cssId", "confirm_cfme_root_password", "isRequired", true, "validator", ["subexpr", "@mut", [["get", "confirmCfmeRootPasswordValidator", ["loc", [null, [16, 27], [16, 59]]]]], [], []], "disabled", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [17, 26], [17, 35]]]]], [], []], "placeholder", "Must match root password"], ["loc", [null, [13, 8], [18, 57]]]], ["inline", "text-f", [], ["label", "Admin Password", "type", "password", "value", ["subexpr", "@mut", [["get", "cfmeAdminPassword", ["loc", [null, [22, 62], [22, 79]]]]], [], []], "cssId", "cfme_admin_password", "isRequired", true, "disabled", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [25, 26], [25, 35]]]]], [], []], "validator", ["subexpr", "@mut", [["get", "passwordValidator", ["loc", [null, [26, 27], [26, 44]]]]], [], []], "help-inline", "Applies to admin user account for CloudForms web UI", "placeholder", "Must be 8 or more characters"], ["loc", [null, [22, 8], [28, 61]]]], ["inline", "text-f", [], ["label", "Confirm Admin Password", "type", "password", "value", ["subexpr", "@mut", [["get", "confirmCfmeAdminPassword", ["loc", [null, [30, 70], [30, 94]]]]], [], []], "cssId", "confirm_cfme_admin_password", "isRequired", true, "validator", ["subexpr", "@mut", [["get", "confirmCfmeAdminPasswordValidator", ["loc", [null, [33, 27], [33, 60]]]]], [], []], "disabled", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [34, 26], [34, 35]]]]], [], []], "placeholder", "Must match admin password"], ["loc", [null, [30, 8], [35, 58]]]], ["inline", "text-f", [], ["label", "Database Password", "type", "password", "value", ["subexpr", "@mut", [["get", "cfmeDbPassword", ["loc", [null, [38, 63], [38, 77]]]]], [], []], "cssId", "cfme_db_password", "isRequired", true, "disabled", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [41, 24], [41, 33]]]]], [], []], "validator", ["subexpr", "@mut", [["get", "passwordValidator", ["loc", [null, [42, 25], [42, 42]]]]], [], []], "help-inline", "Applies to database account for this CloudForms instance", "placeholder", "Must be 8 or more characters"], ["loc", [null, [38, 6], [44, 59]]]], ["inline", "text-f", [], ["label", "Confirm Database Password", "type", "password", "value", ["subexpr", "@mut", [["get", "confirmCfmeDbPassword", ["loc", [null, [46, 71], [46, 92]]]]], [], []], "cssId", "confirm_cfme_db_password", "isRequired", true, "validator", ["subexpr", "@mut", [["get", "confirmCfmeDbPasswordValidator", ["loc", [null, [49, 25], [49, 55]]]]], [], []], "disabled", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [50, 24], [50, 33]]]]], [], []], "placeholder", "Must match database password"], ["loc", [null, [46, 6], [51, 59]]]], ["inline", "cancel-back-next", [], ["backRouteName", "where-install", "disableBack", false, "nextRouteName", ["subexpr", "@mut", [["get", "nextRouteNameAfterCFME", ["loc", [null, [59, 33], [59, 55]]]]], [], []], "disableNext", ["subexpr", "@mut", [["get", "disableNextCfmeConfiguration", ["loc", [null, [60, 31], [60, 59]]]]], [], []], "disableCancel", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [61, 33], [61, 42]]]]], [], []], "deploymentName", ["subexpr", "@mut", [["get", "deploymentName", ["loc", [null, [62, 34], [62, 48]]]]], [], []]], ["loc", [null, [57, 0], [62, 50]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("fusor-ember-cli/templates/cloudforms/index", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/cloudforms/index.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["content", "outlet", ["loc", [null, [1, 0], [1, 10]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("fusor-ember-cli/templates/cloudforms", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 3,
                "column": 6
              },
              "end": {
                "line": 9,
                "column": 6
              }
            },
            "moduleName": "fusor-ember-cli/templates/cloudforms.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("a");
            dom.setAttribute(el1, "data-qci", "cfme-installation-location");
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("span");
            dom.setAttribute(el2, "class", "hanging-indent");
            var el3 = dom.createTextNode("\n            ");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("A. Installation Location\n          ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1]), 1, 1);
            return morphs;
          },
          statements: [["content", "stepNumberCloudForms", ["loc", [null, [6, 12], [6, 36]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 11,
                "column": 6
              },
              "end": {
                "line": 17,
                "column": 6
              }
            },
            "moduleName": "fusor-ember-cli/templates/cloudforms.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("a");
            dom.setAttribute(el1, "data-qci", "cfme-configuration");
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("span");
            dom.setAttribute(el2, "class", "hanging-indent");
            var el3 = dom.createTextNode("\n            ");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("B. Configuration\n          ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1]), 1, 1);
            return morphs;
          },
          statements: [["content", "stepNumberCloudForms", ["loc", [null, [14, 12], [14, 36]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 19,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/cloudforms.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          return morphs;
        },
        statements: [["block", "link-to", ["where-install"], ["tagName", "li", "disabled", ["subexpr", "@mut", [["get", "disableTabCFWhere", ["loc", [null, [3, 55], [3, 72]]]]], [], []]], 0, null, ["loc", [null, [3, 6], [9, 18]]]], ["block", "link-to", ["cloudforms.cfme-configuration"], ["tagName", "li", "disabled", ["subexpr", "@mut", [["get", "disableTabCFConfiguration", ["loc", [null, [11, 71], [11, 96]]]]], [], []]], 1, null, ["loc", [null, [11, 6], [17, 18]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 20,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/cloudforms.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "wizard-step", [], ["outlet", ["subexpr", "@mut", [["get", "outlet", ["loc", [null, [1, 22], [1, 28]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [19, 16]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("fusor-ember-cli/templates/components/abandon-deployment-modal", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 5,
                "column": 6
              },
              "end": {
                "line": 7,
                "column": 6
              }
            },
            "moduleName": "fusor-ember-cli/templates/components/abandon-deployment-modal.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          Are you sure that you want to delete this deployment?\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 9,
                "column": 6
              },
              "end": {
                "line": 16,
                "column": 6
              }
            },
            "moduleName": "fusor-ember-cli/templates/components/abandon-deployment-modal.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "class", "btn btn-default");
            var el2 = dom.createTextNode("\n              No\n          ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "class", "btn btn-danger");
            var el2 = dom.createTextNode("\n              Yes, Delete Deployment\n          ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var element1 = dom.childAt(fragment, [3]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element0);
            morphs[1] = dom.createElementMorph(element1);
            return morphs;
          },
          statements: [["element", "action", ["closeModal"], [], ["loc", [null, [10, 18], [10, 41]]]], ["element", "action", ["executeAbandonment"], [], ["loc", [null, [13, 18], [13, 49]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 18,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/abandon-deployment-modal.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          return morphs;
        },
        statements: [["block", "pf-modal-body", [], [], 0, null, ["loc", [null, [5, 6], [7, 24]]]], ["block", "pf-modal-footer", [], [], 1, null, ["loc", [null, [9, 6], [16, 26]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 19,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/abandon-deployment-modal.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "pf-modal-base", [], ["idModal", "abandonDeploymentModal", "openModal", ["subexpr", "@mut", [["get", "openModal", ["loc", [null, [2, 27], [2, 36]]]]], [], []], "title", "Delete QCI Deployment"], 0, null, ["loc", [null, [1, 0], [18, 18]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("fusor-ember-cli/templates/components/accordion-item", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 7,
              "column": 4
            },
            "end": {
              "line": 9,
              "column": 4
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/accordion-item.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["content", "yield", ["loc", [null, [8, 6], [8, 15]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 12,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/accordion-item.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "col-md-12");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h3");
        dom.setAttribute(el3, "class", "accordion-item-title");
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("i");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n       ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0, 1]);
        var element1 = dom.childAt(element0, [1]);
        var element2 = dom.childAt(element1, [1]);
        var morphs = new Array(4);
        morphs[0] = dom.createElementMorph(element1);
        morphs[1] = dom.createAttrMorph(element2, 'class');
        morphs[2] = dom.createMorphAt(element1, 3, 3);
        morphs[3] = dom.createMorphAt(element0, 3, 3);
        return morphs;
      },
      statements: [["element", "action", ["openItem"], [], ["loc", [null, [3, 37], [3, 58]]]], ["attribute", "class", ["concat", ["fa ", ["subexpr", "if", [["get", "isOpen", ["loc", [null, [4, 22], [4, 28]]]], "fa-angle-down", "fa-angle-right"], [], ["loc", [null, [4, 17], [4, 63]]]]]]], ["content", "name", ["loc", [null, [5, 12], [5, 20]]]], ["block", "if", [["get", "isOpen", ["loc", [null, [7, 10], [7, 16]]]]], [], 0, null, ["loc", [null, [7, 4], [9, 11]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("fusor-ember-cli/templates/components/add-node-registration", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 15,
                  "column": 10
                },
                "end": {
                  "line": 19,
                  "column": 10
                }
              },
              "moduleName": "fusor-ember-cli/templates/components/add-node-registration.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "add-node-uneditable-input-container");
              var el2 = dom.createElement("span");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 0]), 0, 0);
              return morphs;
            },
            statements: [["content", "nodeInfo.address", ["loc", [null, [18, 67], [18, 87]]]]],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 21,
                  "column": 10
                },
                "end": {
                  "line": 25,
                  "column": 10
                }
              },
              "moduleName": "fusor-ember-cli/templates/components/add-node-registration.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "add-node-uneditable-input-container");
              var el2 = dom.createElement("span");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 0]), 0, 0);
              return morphs;
            },
            statements: [["content", "nodeDriverHumanized", ["loc", [null, [24, 67], [24, 90]]]]],
            locals: [],
            templates: []
          };
        })();
        var child2 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 27,
                  "column": 10
                },
                "end": {
                  "line": 31,
                  "column": 10
                }
              },
              "moduleName": "fusor-ember-cli/templates/components/add-node-registration.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "add-node-uneditable-input-container");
              var el2 = dom.createElement("span");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 0]), 0, 0);
              return morphs;
            },
            statements: [["content", "nodeInfo.username", ["loc", [null, [30, 67], [30, 88]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 6,
                "column": 2
              },
              "end": {
                "line": 61,
                "column": 2
              }
            },
            "moduleName": "fusor-ember-cli/templates/components/add-node-registration.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "row");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "col-xs-12");
            var el3 = dom.createTextNode("\n        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("p");
            var el4 = dom.createTextNode("Enter information for additional nodes that should be registered to ");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n      ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "row");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "col-xs-12");
            var el3 = dom.createTextNode("\n        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("form");
            dom.setAttribute(el3, "class", "form-horizontal add-node-form");
            var el4 = dom.createTextNode("\n");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n          ");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n\n          ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("div");
            dom.setAttribute(el4, "class", "row");
            var el5 = dom.createTextNode("\n            ");
            dom.appendChild(el4, el5);
            var el5 = dom.createElement("div");
            dom.setAttribute(el5, "class", "col-xs-9 add-node-textarea-instruction");
            var el6 = dom.createTextNode("\n              ");
            dom.appendChild(el5, el6);
            var el6 = dom.createElement("p");
            var el7 = dom.createTextNode("One or more nodes of the above IP address can be specified by supplying\n                their MAC address(es), ");
            dom.appendChild(el6, el7);
            var el7 = dom.createElement("strong");
            var el8 = dom.createTextNode("one address per line");
            dom.appendChild(el7, el8);
            dom.appendChild(el6, el7);
            var el7 = dom.createTextNode(".");
            dom.appendChild(el6, el7);
            dom.appendChild(el5, el6);
            var el6 = dom.createTextNode("\n            ");
            dom.appendChild(el5, el6);
            dom.appendChild(el4, el5);
            var el5 = dom.createTextNode("\n          ");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n          ");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n        ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n      ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element2 = dom.childAt(fragment, [3, 1, 1]);
            var morphs = new Array(6);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1, 1]), 1, 1);
            morphs[1] = dom.createMorphAt(element2, 1, 1);
            morphs[2] = dom.createMorphAt(element2, 3, 3);
            morphs[3] = dom.createMorphAt(element2, 5, 5);
            morphs[4] = dom.createMorphAt(element2, 7, 7);
            morphs[5] = dom.createMorphAt(element2, 11, 11);
            return morphs;
          },
          statements: [["content", "nodeInfo.address", ["loc", [null, [9, 79], [9, 99]]]], ["block", "base-f", [], ["label", "IP Address", "labelSize", "col-xs-3", "inputSize", "col-xs-4"], 0, null, ["loc", [null, [15, 10], [19, 21]]]], ["block", "base-f", [], ["label", "Driver", "labelSize", "col-xs-3", "inputSize", "col-xs-4"], 1, null, ["loc", [null, [21, 10], [25, 21]]]], ["block", "base-f", [], ["label", ["subexpr", "@mut", [["get", "newNodeUsernameLabel", ["loc", [null, [27, 26], [27, 46]]]]], [], []], "labelSize", "col-xs-3", "inputSize", "col-xs-4"], 2, null, ["loc", [null, [27, 10], [31, 21]]]], ["inline", "text-f", [], ["cssId", "addNodePasswordInput", "label", ["subexpr", "@mut", [["get", "newNodePasswordLabel", ["loc", [null, [34, 26], [34, 46]]]]], [], []], "type", "password", "labelSize", "form-label-nowrap col-xs-3", "inputSize", "col-xs-4", "value", ["subexpr", "@mut", [["get", "nodeInfo.password", ["loc", [null, [38, 26], [38, 43]]]]], [], []], "resetErrorsMessageKey", ["subexpr", "@mut", [["get", "resetErrorsMessageKey", ["loc", [null, [39, 42], [39, 63]]]]], [], []], "isRequired", true], ["loc", [null, [33, 10], [40, 37]]]], ["inline", "textarea-f-alt2", [], ["cssId", "addNodeMacAddressInput", "label", "MAC address(es)", "value", ["subexpr", "@mut", [["get", "manualMacAddresses", ["loc", [null, [50, 34], [50, 52]]]]], [], []], "validator", ["subexpr", "@mut", [["get", "manualMacAddressesValidator", ["loc", [null, [51, 38], [51, 65]]]]], [], []], "resetErrorsMessageKey", ["subexpr", "@mut", [["get", "resetErrorsMessageKey", ["loc", [null, [52, 50], [52, 71]]]]], [], []], "labelContainerClass", "col-xs-3", "inputContainerClass", "col-xs-4", "errorContainerClass", "col-xs-5", "rows", 3, "spellcheck", false], ["loc", [null, [48, 10], [57, 46]]]]],
          locals: [],
          templates: [child0, child1, child2]
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 63,
                "column": 2
              },
              "end": {
                "line": 72,
                "column": 2
              }
            },
            "moduleName": "fusor-ember-cli/templates/components/add-node-registration.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "button");
            dom.setAttribute(el1, "id", "addNodeCancelButton");
            dom.setAttribute(el1, "class", "btn btn-default delete-node-cancel-button");
            var el2 = dom.createTextNode("\n      Cancel\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "submit");
            dom.setAttribute(el1, "id", "addNodeSubmitButton");
            dom.setAttribute(el1, "class", "btn btn-primary new-node-submit-button");
            var el2 = dom.createTextNode("\n      Register\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var element1 = dom.childAt(fragment, [3]);
            var morphs = new Array(3);
            morphs[0] = dom.createElementMorph(element0);
            morphs[1] = dom.createAttrMorph(element1, 'disabled');
            morphs[2] = dom.createElementMorph(element1);
            return morphs;
          },
          statements: [["element", "action", ["cancelAddNodes"], [], ["loc", [null, [65, 62], [65, 89]]]], ["attribute", "disabled", ["get", "disableNewNodesSubmit", ["loc", [null, [69, 23], [69, 44]]]]], ["element", "action", ["submitAddNodes"], [], ["loc", [null, [69, 47], [69, 74]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 74,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/add-node-registration.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          return morphs;
        },
        statements: [["block", "pf-modal-body", [], [], 0, null, ["loc", [null, [6, 2], [61, 20]]]], ["block", "pf-modal-footer", [], [], 1, null, ["loc", [null, [63, 2], [72, 22]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 75,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/add-node-registration.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "pf-modal-base", [], ["idModal", "addNodeModal", "openModal", ["subexpr", "@mut", [["get", "openModal", ["loc", [null, [2, 27], [2, 36]]]]], [], []], "title", ["subexpr", "@mut", [["get", "addNodeTitle", ["loc", [null, [3, 23], [3, 35]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [74, 18]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("fusor-ember-cli/templates/components/auto-node-registration-mac-address", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.10",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 13,
                    "column": 10
                  },
                  "end": {
                    "line": 13,
                    "column": 40
                  }
                },
                "moduleName": "fusor-ember-cli/templates/components/auto-node-registration-mac-address.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["content", "opt", ["loc", [null, [13, 33], [13, 40]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 12,
                  "column": 8
                },
                "end": {
                  "line": 14,
                  "column": 8
                }
              },
              "moduleName": "fusor-ember-cli/templates/components/auto-node-registration-mac-address.hbs"
            },
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("          ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["block", "x-option", [], ["value", ["subexpr", "@mut", [["get", "opt", ["loc", [null, [13, 28], [13, 31]]]]], [], []]], 0, null, ["loc", [null, [13, 10], [13, 53]]]]],
            locals: ["opt"],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 10,
                "column": 6
              },
              "end": {
                "line": 15,
                "column": 6
              }
            },
            "moduleName": "fusor-ember-cli/templates/components/auto-node-registration-mac-address.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("option");
            var el2 = dom.createTextNode("Assign interface");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "each", [["get", "host.macAddresses", ["loc", [null, [12, 16], [12, 33]]]]], [], 0, null, ["loc", [null, [12, 8], [14, 17]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 9,
              "column": 4
            },
            "end": {
              "line": 17,
              "column": 4
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/auto-node-registration-mac-address.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          return morphs;
        },
        statements: [["block", "x-select", [], ["value", ["subexpr", "@mut", [["get", "host.value", ["loc", [null, [10, 24], [10, 34]]]]], [], []], "id", ["subexpr", "@mut", [["get", "selectId", ["loc", [null, [10, 38], [10, 46]]]]], [], []], "class", "form-control new-node-detect-select", "data-qci", ["subexpr", "@mut", [["get", "selectId", ["loc", [null, [10, 100], [10, 108]]]]], [], []]], 0, null, ["loc", [null, [10, 6], [15, 19]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 17,
              "column": 4
            },
            "end": {
              "line": 19,
              "column": 4
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/auto-node-registration-mac-address.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "class", "new-node-detect-mac-address new-node-form-span");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          return morphs;
        },
        statements: [["content", "host.value", ["loc", [null, [18, 67], [18, 81]]]]],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 20,
              "column": 4
            },
            "end": {
              "line": 22,
              "column": 4
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/auto-node-registration-mac-address.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "class", "new-node-form-span new-node-detect-invalid-icon fa fa-times-circle-o");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child3 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 22,
              "column": 4
            },
            "end": {
              "line": 24,
              "column": 4
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/auto-node-registration-mac-address.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "class", "new-node-form-span new-node-detect-invalid-icon");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 28,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/auto-node-registration-mac-address.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "checkbox new-node-detect-checkbox");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "form-group new-node-detect-form-group light-left-border");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        dom.setAttribute(el3, "class", "control-label new-node-detect-hostnumber");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode(".\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("span");
        dom.setAttribute(el3, "class", "new-node-detect-hostname new-node-form-span");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var element1 = dom.childAt(element0, [3]);
        var morphs = new Array(6);
        morphs[0] = dom.createAttrMorph(element0, 'class');
        morphs[1] = dom.createMorphAt(dom.childAt(element0, [1, 1]), 0, 0);
        morphs[2] = dom.createMorphAt(dom.childAt(element1, [1]), 1, 1);
        morphs[3] = dom.createMorphAt(element1, 3, 3);
        morphs[4] = dom.createMorphAt(element1, 4, 4);
        morphs[5] = dom.createMorphAt(dom.childAt(element1, [6]), 0, 0);
        return morphs;
      },
      statements: [["attribute", "class", ["concat", ["form-inline new-node-detect-form ", ["get", "readyStatusClass", ["loc", [null, [1, 48], [1, 64]]]]]]], ["inline", "input", [], ["type", "checkbox", "name", "autoDetectedNodeSelected", "checked", ["subexpr", "@mut", [["get", "host.selected", ["loc", [null, [3, 75], [3, 88]]]]], [], []]], ["loc", [null, [3, 11], [3, 90]]]], ["content", "hostNumber", ["loc", [null, [7, 6], [7, 20]]]], ["block", "if", [["get", "multipleMacAddresses", ["loc", [null, [9, 10], [9, 30]]]]], [], 0, 1, ["loc", [null, [9, 4], [19, 11]]]], ["block", "if", [["get", "isInvalid", ["loc", [null, [20, 10], [20, 19]]]]], [], 2, 3, ["loc", [null, [20, 4], [24, 11]]]], ["content", "host.name", ["loc", [null, [25, 62], [25, 75]]]]],
      locals: [],
      templates: [child0, child1, child2, child3]
    };
  })());
});
define("fusor-ember-cli/templates/components/base-f", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 6,
              "column": 10
            },
            "end": {
              "line": 8,
              "column": 10
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/base-f.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "class", "errorForValidation");
          var el2 = dom.createTextNode("*");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 11,
              "column": 8
            },
            "end": {
              "line": 17,
              "column": 8
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/base-f.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("          ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          dom.setAttribute(el1, "class", "pficon fa fa-info-circle rhci-popover-button");
          dom.setAttribute(el1, "tabindex", "-1");
          dom.setAttribute(el1, "data-toggle", "popover");
          var el2 = dom.createTextNode("\n          ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [1]);
          var morphs = new Array(1);
          morphs[0] = dom.createElementMorph(element1);
          return morphs;
        },
        statements: [["element", "action", ["doNothing"], ["bubbles", false], ["loc", [null, [12, 18], [12, 54]]]]],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 24,
              "column": 6
            },
            "end": {
              "line": 28,
              "column": 6
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/base-f.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          var el2 = dom.createTextNode("\n          ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createAttrMorph(element0, 'class');
          morphs[1] = dom.createMorphAt(element0, 1, 1);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", [["get", "unitsClassSize", ["loc", [null, [25, 22], [25, 36]]]]]]], ["content", "unitsLabel", ["loc", [null, [26, 10], [26, 24]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 35,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/base-f.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "clearfix");
        var el2 = dom.createTextNode("\n   ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("label");
        dom.setAttribute(el4, "class", "class");
        var el5 = dom.createTextNode("\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("          ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("      ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "help-block col-lg-6 col-md-9 col-sm-7 col-xs-12");
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n   ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element2 = dom.childAt(fragment, [0, 1]);
        var element3 = dom.childAt(element2, [1]);
        var element4 = dom.childAt(element3, [1]);
        var element5 = dom.childAt(element2, [3]);
        var morphs = new Array(9);
        morphs[0] = dom.createAttrMorph(element2, 'class');
        morphs[1] = dom.createAttrMorph(element3, 'class');
        morphs[2] = dom.createMorphAt(element4, 1, 1);
        morphs[3] = dom.createMorphAt(element4, 3, 3);
        morphs[4] = dom.createMorphAt(element3, 3, 3);
        morphs[5] = dom.createAttrMorph(element5, 'class');
        morphs[6] = dom.createMorphAt(element5, 1, 1);
        morphs[7] = dom.createMorphAt(element2, 5, 5);
        morphs[8] = dom.createMorphAt(dom.childAt(element2, [7]), 1, 1);
        return morphs;
      },
      statements: [["attribute", "class", ["concat", ["form-group ", ["subexpr", "if", [["get", "hasError", ["loc", [null, [2, 31], [2, 39]]]], "has-error"], [], ["loc", [null, [2, 26], [2, 53]]]]]]], ["attribute", "class", ["concat", ["control-label ", ["get", "labelClassSize", ["loc", [null, [4, 36], [4, 50]]]], " ", ["get", "class", ["loc", [null, [4, 55], [4, 60]]]]]]], ["block", "if", [["get", "isRequired", ["loc", [null, [6, 16], [6, 26]]]]], [], 0, null, ["loc", [null, [6, 10], [8, 17]]]], ["content", "label", ["loc", [null, [9, 10], [9, 19]]]], ["block", "if", [["get", "showHelpPopover", ["loc", [null, [11, 14], [11, 29]]]]], [], 1, null, ["loc", [null, [11, 8], [17, 15]]]], ["attribute", "class", ["concat", [["get", "inputClassSize", ["loc", [null, [20, 20], [20, 34]]]]]]], ["content", "yield", ["loc", [null, [21, 8], [21, 17]]]], ["block", "if", [["get", "showUnits", ["loc", [null, [24, 12], [24, 21]]]]], [], 2, null, ["loc", [null, [24, 6], [28, 13]]]], ["content", "help-inline", ["loc", [null, [31, 8], [31, 23]]]]],
      locals: [],
      templates: [child0, child1, child2]
    };
  })());
});
define("fusor-ember-cli/templates/components/base-popover", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/base-popover.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() {
        return [];
      },
      statements: [],
      locals: [],
      templates: []
    };
  })());
});
define("fusor-ember-cli/templates/components/button-f", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 9
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/button-f.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["content", "title", ["loc", [null, [1, 0], [1, 9]]]], ["content", "yield", ["loc", [null, [2, 0], [2, 9]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("fusor-ember-cli/templates/components/button-selection", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 2
              },
              "end": {
                "line": 4,
                "column": 2
              }
            },
            "moduleName": "fusor-ember-cli/templates/components/button-selection.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["content", "label", ["loc", [null, [3, 4], [3, 13]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 5,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/button-selection.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "tool-tip", [], ["title", "Not enough available resources in environment"], 0, null, ["loc", [null, [2, 2], [4, 15]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 5,
              "column": 0
            },
            "end": {
              "line": 7,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/button-selection.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createAttrMorph(element0, 'data-qci');
          morphs[1] = dom.createMorphAt(element0, 0, 0);
          return morphs;
        },
        statements: [["attribute", "data-qci", ["get", "cssId", ["loc", [null, [6, 19], [6, 24]]]]], ["content", "label", ["loc", [null, [6, 27], [6, 36]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 8,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/button-selection.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "disabled", ["loc", [null, [1, 6], [1, 14]]]]], [], 0, 1, ["loc", [null, [1, 0], [7, 7]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("fusor-ember-cli/templates/components/cancel-back-next-buttons", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 5,
              "column": 1
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/cancel-back-next-buttons.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          dom.setAttribute(el1, "class", "btn btn-default cancel-button");
          var el2 = dom.createTextNode("\n      Cancel\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createAttrMorph(element1, 'data-qci');
          morphs[1] = dom.createElementMorph(element1);
          return morphs;
        },
        statements: [["attribute", "data-qci", ["get", "dataQciCancelButton", ["loc", [null, [2, 105], [2, 124]]]]], ["element", "action", ["cancelAndRollbackNewDeployment"], [], ["loc", [null, [2, 50], [2, 93]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 5,
              "column": 1
            },
            "end": {
              "line": 9,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/cancel-back-next-buttons.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          dom.setAttribute(el1, "class", "btn btn-default cancel-button");
          var el2 = dom.createTextNode("\n      Cancel\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(3);
          morphs[0] = dom.createAttrMorph(element0, 'disabled');
          morphs[1] = dom.createAttrMorph(element0, 'data-qci');
          morphs[2] = dom.createElementMorph(element0);
          return morphs;
        },
        statements: [["attribute", "disabled", ["get", "disableCancel", ["loc", [null, [6, 100], [6, 113]]]]], ["attribute", "data-qci", ["get", "dataQciCancelButton", ["loc", [null, [6, 127], [6, 146]]]]], ["element", "action", ["openCancelDeploymentModal"], [], ["loc", [null, [6, 50], [6, 88]]]]],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 12,
                "column": 2
              },
              "end": {
                "line": 14,
                "column": 2
              }
            },
            "moduleName": "fusor-ember-cli/templates/components/cancel-back-next-buttons.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("i");
            dom.setAttribute(el1, "class", "fa fa-angle-left");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode(" Back\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 11,
              "column": 0
            },
            "end": {
              "line": 15,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/cancel-back-next-buttons.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "link-to", [["get", "backRouteName", ["loc", [null, [12, 13], [12, 26]]]]], ["disabled", ["subexpr", "@mut", [["get", "disableBack", ["loc", [null, [12, 36], [12, 47]]]]], [], []], "role", "button", "class", "btn btn-default back-button", "data-qci", ["subexpr", "@mut", [["get", "dataQciBackButton", ["loc", [null, [12, 107], [12, 124]]]]], [], []]], 0, null, ["loc", [null, [12, 2], [14, 14]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child3 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 18,
                "column": 2
              },
              "end": {
                "line": 20,
                "column": 2
              }
            },
            "moduleName": "fusor-ember-cli/templates/components/cancel-back-next-buttons.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    Next ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("i");
            dom.setAttribute(el1, "class", "fa fa-angle-right");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 17,
              "column": 0
            },
            "end": {
              "line": 21,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/cancel-back-next-buttons.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "link-to", [["get", "nextRouteName", ["loc", [null, [18, 13], [18, 26]]]]], ["tagName", "button", "disabled", ["subexpr", "@mut", [["get", "disableNext", ["loc", [null, [18, 53], [18, 64]]]]], [], []], "role", "button", "class", "btn btn-primary next-button", "data-qci", ["subexpr", "@mut", [["get", "dataQciNextButton", ["loc", [null, [18, 124], [18, 141]]]]], [], []]], 0, null, ["loc", [null, [18, 2], [20, 14]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child4 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 21,
              "column": 0
            },
            "end": {
              "line": 23,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/cancel-back-next-buttons.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["content", "yield", ["loc", [null, [22, 2], [22, 11]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 24,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/cancel-back-next-buttons.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[2] = dom.createMorphAt(fragment, 4, 4, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "isNew", ["loc", [null, [1, 6], [1, 11]]]]], [], 0, 1, ["loc", [null, [1, 0], [9, 7]]]], ["block", "if", [["get", "backRouteName", ["loc", [null, [11, 6], [11, 19]]]]], [], 2, null, ["loc", [null, [11, 0], [15, 7]]]], ["block", "if", [["get", "nextRouteName", ["loc", [null, [17, 6], [17, 19]]]]], [], 3, 4, ["loc", [null, [17, 0], [23, 7]]]]],
      locals: [],
      templates: [child0, child1, child2, child3, child4]
    };
  })());
});
define("fusor-ember-cli/templates/components/cancel-back-next", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 5,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/cancel-back-next.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "col-xs-8 col-sm-8 col-md-9 col-lg-10 col-xs-push-4 col-sm-push-4 col-md-push-3 col-lg-push-2 sidebar-pf-right rhci-steps-buttons cancel-back-next");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["inline", "partial", ["components/cancel-back-next-buttons"], [], ["loc", [null, [3, 4], [3, 53]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 5,
              "column": 0
            },
            "end": {
              "line": 7,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/cancel-back-next.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "partial", ["components/cancel-back-next-buttons"], [], ["loc", [null, [6, 2], [6, 51]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 13,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/cancel-back-next.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["block", "if", [["get", "bottomBar", ["loc", [null, [1, 6], [1, 15]]]]], [], 0, 1, ["loc", [null, [1, 0], [7, 7]]]], ["inline", "cancel-deployment-modal", [], ["openModal", ["subexpr", "@mut", [["get", "openModal", ["loc", [null, [9, 36], [9, 45]]]]], [], []], "deploymentName", ["subexpr", "@mut", [["get", "deploymentName", ["loc", [null, [10, 41], [10, 55]]]]], [], []], "cancelAndRollbackNewDeployment", "cancelAndRollbackNewDeployment", "openCancelDeploymentModal", "openCancelDeploymentModal"], ["loc", [null, [9, 0], [12, 81]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("fusor-ember-cli/templates/components/cancel-deployment-modal", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 5,
                "column": 6
              },
              "end": {
                "line": 7,
                "column": 6
              }
            },
            "moduleName": "fusor-ember-cli/templates/components/cancel-deployment-modal.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          What would you like to do with this deployment?\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 9,
                "column": 6
              },
              "end": {
                "line": 19,
                "column": 6
              }
            },
            "moduleName": "fusor-ember-cli/templates/components/cancel-deployment-modal.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "class", "btn btn-default");
            var el2 = dom.createTextNode("\n              Exit and Delete\n          ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "class", "btn btn-default");
            var el2 = dom.createTextNode("\n              Exit and Save\n          ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "class", "btn btn-primary");
            var el2 = dom.createTextNode("\n              Continue Working\n          ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var element1 = dom.childAt(fragment, [3]);
            var element2 = dom.childAt(fragment, [5]);
            var morphs = new Array(3);
            morphs[0] = dom.createElementMorph(element0);
            morphs[1] = dom.createElementMorph(element1);
            morphs[2] = dom.createElementMorph(element2);
            return morphs;
          },
          statements: [["element", "action", ["cancelAndDeleteDeployment"], [], ["loc", [null, [10, 18], [10, 56]]]], ["element", "action", ["saveAndCancelDeployment"], [], ["loc", [null, [13, 18], [13, 54]]]], ["element", "action", ["closeModal"], [], ["loc", [null, [16, 18], [16, 41]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 21,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/cancel-deployment-modal.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          return morphs;
        },
        statements: [["block", "pf-modal-body", [], [], 0, null, ["loc", [null, [5, 6], [7, 24]]]], ["block", "pf-modal-footer", [], [], 1, null, ["loc", [null, [9, 6], [19, 26]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 22,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/cancel-deployment-modal.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "pf-modal-base", [], ["idModal", "cancelDeploymentModal", "openModal", ["subexpr", "@mut", [["get", "openModal", ["loc", [null, [2, 27], [2, 36]]]]], [], []], "title", ["subexpr", "@mut", [["get", "title", ["loc", [null, [3, 23], [3, 28]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [21, 18]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("fusor-ember-cli/templates/components/check-f", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 8,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/check-f.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "input", [], ["type", "checkbox", "checked", ["subexpr", "@mut", [["get", "checked", ["loc", [null, [4, 18], [4, 25]]]]], [], []], "id", ["subexpr", "@mut", [["get", "cssId", ["loc", [null, [5, 13], [5, 18]]]]], [], []], "data-qci", ["subexpr", "@mut", [["get", "cssId", ["loc", [null, [6, 19], [6, 24]]]]], [], []]], ["loc", [null, [3, 2], [6, 26]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 9,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/check-f.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "base-f", [], ["label", ["subexpr", "@mut", [["get", "label", ["loc", [null, [1, 16], [1, 21]]]]], [], []], "labelSize", ["subexpr", "@mut", [["get", "labelSize", ["loc", [null, [1, 32], [1, 41]]]]], [], []], "inputSize", ["subexpr", "@mut", [["get", "inputSize", ["loc", [null, [1, 52], [1, 61]]]]], [], []], "unitsSize", ["subexpr", "@mut", [["get", "unitsSize", ["loc", [null, [1, 72], [1, 81]]]]], [], []], "unitsLabel", ["subexpr", "@mut", [["get", "unitsLabel", ["loc", [null, [1, 93], [1, 103]]]]], [], []], "help-inline", ["subexpr", "@mut", [["get", "help-inline", ["loc", [null, [1, 116], [1, 127]]]]], [], []], "errors", ["subexpr", "@mut", [["get", "errors", ["loc", [null, [1, 135], [1, 141]]]]], [], []], "isRequired", ["subexpr", "@mut", [["get", "isRequired", ["loc", [null, [1, 153], [1, 163]]]]], [], []], "helpText", ["subexpr", "@mut", [["get", "helpText", ["loc", [null, [1, 173], [1, 181]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [8, 11]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("fusor-ember-cli/templates/components/column-name", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 22
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/column-name.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode(" ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["content", "arrowIcon", ["loc", [null, [1, 0], [1, 13]]]], ["content", "name", ["loc", [null, [1, 14], [1, 22]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("fusor-ember-cli/templates/components/content-mirror-f", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 3,
                "column": 4
              },
              "end": {
                "line": 6,
                "column": 4
              }
            },
            "moduleName": "fusor-ember-cli/templates/components/content-mirror-f.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            var el2 = dom.createTextNode("Verifying mirror...");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            dom.setAttribute(el1, "class", "spinner spinner-md spinner-inline");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 6,
                  "column": 4
                },
                "end": {
                  "line": 8,
                  "column": 4
                }
              },
              "moduleName": "fusor-ember-cli/templates/components/content-mirror-f.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("span");
              dom.setAttribute(el1, "class", "valid-msg");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
              return morphs;
            },
            statements: [["content", "contentMirrorValidationMsg", ["loc", [null, [7, 32], [7, 62]]]]],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 8,
                  "column": 4
                },
                "end": {
                  "line": 10,
                  "column": 4
                }
              },
              "moduleName": "fusor-ember-cli/templates/components/content-mirror-f.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("span");
              dom.setAttribute(el1, "class", "invalid-msg");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n    ");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
              return morphs;
            },
            statements: [["content", "contentMirrorValidationMsg", ["loc", [null, [9, 34], [9, 64]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 6,
                "column": 4
              },
              "end": {
                "line": 10,
                "column": 4
              }
            },
            "moduleName": "fusor-ember-cli/templates/components/content-mirror-f.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["get", "isContentMirrorValid", ["loc", [null, [6, 14], [6, 34]]]]], [], 0, 1, ["loc", [null, [6, 4], [10, 4]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 12,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/content-mirror-f.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "content-mirror-status");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["block", "if", [["get", "isVerifyingContentMirror", ["loc", [null, [3, 10], [3, 34]]]]], [], 0, 1, ["loc", [null, [3, 4], [10, 11]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 13,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/content-mirror-f.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "text-f", [], ["cssId", "content-mirror-url", "label", "Content Mirror URL", "value", ["subexpr", "@mut", [["get", "cdnUrl", ["loc", [null, [1, 70], [1, 76]]]]], [], []], "disabled", false], 0, null, ["loc", [null, [1, 0], [12, 11]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("fusor-ember-cli/templates/components/continue-deployment-modal", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 5,
                "column": 6
              },
              "end": {
                "line": 11,
                "column": 6
              }
            },
            "moduleName": "fusor-ember-cli/templates/components/continue-deployment-modal.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("\n        Are you sure that you want to deploy ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("? There\n        are warnings that were found that could cause problems during the\n        deployment.\n\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["content", "deployment.name", ["loc", [null, [7, 45], [7, 64]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 13,
                "column": 6
              },
              "end": {
                "line": 20,
                "column": 6
              }
            },
            "moduleName": "fusor-ember-cli/templates/components/continue-deployment-modal.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "class", "btn btn-default");
            var el2 = dom.createTextNode("\n              No\n          ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "class", "btn btn-warning");
            var el2 = dom.createTextNode("\n              Yes, Continue\n          ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var element1 = dom.childAt(fragment, [3]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element0);
            morphs[1] = dom.createElementMorph(element1);
            return morphs;
          },
          statements: [["element", "action", ["cancelModal", ["get", "deployment", ["loc", [null, [14, 41], [14, 51]]]]], [], ["loc", [null, [14, 18], [14, 53]]]], ["element", "action", ["installDeployment", ["get", "deployment", ["loc", [null, [17, 47], [17, 57]]]]], [], ["loc", [null, [17, 18], [17, 59]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 22,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/continue-deployment-modal.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          return morphs;
        },
        statements: [["block", "pf-modal-body", [], [], 0, null, ["loc", [null, [5, 6], [11, 24]]]], ["block", "pf-modal-footer", [], [], 1, null, ["loc", [null, [13, 6], [20, 26]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 23,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/continue-deployment-modal.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "pf-modal-base", [], ["idModal", "continueDeploymentModal", "openModal", ["subexpr", "@mut", [["get", "openModal", ["loc", [null, [2, 27], [2, 36]]]]], [], []], "title", ["subexpr", "@mut", [["get", "title", ["loc", [null, [3, 23], [3, 28]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [22, 18]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("fusor-ember-cli/templates/components/debug-info", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 3,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/debug-info.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["content", "yield", ["loc", [null, [2, 4], [2, 13]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 0
            },
            "end": {
              "line": 5,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/debug-info.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    .\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 6,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/debug-info.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "isOpen", ["loc", [null, [1, 6], [1, 12]]]]], [], 0, 1, ["loc", [null, [1, 0], [5, 7]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("fusor-ember-cli/templates/components/delete-deployment-button", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/delete-deployment-button.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("button");
        dom.setAttribute(el1, "class", "btn btn-sm btn-danger");
        var el2 = dom.createTextNode("Delete");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() {
        return [];
      },
      statements: [],
      locals: [],
      templates: []
    };
  })());
});
define("fusor-ember-cli/templates/components/delete-deployment-modal", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 5,
                "column": 6
              },
              "end": {
                "line": 9,
                "column": 6
              }
            },
            "moduleName": "fusor-ember-cli/templates/components/delete-deployment-modal.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("\n        Are you sure that you want to delete this deployment - ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("?\n\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["content", "deployment.name", ["loc", [null, [7, 63], [7, 82]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 11,
                "column": 6
              },
              "end": {
                "line": 18,
                "column": 6
              }
            },
            "moduleName": "fusor-ember-cli/templates/components/delete-deployment-modal.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "class", "btn btn-default");
            var el2 = dom.createTextNode("\n              No\n          ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "class", "btn btn-primary");
            var el2 = dom.createTextNode("\n              Yes, Delete Deployment\n          ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var element1 = dom.childAt(fragment, [3]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element0);
            morphs[1] = dom.createElementMorph(element1);
            return morphs;
          },
          statements: [["element", "action", ["cancelModal", ["get", "deployment", ["loc", [null, [12, 41], [12, 51]]]]], [], ["loc", [null, [12, 18], [12, 53]]]], ["element", "action", ["deleteDeployment", ["get", "deployment", ["loc", [null, [15, 46], [15, 56]]]]], [], ["loc", [null, [15, 18], [15, 58]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 20,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/delete-deployment-modal.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          return morphs;
        },
        statements: [["block", "pf-modal-body", [], [], 0, null, ["loc", [null, [5, 6], [9, 24]]]], ["block", "pf-modal-footer", [], [], 1, null, ["loc", [null, [11, 6], [18, 26]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 21,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/delete-deployment-modal.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "pf-modal-base", [], ["idModal", "deleteDeploymentModal", "openModal", ["subexpr", "@mut", [["get", "openModal", ["loc", [null, [2, 27], [2, 36]]]]], [], []], "title", ["subexpr", "@mut", [["get", "title", ["loc", [null, [3, 23], [3, 28]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [20, 18]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("fusor-ember-cli/templates/components/delete-node-confirmation", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 5,
                "column": 2
              },
              "end": {
                "line": 11,
                "column": 2
              }
            },
            "moduleName": "fusor-ember-cli/templates/components/delete-node-confirmation.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "row");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "col-xs-12");
            var el3 = dom.createTextNode("\n        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("p");
            var el4 = dom.createTextNode("Are you sure you want to delete node ");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("?");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n      ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1, 1]), 1, 1);
            return morphs;
          },
          statements: [["content", "nodeToDeleteLabel", ["loc", [null, [8, 48], [8, 69]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 13,
                "column": 2
              },
              "end": {
                "line": 16,
                "column": 2
              }
            },
            "moduleName": "fusor-ember-cli/templates/components/delete-node-confirmation.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "button");
            dom.setAttribute(el1, "id", "deleteNodeCancelButton");
            dom.setAttribute(el1, "class", "btn btn-default delete-node-cancel-button");
            var el2 = dom.createTextNode("Cancel");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "button");
            dom.setAttribute(el1, "id", "deleteNodeConfirmButton");
            dom.setAttribute(el1, "class", "btn btn-danger delete-node-confirm-button");
            var el2 = dom.createTextNode("Delete");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var element1 = dom.childAt(fragment, [3]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element0);
            morphs[1] = dom.createElementMorph(element1);
            return morphs;
          },
          statements: [["element", "action", ["cancelDeleteNode"], [], ["loc", [null, [14, 104], [14, 133]]]], ["element", "action", ["confirmDeleteNode"], [], ["loc", [null, [15, 105], [15, 135]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 18,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/delete-node-confirmation.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          return morphs;
        },
        statements: [["block", "pf-modal-body", [], [], 0, null, ["loc", [null, [5, 2], [11, 20]]]], ["block", "pf-modal-footer", [], [], 1, null, ["loc", [null, [13, 2], [16, 22]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 19,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/delete-node-confirmation.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "pf-modal-base", [], ["idModal", "deleteNodeConfirmationModal", "openModal", ["subexpr", "@mut", [["get", "openModal", ["loc", [null, [2, 27], [2, 36]]]]], [], []], "title", ["subexpr", "@mut", [["get", "deleteNodeTitle", ["loc", [null, [3, 23], [3, 38]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [18, 18]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("fusor-ember-cli/templates/components/deployment-role", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 5,
                  "column": 6
                },
                "end": {
                  "line": 5,
                  "column": 40
                }
              },
              "moduleName": "fusor-ember-cli/templates/components/deployment-role.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("Nodes");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() {
              return [];
            },
            statements: [],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 5,
                  "column": 40
                },
                "end": {
                  "line": 5,
                  "column": 52
                }
              },
              "moduleName": "fusor-ember-cli/templates/components/deployment-role.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("Node");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() {
              return [];
            },
            statements: [],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 2
              },
              "end": {
                "line": 7,
                "column": 2
              }
            },
            "moduleName": "fusor-ember-cli/templates/components/deployment-role.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "style", "padding-left: 15px;");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode(" ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element3 = dom.childAt(fragment, [1]);
            var morphs = new Array(3);
            morphs[0] = dom.createMorphAt(element3, 1, 1);
            morphs[1] = dom.createMorphAt(element3, 3, 3);
            morphs[2] = dom.createMorphAt(element3, 5, 5);
            return morphs;
          },
          statements: [["content", "role.count", ["loc", [null, [4, 6], [4, 20]]]], ["content", "role.name", ["loc", [null, [4, 21], [4, 34]]]], ["block", "if", [["get", "multipleAssignedNodes", ["loc", [null, [5, 12], [5, 33]]]]], [], 0, 1, ["loc", [null, [5, 6], [5, 59]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 8,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/deployment-role.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "hasAssignedNodes", ["loc", [null, [2, 8], [2, 24]]]]], [], 0, null, ["loc", [null, [2, 2], [7, 9]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "revision": "Ember@1.13.10",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 16,
                      "column": 10
                    },
                    "end": {
                      "line": 16,
                      "column": 40
                    }
                  },
                  "moduleName": "fusor-ember-cli/templates/components/deployment-role.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                  dom.insertBoundary(fragment, 0);
                  dom.insertBoundary(fragment, null);
                  return morphs;
                },
                statements: [["content", "opt", ["loc", [null, [16, 33], [16, 40]]]]],
                locals: [],
                templates: []
              };
            })();
            return {
              meta: {
                "revision": "Ember@1.13.10",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 15,
                    "column": 8
                  },
                  "end": {
                    "line": 17,
                    "column": 8
                  }
                },
                "moduleName": "fusor-ember-cli/templates/components/deployment-role.hbs"
              },
              arity: 1,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("          ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                return morphs;
              },
              statements: [["block", "x-option", [], ["value", ["subexpr", "@mut", [["get", "opt", ["loc", [null, [16, 28], [16, 31]]]]], [], []]], 0, null, ["loc", [null, [16, 10], [16, 53]]]]],
              locals: ["opt"],
              templates: [child0]
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 14,
                  "column": 6
                },
                "end": {
                  "line": 18,
                  "column": 6
                }
              },
              "moduleName": "fusor-ember-cli/templates/components/deployment-role.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "each", [["get", "availableOptions", ["loc", [null, [15, 16], [15, 32]]]]], [], 0, null, ["loc", [null, [15, 8], [17, 17]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 13,
                "column": 4
              },
              "end": {
                "line": 19,
                "column": 4
              }
            },
            "moduleName": "fusor-ember-cli/templates/components/deployment-role.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "x-select", [], ["value", ["subexpr", "@mut", [["get", "role.count", ["loc", [null, [14, 24], [14, 34]]]]], [], []], "disabled", ["subexpr", "@mut", [["get", "disabled", ["loc", [null, [14, 44], [14, 52]]]]], [], []], "data-qci", ["subexpr", "@mut", [["get", "role.roleType", ["loc", [null, [14, 62], [14, 75]]]]], [], []]], 0, null, ["loc", [null, [14, 6], [18, 19]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 20,
                "column": 4
              },
              "end": {
                "line": 27,
                "column": 4
              }
            },
            "moduleName": "fusor-ember-cli/templates/components/deployment-role.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("a");
            dom.setAttribute(el1, "data-qci", "removeRole");
            dom.setAttribute(el1, "class", "role-option delete");
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("i");
            dom.setAttribute(el2, "class", "fa fa-times");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("a");
            dom.setAttribute(el1, "data-qci", "editRole");
            dom.setAttribute(el1, "class", "role-option edit");
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("i");
            dom.setAttribute(el2, "class", "fa fa-pencil");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1, 1]);
            var element1 = dom.childAt(fragment, [3, 1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element0);
            morphs[1] = dom.createElementMorph(element1);
            return morphs;
          },
          statements: [["element", "action", ["removeRole"], [], ["loc", [null, [22, 33], [22, 56]]]], ["element", "action", ["editRole"], [], ["loc", [null, [25, 34], [25, 55]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 8,
              "column": 0
            },
            "end": {
              "line": 29,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/deployment-role.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("li");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "deployment-role-label");
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element2 = dom.childAt(fragment, [1]);
          var morphs = new Array(4);
          morphs[0] = dom.createAttrMorph(element2, 'class');
          morphs[1] = dom.createMorphAt(dom.childAt(element2, [1]), 1, 1);
          morphs[2] = dom.createMorphAt(element2, 3, 3);
          morphs[3] = dom.createMorphAt(element2, 4, 4);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", ["role role-", ["get", "role.roleType", ["loc", [null, [9, 27], [9, 40]]]], " ", ["get", "assignedClass", ["loc", [null, [9, 45], [9, 58]]]]]]], ["content", "role.label", ["loc", [null, [11, 8], [11, 22]]]], ["block", "if", [["get", "roleAssigned", ["loc", [null, [13, 10], [13, 22]]]]], [], 0, null, ["loc", [null, [13, 4], [19, 11]]]], ["block", "unless", [["get", "disabled", ["loc", [null, [20, 14], [20, 22]]]]], [], 1, null, ["loc", [null, [20, 4], [27, 15]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 30,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/deployment-role.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "readOnly", ["loc", [null, [1, 6], [1, 14]]]]], [], 0, 1, ["loc", [null, [1, 0], [29, 7]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("fusor-ember-cli/templates/components/draggable-object-target", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 5,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/draggable-object-target.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("a");
          dom.setAttribute(el1, "href", "#");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createElementMorph(element0);
          morphs[1] = dom.createMorphAt(element0, 1, 1);
          return morphs;
        },
        statements: [["element", "action", ["acceptForDrop"], [], ["loc", [null, [2, 14], [2, 40]]]], ["content", "yield", ["loc", [null, [3, 4], [3, 13]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 5,
              "column": 0
            },
            "end": {
              "line": 7,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/draggable-object-target.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["content", "yield", ["loc", [null, [6, 2], [6, 11]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 8,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/draggable-object-target.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "enableClicking", ["loc", [null, [1, 6], [1, 20]]]]], [], 0, 1, ["loc", [null, [1, 0], [7, 7]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("fusor-ember-cli/templates/components/draggable-object", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 5,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/draggable-object.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("a");
          dom.setAttribute(el1, "href", "#");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createElementMorph(element0);
          morphs[1] = dom.createMorphAt(element0, 1, 1);
          return morphs;
        },
        statements: [["element", "action", ["selectForDrag"], [], ["loc", [null, [2, 14], [2, 40]]]], ["content", "yield", ["loc", [null, [3, 4], [3, 13]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 5,
              "column": 0
            },
            "end": {
              "line": 7,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/draggable-object.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["content", "yield", ["loc", [null, [6, 2], [6, 11]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 7
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/draggable-object.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "enableClicking", ["loc", [null, [1, 6], [1, 20]]]]], [], 0, 1, ["loc", [null, [1, 0], [7, 7]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("fusor-ember-cli/templates/components/edit-deployment-role", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "revision": "Ember@1.13.10",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 38,
                      "column": 20
                    },
                    "end": {
                      "line": 38,
                      "column": 50
                    }
                  },
                  "moduleName": "fusor-ember-cli/templates/components/edit-deployment-role.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                  dom.insertBoundary(fragment, 0);
                  dom.insertBoundary(fragment, null);
                  return morphs;
                },
                statements: [["content", "opt", ["loc", [null, [38, 43], [38, 50]]]]],
                locals: [],
                templates: []
              };
            })();
            return {
              meta: {
                "revision": "Ember@1.13.10",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 37,
                    "column": 18
                  },
                  "end": {
                    "line": 39,
                    "column": 18
                  }
                },
                "moduleName": "fusor-ember-cli/templates/components/edit-deployment-role.hbs"
              },
              arity: 1,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                    ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                return morphs;
              },
              statements: [["block", "x-option", [], ["value", ["subexpr", "@mut", [["get", "opt", ["loc", [null, [38, 38], [38, 41]]]]], [], []]], 0, null, ["loc", [null, [38, 20], [38, 63]]]]],
              locals: ["opt"],
              templates: [child0]
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 36,
                  "column": 16
                },
                "end": {
                  "line": 40,
                  "column": 16
                }
              },
              "moduleName": "fusor-ember-cli/templates/components/edit-deployment-role.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "each", [["get", "roleNodeCountOptions", ["loc", [null, [37, 26], [37, 46]]]]], [], 0, null, ["loc", [null, [37, 18], [39, 27]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        var child1 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.10",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 53,
                    "column": 20
                  },
                  "end": {
                    "line": 55,
                    "column": 20
                  }
                },
                "moduleName": "fusor-ember-cli/templates/components/edit-deployment-role.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                      ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                return morphs;
              },
              statements: [["inline", "check-f", [], ["label", ["subexpr", "@mut", [["get", "roleParameter.label", ["loc", [null, [54, 38], [54, 57]]]]], [], []], "checked", ["subexpr", "@mut", [["get", "roleParameter.newValue", ["loc", [null, [54, 66], [54, 88]]]]], [], []], "labelSize", "col-md-6", "inputSize", "col-md-5", "isRequired", false, "helpText", ["subexpr", "@mut", [["get", "roleParameter.description", ["loc", [null, [54, 157], [54, 182]]]]], [], []], "cssId", ["subexpr", "@mut", [["get", "roleParameter.key", ["loc", [null, [54, 189], [54, 206]]]]], [], []]], ["loc", [null, [54, 22], [54, 208]]]]],
              locals: [],
              templates: []
            };
          })();
          var child1 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.10",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 55,
                    "column": 20
                  },
                  "end": {
                    "line": 57,
                    "column": 20
                  }
                },
                "moduleName": "fusor-ember-cli/templates/components/edit-deployment-role.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                      ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                return morphs;
              },
              statements: [["inline", "text-f", [], ["label", ["subexpr", "@mut", [["get", "roleParameter.label", ["loc", [null, [56, 37], [56, 56]]]]], [], []], "value", ["subexpr", "@mut", [["get", "roleParameter.newValue", ["loc", [null, [56, 63], [56, 85]]]]], [], []], "type", ["subexpr", "@mut", [["get", "roleParameter.type", ["loc", [null, [56, 91], [56, 109]]]]], [], []], "labelSize", "col-md-6", "inputSize", "col-md-5", "isRequired", false, "helpText", ["subexpr", "@mut", [["get", "roleParameter.description", ["loc", [null, [56, 178], [56, 203]]]]], [], []], "cssId", ["subexpr", "@mut", [["get", "roleParameter.key", ["loc", [null, [56, 210], [56, 227]]]]], [], []]], ["loc", [null, [56, 22], [56, 229]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 52,
                  "column": 18
                },
                "end": {
                  "line": 58,
                  "column": 18
                }
              },
              "moduleName": "fusor-ember-cli/templates/components/edit-deployment-role.hbs"
            },
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "if", [["get", "roleParameter.isBoolean", ["loc", [null, [53, 26], [53, 49]]]]], [], 0, 1, ["loc", [null, [53, 20], [57, 27]]]]],
            locals: ["roleParameter"],
            templates: [child0, child1]
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 5,
                "column": 2
              },
              "end": {
                "line": 66,
                "column": 2
              }
            },
            "moduleName": "fusor-ember-cli/templates/components/edit-deployment-role.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("ul");
            dom.setAttribute(el1, "class", "nav nav-tabs nav-tabs-pf");
            dom.setAttribute(el1, "role", "tablist");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("li");
            dom.setAttribute(el2, "role", "presentation");
            var el3 = dom.createTextNode("\n        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("a");
            dom.setAttribute(el3, "aria-controls", "overall-settings");
            dom.setAttribute(el3, "role", "tab");
            dom.setAttribute(el3, "data-toggle", "tab");
            var el4 = dom.createTextNode("Overall Settings");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n      ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("li");
            dom.setAttribute(el2, "role", "presentation");
            var el3 = dom.createTextNode("\n        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("a");
            dom.setAttribute(el3, "aria-controls", "service-configuration");
            dom.setAttribute(el3, "role", "tab");
            dom.setAttribute(el3, "data-toggle", "tab");
            var el4 = dom.createTextNode("Service Configuration");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n      ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "tab-content");
            dom.setAttribute(el1, "style", "margin-top: 30px;");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "role", "tabpanel");
            dom.setAttribute(el2, "id", "overall-settings");
            var el3 = dom.createTextNode("\n        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "form-horizontal");
            var el4 = dom.createTextNode("\n          ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("fieldset");
            var el5 = dom.createTextNode("\n            ");
            dom.appendChild(el4, el5);
            var el5 = dom.createElement("div");
            dom.setAttribute(el5, "class", "form-group");
            var el6 = dom.createTextNode("\n              ");
            dom.appendChild(el5, el6);
            var el6 = dom.createElement("label");
            dom.setAttribute(el6, "class", "control-label col-sm-4 ");
            var el7 = dom.createTextNode("Name");
            dom.appendChild(el6, el7);
            dom.appendChild(el5, el6);
            var el6 = dom.createTextNode("\n              ");
            dom.appendChild(el5, el6);
            var el6 = dom.createElement("div");
            dom.setAttribute(el6, "class", "col-sm-8");
            var el7 = dom.createTextNode("\n                  ");
            dom.appendChild(el6, el7);
            var el7 = dom.createElement("input");
            dom.setAttribute(el7, "class", "form-control");
            dom.setAttribute(el7, "type", "text");
            dom.setAttribute(el7, "readOnly", "true");
            dom.appendChild(el6, el7);
            var el7 = dom.createTextNode("\n              ");
            dom.appendChild(el6, el7);
            dom.appendChild(el5, el6);
            var el6 = dom.createTextNode("\n            ");
            dom.appendChild(el5, el6);
            dom.appendChild(el4, el5);
            var el5 = dom.createTextNode("\n            ");
            dom.appendChild(el4, el5);
            var el5 = dom.createElement("div");
            dom.setAttribute(el5, "class", "form-group");
            var el6 = dom.createTextNode("\n              ");
            dom.appendChild(el5, el6);
            var el6 = dom.createElement("label");
            dom.setAttribute(el6, "class", "control-label col-sm-4 ");
            var el7 = dom.createTextNode("Description");
            dom.appendChild(el6, el7);
            dom.appendChild(el5, el6);
            var el6 = dom.createTextNode("\n              ");
            dom.appendChild(el5, el6);
            var el6 = dom.createElement("div");
            dom.setAttribute(el6, "class", "col-sm-8");
            var el7 = dom.createTextNode("\n                  ");
            dom.appendChild(el6, el7);
            var el7 = dom.createElement("textarea");
            dom.setAttribute(el7, "class", "form-control");
            dom.setAttribute(el7, "type", "text");
            dom.setAttribute(el7, "readOnly", "true");
            dom.appendChild(el6, el7);
            var el7 = dom.createTextNode("\n              ");
            dom.appendChild(el6, el7);
            dom.appendChild(el5, el6);
            var el6 = dom.createTextNode("\n            ");
            dom.appendChild(el5, el6);
            dom.appendChild(el4, el5);
            var el5 = dom.createTextNode("\n            ");
            dom.appendChild(el4, el5);
            var el5 = dom.createComment("");
            dom.appendChild(el4, el5);
            var el5 = dom.createTextNode("\n\n            ");
            dom.appendChild(el4, el5);
            var el5 = dom.createComment("");
            dom.appendChild(el4, el5);
            var el5 = dom.createTextNode("\n            ");
            dom.appendChild(el4, el5);
            var el5 = dom.createElement("div");
            dom.setAttribute(el5, "class", "form-group");
            var el6 = dom.createTextNode("\n              ");
            dom.appendChild(el5, el6);
            var el6 = dom.createElement("label");
            dom.setAttribute(el6, "class", "control-label col-sm-4 ");
            var el7 = dom.createTextNode("Number of Nodes");
            dom.appendChild(el6, el7);
            dom.appendChild(el5, el6);
            var el6 = dom.createTextNode("\n              ");
            dom.appendChild(el5, el6);
            var el6 = dom.createElement("div");
            dom.setAttribute(el6, "class", "col-sm-8");
            var el7 = dom.createTextNode("\n");
            dom.appendChild(el6, el7);
            var el7 = dom.createComment("");
            dom.appendChild(el6, el7);
            var el7 = dom.createTextNode("              ");
            dom.appendChild(el6, el7);
            dom.appendChild(el5, el6);
            var el6 = dom.createTextNode("\n            ");
            dom.appendChild(el5, el6);
            dom.appendChild(el4, el5);
            var el5 = dom.createTextNode("\n          ");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n        ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n      ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "role", "tabpanel");
            dom.setAttribute(el2, "id", "service-configuration");
            var el3 = dom.createTextNode("\n        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "row");
            var el4 = dom.createTextNode("\n          ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("div");
            dom.setAttribute(el4, "class", "col-md-12");
            var el5 = dom.createTextNode("\n            ");
            dom.appendChild(el4, el5);
            var el5 = dom.createElement("div");
            dom.setAttribute(el5, "class", "form-horizontal");
            var el6 = dom.createTextNode("\n              ");
            dom.appendChild(el5, el6);
            var el6 = dom.createElement("fieldset");
            var el7 = dom.createTextNode("\n                ");
            dom.appendChild(el6, el7);
            var el7 = dom.createElement("div");
            dom.setAttribute(el7, "class", "required");
            var el8 = dom.createTextNode("\n");
            dom.appendChild(el7, el8);
            var el8 = dom.createComment("");
            dom.appendChild(el7, el8);
            var el8 = dom.createTextNode("                ");
            dom.appendChild(el7, el8);
            dom.appendChild(el6, el7);
            var el7 = dom.createTextNode("\n              ");
            dom.appendChild(el6, el7);
            dom.appendChild(el5, el6);
            var el6 = dom.createTextNode("\n            ");
            dom.appendChild(el5, el6);
            dom.appendChild(el4, el5);
            var el5 = dom.createTextNode("\n          ");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n        ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n      ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element2 = dom.childAt(fragment, [1]);
            var element3 = dom.childAt(element2, [1]);
            var element4 = dom.childAt(element3, [1]);
            var element5 = dom.childAt(element2, [3]);
            var element6 = dom.childAt(element5, [1]);
            var element7 = dom.childAt(fragment, [3]);
            var element8 = dom.childAt(element7, [1]);
            var element9 = dom.childAt(element8, [1, 1]);
            var element10 = dom.childAt(element9, [1, 3, 1]);
            var element11 = dom.childAt(element9, [3, 3, 1]);
            var element12 = dom.childAt(element7, [3]);
            var morphs = new Array(12);
            morphs[0] = dom.createAttrMorph(element3, 'class');
            morphs[1] = dom.createElementMorph(element4);
            morphs[2] = dom.createAttrMorph(element5, 'class');
            morphs[3] = dom.createElementMorph(element6);
            morphs[4] = dom.createAttrMorph(element8, 'class');
            morphs[5] = dom.createAttrMorph(element10, 'value');
            morphs[6] = dom.createAttrMorph(element11, 'value');
            morphs[7] = dom.createMorphAt(element9, 5, 5);
            morphs[8] = dom.createMorphAt(element9, 7, 7);
            morphs[9] = dom.createMorphAt(dom.childAt(element9, [9, 3]), 1, 1);
            morphs[10] = dom.createAttrMorph(element12, 'class');
            morphs[11] = dom.createMorphAt(dom.childAt(element12, [1, 1, 1, 1, 1]), 1, 1);
            return morphs;
          },
          statements: [["attribute", "class", ["get", "settingsActiveClass", ["loc", [null, [7, 38], [7, 57]]]]], ["element", "action", ["doShowSettings"], [], ["loc", [null, [8, 73], [8, 100]]]], ["attribute", "class", ["get", "configActiveClass", ["loc", [null, [10, 38], [10, 55]]]]], ["element", "action", ["doShowConfig"], [], ["loc", [null, [11, 79], [11, 104]]]], ["attribute", "class", ["concat", ["tab-pane deployment-role-settings-content ", ["get", "settingsActiveClass", ["loc", [null, [15, 78], [15, 97]]]]]]], ["attribute", "value", ["get", "editedRole.name", ["loc", [null, [21, 66], [21, 81]]]]], ["attribute", "value", ["get", "editedRole.description", ["loc", [null, [27, 69], [27, 91]]]]], ["inline", "select-f", [], ["label", "Provisioning Image", "labelSize", "col-sm-4", "inputSize", "col-sm-8", "content", ["subexpr", "@mut", [["get", "images", ["loc", [null, [30, 100], [30, 106]]]]], [], []], "value", ["subexpr", "@mut", [["get", "editedRoleImage", ["loc", [null, [30, 113], [30, 128]]]]], [], []], "isRequired", false, "optionLabelPath", "content.name", "optionValuePath", "content.name", "cssId", "provisioning-image"], ["loc", [null, [30, 12], [30, 236]]]], ["inline", "select-f", [], ["label", "Flavor", "labelSize", "col-sm-4", "inputSize", "col-sm-8", "content", ["subexpr", "@mut", [["get", "profileOptions", ["loc", [null, [32, 88], [32, 102]]]]], [], []], "value", ["subexpr", "@mut", [["get", "editedRoleProfile", ["loc", [null, [32, 109], [32, 126]]]]], [], []], "isRequired", false, "optionLabelPath", "content.name", "optionValuePath", "content.name", "cssId", "flavor"], ["loc", [null, [32, 12], [32, 223]]]], ["block", "x-select", [], ["value", ["subexpr", "@mut", [["get", "editedRoleNodeCount", ["loc", [null, [36, 34], [36, 53]]]]], [], []], "disabled", ["subexpr", "@mut", [["get", "disabled", ["loc", [null, [36, 63], [36, 71]]]]], [], []], "data-qci", "num_of_nodes"], 0, null, ["loc", [null, [36, 16], [40, 29]]]], ["attribute", "class", ["concat", ["tab-pane deployment-role-settings-content ", ["get", "configActiveClass", ["loc", [null, [46, 78], [46, 95]]]]]]], ["block", "each", [["get", "editedRoleParameters", ["loc", [null, [52, 26], [52, 46]]]]], [], 1, null, ["loc", [null, [52, 18], [58, 27]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 68,
                "column": 2
              },
              "end": {
                "line": 71,
                "column": 2
              }
            },
            "moduleName": "fusor-ember-cli/templates/components/edit-deployment-role.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "cancel");
            dom.setAttribute(el1, "class", "btn btn-default");
            dom.setAttribute(el1, "data-qci", "cancel-edit-deployment-role");
            var el2 = dom.createTextNode("Cancel");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "submit");
            dom.setAttribute(el1, "class", "btn btn-primary");
            dom.setAttribute(el1, "data-qci", "save-edit-deployment-role");
            var el2 = dom.createTextNode("Save");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var element1 = dom.childAt(fragment, [3]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element0);
            morphs[1] = dom.createElementMorph(element1);
            return morphs;
          },
          statements: [["element", "action", ["cancelEditRole"], [], ["loc", [null, [69, 50], [69, 77]]]], ["element", "action", ["saveRole"], [], ["loc", [null, [70, 50], [70, 71]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 73,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/edit-deployment-role.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          return morphs;
        },
        statements: [["block", "pf-modal-body", [], [], 0, null, ["loc", [null, [5, 2], [66, 20]]]], ["block", "pf-modal-footer", [], [], 1, null, ["loc", [null, [68, 2], [71, 22]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 74,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/edit-deployment-role.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "pf-modal-base", [], ["idModal", "editDeploymentRoleModal", "openModal", ["subexpr", "@mut", [["get", "openModal", ["loc", [null, [2, 27], [2, 36]]]]], [], []], "title", ["subexpr", "@mut", [["get", "editRoleTitle", ["loc", [null, [3, 23], [3, 36]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [73, 18]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("fusor-ember-cli/templates/components/edit-global-service-config", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.10",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 11,
                    "column": 14
                  },
                  "end": {
                    "line": 13,
                    "column": 14
                  }
                },
                "moduleName": "fusor-ember-cli/templates/components/edit-global-service-config.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                return morphs;
              },
              statements: [["inline", "check-f", [], ["label", ["subexpr", "@mut", [["get", "planParameter.label", ["loc", [null, [12, 32], [12, 51]]]]], [], []], "checked", ["subexpr", "@mut", [["get", "planParameter.newValue", ["loc", [null, [12, 60], [12, 82]]]]], [], []], "labelSize", "col-md-6", "inputSize", "col-md-5", "isRequired", false, "helpText", ["subexpr", "@mut", [["get", "planParameter.description", ["loc", [null, [12, 151], [12, 176]]]]], [], []], "cssId", ["subexpr", "@mut", [["get", "planParameter.key", ["loc", [null, [12, 183], [12, 200]]]]], [], []]], ["loc", [null, [12, 16], [12, 202]]]]],
              locals: [],
              templates: []
            };
          })();
          var child1 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.10",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 13,
                    "column": 14
                  },
                  "end": {
                    "line": 15,
                    "column": 14
                  }
                },
                "moduleName": "fusor-ember-cli/templates/components/edit-global-service-config.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                return morphs;
              },
              statements: [["inline", "text-f", [], ["label", ["subexpr", "@mut", [["get", "planParameter.label", ["loc", [null, [14, 31], [14, 50]]]]], [], []], "value", ["subexpr", "@mut", [["get", "planParameter.newValue", ["loc", [null, [14, 57], [14, 79]]]]], [], []], "type", ["subexpr", "@mut", [["get", "planParameter.type", ["loc", [null, [14, 85], [14, 103]]]]], [], []], "labelSize", "col-md-6", "inputSize", "col-md-5", "isRequired", false, "helpText", ["subexpr", "@mut", [["get", "planParameter.description", ["loc", [null, [14, 172], [14, 197]]]]], [], []], "cssId", ["subexpr", "@mut", [["get", "planParameter.key", ["loc", [null, [14, 204], [14, 221]]]]], [], []]], ["loc", [null, [14, 16], [14, 223]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 10,
                  "column": 12
                },
                "end": {
                  "line": 16,
                  "column": 12
                }
              },
              "moduleName": "fusor-ember-cli/templates/components/edit-global-service-config.hbs"
            },
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "if", [["get", "planParameter.isBoolean", ["loc", [null, [11, 20], [11, 43]]]]], [], 0, 1, ["loc", [null, [11, 14], [15, 21]]]]],
            locals: ["planParameter"],
            templates: [child0, child1]
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 5,
                "column": 2
              },
              "end": {
                "line": 21,
                "column": 2
              }
            },
            "moduleName": "fusor-ember-cli/templates/components/edit-global-service-config.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "role", "tabpanel");
            dom.setAttribute(el1, "class", "tab-pane active global-config-settings-content");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "form-horizontal");
            var el3 = dom.createTextNode("\n        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("fieldset");
            var el4 = dom.createTextNode("\n          ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("div");
            dom.setAttribute(el4, "class", "required");
            var el5 = dom.createTextNode("\n");
            dom.appendChild(el4, el5);
            var el5 = dom.createComment("");
            dom.appendChild(el4, el5);
            var el5 = dom.createTextNode("          ");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n        ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n      ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1, 1, 1]), 1, 1);
            return morphs;
          },
          statements: [["block", "each", [["get", "globalPlanParameters", ["loc", [null, [10, 20], [10, 40]]]]], [], 0, null, ["loc", [null, [10, 12], [16, 21]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 23,
                "column": 2
              },
              "end": {
                "line": 26,
                "column": 2
              }
            },
            "moduleName": "fusor-ember-cli/templates/components/edit-global-service-config.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "cancel");
            dom.setAttribute(el1, "class", "btn btn-default");
            dom.setAttribute(el1, "data-qci", "cancel-edit-global-config");
            var el2 = dom.createTextNode("Cancel");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "submit");
            dom.setAttribute(el1, "class", "btn btn-primary");
            dom.setAttribute(el1, "data-qci", "save-edit-global-config");
            var el2 = dom.createTextNode("Save");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var element1 = dom.childAt(fragment, [3]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element0);
            morphs[1] = dom.createElementMorph(element1);
            return morphs;
          },
          statements: [["element", "action", ["cancelGlobalServiceConfig"], [], ["loc", [null, [24, 54], [24, 92]]]], ["element", "action", ["saveGlobalServiceConfig"], [], ["loc", [null, [25, 54], [25, 90]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 28,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/edit-global-service-config.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          return morphs;
        },
        statements: [["block", "pf-modal-body", [], [], 0, null, ["loc", [null, [5, 2], [21, 20]]]], ["block", "pf-modal-footer", [], [], 1, null, ["loc", [null, [23, 2], [26, 22]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 29,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/edit-global-service-config.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "pf-modal-base", [], ["idModal", "editGlobalServiceConfigModal", "openModal", ["subexpr", "@mut", [["get", "openModal", ["loc", [null, [2, 27], [2, 36]]]]], [], []], "title", "Edit Global Configuration"], 0, null, ["loc", [null, [1, 0], [28, 18]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("fusor-ember-cli/templates/components/env-path-list-item", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 4
            },
            "end": {
              "line": 5,
              "column": 4
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/env-path-list-item.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "radio-button", [], ["value", ["subexpr", "@mut", [["get", "env.name", ["loc", [null, [4, 27], [4, 35]]]]], [], []], "groupValue", ["subexpr", "@mut", [["get", "selectedEnvironment.name", ["loc", [null, [4, 47], [4, 71]]]]], [], []], "disabled", ["subexpr", "@mut", [["get", "disabled", ["loc", [null, [4, 81], [4, 89]]]]], [], []], "dataQci", ["subexpr", "@mut", [["get", "dataQci", ["loc", [null, [4, 98], [4, 105]]]]], [], []]], ["loc", [null, [4, 6], [4, 107]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 9,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/env-path-list-item.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("label");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("span");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var element1 = dom.childAt(element0, [1]);
        var morphs = new Array(5);
        morphs[0] = dom.createAttrMorph(element0, 'class');
        morphs[1] = dom.createAttrMorph(element1, 'id');
        morphs[2] = dom.createAttrMorph(element1, 'class');
        morphs[3] = dom.createMorphAt(element1, 1, 1);
        morphs[4] = dom.createMorphAt(element1, 3, 3);
        return morphs;
      },
      statements: [["attribute", "class", ["concat", [["get", "bgColor", ["loc", [null, [1, 16], [1, 23]]]]]]], ["attribute", "id", ["concat", [["get", "envCssId", ["loc", [null, [2, 14], [2, 22]]]]]]], ["attribute", "class", ["concat", [["subexpr", "if", [["get", "isNonSelectableLibrary", ["loc", [null, [2, 38], [2, 60]]]], "ident-library-label"], [], ["loc", [null, [2, 33], [2, 84]]]]]]], ["block", "if", [["get", "isSelectable", ["loc", [null, [3, 10], [3, 22]]]]], [], 0, null, ["loc", [null, [3, 4], [5, 11]]]], ["content", "env.name", ["loc", [null, [6, 4], [6, 16]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("fusor-ember-cli/templates/components/error-message", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 16,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/error-message.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "row");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "col-md-9");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "alert alert-danger rhci-alert");
          var el4 = dom.createTextNode("\n          ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("i");
          dom.setAttribute(el4, "class", "fa fa-2x fa-exclamation-triangle errorForValidation");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n           \n          ");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n\n          ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("div");
          dom.setAttribute(el4, "class", "pull-right");
          var el5 = dom.createTextNode("\n            X\n          ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1, 1]), 3, 3);
          return morphs;
        },
        statements: [["content", "errorMsg", ["loc", [null, [7, 10], [7, 22]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 16,
            "column": 7
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/error-message.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "errorMsg", ["loc", [null, [1, 6], [1, 14]]]]], [], 0, null, ["loc", [null, [1, 0], [16, 7]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("fusor-ember-cli/templates/components/error-modal", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 5,
                "column": 6
              },
              "end": {
                "line": 9,
                "column": 6
              }
            },
            "moduleName": "fusor-ember-cli/templates/components/error-modal.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("\n          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["content", "errorMessage", ["loc", [null, [7, 10], [7, 26]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 11,
                "column": 6
              },
              "end": {
                "line": 15,
                "column": 6
              }
            },
            "moduleName": "fusor-ember-cli/templates/components/error-modal.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "class", "btn btn-primary");
            var el2 = dom.createTextNode("\n              Okay\n          ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(1);
            morphs[0] = dom.createElementMorph(element0);
            return morphs;
          },
          statements: [["element", "action", ["okay"], [], ["loc", [null, [12, 18], [12, 35]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 17,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/error-modal.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          return morphs;
        },
        statements: [["block", "pf-modal-body", [], [], 0, null, ["loc", [null, [5, 6], [9, 24]]]], ["block", "pf-modal-footer", [], [], 1, null, ["loc", [null, [11, 6], [15, 26]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 18,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/error-modal.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "pf-modal-base", [], ["idModal", "globalErrorModal", "openModal", ["subexpr", "@mut", [["get", "openModal", ["loc", [null, [2, 27], [2, 36]]]]], [], []], "title", "Error Occurred"], 0, null, ["loc", [null, [1, 0], [17, 18]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("fusor-ember-cli/templates/components/file-upload-form", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 11,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/file-upload-form.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("form");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "form-group required");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("input");
        dom.setAttribute(el3, "value", "selectedFile");
        dom.setAttribute(el3, "type", "file");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "form-group");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("button");
        dom.setAttribute(el3, "type", "button");
        dom.setAttribute(el3, "class", "btn btn-sm btn-default");
        var el4 = dom.createTextNode("Cancel");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("button");
        dom.setAttribute(el3, "type", "button");
        dom.setAttribute(el3, "class", "btn btn-sm btn-primary");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var element1 = dom.childAt(element0, [1, 1]);
        var element2 = dom.childAt(element0, [3]);
        var element3 = dom.childAt(element2, [1]);
        var element4 = dom.childAt(element2, [3]);
        var morphs = new Array(7);
        morphs[0] = dom.createAttrMorph(element0, 'id');
        morphs[1] = dom.createAttrMorph(element1, 'id');
        morphs[2] = dom.createAttrMorph(element1, 'accept');
        morphs[3] = dom.createElementMorph(element1);
        morphs[4] = dom.createElementMorph(element3);
        morphs[5] = dom.createElementMorph(element4);
        morphs[6] = dom.createMorphAt(element4, 0, 0);
        return morphs;
      },
      statements: [["attribute", "id", ["concat", [["get", "formId", ["loc", [null, [1, 12], [1, 18]]]]]]], ["attribute", "id", ["concat", [["get", "inputId", ["loc", [null, [3, 21], [3, 28]]]]]]], ["attribute", "accept", ["get", "acceptValue", ["loc", [null, [3, 72], [3, 83]]]]], ["element", "action", ["fileChosen"], ["on", "change"], ["loc", [null, [3, 86], [3, 121]]]], ["element", "action", ["doCancel"], [], ["loc", [null, [6, 61], [6, 82]]]], ["element", "action", ["doUpload"], [], ["loc", [null, [7, 61], [7, 82]]]], ["content", "uploadButtonTitle", ["loc", [null, [7, 83], [7, 104]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("fusor-ember-cli/templates/components/host-type-icon", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 5,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/host-type-icon.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("span");
        dom.setAttribute(el1, "data-toggle", "tooltip");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var morphs = new Array(2);
        morphs[0] = dom.createAttrMorph(element0, 'title');
        morphs[1] = dom.createAttrMorph(element0, 'class');
        return morphs;
      },
      statements: [["attribute", "title", ["subexpr", "if", [["get", "isVM", ["loc", [null, [2, 17], [2, 21]]]], "Virtual Machine", "Bare Metal"], [], ["loc", [null, [2, 12], [2, 54]]]]], ["attribute", "class", ["concat", ["host-type-icon pficon ", ["subexpr", "if", [["get", "isVM", ["loc", [null, [3, 40], [3, 44]]]], "pficon-virtual-machine", "pficon-screen"], [], ["loc", [null, [3, 35], [3, 87]]]]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("fusor-ember-cli/templates/components/hypervisor-name", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 3,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/hypervisor-name.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["content", "namePlusDomain", ["loc", [null, [2, 2], [2, 20]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 5,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/hypervisor-name.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["block", "link-to", ["hypervisor.discovered-host"], [], 0, null, ["loc", [null, [1, 0], [3, 12]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("fusor-ember-cli/templates/components/labeled-radio-button", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 12,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/labeled-radio-button.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "radio-button", [], ["radioClass", ["subexpr", "@mut", [["get", "radioClass", ["loc", [null, [2, 15], [2, 25]]]]], [], []], "radioId", ["subexpr", "@mut", [["get", "radioId", ["loc", [null, [3, 12], [3, 19]]]]], [], []], "changed", "innerRadioChanged", "disabled", ["subexpr", "@mut", [["get", "disabled", ["loc", [null, [5, 13], [5, 21]]]]], [], []], "groupValue", ["subexpr", "@mut", [["get", "groupValue", ["loc", [null, [6, 15], [6, 25]]]]], [], []], "name", ["subexpr", "@mut", [["get", "name", ["loc", [null, [7, 9], [7, 13]]]]], [], []], "required", ["subexpr", "@mut", [["get", "required", ["loc", [null, [8, 13], [8, 21]]]]], [], []], "value", ["subexpr", "@mut", [["get", "value", ["loc", [null, [9, 10], [9, 15]]]]], [], []]], ["loc", [null, [1, 0], [9, 17]]]], ["content", "yield", ["loc", [null, [11, 0], [11, 9]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("fusor-ember-cli/templates/components/loading-spinner", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 10,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/loading-spinner.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "modal fade in");
          dom.setAttribute(el1, "style", "display:block");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "modal-dialog loading-spinner");
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "loading-spinner-content modal-content");
          var el4 = dom.createTextNode("\n                ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("span");
          dom.setAttribute(el4, "class", "spinner spinner-xs spinner-inline");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n                ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("span");
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n            ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1, 1, 3]), 0, 0);
          return morphs;
        },
        statements: [["content", "text", ["loc", [null, [6, 22], [6, 30]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 11,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/loading-spinner.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "show", ["loc", [null, [1, 6], [1, 10]]]]], [], 0, null, ["loc", [null, [1, 0], [10, 7]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("fusor-ember-cli/templates/components/log-entry", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/log-entry.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createUnsafeMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["content", "entry.formattedText", ["loc", [null, [1, 0], [1, 25]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("fusor-ember-cli/templates/components/markdown-to-html", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/markdown-to-html.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["content", "html", ["loc", [null, [1, 0], [1, 8]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("fusor-ember-cli/templates/components/naming-scheme-modal", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.10",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 34,
                    "column": 20
                  },
                  "end": {
                    "line": 39,
                    "column": 20
                  }
                },
                "moduleName": "fusor-ember-cli/templates/components/naming-scheme-modal.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                              ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("1");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("br");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n                              ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("2");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("br");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n                              ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("3");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("br");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(3);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                morphs[1] = dom.createMorphAt(fragment, 5, 5, contextualElement);
                morphs[2] = dom.createMorphAt(fragment, 9, 9, contextualElement);
                return morphs;
              },
              statements: [["content", "customPreprendNameTrimmed", ["loc", [null, [36, 30], [36, 59]]]], ["content", "customPreprendNameTrimmed", ["loc", [null, [37, 30], [37, 59]]]], ["content", "customPreprendNameTrimmed", ["loc", [null, [38, 30], [38, 59]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 25,
                  "column": 16
                },
                "end": {
                  "line": 40,
                  "column": 16
                }
              },
              "moduleName": "fusor-ember-cli/templates/components/naming-scheme-modal.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                    ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n\n");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(2);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["inline", "text-f", [], ["label", "Prepend host names with", "value", ["subexpr", "@mut", [["get", "customPreprendName", ["loc", [null, [27, 35], [27, 53]]]]], [], []], "disabled", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [28, 38], [28, 47]]]]], [], []], "placeholder", "Enter custom prefix", "validator", ["subexpr", "@mut", [["get", "customPrefixValidator", ["loc", [null, [30, 39], [30, 60]]]]], [], []], "labelSize", "col-lg-4 col-md-4 col-sm-4 col-xs-4 col-xs-offset-1", "inputSize", "col-lg-4 col-md-5 col-sm-5 col-xs-4"], ["loc", [null, [26, 20], [32, 78]]]], ["block", "base-f", [], ["label", "Three host example", "labelSize", "col-lg-4 col-md-4 col-sm-4 col-xs-4 col-xs-offset-1"], 0, null, ["loc", [null, [34, 20], [39, 31]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        var child1 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.10",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 43,
                    "column": 20
                  },
                  "end": {
                    "line": 49,
                    "column": 20
                  }
                },
                "moduleName": "fusor-ember-cli/templates/components/naming-scheme-modal.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                        hypervisor45");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("br");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n                        hypervisor12");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("br");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n                        hypervisor310");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("br");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n                        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("span");
                dom.setAttribute(el1, "style", "color: #999");
                var el2 = dom.createTextNode("hypervisor + {host_id}");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes() {
                return [];
              },
              statements: [],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 42,
                  "column": 16
                },
                "end": {
                  "line": 50,
                  "column": 16
                }
              },
              "moduleName": "fusor-ember-cli/templates/components/naming-scheme-modal.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "base-f", [], ["label", "Three host example", "labelSize", "col-lg-4 col-md-4 col-sm-4 col-xs-4 col-xs-offset-1"], 0, null, ["loc", [null, [43, 20], [49, 31]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 6,
                "column": 6
              },
              "end": {
                "line": 55,
                "column": 6
              }
            },
            "moduleName": "fusor-ember-cli/templates/components/naming-scheme-modal.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("p");
            var el2 = dom.createTextNode("\n            Enforcing a naming scheme will ensure all selected hypervisors get named automatically and consistently.\n            ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n\n            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("form");
            dom.setAttribute(el1, "class", "form-horizontal");
            var el2 = dom.createTextNode("\n              ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "form-group");
            var el3 = dom.createTextNode("\n                ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("span");
            dom.setAttribute(el3, "data-qci", "host-naming-scheme");
            var el4 = dom.createTextNode("\n                  ");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n                ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n\n              ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n            ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element2 = dom.childAt(fragment, [3, 1]);
            var morphs = new Array(3);
            morphs[0] = dom.createMorphAt(dom.childAt(element2, [1]), 1, 1);
            morphs[1] = dom.createMorphAt(element2, 3, 3);
            morphs[2] = dom.createMorphAt(element2, 5, 5);
            return morphs;
          },
          statements: [["inline", "select-simple-f", [], ["label", "Host naming scheme", "content", ["subexpr", "@mut", [["get", "namingOptions", ["loc", [null, [15, 44], [15, 57]]]]], [], []], "value", ["subexpr", "@mut", [["get", "hostNamingScheme", ["loc", [null, [16, 42], [16, 58]]]]], [], []], "disabled", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [17, 45], [17, 54]]]]], [], []], "labelSize", "col-lg-4 col-md-4 col-sm-4 col-xs-4 col-xs-offset-1", "inputSize", "col-lg-4 col-md-5 col-sm-5 col-xs-4", "disabled", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [20, 45], [20, 54]]]]], [], []], "renderInPlace", true, "action", "setSelectValue", "fieldName", "hostNamingScheme"], ["loc", [null, [14, 18], [23, 66]]]], ["block", "if", [["get", "isCustomScheme", ["loc", [null, [25, 22], [25, 36]]]]], [], 0, null, ["loc", [null, [25, 16], [40, 23]]]], ["block", "if", [["get", "isHypervisorN", ["loc", [null, [42, 22], [42, 35]]]]], [], 1, null, ["loc", [null, [42, 16], [50, 23]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 57,
                "column": 6
              },
              "end": {
                "line": 61,
                "column": 6
              }
            },
            "moduleName": "fusor-ember-cli/templates/components/naming-scheme-modal.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "class", "btn btn-default");
            var el2 = dom.createTextNode("Cancel");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "class", "btn btn-primary");
            var el2 = dom.createTextNode("Edit");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var element1 = dom.childAt(fragment, [3]);
            var morphs = new Array(3);
            morphs[0] = dom.createElementMorph(element0);
            morphs[1] = dom.createAttrMorph(element1, 'disabled');
            morphs[2] = dom.createElementMorph(element1);
            return morphs;
          },
          statements: [["element", "action", ["cancelNamingScheme"], [], ["loc", [null, [58, 16], [58, 47]]]], ["attribute", "disabled", ["get", "invalidCustomPrefix", ["loc", [null, [60, 27], [60, 46]]]]], ["element", "action", ["saveNamingScheme"], [], ["loc", [null, [59, 16], [59, 45]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 63,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/naming-scheme-modal.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          return morphs;
        },
        statements: [["block", "pf-modal-body", [], [], 0, null, ["loc", [null, [6, 6], [55, 24]]]], ["block", "pf-modal-footer", [], [], 1, null, ["loc", [null, [57, 6], [61, 26]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 64,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/naming-scheme-modal.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "pf-modal-base", [], ["idModal", "namingSchemeModal", "openModal", ["subexpr", "@mut", [["get", "openModal", ["loc", [null, [2, 27], [2, 36]]]]], [], []], "title", "Edit Naming Scheme", "closeXAction", "cancelNamingScheme"], 0, null, ["loc", [null, [1, 0], [63, 18]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("fusor-ember-cli/templates/components/new-environment-modal", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 5,
                "column": 6
              },
              "end": {
                "line": 14,
                "column": 6
              }
            },
            "moduleName": "fusor-ember-cli/templates/components/new-environment-modal.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(3);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
            return morphs;
          },
          statements: [["inline", "text-f", [], ["label", "Environment Name", "value", ["subexpr", "@mut", [["get", "name", ["loc", [null, [7, 27], [7, 31]]]]], [], []], "showValidationError", ["subexpr", "@mut", [["get", "showValidationError", ["loc", [null, [8, 41], [8, 60]]]]], [], []], "validator", ["subexpr", "@mut", [["get", "envNameValidator", ["loc", [null, [9, 31], [9, 47]]]]], [], []], "labelSize", "col-md-4", "inputSize", "col-md-8"], ["loc", [null, [6, 12], [11, 43]]]], ["inline", "text-f", [], ["label", "Label", "value", ["subexpr", "@mut", [["get", "envLabelName", ["loc", [null, [12, 41], [12, 53]]]]], [], []], "labelSize", "col-md-4", "inputSize", "col-md-8", "disabled", true], ["loc", [null, [12, 12], [12, 111]]]], ["inline", "textarea-f", [], ["label", "Description (Optional)", "value", ["subexpr", "@mut", [["get", "description", ["loc", [null, [13, 62], [13, 73]]]]], [], []], "labelSize", "col-md-4", "inputSize", "col-md-8"], ["loc", [null, [13, 12], [13, 117]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 16,
                "column": 6
              },
              "end": {
                "line": 20,
                "column": 6
              }
            },
            "moduleName": "fusor-ember-cli/templates/components/new-environment-modal.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "class", "btn btn-primary");
            var el2 = dom.createTextNode("\n              Submit\n          ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createAttrMorph(element0, 'disabled');
            morphs[1] = dom.createElementMorph(element0);
            return morphs;
          },
          statements: [["attribute", "disabled", ["get", "invalidEnvName", ["loc", [null, [17, 84], [17, 98]]]]], ["element", "action", ["createEnvironment"], [], ["loc", [null, [17, 18], [17, 48]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 22,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/new-environment-modal.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          return morphs;
        },
        statements: [["block", "pf-modal-body", [], [], 0, null, ["loc", [null, [5, 6], [14, 24]]]], ["block", "pf-modal-footer", [], [], 1, null, ["loc", [null, [16, 6], [20, 26]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 23,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/new-environment-modal.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "pf-modal-base", [], ["idModal", "newLifecycleEnvironmentModal", "openModal", ["subexpr", "@mut", [["get", "openModal", ["loc", [null, [2, 27], [2, 36]]]]], [], []], "title", "Enter New Environment"], 0, null, ["loc", [null, [1, 0], [22, 18]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("fusor-ember-cli/templates/components/new-node-registration-mac-address", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 9,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/new-node-registration-mac-address.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "text-f", [], ["cssId", ["subexpr", "@mut", [["get", "cssId", ["loc", [null, [1, 15], [1, 20]]]]], [], []], "data-qci", ["subexpr", "@mut", [["get", "cssId", ["loc", [null, [2, 19], [2, 24]]]]], [], []], "label", ["subexpr", "@mut", [["get", "label", ["loc", [null, [3, 16], [3, 21]]]]], [], []], "labelSize", "form-label-nowrap col-xs-3", "inputSize", "col-xs-4", "value", ["subexpr", "@mut", [["get", "macAddress.value", ["loc", [null, [6, 16], [6, 32]]]]], [], []], "validator", ["subexpr", "@mut", [["get", "macAddressValidator", ["loc", [null, [7, 20], [7, 39]]]]], [], []], "isRequired", false], ["loc", [null, [1, 0], [8, 28]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("fusor-ember-cli/templates/components/new-node-registration", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 7,
                  "column": 4
                },
                "end": {
                  "line": 9,
                  "column": 4
                }
              },
              "moduleName": "fusor-ember-cli/templates/components/new-node-registration.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "partial", ["new-node-registration-step1-body"], [], ["loc", [null, [8, 6], [8, 52]]]]],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 9,
                  "column": 4
                },
                "end": {
                  "line": 11,
                  "column": 4
                }
              },
              "moduleName": "fusor-ember-cli/templates/components/new-node-registration.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "partial", ["new-node-registration-step2-body"], [], ["loc", [null, [10, 6], [10, 52]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 6,
                "column": 2
              },
              "end": {
                "line": 12,
                "column": 2
              }
            },
            "moduleName": "fusor-ember-cli/templates/components/new-node-registration.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["get", "isStep1", ["loc", [null, [7, 10], [7, 17]]]]], [], 0, 1, ["loc", [null, [7, 4], [11, 11]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.10",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 19,
                    "column": 6
                  },
                  "end": {
                    "line": 24,
                    "column": 6
                  }
                },
                "moduleName": "fusor-ember-cli/templates/components/new-node-registration.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("button");
                dom.setAttribute(el1, "type", "submit");
                dom.setAttribute(el1, "id", "detectNodeSubmitButton");
                dom.setAttribute(el1, "class", "btn btn-primary detect-node-submit-button");
                var el2 = dom.createTextNode("\n          Next ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("i");
                dom.setAttribute(el2, "class", "fa fa-angle-right");
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n        ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element4 = dom.childAt(fragment, [1]);
                var morphs = new Array(2);
                morphs[0] = dom.createAttrMorph(element4, 'disabled');
                morphs[1] = dom.createElementMorph(element4);
                return morphs;
              },
              statements: [["attribute", "disabled", ["get", "disableDetectNodesSubmit", ["loc", [null, [21, 27], [21, 51]]]]], ["element", "action", ["submitDetectNodes"], [], ["loc", [null, [21, 54], [21, 84]]]]],
              locals: [],
              templates: []
            };
          })();
          var child1 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.10",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 24,
                    "column": 6
                  },
                  "end": {
                    "line": 29,
                    "column": 6
                  }
                },
                "moduleName": "fusor-ember-cli/templates/components/new-node-registration.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("button");
                dom.setAttribute(el1, "type", "submit");
                dom.setAttribute(el1, "id", "newNodeSubmitButton");
                dom.setAttribute(el1, "class", "btn btn-primary new-node-submit-button");
                var el2 = dom.createTextNode("\n          Register\n        ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element3 = dom.childAt(fragment, [1]);
                var morphs = new Array(2);
                morphs[0] = dom.createAttrMorph(element3, 'disabled');
                morphs[1] = dom.createElementMorph(element3);
                return morphs;
              },
              statements: [["attribute", "disabled", ["get", "disableNewNodesSubmit", ["loc", [null, [26, 27], [26, 48]]]]], ["element", "action", ["submitRegisterNodes"], [], ["loc", [null, [26, 51], [26, 83]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 15,
                  "column": 4
                },
                "end": {
                  "line": 30,
                  "column": 4
                }
              },
              "moduleName": "fusor-ember-cli/templates/components/new-node-registration.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("button");
              dom.setAttribute(el1, "type", "button");
              dom.setAttribute(el1, "id", "newNodeCancelButton");
              dom.setAttribute(el1, "class", "btn btn-default delete-node-cancel-button");
              var el2 = dom.createTextNode("\n        Cancel\n      ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element5 = dom.childAt(fragment, [1]);
              var morphs = new Array(2);
              morphs[0] = dom.createElementMorph(element5);
              morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["element", "action", ["cancelRegisterNodes"], [], ["loc", [null, [16, 103], [16, 135]]]], ["block", "if", [["get", "isNewNodeMethodAuto", ["loc", [null, [19, 12], [19, 31]]]]], [], 0, 1, ["loc", [null, [19, 6], [29, 13]]]]],
            locals: [],
            templates: [child0, child1]
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 30,
                  "column": 4
                },
                "end": {
                  "line": 40,
                  "column": 4
                }
              },
              "moduleName": "fusor-ember-cli/templates/components/new-node-registration.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("button");
              dom.setAttribute(el1, "type", "button");
              dom.setAttribute(el1, "id", "newNodeCancelButton");
              dom.setAttribute(el1, "class", "btn btn-default delete-node-cancel-button pull-left");
              var el2 = dom.createTextNode("\n        Cancel\n      ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("button");
              dom.setAttribute(el1, "type", "button");
              dom.setAttribute(el1, "id", "newNodeBackButton");
              dom.setAttribute(el1, "class", "btn btn-default detect-node-back-button");
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("i");
              dom.setAttribute(el2, "class", "fa fa-angle-left");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode(" Back\n      ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("button");
              dom.setAttribute(el1, "type", "submit");
              dom.setAttribute(el1, "id", "newNodeSubmitButton");
              dom.setAttribute(el1, "class", "btn btn-primary new-node-submit-button");
              var el2 = dom.createTextNode("\n        Register\n      ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element0 = dom.childAt(fragment, [1]);
              var element1 = dom.childAt(fragment, [3]);
              var element2 = dom.childAt(fragment, [5]);
              var morphs = new Array(4);
              morphs[0] = dom.createElementMorph(element0);
              morphs[1] = dom.createElementMorph(element1);
              morphs[2] = dom.createAttrMorph(element2, 'disabled');
              morphs[3] = dom.createElementMorph(element2);
              return morphs;
            },
            statements: [["element", "action", ["cancelRegisterNodes"], [], ["loc", [null, [31, 113], [31, 145]]]], ["element", "action", ["backStep"], [], ["loc", [null, [34, 99], [34, 120]]]], ["attribute", "disabled", ["get", "disableNewNodesSubmit", ["loc", [null, [37, 111], [37, 132]]]]], ["element", "action", ["submitRegisterNodes"], [], ["loc", [null, [37, 135], [37, 167]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 14,
                "column": 2
              },
              "end": {
                "line": 42,
                "column": 2
              }
            },
            "moduleName": "fusor-ember-cli/templates/components/new-node-registration.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            return morphs;
          },
          statements: [["block", "if", [["get", "isStep1", ["loc", [null, [15, 10], [15, 17]]]]], [], 0, 1, ["loc", [null, [15, 4], [40, 11]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 44,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/new-node-registration.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          return morphs;
        },
        statements: [["block", "pf-modal-body", [], [], 0, null, ["loc", [null, [6, 2], [12, 20]]]], ["block", "pf-modal-footer", [], [], 1, null, ["loc", [null, [14, 2], [42, 22]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 45,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/new-node-registration.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "pf-modal-base", [], ["idModal", "nodeRegistrationModal", "cssClass", "node-registration-modal", "openModal", ["subexpr", "@mut", [["get", "openModal", ["loc", [null, [3, 27], [3, 36]]]]], [], []], "title", ["subexpr", "@mut", [["get", "newNodeTitle", ["loc", [null, [4, 23], [4, 35]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [44, 18]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("fusor-ember-cli/templates/components/new-satellite-modal", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 5,
                "column": 6
              },
              "end": {
                "line": 7,
                "column": 6
              }
            },
            "moduleName": "fusor-ember-cli/templates/components/new-satellite-modal.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "text-f", [], ["label", "Name", "value", ["subexpr", "@mut", [["get", "newSatelliteName", ["loc", [null, [6, 40], [6, 56]]]]], [], []], "labelSize", "col-md-4", "inputSize", "col-md-8", "cssId", "new-satellite-name"], ["loc", [null, [6, 12], [6, 127]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 9,
                "column": 6
              },
              "end": {
                "line": 13,
                "column": 6
              }
            },
            "moduleName": "fusor-ember-cli/templates/components/new-satellite-modal.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "class", "btn btn-primary");
            dom.setAttribute(el1, "data-qci", "submit-new-satellite");
            var el2 = dom.createTextNode("\n              Submit\n          ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(1);
            morphs[0] = dom.createElementMorph(element0);
            return morphs;
          },
          statements: [["element", "action", ["createSatellite"], [], ["loc", [null, [10, 18], [10, 46]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 15,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/new-satellite-modal.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          return morphs;
        },
        statements: [["block", "pf-modal-body", [], [], 0, null, ["loc", [null, [5, 6], [7, 24]]]], ["block", "pf-modal-footer", [], [], 1, null, ["loc", [null, [9, 6], [13, 26]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 16,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/new-satellite-modal.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "pf-modal-base", [], ["idModal", "registerNewSatellite", "openModal", ["subexpr", "@mut", [["get", "openModal", ["loc", [null, [2, 27], [2, 36]]]]], [], []], "title", "New Subscription Management Application"], 0, null, ["loc", [null, [1, 0], [15, 18]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("fusor-ember-cli/templates/components/node-details-block", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 28,
              "column": 2
            },
            "end": {
              "line": 35,
              "column": 2
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/node-details-block.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "row ose-node-line");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "col-md-1");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "col-md-9");
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode(" GB for Docker\n      ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 3]), 1, 1);
          return morphs;
        },
        statements: [["content", "storageSize", ["loc", [null, [32, 8], [32, 23]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 37,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/node-details-block.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h1");
        dom.setAttribute(el1, "class", "num-ose-node pull-left");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "node-details-block");
        var el2 = dom.createTextNode("\n\n  Each ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(" node has:\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("br");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [2]);
        var morphs = new Array(6);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(element0, 1, 1);
        morphs[2] = dom.createMorphAt(element0, 5, 5);
        morphs[3] = dom.createMorphAt(element0, 7, 7);
        morphs[4] = dom.createMorphAt(element0, 9, 9);
        morphs[5] = dom.createMorphAt(element0, 11, 11);
        return morphs;
      },
      statements: [["content", "numNodesDisplay", ["loc", [null, [1, 35], [1, 54]]]], ["content", "typeNode", ["loc", [null, [5, 7], [5, 19]]]], ["inline", "ose-node-detail-line", [], ["label", "vCPU", "typeNode", ["subexpr", "@mut", [["get", "typeNode", ["loc", [null, [9, 34], [9, 42]]]]], [], []], "value", ["subexpr", "@mut", [["get", "valueVcpu", ["loc", [null, [10, 31], [10, 40]]]]], [], []], "validator", ["subexpr", "@mut", [["get", "validator", ["loc", [null, [11, 35], [11, 44]]]]], [], []], "isEditMode", ["subexpr", "@mut", [["get", "isEditMode", ["loc", [null, [12, 36], [12, 46]]]]], [], []]], ["loc", [null, [8, 2], [12, 48]]]], ["inline", "ose-node-detail-line", [], ["label", "RAM", "typeNode", ["subexpr", "@mut", [["get", "typeNode", ["loc", [null, [15, 34], [15, 42]]]]], [], []], "value", ["subexpr", "@mut", [["get", "valueRam", ["loc", [null, [16, 31], [16, 39]]]]], [], []], "validator", ["subexpr", "@mut", [["get", "validator", ["loc", [null, [17, 35], [17, 44]]]]], [], []], "isEditMode", ["subexpr", "@mut", [["get", "isEditMode", ["loc", [null, [18, 36], [18, 46]]]]], [], []], "suffix", "GB"], ["loc", [null, [14, 2], [19, 38]]]], ["inline", "ose-node-detail-line", [], ["label", "Disk", "typeNode", ["subexpr", "@mut", [["get", "typeNode", ["loc", [null, [22, 34], [22, 42]]]]], [], []], "value", ["subexpr", "@mut", [["get", "valueDisk", ["loc", [null, [23, 31], [23, 40]]]]], [], []], "validator", ["subexpr", "@mut", [["get", "validator", ["loc", [null, [24, 35], [24, 44]]]]], [], []], "isEditMode", ["subexpr", "@mut", [["get", "isEditMode", ["loc", [null, [25, 36], [25, 46]]]]], [], []], "suffix", "GB"], ["loc", [null, [21, 2], [26, 38]]]], ["block", "if", [["get", "storageSize", ["loc", [null, [28, 8], [28, 19]]]]], [], 0, null, ["loc", [null, [28, 2], [35, 9]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("fusor-ember-cli/templates/components/node-details", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 43,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/node-details.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "col-xs-12 col-sm-10 col-md-10 col-lg-7 env-summary-title");
        var el3 = dom.createTextNode("\n    Node Details\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "pull-right");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("button");
        dom.setAttribute(el4, "class", "btn btn-default btn-sm");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "col-xs-10 col-sm-10 col-md-10 col-lg-7 node-details-body");
        var el3 = dom.createTextNode("\n\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "row");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "col-xs-6 col-sm-6 col-md-6 col-lg-6 node-details-col");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "col-xs-6 col-sm-6 col-md-6 col-lg-6");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n\n\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0, 1, 1, 1]);
        var element1 = dom.childAt(fragment, [2, 1, 1]);
        var morphs = new Array(4);
        morphs[0] = dom.createElementMorph(element0);
        morphs[1] = dom.createMorphAt(element0, 1, 1);
        morphs[2] = dom.createMorphAt(dom.childAt(element1, [1]), 1, 1);
        morphs[3] = dom.createMorphAt(dom.childAt(element1, [3]), 1, 1);
        return morphs;
      },
      statements: [["element", "action", ["editOseNodeDetails"], [], ["loc", [null, [5, 14], [5, 45]]]], ["content", "customEditLabel", ["loc", [null, [6, 8], [6, 27]]]], ["inline", "node-details-block", [], ["numNodes", ["subexpr", "@mut", [["get", "numMasterNodes", ["loc", [null, [17, 38], [17, 52]]]]], [], []], "valueVcpu", ["subexpr", "@mut", [["get", "masterVcpu", ["loc", [null, [18, 39], [18, 49]]]]], [], []], "valueRam", ["subexpr", "@mut", [["get", "masterRam", ["loc", [null, [19, 38], [19, 47]]]]], [], []], "valueDisk", ["subexpr", "@mut", [["get", "masterDisk", ["loc", [null, [20, 39], [20, 49]]]]], [], []], "typeNode", "master", "validator", ["subexpr", "@mut", [["get", "validator", ["loc", [null, [22, 39], [22, 48]]]]], [], []], "isEditMode", ["subexpr", "@mut", [["get", "isEditMode", ["loc", [null, [23, 40], [23, 50]]]]], [], []]], ["loc", [null, [17, 8], [23, 52]]]], ["inline", "node-details-block", [], ["numNodes", ["subexpr", "@mut", [["get", "numWorkerNodes", ["loc", [null, [27, 38], [27, 52]]]]], [], []], "valueVcpu", ["subexpr", "@mut", [["get", "workerVcpu", ["loc", [null, [28, 39], [28, 49]]]]], [], []], "valueRam", ["subexpr", "@mut", [["get", "workerRam", ["loc", [null, [29, 38], [29, 47]]]]], [], []], "valueDisk", ["subexpr", "@mut", [["get", "workerDisk", ["loc", [null, [30, 39], [30, 49]]]]], [], []], "typeNode", "worker", "validator", ["subexpr", "@mut", [["get", "validator", ["loc", [null, [32, 39], [32, 48]]]]], [], []], "isEditMode", ["subexpr", "@mut", [["get", "isEditMode", ["loc", [null, [33, 40], [33, 50]]]]], [], []], "storageSize", ["subexpr", "@mut", [["get", "storageSize", ["loc", [null, [34, 41], [34, 52]]]]], [], []]], ["loc", [null, [27, 8], [34, 54]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("fusor-ember-cli/templates/components/node-profile", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 38,
                  "column": 22
                },
                "end": {
                  "line": 48,
                  "column": 22
                }
              },
              "moduleName": "fusor-ember-cli/templates/components/node-profile.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "deployment-role", [], ["role", ["subexpr", "@mut", [["get", "role", ["loc", [null, [39, 47], [39, 51]]]]], [], []], "profile", ["subexpr", "@mut", [["get", "profile", ["loc", [null, [40, 50], [40, 57]]]]], [], []], "nodeCount", ["subexpr", "@mut", [["get", "matchingNodeCount", ["loc", [null, [41, 52], [41, 69]]]]], [], []], "plan", ["subexpr", "@mut", [["get", "plan", ["loc", [null, [42, 47], [42, 51]]]]], [], []], "disabled", ["subexpr", "@mut", [["get", "disabled", ["loc", [null, [43, 51], [43, 59]]]]], [], []], "edit", "editRole", "roleCountUpdated", "roleCountUpdated", "remove", "removeRole", "readOnly", false], ["loc", [null, [39, 24], [47, 58]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 37,
                "column": 20
              },
              "end": {
                "line": 49,
                "column": 20
              }
            },
            "moduleName": "fusor-ember-cli/templates/components/node-profile.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "draggable-object", [], ["content", ["subexpr", "@mut", [["get", "role", ["loc", [null, [38, 50], [38, 54]]]]], [], []], "data-qci", ["subexpr", "@mut", [["get", "role.roleType", ["loc", [null, [38, 64], [38, 77]]]]], [], []]], 0, null, ["loc", [null, [38, 22], [48, 43]]]]],
          locals: ["role"],
          templates: [child0]
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.10",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 57,
                    "column": 32
                  },
                  "end": {
                    "line": 59,
                    "column": 32
                  }
                },
                "moduleName": "fusor-ember-cli/templates/components/node-profile.hbs"
              },
              arity: 1,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                                    ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("a");
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element0 = dom.childAt(fragment, [1]);
                var morphs = new Array(3);
                morphs[0] = dom.createAttrMorph(element0, 'class');
                morphs[1] = dom.createElementMorph(element0);
                morphs[2] = dom.createMorphAt(element0, 0, 0);
                return morphs;
              },
              statements: [["attribute", "class", ["concat", ["roles-menu-item role-", ["get", "role.roleType", ["loc", [null, [58, 69], [58, 82]]]]]]], ["element", "action", ["assignRole", ["get", "role", ["loc", [null, [58, 108], [58, 112]]]]], [], ["loc", [null, [58, 86], [58, 114]]]], ["content", "role.name", ["loc", [null, [58, 115], [58, 128]]]]],
              locals: ["role"],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 51,
                  "column": 22
                },
                "end": {
                  "line": 62,
                  "column": 22
                }
              },
              "moduleName": "fusor-ember-cli/templates/components/node-profile.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                          ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("li");
              var el2 = dom.createTextNode("\n                              ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("a");
              dom.setAttribute(el2, "id", "role-target-dropdown-1");
              dom.setAttribute(el2, "data-toggle", "dropdown");
              dom.setAttribute(el2, "aria-haspopup", "true");
              dom.setAttribute(el2, "aria-expanded", "false");
              var el3 = dom.createTextNode("\n                                  ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("i");
              dom.setAttribute(el3, "class", "fa fa-plus");
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode(" Assign Role\n                              ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n                              ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("ul");
              dom.setAttribute(el2, "class", "dropdown-menu");
              dom.setAttribute(el2, "role", "menu");
              dom.setAttribute(el2, "aria-labelledby", "role-target-dropdown-1");
              dom.setAttribute(el2, "style", "left: -2px;");
              var el3 = dom.createTextNode("\n");
              dom.appendChild(el2, el3);
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("                              ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n                          ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element1 = dom.childAt(fragment, [1]);
              var element2 = dom.childAt(element1, [1]);
              var morphs = new Array(3);
              morphs[0] = dom.createAttrMorph(element1, 'class');
              morphs[1] = dom.createElementMorph(element2);
              morphs[2] = dom.createMorphAt(dom.childAt(element1, [3]), 1, 1);
              return morphs;
            },
            statements: [["attribute", "class", ["concat", ["role-target ", ["get", "assignMenuOpenClass", ["loc", [null, [52, 51], [52, 70]]]], "  dropdown"]]], ["element", "action", ["showAssignMenu", ["get", "profile", ["loc", [null, [53, 87], [53, 94]]]]], ["bubbles", false], ["loc", [null, [53, 61], [53, 110]]]], ["block", "each", [["get", "unassignedRoles", ["loc", [null, [57, 40], [57, 55]]]]], [], 0, null, ["loc", [null, [57, 32], [59, 41]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 50,
                "column": 20
              },
              "end": {
                "line": 63,
                "column": 20
              }
            },
            "moduleName": "fusor-ember-cli/templates/components/node-profile.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "draggable-object-target", [], ["action", "assignRole"], 0, null, ["loc", [null, [51, 22], [62, 50]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 33,
              "column": 10
            },
            "end": {
              "line": 66,
              "column": 10
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/node-profile.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("              ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "col-sm-7 col-md-8");
          var el2 = dom.createTextNode("\n                  ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("h4");
          dom.setAttribute(el2, "class", "h5");
          var el3 = dom.createTextNode("Assigned Nodes");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                  ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("ul");
          dom.setAttribute(el2, "class", "deployment-roles deployment-roles-assigned");
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("                  ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n              ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element3 = dom.childAt(fragment, [1, 3]);
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(element3, 1, 1);
          morphs[1] = dom.createMorphAt(element3, 2, 2);
          return morphs;
        },
        statements: [["block", "each", [["get", "assignedRoles", ["loc", [null, [37, 28], [37, 41]]]]], [], 0, null, ["loc", [null, [37, 20], [49, 29]]]], ["block", "unless", [["get", "allRolesAssigned", ["loc", [null, [50, 30], [50, 46]]]]], [], 1, null, ["loc", [null, [50, 20], [63, 31]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 66,
              "column": 10
            },
            "end": {
              "line": 70,
              "column": 10
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/node-profile.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("              ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "col-sm-7 col-md-8");
          var el2 = dom.createTextNode("\n                  ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("em");
          var el3 = dom.createTextNode("Assigning nodes to roles will occur in step ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("C.");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n              ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1]), 1, 1);
          return morphs;
        },
        statements: [["content", "stepNumberOpenstack", ["loc", [null, [68, 66], [68, 89]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 74,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/node-profile.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "panel-heading");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "row");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "col-sm-7 col-md-8");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("h3");
        dom.setAttribute(el5, "class", "node-profile-label h5");
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "col-sm-5 col-md-4");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("h4");
        dom.setAttribute(el5, "class", "node-profile-free-nodes h5");
        var el6 = dom.createTextNode("Node Count: ");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "panel-body");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "row");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "col-sm-5 col-md-4");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("h4");
        dom.setAttribute(el5, "class", "h5");
        var el6 = dom.createTextNode("Each node has:");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("table");
        dom.setAttribute(el5, "class", "table node-specs");
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("tbody");
        var el7 = dom.createTextNode("\n                    ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("tr");
        var el8 = dom.createTextNode("\n                        ");
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("th");
        var el9 = dom.createTextNode("CPU");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        var el8 = dom.createTextNode("\n                        ");
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("td");
        var el9 = dom.createComment("");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        var el8 = dom.createTextNode("\n                    ");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n                    ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("tr");
        var el8 = dom.createTextNode("\n                        ");
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("th");
        var el9 = dom.createTextNode("RAM");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        var el8 = dom.createTextNode("\n                        ");
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("td");
        var el9 = dom.createComment("");
        dom.appendChild(el8, el9);
        var el9 = dom.createTextNode(" MB");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        var el8 = dom.createTextNode("\n                    ");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n                    ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("tr");
        var el8 = dom.createTextNode("\n                        ");
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("th");
        var el9 = dom.createTextNode("Disk");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        var el8 = dom.createTextNode("\n                        ");
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("td");
        var el9 = dom.createComment("");
        dom.appendChild(el8, el9);
        var el9 = dom.createTextNode(" GB");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        var el8 = dom.createTextNode("\n                    ");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n                    ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element4 = dom.childAt(fragment, [0]);
        var element5 = dom.childAt(element4, [1, 1]);
        var element6 = dom.childAt(element4, [3, 1]);
        var element7 = dom.childAt(element6, [1, 3, 1]);
        var morphs = new Array(7);
        morphs[0] = dom.createAttrMorph(element4, 'class');
        morphs[1] = dom.createMorphAt(dom.childAt(element5, [1, 1]), 0, 0);
        morphs[2] = dom.createMorphAt(dom.childAt(element5, [3, 1]), 1, 1);
        morphs[3] = dom.createMorphAt(dom.childAt(element7, [1, 3]), 0, 0);
        morphs[4] = dom.createMorphAt(dom.childAt(element7, [3, 3]), 0, 0);
        morphs[5] = dom.createMorphAt(dom.childAt(element7, [5, 3]), 0, 0);
        morphs[6] = dom.createMorphAt(element6, 3, 3);
        return morphs;
      },
      statements: [["attribute", "class", ["concat", ["panel panel-default node-profile ", ["get", "assignClass", ["loc", [null, [1, 47], [1, 58]]]]]]], ["content", "profile.name", ["loc", [null, [5, 50], [5, 66]]]], ["content", "matchingNodeCount", ["loc", [null, [8, 67], [8, 88]]]], ["content", "profile.vcpus", ["loc", [null, [20, 28], [20, 45]]]], ["content", "profile.ram", ["loc", [null, [24, 28], [24, 43]]]], ["content", "profile.disk", ["loc", [null, [28, 28], [28, 44]]]], ["block", "if", [["get", "doAssign", ["loc", [null, [33, 16], [33, 24]]]]], [], 0, 1, ["loc", [null, [33, 10], [70, 17]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("fusor-ember-cli/templates/components/object-bin", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 5,
                  "column": 4
                },
                "end": {
                  "line": 7,
                  "column": 4
                }
              },
              "moduleName": "fusor-ember-cli/templates/components/object-bin.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "yield", [["get", "obj", ["loc", [null, [6, 14], [6, 17]]]]], [], ["loc", [null, [6, 6], [6, 19]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 4,
                "column": 2
              },
              "end": {
                "line": 8,
                "column": 2
              }
            },
            "moduleName": "fusor-ember-cli/templates/components/object-bin.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "draggable-object", [], ["action", "handleObjectDragged", "content", ["subexpr", "@mut", [["get", "obj", ["loc", [null, [5, 61], [5, 64]]]]], [], []]], 0, null, ["loc", [null, [5, 4], [7, 25]]]]],
          locals: ["obj"],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 9,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/object-bin.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "object-bin-title");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("br");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          morphs[1] = dom.createMorphAt(fragment, 5, 5, contextualElement);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["content", "name", ["loc", [null, [2, 32], [2, 40]]]], ["block", "each", [["get", "model", ["loc", [null, [4, 10], [4, 15]]]]], [], 0, null, ["loc", [null, [4, 2], [8, 11]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 10,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/object-bin.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "draggable-object-target", [], ["action", "handleObjectDropped"], 0, null, ["loc", [null, [1, 0], [9, 28]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("fusor-ember-cli/templates/components/ose-env-summary", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 15,
              "column": 6
            },
            "end": {
              "line": 18,
              "column": 6
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/ose-env-summary.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "tool-tip", [], ["faIcon", "fa-info-circle", "title", ["subexpr", "@mut", [["get", "resourcesAvailableToolTip", ["loc", [null, [17, 26], [17, 51]]]]], [], []]], ["loc", [null, [16, 8], [17, 53]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 30,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/ose-env-summary.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "col-xs-10 col-sm-10 col-md-10 col-lg-7 env-summary-title");
        var el3 = dom.createTextNode("\n    Environment Summary\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "pull-right");
        var el4 = dom.createTextNode("\n      Node Count: ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "col-xs-10 col-sm-10 col-md-10 col-lg-7 env-summary-body");
        var el3 = dom.createTextNode("\n    Resources needed:\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "pull-right");
        var el4 = dom.createTextNode("\n      Resources available:\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "col-xs-10 col-sm-10 col-md-10 col-lg-7 env-summary-progressbars");
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [4, 1]);
        var morphs = new Array(5);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0, 1, 1]), 1, 1);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2, 1, 1]), 1, 1);
        morphs[2] = dom.createMorphAt(element0, 1, 1);
        morphs[3] = dom.createMorphAt(element0, 3, 3);
        morphs[4] = dom.createMorphAt(element0, 5, 5);
        return morphs;
      },
      statements: [["content", "numNodesDisplay", ["loc", [null, [5, 18], [5, 37]]]], ["block", "if", [["get", "isCloudForms", ["loc", [null, [15, 12], [15, 24]]]]], [], 0, null, ["loc", [null, [15, 6], [18, 13]]]], ["inline", "ose-summary-needed-available", [], ["label", "vCPU", "needed", ["subexpr", "@mut", [["get", "vcpuNeeded", ["loc", [null, [25, 57], [25, 67]]]]], [], []], "available", ["subexpr", "@mut", [["get", "vcpuAvailable", ["loc", [null, [25, 78], [25, 91]]]]], [], []], "storageSize", ["subexpr", "@mut", [["get", "storageSize", ["loc", [null, [25, 104], [25, 115]]]]], [], []]], ["loc", [null, [25, 6], [25, 117]]]], ["inline", "ose-summary-needed-available", [], ["label", "RAM", "needed", ["subexpr", "@mut", [["get", "ramNeeded", ["loc", [null, [26, 56], [26, 65]]]]], [], []], "available", ["subexpr", "@mut", [["get", "ramAvailable", ["loc", [null, [26, 76], [26, 88]]]]], [], []], "suffix", "GB", "storageSize", ["subexpr", "@mut", [["get", "storageSize", ["loc", [null, [26, 113], [26, 124]]]]], [], []]], ["loc", [null, [26, 6], [26, 126]]]], ["inline", "ose-summary-needed-available", [], ["label", "Disk", "needed", ["subexpr", "@mut", [["get", "diskNeeded", ["loc", [null, [27, 57], [27, 67]]]]], [], []], "available", ["subexpr", "@mut", [["get", "diskAvailable", ["loc", [null, [27, 78], [27, 91]]]]], [], []], "suffix", "GB", "storageSize", ["subexpr", "@mut", [["get", "storageSize", ["loc", [null, [27, 116], [27, 127]]]]], [], []]], ["loc", [null, [27, 6], [27, 129]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("fusor-ember-cli/templates/components/ose-host-review-link", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 3,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/ose-host-review-link.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "review-link", [], ["label", ["subexpr", "@mut", [["get", "linkLabel", ["loc", [null, [2, 22], [2, 31]]]]], [], []], "value", ["subexpr", "@mut", [["get", "oseHost.name", ["loc", [null, [2, 38], [2, 50]]]]], [], []]], ["loc", [null, [2, 2], [2, 52]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 0
            },
            "end": {
              "line": 8,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/ose-host-review-link.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "review-link", [], ["label", ["subexpr", "@mut", [["get", "linkLabel", ["loc", [null, [5, 10], [5, 19]]]]], [], []], "value", ["subexpr", "@mut", [["get", "linkValue", ["loc", [null, [6, 10], [6, 19]]]]], [], []], "isExternalURL", true], ["loc", [null, [4, 2], [7, 24]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 9,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/ose-host-review-link.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "isWorkerNode", ["loc", [null, [1, 6], [1, 18]]]]], [], 0, 1, ["loc", [null, [1, 0], [8, 7]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("fusor-ember-cli/templates/components/ose-node-detail-line", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 6,
              "column": 2
            },
            "end": {
              "line": 14,
              "column": 2
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/ose-node-detail-line.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "simple-text-f", [], ["value", ["subexpr", "@mut", [["get", "value", ["loc", [null, [7, 26], [7, 31]]]]], [], []], "class", "ose-custom-field", "disabled", ["subexpr", "@mut", [["get", "deploymentController.isStarted", ["loc", [null, [9, 29], [9, 59]]]]], [], []], "validator", ["subexpr", "@mut", [["get", "validator", ["loc", [null, [10, 30], [10, 39]]]]], [], []], "suffix", ["subexpr", "@mut", [["get", "suffix", ["loc", [null, [11, 27], [11, 33]]]]], [], []], "cssId", ["subexpr", "@mut", [["get", "cssId", ["loc", [null, [12, 26], [12, 31]]]]], [], []], "placeholder", "Enter"], ["loc", [null, [7, 4], [13, 41]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 14,
              "column": 2
            },
            "end": {
              "line": 16,
              "column": 2
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/ose-node-detail-line.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode(" ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          return morphs;
        },
        statements: [["content", "value", ["loc", [null, [15, 4], [15, 13]]]], ["content", "suffix", ["loc", [null, [15, 14], [15, 24]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 19,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/ose-node-detail-line.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "col-xs-2 col-sm-2 col-md-1");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("strong");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "col-xs-4 col-sm-6 col-md-9");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0, 1]), 0, 0);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 1, 1);
        return morphs;
      },
      statements: [["content", "label", ["loc", [null, [2, 10], [2, 19]]]], ["block", "if", [["get", "isEditMode", ["loc", [null, [6, 8], [6, 18]]]]], [], 0, 1, ["loc", [null, [6, 2], [16, 9]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("fusor-ember-cli/templates/components/ose-summary-needed-available", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 27,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/ose-summary-needed-available.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "col-xs-2 col-sm-2 col-md-2 col-lg-2");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "label-needed-available");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("strong");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "col-xs-10 col-sm-10 col-md-10 col-lg-10");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "light-gray-background");
        var el3 = dom.createTextNode("\n       \n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "role", "progressbar");
        dom.setAttribute(el2, "aria-valuemin", "0");
        dom.setAttribute(el2, "aria-valuemax", "100");
        var el3 = dom.createTextNode("\n       ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode(" ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode(" ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n       \n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [2]);
        var element1 = dom.childAt(element0, [3]);
        var element2 = dom.childAt(element0, [5]);
        var element3 = dom.childAt(element0, [7]);
        var element4 = dom.childAt(element0, [9]);
        var morphs = new Array(13);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0, 1, 1]), 0, 0);
        morphs[1] = dom.createAttrMorph(element1, 'class');
        morphs[2] = dom.createAttrMorph(element1, 'aria-valuenow');
        morphs[3] = dom.createAttrMorph(element1, 'style');
        morphs[4] = dom.createMorphAt(element1, 1, 1);
        morphs[5] = dom.createAttrMorph(element2, 'class');
        morphs[6] = dom.createMorphAt(element2, 1, 1);
        morphs[7] = dom.createMorphAt(element2, 3, 3);
        morphs[8] = dom.createAttrMorph(element3, 'class');
        morphs[9] = dom.createMorphAt(element3, 1, 1);
        morphs[10] = dom.createMorphAt(element3, 3, 3);
        morphs[11] = dom.createAttrMorph(element4, 'class');
        morphs[12] = dom.createMorphAt(element4, 1, 1);
        return morphs;
      },
      statements: [["content", "label", ["loc", [null, [3, 12], [3, 21]]]], ["attribute", "class", ["concat", ["needed-available-bar ", ["get", "progressBarClass", ["loc", [null, [11, 39], [11, 55]]]]]]], ["attribute", "aria-valuenow", ["get", "percentProgressInt", ["loc", [null, [11, 132], [11, 150]]]]], ["attribute", "style", ["get", "styleWidth", ["loc", [null, [11, 161], [11, 171]]]]], ["content", "helpText", ["loc", [null, [12, 12], [12, 24]]]], ["attribute", "class", ["concat", ["amt-needed ", ["get", "fontColorClass", ["loc", [null, [14, 29], [14, 43]]]]]]], ["content", "needed", ["loc", [null, [15, 6], [15, 16]]]], ["content", "suffix", ["loc", [null, [15, 17], [15, 27]]]], ["attribute", "class", ["concat", ["amt-available ", ["get", "fontColorClass", ["loc", [null, [17, 32], [17, 46]]]]]]], ["content", "available", ["loc", [null, [18, 6], [18, 19]]]], ["content", "suffix", ["loc", [null, [18, 20], [18, 30]]]], ["attribute", "class", ["concat", ["ose-help-msg ", ["get", "helpTextClass", ["loc", [null, [20, 31], [20, 44]]]]]]], ["content", "helpText", ["loc", [null, [21, 6], [21, 18]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("fusor-ember-cli/templates/components/osp-node-manager", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 36,
              "column": 12
            },
            "end": {
              "line": 38,
              "column": 12
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/osp-node-manager.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("              ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "osp-node", [], ["node", ["subexpr", "@mut", [["get", "node", ["loc", [null, [37, 30], [37, 34]]]]], [], []], "ports", ["subexpr", "@mut", [["get", "ports", ["loc", [null, [37, 41], [37, 46]]]]], [], []], "introspectionTasks", ["subexpr", "@mut", [["get", "introspectionTasks", ["loc", [null, [37, 66], [37, 84]]]]], [], []], "foremanTasks", ["subexpr", "@mut", [["get", "foremanTasks", ["loc", [null, [37, 98], [37, 110]]]]], [], []], "deleteNode", "deleteNode", "disabled", ["subexpr", "@mut", [["get", "disabled", ["loc", [null, [37, 144], [37, 152]]]]], [], []]], ["loc", [null, [37, 14], [37, 154]]]]],
        locals: ["node"],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 47,
            "column": 6
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/osp-node-manager.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row osp-node-manager");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "col-md-9 col-lg-6");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "panel panel-default osp-node-manager-panel");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "panel-heading osp-node-manager-panel-heading");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("button");
        dom.setAttribute(el5, "type", "button");
        dom.setAttribute(el5, "class", "btn btn-default pull-right");
        var el6 = dom.createTextNode("\n          Add node to group");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "panel-body osp-node-manager-panel-body");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "row");
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6, "class", "col-xs-1 osp-node-manager-nodes-count-section");
        var el7 = dom.createTextNode("\n            ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("span");
        dom.setAttribute(el7, "class", "registered-node-count pull-right");
        var el8 = dom.createComment("");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n          ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6, "class", "col-xs-4 osp-node-manager-nodes-info-section");
        var el7 = dom.createTextNode("\n            ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("span");
        dom.setAttribute(el7, "class", "node-info");
        var el8 = dom.createTextNode("nodes, each has:");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n            ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("div");
        dom.setAttribute(el7, "class", "row");
        var el8 = dom.createTextNode("\n              ");
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("div");
        dom.setAttribute(el8, "class", "col-xs-4");
        var el9 = dom.createTextNode("\n                ");
        dom.appendChild(el8, el9);
        var el9 = dom.createElement("p");
        dom.setAttribute(el9, "class", "node-info-label");
        var el10 = dom.createTextNode("vCPU");
        dom.appendChild(el9, el10);
        dom.appendChild(el8, el9);
        var el9 = dom.createTextNode("\n                ");
        dom.appendChild(el8, el9);
        var el9 = dom.createElement("p");
        dom.setAttribute(el9, "class", "node-info-label");
        var el10 = dom.createTextNode("RAM");
        dom.appendChild(el9, el10);
        dom.appendChild(el8, el9);
        var el9 = dom.createTextNode("\n                ");
        dom.appendChild(el8, el9);
        var el9 = dom.createElement("p");
        dom.setAttribute(el9, "class", "node-info-label");
        var el10 = dom.createTextNode("Disk");
        dom.appendChild(el9, el10);
        dom.appendChild(el8, el9);
        var el9 = dom.createTextNode("\n              ");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        var el8 = dom.createTextNode("\n              ");
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("div");
        dom.setAttribute(el8, "class", "col-xs-8");
        var el9 = dom.createTextNode("\n                ");
        dom.appendChild(el8, el9);
        var el9 = dom.createElement("p");
        dom.setAttribute(el9, "class", "node-info");
        var el10 = dom.createComment("");
        dom.appendChild(el9, el10);
        dom.appendChild(el8, el9);
        var el9 = dom.createTextNode("\n                ");
        dom.appendChild(el8, el9);
        var el9 = dom.createElement("p");
        dom.setAttribute(el9, "class", "node-info");
        var el10 = dom.createComment("");
        dom.appendChild(el9, el10);
        dom.appendChild(el8, el9);
        var el9 = dom.createTextNode("\n                ");
        dom.appendChild(el8, el9);
        var el9 = dom.createElement("p");
        dom.setAttribute(el9, "class", "node-info");
        var el10 = dom.createComment("");
        dom.appendChild(el9, el10);
        dom.appendChild(el8, el9);
        var el9 = dom.createTextNode("\n              ");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        var el8 = dom.createTextNode("\n            ");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n          ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6, "class", "col-xs-7 osp-node-manager-nodes-list-section");
        var el7 = dom.createTextNode("\n            ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("div");
        dom.setAttribute(el7, "class", "row");
        var el8 = dom.createTextNode("\n              ");
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("div");
        dom.setAttribute(el8, "class", "col-xs-offset-1 col-xs-11 osp-node-list-title");
        var el9 = dom.createTextNode("\n                ");
        dom.appendChild(el8, el9);
        var el9 = dom.createElement("h4");
        var el10 = dom.createTextNode("Nodes");
        dom.appendChild(el9, el10);
        dom.appendChild(el8, el9);
        var el9 = dom.createTextNode("\n              ");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        var el8 = dom.createTextNode("\n            ");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n\n");
        dom.appendChild(el6, el7);
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n          ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n\n        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0, 1, 1]);
        var element1 = dom.childAt(element0, [1]);
        var element2 = dom.childAt(element1, [2]);
        var element3 = dom.childAt(element0, [3, 1]);
        var element4 = dom.childAt(element3, [3, 3, 3]);
        var morphs = new Array(9);
        morphs[0] = dom.createMorphAt(element1, 0, 0);
        morphs[1] = dom.createAttrMorph(element2, 'id');
        morphs[2] = dom.createAttrMorph(element2, 'disabled');
        morphs[3] = dom.createElementMorph(element2);
        morphs[4] = dom.createMorphAt(dom.childAt(element3, [1, 1]), 0, 0);
        morphs[5] = dom.createMorphAt(dom.childAt(element4, [1]), 0, 0);
        morphs[6] = dom.createMorphAt(dom.childAt(element4, [3]), 0, 0);
        morphs[7] = dom.createMorphAt(dom.childAt(element4, [5]), 0, 0);
        morphs[8] = dom.createMorphAt(dom.childAt(element3, [5]), 3, 3);
        return morphs;
      },
      statements: [["content", "nodeManager.address", ["loc", [null, [4, 64], [4, 87]]]], ["attribute", "id", ["concat", ["managerAddNodeButton", ["get", "safeLabel", ["loc", [null, [5, 56], [5, 65]]]]]]], ["attribute", "disabled", ["get", "disabled", ["loc", [null, [6, 44], [6, 52]]]]], ["element", "action", ["onAddNode"], [], ["loc", [null, [6, 10], [6, 32]]]], ["content", "nodeCount", ["loc", [null, [12, 59], [12, 72]]]], ["content", "cpuRange", ["loc", [null, [23, 37], [23, 49]]]], ["content", "memRange", ["loc", [null, [24, 37], [24, 49]]]], ["content", "storageRange", ["loc", [null, [25, 37], [25, 53]]]], ["block", "each", [["get", "nodeManager.nodes", ["loc", [null, [36, 20], [36, 37]]]]], [], 0, null, ["loc", [null, [36, 12], [38, 21]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("fusor-ember-cli/templates/components/osp-node", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 2
            },
            "end": {
              "line": 5,
              "column": 2
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/osp-node.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "class", "spinner spinner-xs spinner-inline");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 5,
                "column": 2
              },
              "end": {
                "line": 7,
                "column": 2
              }
            },
            "moduleName": "fusor-ember-cli/templates/components/osp-node.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            dom.setAttribute(el1, "class", "pficon pficon-ok");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 7,
                  "column": 2
                },
                "end": {
                  "line": 9,
                  "column": 2
                }
              },
              "moduleName": "fusor-ember-cli/templates/components/osp-node.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("    ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("span");
              dom.setAttribute(el1, "class", "spinner spinner-xs spinner-inline");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() {
              return [];
            },
            statements: [],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.10",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 9,
                    "column": 2
                  },
                  "end": {
                    "line": 11,
                    "column": 2
                  }
                },
                "moduleName": "fusor-ember-cli/templates/components/osp-node.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("    ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("span");
                dom.setAttribute(el1, "class", "fa fa-times-circle-o");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes() {
                return [];
              },
              statements: [],
              locals: [],
              templates: []
            };
          })();
          var child1 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.10",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 11,
                    "column": 2
                  },
                  "end": {
                    "line": 13,
                    "column": 2
                  }
                },
                "moduleName": "fusor-ember-cli/templates/components/osp-node.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("    ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("span");
                dom.setAttribute(el1, "class", "fa fa-exclamation-triangle");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n  ");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes() {
                return [];
              },
              statements: [],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 9,
                  "column": 2
                },
                "end": {
                  "line": 13,
                  "column": 2
                }
              },
              "moduleName": "fusor-ember-cli/templates/components/osp-node.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "if", [["get", "isNodeError", ["loc", [null, [9, 12], [9, 23]]]]], [], 0, 1, ["loc", [null, [9, 2], [13, 2]]]]],
            locals: [],
            templates: [child0, child1]
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 7,
                "column": 2
              },
              "end": {
                "line": 13,
                "column": 2
              }
            },
            "moduleName": "fusor-ember-cli/templates/components/osp-node.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["get", "isNodeInspecting", ["loc", [null, [7, 12], [7, 28]]]]], [], 0, 1, ["loc", [null, [7, 2], [13, 2]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 5,
              "column": 2
            },
            "end": {
              "line": 13,
              "column": 2
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/osp-node.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "isNodeReady", ["loc", [null, [5, 12], [5, 23]]]]], [], 0, 1, ["loc", [null, [5, 2], [13, 2]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 26,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/osp-node.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "col-xs-1 osp-node-status-column");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "col-xs-9 osp-node-progress-column");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "progress osp-node-progress");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "role", "progressbar");
        dom.setAttribute(el3, "aria-valuenow", "50");
        dom.setAttribute(el3, "aria-valuemin", "0");
        dom.setAttribute(el3, "aria-valuemax", "100");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("span");
        dom.setAttribute(el4, "class", "osp-node-progress-bar-label");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode(" ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("span");
        dom.setAttribute(el4, "class", "osp-node-progress-bar-extra");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "col-xs-2 osp-node-action-column ");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("button");
        dom.setAttribute(el2, "type", "button");
        dom.setAttribute(el2, "class", "btn btn-icon btn-delete-node");
        var el3 = dom.createElement("i");
        dom.setAttribute(el3, "class", "pficon pficon-delete");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [3, 1, 1]);
        var element1 = dom.childAt(fragment, [5, 1]);
        var morphs = new Array(8);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
        morphs[1] = dom.createAttrMorph(element0, 'class');
        morphs[2] = dom.createAttrMorph(element0, 'style');
        morphs[3] = dom.createMorphAt(dom.childAt(element0, [1]), 0, 0);
        morphs[4] = dom.createMorphAt(dom.childAt(element0, [3]), 0, 0);
        morphs[5] = dom.createAttrMorph(element1, 'id');
        morphs[6] = dom.createAttrMorph(element1, 'disabled');
        morphs[7] = dom.createElementMorph(element1);
        return morphs;
      },
      statements: [["block", "if", [["get", "isNodeDeleting", ["loc", [null, [3, 8], [3, 22]]]]], [], 0, 1, ["loc", [null, [3, 2], [13, 9]]]], ["attribute", "class", ["concat", [["get", "progressBarClass", ["loc", [null, [17, 18], [17, 34]]]]]]], ["attribute", "style", ["get", "progressWidth", ["loc", [null, [17, 122], [17, 135]]]]], ["content", "label", ["loc", [null, [18, 48], [18, 57]]]], ["content", "extraInfo", ["loc", [null, [18, 107], [18, 120]]]], ["attribute", "id", ["concat", ["deleteNodeButton", ["get", "safeLabel", ["loc", [null, [23, 48], [23, 57]]]]]]], ["attribute", "disabled", ["get", "isDeleteDisabled", ["loc", [null, [24, 46], [24, 62]]]]], ["element", "action", ["onDeleteClicked"], [], ["loc", [null, [24, 6], [24, 34]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("fusor-ember-cli/templates/components/pagination-footer", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 11,
                "column": 8
              },
              "end": {
                "line": 11,
                "column": 85
              }
            },
            "moduleName": "fusor-ember-cli/templates/components/pagination-footer.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("«");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 15,
                  "column": 10
                },
                "end": {
                  "line": 15,
                  "column": 63
                }
              },
              "moduleName": "fusor-ember-cli/templates/components/pagination-footer.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["content", "num", ["loc", [null, [15, 56], [15, 63]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 13,
                "column": 6
              },
              "end": {
                "line": 17,
                "column": 6
              }
            },
            "moduleName": "fusor-ember-cli/templates/components/pagination-footer.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("li");
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
            return morphs;
          },
          statements: [["block", "link-to", [["get", "routeName", ["loc", [null, [15, 21], [15, 30]]]], ["subexpr", "query-params", [], ["page", ["get", "num", ["loc", [null, [15, 50], [15, 53]]]]], ["loc", [null, [15, 31], [15, 54]]]]], [], 0, null, ["loc", [null, [15, 10], [15, 75]]]]],
          locals: ["num"],
          templates: [child0]
        };
      })();
      var child2 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 19,
                "column": 8
              },
              "end": {
                "line": 19,
                "column": 85
              }
            },
            "moduleName": "fusor-ember-cli/templates/components/pagination-footer.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("»");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 7,
              "column": 0
            },
            "end": {
              "line": 23,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/pagination-footer.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "col-md-7");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("ul");
          dom.setAttribute(el2, "class", "pagination pull-right");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("li");
          var el4 = dom.createTextNode("\n        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("li");
          var el4 = dom.createTextNode("\n        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1, 1]);
          var element1 = dom.childAt(element0, [1]);
          var element2 = dom.childAt(element0, [5]);
          var morphs = new Array(5);
          morphs[0] = dom.createAttrMorph(element1, 'class');
          morphs[1] = dom.createMorphAt(element1, 1, 1);
          morphs[2] = dom.createMorphAt(element0, 3, 3);
          morphs[3] = dom.createAttrMorph(element2, 'class');
          morphs[4] = dom.createMorphAt(element2, 1, 1);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", ["prev previous_page ", ["subexpr", "if", [["get", "disablePrevPage", ["loc", [null, [10, 41], [10, 56]]]], "disabled"], [], ["loc", [null, [10, 36], [10, 69]]]]]]], ["block", "link-to", [["get", "routeName", ["loc", [null, [11, 19], [11, 28]]]], ["subexpr", "query-params", [], ["page", ["get", "prevPage", ["loc", [null, [11, 48], [11, 56]]]]], ["loc", [null, [11, 29], [11, 57]]]]], ["disabled", ["subexpr", "@mut", [["get", "disablePrevPage", ["loc", [null, [11, 67], [11, 82]]]]], [], []]], 0, null, ["loc", [null, [11, 8], [11, 97]]]], ["block", "each", [["get", "pageRange", ["loc", [null, [13, 14], [13, 23]]]]], [], 1, null, ["loc", [null, [13, 6], [17, 15]]]], ["attribute", "class", ["concat", ["next next_page ", ["subexpr", "if", [["get", "disableNextPage", ["loc", [null, [18, 37], [18, 52]]]], "disabled"], [], ["loc", [null, [18, 32], [18, 65]]]]]]], ["block", "link-to", [["get", "routeName", ["loc", [null, [19, 19], [19, 28]]]], ["subexpr", "query-params", [], ["page", ["get", "nextPage", ["loc", [null, [19, 48], [19, 56]]]]], ["loc", [null, [19, 29], [19, 57]]]]], ["disabled", ["subexpr", "@mut", [["get", "disableNextPage", ["loc", [null, [19, 67], [19, 82]]]]], [], []]], 2, null, ["loc", [null, [19, 8], [19, 97]]]]],
        locals: [],
        templates: [child0, child1, child2]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 24,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/pagination-footer.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "displaying-entries col-md-5");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "pull-left pull-bottom darkgray pagination");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0, 1]), 1, 1);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["content", "displayingEntries", ["loc", [null, [3, 4], [3, 25]]]], ["block", "if", [["get", "showPagination", ["loc", [null, [7, 6], [7, 20]]]]], [], 0, null, ["loc", [null, [7, 0], [23, 7]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("fusor-ember-cli/templates/components/pf-modal-base", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 16,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/pf-modal-base.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "tabindex", "-1");
        dom.setAttribute(el1, "role", "dialog");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "modal-dialog");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "modal-content");
        var el4 = dom.createTextNode("\n\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "modal-header");
        var el5 = dom.createTextNode("\n          ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("button");
        dom.setAttribute(el5, "type", "button");
        dom.setAttribute(el5, "class", "close");
        var el6 = dom.createTextNode("\n            ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("span");
        dom.setAttribute(el6, "class", "pficon pficon-close");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n          ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("h4");
        dom.setAttribute(el5, "class", "modal-title");
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var element1 = dom.childAt(element0, [1, 1]);
        var element2 = dom.childAt(element1, [1]);
        var element3 = dom.childAt(element2, [1]);
        var morphs = new Array(5);
        morphs[0] = dom.createAttrMorph(element0, 'class');
        morphs[1] = dom.createAttrMorph(element0, 'id');
        morphs[2] = dom.createElementMorph(element3);
        morphs[3] = dom.createMorphAt(dom.childAt(element2, [3]), 0, 0);
        morphs[4] = dom.createMorphAt(element1, 3, 3);
        return morphs;
      },
      statements: [["attribute", "class", ["concat", ["modal fade ", ["get", "cssClass", ["loc", [null, [1, 25], [1, 33]]]]]]], ["attribute", "id", ["concat", [["get", "idModal", ["loc", [null, [1, 43], [1, 50]]]]]]], ["element", "action", [["get", "closeXActionName", ["loc", [null, [6, 55], [6, 71]]]]], [], ["loc", [null, [6, 46], [6, 73]]]], ["content", "title", ["loc", [null, [9, 34], [9, 43]]]], ["content", "yield", ["loc", [null, [12, 8], [12, 17]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("fusor-ember-cli/templates/components/pf-modal-body", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 4,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/pf-modal-body.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "modal-body");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 1, 1);
        return morphs;
      },
      statements: [["content", "yield", ["loc", [null, [2, 4], [2, 13]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("fusor-ember-cli/templates/components/pf-modal-footer", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 4,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/pf-modal-footer.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "modal-footer");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 1, 1);
        return morphs;
      },
      statements: [["content", "yield", ["loc", [null, [2, 2], [2, 11]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("fusor-ember-cli/templates/components/progress-bar-satellite", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 7,
              "column": 4
            },
            "end": {
              "line": 9,
              "column": 4
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/progress-bar-satellite.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("i");
          dom.setAttribute(el1, "class", "fa fa-exclamation-triangle errorForValidation");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode(" \n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 9,
                "column": 4
              },
              "end": {
                "line": 11,
                "column": 4
              }
            },
            "moduleName": "fusor-ember-cli/templates/components/progress-bar-satellite.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("i");
            dom.setAttribute(el1, "class", "fa fa-check-circle-o green-circle");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode(" \n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 11,
                  "column": 4
                },
                "end": {
                  "line": 13,
                  "column": 4
                }
              },
              "moduleName": "fusor-ember-cli/templates/components/progress-bar-satellite.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("i");
              dom.setAttribute(el1, "class", "fa fa-exclamation-triangle warningForValidation");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode(" \n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() {
              return [];
            },
            statements: [],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 13,
                  "column": 4
                },
                "end": {
                  "line": 15,
                  "column": 4
                }
              },
              "moduleName": "fusor-ember-cli/templates/components/progress-bar-satellite.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "spinner spinner-xs spinner-inline");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n    ");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() {
              return [];
            },
            statements: [],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 11,
                "column": 4
              },
              "end": {
                "line": 15,
                "column": 4
              }
            },
            "moduleName": "fusor-ember-cli/templates/components/progress-bar-satellite.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["get", "isStopped", ["loc", [null, [11, 14], [11, 23]]]]], [], 0, 1, ["loc", [null, [11, 4], [15, 4]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 9,
              "column": 4
            },
            "end": {
              "line": 15,
              "column": 4
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/progress-bar-satellite.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "isFinished", ["loc", [null, [9, 14], [9, 24]]]]], [], 0, 1, ["loc", [null, [9, 4], [15, 4]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    var child2 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 25,
                "column": 8
              },
              "end": {
                "line": 27,
                "column": 8
              }
            },
            "moduleName": "fusor-ember-cli/templates/components/progress-bar-satellite.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          Failed to configure host groups: ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["content", "configureHostGroupsTask.humanized_errors", ["loc", [null, [26, 43], [26, 87]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 23,
              "column": 4
            },
            "end": {
              "line": 29,
              "column": 4
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/progress-bar-satellite.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "class", "errorForValidation");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["block", "link-to", ["review.progress.details"], [], 0, null, ["loc", [null, [25, 8], [27, 20]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child3 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 31,
                  "column": 10
                },
                "end": {
                  "line": 31,
                  "column": 74
                }
              },
              "moduleName": "fusor-ember-cli/templates/components/progress-bar-satellite.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["content", "model.humanized_errors", ["loc", [null, [31, 48], [31, 74]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 29,
                "column": 4
              },
              "end": {
                "line": 34,
                "column": 4
              }
            },
            "moduleName": "fusor-ember-cli/templates/components/progress-bar-satellite.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            dom.setAttribute(el1, "class", "errorForValidation");
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n    ");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(element0, 1, 1);
            morphs[1] = dom.createUnsafeMorphAt(element0, 3, 3);
            return morphs;
          },
          statements: [["block", "link-to", ["review.progress.details"], [], 0, null, ["loc", [null, [31, 10], [31, 86]]]], ["content", "hostErrorInfo", ["loc", [null, [32, 10], [32, 29]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 29,
              "column": 4
            },
            "end": {
              "line": 34,
              "column": 4
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/progress-bar-satellite.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "hasError", ["loc", [null, [29, 14], [29, 22]]]]], [], 0, null, ["loc", [null, [29, 4], [34, 4]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child4 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 36,
              "column": 4
            },
            "end": {
              "line": 40,
              "column": 4
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/progress-bar-satellite.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "pull-right");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("%\n      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["content", "percentProgress", ["loc", [null, [38, 8], [38, 27]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 48,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/progress-bar-satellite.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "col-lg-2 col-md-2 col-sm-3 rhci-review-product-name");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("h3");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "col-lg-8 col-md-7 col-sm-6");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "progress-bar-label");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("span");
        dom.setAttribute(el3, "class", "no-bold");
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("a");
        dom.setAttribute(el4, "href", "/katello/sync_management");
        dom.setAttribute(el4, "target", "_blank");
        var el5 = dom.createTextNode(" View Content Sync Status");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "progress");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "role", "progressbar");
        dom.setAttribute(el3, "aria-valuemin", "0");
        dom.setAttribute(el3, "aria-valuemax", "100");
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element1 = dom.childAt(fragment, [2]);
        var element2 = dom.childAt(element1, [1]);
        var element3 = dom.childAt(element1, [3, 1]);
        var morphs = new Array(8);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0, 1]), 0, 0);
        morphs[1] = dom.createMorphAt(element2, 1, 1);
        morphs[2] = dom.createMorphAt(element2, 3, 3);
        morphs[3] = dom.createMorphAt(element2, 7, 7);
        morphs[4] = dom.createMorphAt(element2, 9, 9);
        morphs[5] = dom.createAttrMorph(element3, 'class');
        morphs[6] = dom.createAttrMorph(element3, 'aria-valuenow');
        morphs[7] = dom.createAttrMorph(element3, 'style');
        return morphs;
      },
      statements: [["content", "name", ["loc", [null, [2, 6], [2, 14]]]], ["block", "if", [["get", "isError", ["loc", [null, [7, 10], [7, 17]]]]], [], 0, 1, ["loc", [null, [7, 4], [15, 11]]]], ["content", "progressBarMsg", ["loc", [null, [17, 4], [17, 22]]]], ["block", "if", [["get", "hasConfigureHostGroupsError", ["loc", [null, [23, 10], [23, 37]]]]], [], 2, 3, ["loc", [null, [23, 4], [34, 11]]]], ["block", "unless", [["get", "hasConfigureHostGroupsError", ["loc", [null, [36, 14], [36, 41]]]]], [], 4, null, ["loc", [null, [36, 4], [40, 15]]]], ["attribute", "class", ["get", "progressBarClass", ["loc", [null, [44, 17], [44, 33]]]]], ["attribute", "aria-valuenow", ["get", "percentProgressInt", ["loc", [null, [44, 109], [44, 127]]]]], ["attribute", "style", ["get", "styleWidth", ["loc", [null, [44, 138], [44, 148]]]]]],
      locals: [],
      templates: [child0, child1, child2, child3, child4]
    };
  })());
});
define("fusor-ember-cli/templates/components/progress-bar", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 5,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/progress-bar.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode(" ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "col-lg-2 col-md-2 col-sm-3 rhci-review-product-name");
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("h3");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1]), 0, 0);
          return morphs;
        },
        statements: [["content", "name", ["loc", [null, [3, 6], [3, 14]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 8,
              "column": 4
            },
            "end": {
              "line": 10,
              "column": 4
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/progress-bar.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("i");
          dom.setAttribute(el1, "class", "fa fa-check-circle-o green-circle");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode(" \n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 10,
                "column": 4
              },
              "end": {
                "line": 12,
                "column": 4
              }
            },
            "moduleName": "fusor-ember-cli/templates/components/progress-bar.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("i");
            dom.setAttribute(el1, "class", "fa fa-exclamation-triangle errorForValidation");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode(" \n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 12,
                  "column": 4
                },
                "end": {
                  "line": 14,
                  "column": 4
                }
              },
              "moduleName": "fusor-ember-cli/templates/components/progress-bar.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("i");
              dom.setAttribute(el1, "class", "fa fa-exclamation-triangle warningForValidation");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode(" \n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() {
              return [];
            },
            statements: [],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.10",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 14,
                    "column": 4
                  },
                  "end": {
                    "line": 16,
                    "column": 4
                  }
                },
                "moduleName": "fusor-ember-cli/templates/components/progress-bar.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("      ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("div");
                dom.setAttribute(el1, "class", "spinner spinner-xs spinner-inline");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n    ");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes() {
                return [];
              },
              statements: [],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 14,
                  "column": 4
                },
                "end": {
                  "line": 16,
                  "column": 4
                }
              },
              "moduleName": "fusor-ember-cli/templates/components/progress-bar.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "if", [["get", "isStarted", ["loc", [null, [14, 14], [14, 23]]]]], [], 0, null, ["loc", [null, [14, 4], [16, 4]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 12,
                "column": 4
              },
              "end": {
                "line": 16,
                "column": 4
              }
            },
            "moduleName": "fusor-ember-cli/templates/components/progress-bar.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["get", "isStopped", ["loc", [null, [12, 14], [12, 23]]]]], [], 0, 1, ["loc", [null, [12, 4], [16, 4]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 10,
              "column": 4
            },
            "end": {
              "line": 16,
              "column": 4
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/progress-bar.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "isError", ["loc", [null, [10, 14], [10, 21]]]]], [], 0, 1, ["loc", [null, [10, 4], [16, 4]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    var child3 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 22,
                "column": 10
              },
              "end": {
                "line": 22,
                "column": 86
              }
            },
            "moduleName": "fusor-ember-cli/templates/components/progress-bar.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["content", "manageContentTask.humanized_errors", ["loc", [null, [22, 48], [22, 86]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 20,
              "column": 4
            },
            "end": {
              "line": 25,
              "column": 4
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/progress-bar.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "class", "errorForValidation");
          var el2 = dom.createTextNode("\n          ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n          ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(element0, 1, 1);
          morphs[1] = dom.createUnsafeMorphAt(element0, 3, 3);
          return morphs;
        },
        statements: [["block", "link-to", ["review.progress.details"], [], 0, null, ["loc", [null, [22, 10], [22, 98]]]], ["content", "hostErrorInfo", ["loc", [null, [23, 10], [23, 29]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 37,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/progress-bar.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "col-lg-8 col-md-7 col-sm-6");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "progress-bar-label");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "pull-right");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("%\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "progress");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "role", "progressbar");
        dom.setAttribute(el3, "aria-valuemin", "0");
        dom.setAttribute(el3, "aria-valuemax", "100");
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element1 = dom.childAt(fragment, [1]);
        var element2 = dom.childAt(element1, [1]);
        var element3 = dom.childAt(element1, [3, 1]);
        var morphs = new Array(8);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(element2, 1, 1);
        morphs[2] = dom.createMorphAt(element2, 3, 3);
        morphs[3] = dom.createMorphAt(element2, 5, 5);
        morphs[4] = dom.createMorphAt(dom.childAt(element2, [7]), 1, 1);
        morphs[5] = dom.createAttrMorph(element3, 'class');
        morphs[6] = dom.createAttrMorph(element3, 'aria-valuenow');
        morphs[7] = dom.createAttrMorph(element3, 'style');
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["block", "unless", [["get", "isNodeProgressBar", ["loc", [null, [1, 10], [1, 27]]]]], [], 0, null, ["loc", [null, [1, 0], [5, 11]]]], ["block", "if", [["get", "isFinished", ["loc", [null, [8, 10], [8, 20]]]]], [], 1, 2, ["loc", [null, [8, 4], [16, 11]]]], ["content", "progressBarMsg", ["loc", [null, [18, 4], [18, 22]]]], ["block", "if", [["get", "hasHumanizedErrors", ["loc", [null, [20, 10], [20, 28]]]]], [], 3, null, ["loc", [null, [20, 4], [25, 11]]]], ["content", "percentProgress", ["loc", [null, [28, 6], [28, 25]]]], ["attribute", "class", ["get", "progressBarClass", ["loc", [null, [33, 17], [33, 33]]]]], ["attribute", "aria-valuenow", ["get", "percentProgressInt", ["loc", [null, [33, 109], [33, 127]]]]], ["attribute", "style", ["get", "styleWidth", ["loc", [null, [33, 138], [33, 148]]]]]],
      locals: [],
      templates: [child0, child1, child2, child3]
    };
  })());
});
define("fusor-ember-cli/templates/components/radio-button", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 5,
              "column": 0
            },
            "end": {
              "line": 20,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/radio-button.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("label");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(4);
          morphs[0] = dom.createAttrMorph(element0, 'class');
          morphs[1] = dom.createAttrMorph(element0, 'for');
          morphs[2] = dom.createMorphAt(element0, 1, 1);
          morphs[3] = dom.createMorphAt(element0, 3, 3);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", ["ember-radio-button ", ["subexpr", "if", [["get", "checked", ["loc", [null, [6, 40], [6, 47]]]], "checked"], [], ["loc", [null, [6, 35], [6, 59]]]], " ", ["get", "joinedClassNames", ["loc", [null, [6, 62], [6, 78]]]]]]], ["attribute", "for", ["get", "radioId", ["loc", [null, [6, 88], [6, 95]]]]], ["inline", "radio-button-input", [], ["class", ["subexpr", "@mut", [["get", "radioClass", ["loc", [null, [8, 14], [8, 24]]]]], [], []], "id", ["subexpr", "@mut", [["get", "radioId", ["loc", [null, [9, 11], [9, 18]]]]], [], []], "data-qci", ["subexpr", "@mut", [["get", "dataQci", ["loc", [null, [10, 17], [10, 24]]]]], [], []], "disabled", ["subexpr", "@mut", [["get", "disabled", ["loc", [null, [11, 17], [11, 25]]]]], [], []], "name", ["subexpr", "@mut", [["get", "name", ["loc", [null, [12, 13], [12, 17]]]]], [], []], "required", ["subexpr", "@mut", [["get", "required", ["loc", [null, [13, 17], [13, 25]]]]], [], []], "groupValue", ["subexpr", "@mut", [["get", "groupValue", ["loc", [null, [14, 19], [14, 29]]]]], [], []], "value", ["subexpr", "@mut", [["get", "value", ["loc", [null, [15, 14], [15, 19]]]]], [], []], "changed", "changed"], ["loc", [null, [7, 4], [16, 27]]]], ["content", "yield", ["loc", [null, [18, 4], [18, 13]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 20,
              "column": 0
            },
            "end": {
              "line": 31,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/radio-button.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "radio-button-input", [], ["class", ["subexpr", "@mut", [["get", "radioClass", ["loc", [null, [22, 12], [22, 22]]]]], [], []], "id", ["subexpr", "@mut", [["get", "radioId", ["loc", [null, [23, 9], [23, 16]]]]], [], []], "data-qci", ["subexpr", "@mut", [["get", "dataQci", ["loc", [null, [24, 15], [24, 22]]]]], [], []], "disabled", ["subexpr", "@mut", [["get", "disabled", ["loc", [null, [25, 15], [25, 23]]]]], [], []], "name", ["subexpr", "@mut", [["get", "name", ["loc", [null, [26, 11], [26, 15]]]]], [], []], "required", ["subexpr", "@mut", [["get", "required", ["loc", [null, [27, 15], [27, 23]]]]], [], []], "groupValue", ["subexpr", "@mut", [["get", "groupValue", ["loc", [null, [28, 17], [28, 27]]]]], [], []], "value", ["subexpr", "@mut", [["get", "value", ["loc", [null, [29, 12], [29, 17]]]]], [], []], "changed", "changed"], ["loc", [null, [21, 2], [30, 25]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 31,
            "column": 7
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/radio-button.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "hasBlock", ["loc", [null, [5, 6], [5, 14]]]]], [], 0, 1, ["loc", [null, [5, 0], [31, 7]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("fusor-ember-cli/templates/components/range-text-f", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 14,
                  "column": 4
                },
                "end": {
                  "line": 18,
                  "column": 4
                }
              },
              "moduleName": "fusor-ember-cli/templates/components/range-text-f.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("span");
              dom.setAttribute(el1, "class", "error errorForValidation");
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("span");
              dom.setAttribute(el2, "class", "glyphicon glyphicon-warning-sign");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode(" ");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n      ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 3, 3);
              return morphs;
            },
            statements: [["content", "errors.name", ["loc", [null, [16, 63], [16, 78]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 13,
                "column": 2
              },
              "end": {
                "line": 19,
                "column": 2
              }
            },
            "moduleName": "fusor-ember-cli/templates/components/range-text-f.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["get", "errors.name", ["loc", [null, [14, 10], [14, 21]]]]], [], 0, null, ["loc", [null, [14, 4], [18, 11]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 23,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/range-text-f.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("span");
          dom.setAttribute(el2, "style", "float: left;padding-left:5px;padding-right:5px;");
          var el3 = dom.createTextNode(" - ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var element1 = dom.childAt(element0, [1]);
          var element2 = dom.childAt(element0, [5]);
          var morphs = new Array(6);
          morphs[0] = dom.createAttrMorph(element1, 'class');
          morphs[1] = dom.createMorphAt(element1, 1, 1);
          morphs[2] = dom.createAttrMorph(element2, 'class');
          morphs[3] = dom.createMorphAt(element2, 1, 1);
          morphs[4] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          morphs[5] = dom.createMorphAt(fragment, 5, 5, contextualElement);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", [["get", "inputSize", ["loc", [null, [4, 20], [4, 29]]]]]]], ["inline", "input", [], ["class", "form-control", "value", ["subexpr", "@mut", [["get", "value1", ["loc", [null, [5, 43], [5, 49]]]]], [], []], "placeholder", ["subexpr", "@mut", [["get", "placeholder1", ["loc", [null, [5, 62], [5, 74]]]]], [], []], "type", ["subexpr", "@mut", [["get", "typeInput", ["loc", [null, [5, 80], [5, 89]]]]], [], []], "focus-out", "showErrors", "id", ["subexpr", "@mut", [["get", "cssId1", ["loc", [null, [5, 116], [5, 122]]]]], [], []]], ["loc", [null, [5, 8], [5, 124]]]], ["attribute", "class", ["concat", [["get", "inputSize", ["loc", [null, [8, 20], [8, 29]]]]]]], ["inline", "input", [], ["class", "form-control", "value", ["subexpr", "@mut", [["get", "value2", ["loc", [null, [9, 43], [9, 49]]]]], [], []], "placeholder", ["subexpr", "@mut", [["get", "placeholder2", ["loc", [null, [9, 62], [9, 74]]]]], [], []], "type", ["subexpr", "@mut", [["get", "typeInput", ["loc", [null, [9, 80], [9, 89]]]]], [], []], "id", ["subexpr", "@mut", [["get", "cssId2", ["loc", [null, [9, 93], [9, 99]]]]], [], []]], ["loc", [null, [9, 8], [9, 101]]]], ["block", "if", [["get", "showError", ["loc", [null, [13, 8], [13, 17]]]]], [], 0, null, ["loc", [null, [13, 2], [19, 9]]]], ["content", "yield", ["loc", [null, [21, 2], [21, 11]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 25,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/range-text-f.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["block", "base-f", [], ["label", ["subexpr", "@mut", [["get", "label", ["loc", [null, [1, 16], [1, 21]]]]], [], []], "labelSize", ["subexpr", "@mut", [["get", "labelSize", ["loc", [null, [1, 32], [1, 41]]]]], [], []], "inputSize", ["subexpr", "@mut", [["get", "rangeSize", ["loc", [null, [1, 52], [1, 61]]]]], [], []], "unitsSize", ["subexpr", "@mut", [["get", "unitsSize", ["loc", [null, [1, 72], [1, 81]]]]], [], []], "unitsLabel", ["subexpr", "@mut", [["get", "unitsLabel", ["loc", [null, [1, 93], [1, 103]]]]], [], []], "help-inline", ["subexpr", "@mut", [["get", "help-inline", ["loc", [null, [1, 116], [1, 127]]]]], [], []], "errors", ["subexpr", "@mut", [["get", "errors", ["loc", [null, [1, 135], [1, 141]]]]], [], []], "isRequired", ["subexpr", "@mut", [["get", "isRequired", ["loc", [null, [1, 153], [1, 163]]]]], [], []], "helpText", ["subexpr", "@mut", [["get", "helpText", ["loc", [null, [1, 173], [1, 181]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [23, 11]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("fusor-ember-cli/templates/components/review-link", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 7,
              "column": 4
            },
            "end": {
              "line": 9,
              "column": 4
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/review-link.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "class", "spinner spinner-xs spinner-inline");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 12,
                  "column": 12
                },
                "end": {
                  "line": 18,
                  "column": 12
                }
              },
              "moduleName": "fusor-ember-cli/templates/components/review-link.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("              ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("button");
              dom.setAttribute(el1, "class", "pficon fa fa-info-circle rhci-popover-button");
              dom.setAttribute(el1, "data-toggle", "popover");
              var el2 = dom.createTextNode("\n              ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element2 = dom.childAt(fragment, [1]);
              var morphs = new Array(2);
              morphs[0] = dom.createAttrMorph(element2, 'data-content');
              morphs[1] = dom.createElementMorph(element2);
              return morphs;
            },
            statements: [["attribute", "data-content", ["concat", [["get", "helpTextIpAddress", ["loc", [null, [16, 38], [16, 55]]]]]]], ["element", "action", ["doNothing"], ["bubbles", false], ["loc", [null, [13, 22], [13, 58]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 10,
                "column": 8
              },
              "end": {
                "line": 20,
                "column": 8
              }
            },
            "moduleName": "fusor-ember-cli/templates/components/review-link.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("a");
            dom.setAttribute(el1, "target", "_blank");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element3 = dom.childAt(fragment, [1]);
            var morphs = new Array(3);
            morphs[0] = dom.createAttrMorph(element3, 'href');
            morphs[1] = dom.createMorphAt(element3, 0, 0);
            morphs[2] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            return morphs;
          },
          statements: [["attribute", "href", ["get", "value", ["loc", [null, [11, 22], [11, 27]]]]], ["content", "value", ["loc", [null, [11, 46], [11, 55]]]], ["block", "if", [["get", "ipAddress", ["loc", [null, [12, 18], [12, 27]]]]], [], 0, null, ["loc", [null, [12, 12], [18, 19]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.10",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 21,
                    "column": 12
                  },
                  "end": {
                    "line": 23,
                    "column": 12
                  }
                },
                "moduleName": "fusor-ember-cli/templates/components/review-link.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("              ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                return morphs;
              },
              statements: [["content", "yield", ["loc", [null, [22, 14], [22, 23]]]]],
              locals: [],
              templates: []
            };
          })();
          var child1 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.10",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 23,
                    "column": 12
                  },
                  "end": {
                    "line": 25,
                    "column": 12
                  }
                },
                "moduleName": "fusor-ember-cli/templates/components/review-link.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("              ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                return morphs;
              },
              statements: [["content", "valueFormatted", ["loc", [null, [24, 14], [24, 32]]]]],
              locals: [],
              templates: []
            };
          })();
          var child2 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.10",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 26,
                    "column": 12
                  },
                  "end": {
                    "line": 28,
                    "column": 12
                  }
                },
                "moduleName": "fusor-ember-cli/templates/components/review-link.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("i");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element1 = dom.childAt(fragment, [1]);
                var morphs = new Array(2);
                morphs[0] = dom.createAttrMorph(element1, 'class');
                morphs[1] = dom.createElementMorph(element1);
                return morphs;
              },
              statements: [["attribute", "class", ["concat", ["fa ", ["get", "eyeIcon", ["loc", [null, [27, 57], [27, 64]]]]]]], ["element", "action", ["showPassword"], [], ["loc", [null, [27, 19], [27, 44]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 20,
                  "column": 8
                },
                "end": {
                  "line": 29,
                  "column": 8
                }
              },
              "moduleName": "fusor-ember-cli/templates/components/review-link.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(2);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "if", [["get", "useYieldInstead", ["loc", [null, [21, 18], [21, 33]]]]], [], 0, 1, ["loc", [null, [21, 12], [25, 19]]]], ["block", "if", [["get", "isPassword", ["loc", [null, [26, 18], [26, 28]]]]], [], 2, null, ["loc", [null, [26, 12], [28, 19]]]]],
            locals: [],
            templates: [child0, child1, child2]
          };
        })();
        var child1 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "revision": "Ember@1.13.10",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 31,
                      "column": 16
                    },
                    "end": {
                      "line": 33,
                      "column": 16
                    }
                  },
                  "moduleName": "fusor-ember-cli/templates/components/review-link.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("                  ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                  return morphs;
                },
                statements: [["content", "yield", ["loc", [null, [32, 18], [32, 27]]]]],
                locals: [],
                templates: []
              };
            })();
            var child1 = (function () {
              return {
                meta: {
                  "revision": "Ember@1.13.10",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 33,
                      "column": 16
                    },
                    "end": {
                      "line": 35,
                      "column": 16
                    }
                  },
                  "moduleName": "fusor-ember-cli/templates/components/review-link.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("                  ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                  return morphs;
                },
                statements: [["content", "valueFormatted", ["loc", [null, [34, 18], [34, 36]]]]],
                locals: [],
                templates: []
              };
            })();
            return {
              meta: {
                "revision": "Ember@1.13.10",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 30,
                    "column": 12
                  },
                  "end": {
                    "line": 36,
                    "column": 12
                  }
                },
                "moduleName": "fusor-ember-cli/templates/components/review-link.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["block", "if", [["get", "useYieldInstead", ["loc", [null, [31, 22], [31, 37]]]]], [], 0, 1, ["loc", [null, [31, 16], [35, 23]]]]],
              locals: [],
              templates: [child0, child1]
            };
          })();
          var child1 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.10",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 37,
                    "column": 12
                  },
                  "end": {
                    "line": 39,
                    "column": 12
                  }
                },
                "moduleName": "fusor-ember-cli/templates/components/review-link.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                  ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("i");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element0 = dom.childAt(fragment, [1]);
                var morphs = new Array(2);
                morphs[0] = dom.createAttrMorph(element0, 'class');
                morphs[1] = dom.createElementMorph(element0);
                return morphs;
              },
              statements: [["attribute", "class", ["concat", ["fa ", ["get", "eyeIcon", ["loc", [null, [38, 59], [38, 66]]]]]]], ["element", "action", ["showPassword"], [], ["loc", [null, [38, 21], [38, 46]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 29,
                  "column": 8
                },
                "end": {
                  "line": 40,
                  "column": 8
                }
              },
              "moduleName": "fusor-ember-cli/templates/components/review-link.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("        ");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(2);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              dom.insertBoundary(fragment, 0);
              return morphs;
            },
            statements: [["block", "link-to", [["get", "routeName", ["loc", [null, [30, 23], [30, 32]]]]], ["data-qci", ["subexpr", "@mut", [["get", "dataQci", ["loc", [null, [30, 42], [30, 49]]]]], [], []]], 0, null, ["loc", [null, [30, 12], [36, 24]]]], ["block", "if", [["get", "isPassword", ["loc", [null, [37, 18], [37, 28]]]]], [], 1, null, ["loc", [null, [37, 12], [39, 19]]]]],
            locals: [],
            templates: [child0, child1]
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 20,
                "column": 8
              },
              "end": {
                "line": 40,
                "column": 8
              }
            },
            "moduleName": "fusor-ember-cli/templates/components/review-link.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["get", "isNotALink", ["loc", [null, [20, 18], [20, 28]]]]], [], 0, 1, ["loc", [null, [20, 8], [40, 8]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      var child2 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 44,
                  "column": 12
                },
                "end": {
                  "line": 46,
                  "column": 12
                }
              },
              "moduleName": "fusor-ember-cli/templates/components/review-link.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("              ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["content", "validationMessage", ["loc", [null, [45, 14], [45, 35]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 42,
                "column": 8
              },
              "end": {
                "line": 48,
                "column": 8
              }
            },
            "moduleName": "fusor-ember-cli/templates/components/review-link.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            dom.setAttribute(el1, "class", "errorForValidation");
            var el2 = dom.createTextNode("\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("          ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
            return morphs;
          },
          statements: [["block", "link-to", [["get", "routeName", ["loc", [null, [44, 23], [44, 32]]]]], ["data-qci", ["subexpr", "@mut", [["get", "dataQci", ["loc", [null, [44, 42], [44, 49]]]]], [], []]], 0, null, ["loc", [null, [44, 12], [46, 24]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child3 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 52,
                  "column": 12
                },
                "end": {
                  "line": 54,
                  "column": 12
                }
              },
              "moduleName": "fusor-ember-cli/templates/components/review-link.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("              ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["content", "defaultMessage", ["loc", [null, [53, 14], [53, 32]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 50,
                "column": 8
              },
              "end": {
                "line": 56,
                "column": 8
              }
            },
            "moduleName": "fusor-ember-cli/templates/components/review-link.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            dom.setAttribute(el1, "class", "defaultValue");
            var el2 = dom.createTextNode("\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("          ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
            return morphs;
          },
          statements: [["block", "link-to", [["get", "routeName", ["loc", [null, [52, 23], [52, 32]]]]], ["data-qci", ["subexpr", "@mut", [["get", "dataQci", ["loc", [null, [52, 42], [52, 49]]]]], [], []]], 0, null, ["loc", [null, [52, 12], [54, 24]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 9,
              "column": 4
            },
            "end": {
              "line": 57,
              "column": 4
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/review-link.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
          morphs[2] = dom.createMorphAt(fragment, 4, 4, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "isExternalURL", ["loc", [null, [10, 14], [10, 27]]]]], [], 0, 1, ["loc", [null, [10, 8], [40, 15]]]], ["block", "if", [["get", "showValidationMessage", ["loc", [null, [42, 14], [42, 35]]]]], [], 2, null, ["loc", [null, [42, 8], [48, 15]]]], ["block", "if", [["get", "showDefaultMessage", ["loc", [null, [50, 14], [50, 32]]]]], [], 3, null, ["loc", [null, [50, 8], [56, 15]]]]],
        locals: [],
        templates: [child0, child1, child2, child3]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 59,
            "column": 6
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/review-link.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "col-xs-6 col-sm-6 col-md-4 col-lg-3 text-right bold");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "col-xs-6 col-sm-6 col-md-8 col-lg-9");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element4 = dom.childAt(fragment, [0]);
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(element4, [1]), 1, 1);
        morphs[1] = dom.createMorphAt(dom.childAt(element4, [3]), 1, 1);
        return morphs;
      },
      statements: [["content", "label", ["loc", [null, [3, 4], [3, 13]]]], ["block", "if", [["get", "isLoading", ["loc", [null, [7, 10], [7, 19]]]]], [], 0, 1, ["loc", [null, [7, 4], [57, 11]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("fusor-ember-cli/templates/components/rhci-item", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 17,
              "column": 10
            },
            "end": {
              "line": 19,
              "column": 10
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/rhci-item.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("i");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(1);
          morphs[0] = dom.createAttrMorph(element0, 'class');
          return morphs;
        },
        statements: [["attribute", "class", ["concat", ["fa fa-info-circle ", ["subexpr", "if", [["get", "isDisabled", ["loc", [null, [18, 45], [18, 55]]]], "disabled"], [], ["loc", [null, [18, 40], [18, 68]]]]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 23,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/rhci-item.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("span");
        var el2 = dom.createTextNode("\n      ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "col-md-1 product-item-checkbox");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n      ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "col-md-9");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "product-item-name");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("span");
        var el5 = dom.createTextNode("\n              ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "product-item-tagline");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("span");
        var el5 = dom.createTextNode("\n              ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element1 = dom.childAt(fragment, [0]);
        var element2 = dom.childAt(element1, [3]);
        var element3 = dom.childAt(element2, [1, 1]);
        var element4 = dom.childAt(element2, [3]);
        var element5 = dom.childAt(element4, [1]);
        var morphs = new Array(7);
        morphs[0] = dom.createAttrMorph(element1, 'id');
        morphs[1] = dom.createMorphAt(dom.childAt(element1, [1]), 1, 1);
        morphs[2] = dom.createAttrMorph(element3, 'class');
        morphs[3] = dom.createMorphAt(element3, 1, 1);
        morphs[4] = dom.createAttrMorph(element5, 'class');
        morphs[5] = dom.createMorphAt(element5, 1, 1);
        morphs[6] = dom.createMorphAt(element4, 3, 3);
        return morphs;
      },
      statements: [["attribute", "id", ["concat", [["get", "cssId", ["loc", [null, [1, 12], [1, 17]]]]]]], ["inline", "input", [], ["type", "checkbox", "name", "isChecked", "checked", ["subexpr", "@mut", [["get", "isChecked", ["loc", [null, [3, 57], [3, 66]]]]], [], []], "disabled", ["subexpr", "@mut", [["get", "isDisabled", ["loc", [null, [3, 76], [3, 86]]]]], [], []], "data-qci", ["subexpr", "@mut", [["get", "cssId", ["loc", [null, [3, 96], [3, 101]]]]], [], []]], ["loc", [null, [3, 8], [3, 103]]]], ["attribute", "class", ["concat", [["subexpr", "if", [["get", "isDisabled", ["loc", [null, [8, 30], [8, 40]]]], "disabled"], [], ["loc", [null, [8, 25], [8, 53]]]]]]], ["content", "name", ["loc", [null, [9, 14], [9, 22]]]], ["attribute", "class", ["concat", [["subexpr", "if", [["get", "isDisabled", ["loc", [null, [13, 30], [13, 40]]]], "disabled"], [], ["loc", [null, [13, 25], [13, 53]]]]]]], ["content", "tagline", ["loc", [null, [14, 14], [14, 25]]]], ["block", "tool-tip", [], ["title", ["subexpr", "@mut", [["get", "desc", ["loc", [null, [17, 28], [17, 32]]]]], [], []]], 0, null, ["loc", [null, [17, 10], [19, 23]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("fusor-ember-cli/templates/components/rhci-start", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 26,
              "column": 4
            },
            "end": {
              "line": 28,
              "column": 4
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/rhci-start.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "partial", ["req-rhev"], [], ["loc", [null, [27, 6], [27, 28]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 30,
              "column": 4
            },
            "end": {
              "line": 32,
              "column": 4
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/rhci-start.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "partial", ["req-openstack"], [], ["loc", [null, [31, 6], [31, 33]]]]],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 34,
              "column": 4
            },
            "end": {
              "line": 36,
              "column": 4
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/rhci-start.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "partial", ["req-cloudforms"], [], ["loc", [null, [35, 6], [35, 34]]]]],
        locals: [],
        templates: []
      };
    })();
    var child3 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 38,
              "column": 4
            },
            "end": {
              "line": 40,
              "column": 4
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/rhci-start.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "partial", ["req-openshift"], [], ["loc", [null, [39, 6], [39, 33]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 59,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/rhci-start.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h1");
        var el2 = dom.createTextNode("Select Product(s) to Deploy");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "col-md-4");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("strong");
        var el3 = dom.createTextNode("Choose at least one:");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("br");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("strong");
        var el4 = dom.createTextNode("Optionally, choose:");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "col-md-4");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("strong");
        var el3 = dom.createTextNode("To deploy the selected products, you will need:");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "req-block");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "download-reqs");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("a");
        dom.setAttribute(el3, "download", "");
        dom.setAttribute(el3, "href", "/fusor_ui/files/QCI_Requirements.txt");
        dom.setAttribute(el3, "target", "_blank");
        dom.setAttribute(el3, "data-qci", "download-reqs");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("span");
        dom.setAttribute(el4, "class", "pficon pficon-save");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      Download these requirements\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [8]);
        var element1 = dom.childAt(fragment, [10]);
        var element2 = dom.childAt(element1, [3]);
        var morphs = new Array(11);
        morphs[0] = dom.createMorphAt(element0, 3, 3);
        morphs[1] = dom.createMorphAt(element0, 5, 5);
        morphs[2] = dom.createMorphAt(element0, 11, 11);
        morphs[3] = dom.createMorphAt(element0, 13, 13);
        morphs[4] = dom.createMorphAt(element2, 1, 1);
        morphs[5] = dom.createMorphAt(element2, 3, 3);
        morphs[6] = dom.createMorphAt(element2, 5, 5);
        morphs[7] = dom.createMorphAt(element2, 7, 7);
        morphs[8] = dom.createMorphAt(element2, 9, 9);
        morphs[9] = dom.createMorphAt(element2, 11, 11);
        morphs[10] = dom.createMorphAt(element1, 7, 7);
        return morphs;
      },
      statements: [["inline", "rhci-item", [], ["isChecked", ["subexpr", "@mut", [["get", "isRhev", ["loc", [null, [9, 24], [9, 30]]]]], [], []], "name", ["subexpr", "@mut", [["get", "fullnameRhev", ["loc", [null, [9, 36], [9, 48]]]]], [], []], "tagline", ["subexpr", "@mut", [["get", "taglineRhev", ["loc", [null, [9, 57], [9, 68]]]]], [], []], "desc", ["subexpr", "@mut", [["get", "descRhev", ["loc", [null, [9, 74], [9, 82]]]]], [], []], "cssId", "is_rhev"], ["loc", [null, [9, 2], [9, 100]]]], ["inline", "rhci-item", [], ["isChecked", ["subexpr", "@mut", [["get", "isOpenStack", ["loc", [null, [10, 24], [10, 35]]]]], [], []], "name", ["subexpr", "@mut", [["get", "fullnameOpenStack", ["loc", [null, [10, 41], [10, 58]]]]], [], []], "tagline", ["subexpr", "@mut", [["get", "taglineOpenStack", ["loc", [null, [10, 67], [10, 83]]]]], [], []], "desc", ["subexpr", "@mut", [["get", "descOpenStack", ["loc", [null, [10, 89], [10, 102]]]]], [], []], "cssId", "is_openstack"], ["loc", [null, [10, 2], [10, 126]]]], ["inline", "rhci-item", [], ["isChecked", ["subexpr", "@mut", [["get", "isCloudForms", ["loc", [null, [16, 24], [16, 36]]]]], [], []], "name", ["subexpr", "@mut", [["get", "fullnameCloudForms", ["loc", [null, [16, 42], [16, 60]]]]], [], []], "tagline", ["subexpr", "@mut", [["get", "taglineCloudForms", ["loc", [null, [16, 69], [16, 86]]]]], [], []], "desc", ["subexpr", "@mut", [["get", "descCloudForms", ["loc", [null, [16, 92], [16, 106]]]]], [], []], "cssId", "is_cloudforms", "isDisabled", ["subexpr", "@mut", [["get", "isDisabledCfme", ["loc", [null, [16, 140], [16, 154]]]]], [], []]], ["loc", [null, [16, 2], [16, 157]]]], ["inline", "rhci-item", [], ["isChecked", ["subexpr", "@mut", [["get", "isOpenShift", ["loc", [null, [17, 24], [17, 35]]]]], [], []], "name", ["subexpr", "@mut", [["get", "fullnameOpenShift", ["loc", [null, [17, 41], [17, 58]]]]], [], []], "tagline", ["subexpr", "@mut", [["get", "taglineOpenShift", ["loc", [null, [17, 67], [17, 83]]]]], [], []], "desc", ["subexpr", "@mut", [["get", "descOpenShift", ["loc", [null, [17, 89], [17, 102]]]]], [], []], "cssId", "is_openshift", "isDisabled", ["subexpr", "@mut", [["get", "isDisabledOpenShift", ["loc", [null, [17, 135], [17, 154]]]]], [], []]], ["loc", [null, [17, 2], [17, 157]]]], ["inline", "partial", ["req-general"], [], ["loc", [null, [24, 4], [24, 29]]]], ["block", "if", [["get", "isRhev", ["loc", [null, [26, 10], [26, 16]]]]], [], 0, null, ["loc", [null, [26, 4], [28, 11]]]], ["block", "if", [["get", "isOpenStack", ["loc", [null, [30, 10], [30, 21]]]]], [], 1, null, ["loc", [null, [30, 4], [32, 11]]]], ["block", "if", [["get", "isCloudForms", ["loc", [null, [34, 10], [34, 22]]]]], [], 2, null, ["loc", [null, [34, 4], [36, 11]]]], ["block", "if", [["get", "isOpenShift", ["loc", [null, [38, 10], [38, 21]]]]], [], 3, null, ["loc", [null, [38, 4], [40, 11]]]], ["inline", "partial", ["req-disconnected"], [], ["loc", [null, [42, 4], [42, 34]]]], ["inline", "cancel-back-next", [], ["nextRouteName", ["subexpr", "@mut", [["get", "satelliteTabRouteName", ["loc", [null, [52, 36], [52, 57]]]]], [], []], "disableNext", ["subexpr", "@mut", [["get", "disableNextOnStart", ["loc", [null, [53, 34], [53, 52]]]]], [], []], "disableCancel", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [54, 36], [54, 45]]]]], [], []], "deploymentName", ["subexpr", "@mut", [["get", "deploymentName", ["loc", [null, [55, 37], [55, 51]]]]], [], []], "isNew", ["subexpr", "@mut", [["get", "isNew", ["loc", [null, [56, 28], [56, 33]]]]], [], []], "bottomBar", false], ["loc", [null, [52, 2], [57, 39]]]]],
      locals: [],
      templates: [child0, child1, child2, child3]
    };
  })());
});
define("fusor-ember-cli/templates/components/rhci-wizard", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 8,
              "column": 2
            },
            "end": {
              "line": 10,
              "column": 2
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/rhci-wizard.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "wizard-item", [], ["num", ["subexpr", "@mut", [["get", "stepNumberRhev", ["loc", [null, [9, 22], [9, 36]]]]], [], []], "name", ["subexpr", "@mut", [["get", "nameRhev", ["loc", [null, [9, 42], [9, 50]]]]], [], []], "routeName", "rhev", "isDisabled", ["subexpr", "@mut", [["get", "isDisabledRhev", ["loc", [null, [9, 79], [9, 93]]]]], [], []], "currentStepNumber", ["subexpr", "@mut", [["get", "currentStepNumber", ["loc", [null, [9, 112], [9, 129]]]]], [], []], "fullname", ["subexpr", "@mut", [["get", "fullnameRhev", ["loc", [null, [9, 139], [9, 151]]]]], [], []]], ["loc", [null, [9, 4], [9, 153]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 12,
              "column": 2
            },
            "end": {
              "line": 14,
              "column": 2
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/rhci-wizard.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "wizard-item", [], ["num", ["subexpr", "@mut", [["get", "stepNumberOpenstack", ["loc", [null, [13, 22], [13, 41]]]]], [], []], "name", ["subexpr", "@mut", [["get", "nameOpenStack", ["loc", [null, [13, 47], [13, 60]]]]], [], []], "routeName", "openstack", "isDisabled", ["subexpr", "@mut", [["get", "isDisabledOpenstack", ["loc", [null, [13, 94], [13, 113]]]]], [], []], "currentStepNumber", ["subexpr", "@mut", [["get", "currentStepNumber", ["loc", [null, [13, 132], [13, 149]]]]], [], []], "fullname", ["subexpr", "@mut", [["get", "fullnameOpenStack", ["loc", [null, [13, 159], [13, 176]]]]], [], []]], ["loc", [null, [13, 4], [13, 178]]]]],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 16,
              "column": 2
            },
            "end": {
              "line": 18,
              "column": 2
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/rhci-wizard.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "wizard-item", [], ["num", ["subexpr", "@mut", [["get", "stepNumberOpenShift", ["loc", [null, [17, 22], [17, 41]]]]], [], []], "name", ["subexpr", "@mut", [["get", "nameOpenShift", ["loc", [null, [17, 47], [17, 60]]]]], [], []], "routeName", "openshift", "isDisabled", ["subexpr", "@mut", [["get", "isDisabledOpenShift", ["loc", [null, [17, 94], [17, 113]]]]], [], []], "currentStepNumber", ["subexpr", "@mut", [["get", "currentStepNumber", ["loc", [null, [17, 132], [17, 149]]]]], [], []], "fullname", ["subexpr", "@mut", [["get", "fullnameOpenShift", ["loc", [null, [17, 159], [17, 176]]]]], [], []]], ["loc", [null, [17, 4], [17, 178]]]]],
        locals: [],
        templates: []
      };
    })();
    var child3 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 20,
              "column": 2
            },
            "end": {
              "line": 22,
              "column": 2
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/rhci-wizard.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "wizard-item", [], ["num", ["subexpr", "@mut", [["get", "stepNumberCloudForms", ["loc", [null, [21, 22], [21, 42]]]]], [], []], "name", ["subexpr", "@mut", [["get", "nameCloudForms", ["loc", [null, [21, 48], [21, 62]]]]], [], []], "routeName", "cloudforms", "isDisabled", ["subexpr", "@mut", [["get", "isDisabledCloudForms", ["loc", [null, [21, 97], [21, 117]]]]], [], []], "currentStepNumber", ["subexpr", "@mut", [["get", "currentStepNumber", ["loc", [null, [21, 136], [21, 153]]]]], [], []], "fullname", ["subexpr", "@mut", [["get", "fullnameCloudForms", ["loc", [null, [21, 163], [21, 181]]]]], [], []]], ["loc", [null, [21, 4], [21, 183]]]]],
        locals: [],
        templates: []
      };
    })();
    var child4 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 24,
              "column": 2
            },
            "end": {
              "line": 27,
              "column": 2
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/rhci-wizard.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "wizard-item", [], ["num", ["subexpr", "@mut", [["get", "stepNumberSubscriptions", ["loc", [null, [25, 22], [25, 45]]]]], [], []], "name", "Subscriptions", "routeName", "subscriptions", "isDisabled", ["subexpr", "@mut", [["get", "isDisabledSubscriptions", ["loc", [null, [26, 15], [26, 38]]]]], [], []], "currentStepNumber", ["subexpr", "@mut", [["get", "currentStepNumber", ["loc", [null, [26, 57], [26, 74]]]]], [], []]], ["loc", [null, [25, 4], [26, 76]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 31,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/rhci-wizard.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h1");
        var el2 = dom.createTextNode("New ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(" Deployment: ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("span");
        dom.setAttribute(el2, "class", "edit-deployment");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("ul");
        dom.setAttribute(el1, "class", "rhci-steps");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var element1 = dom.childAt(fragment, [4]);
        var morphs = new Array(11);
        morphs[0] = dom.createMorphAt(element0, 1, 1);
        morphs[1] = dom.createMorphAt(element0, 3, 3);
        morphs[2] = dom.createMorphAt(dom.childAt(element0, [5]), 0, 0);
        morphs[3] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[4] = dom.createMorphAt(element1, 1, 1);
        morphs[5] = dom.createMorphAt(element1, 3, 3);
        morphs[6] = dom.createMorphAt(element1, 5, 5);
        morphs[7] = dom.createMorphAt(element1, 7, 7);
        morphs[8] = dom.createMorphAt(element1, 9, 9);
        morphs[9] = dom.createMorphAt(element1, 11, 11);
        morphs[10] = dom.createMorphAt(element1, 13, 13);
        return morphs;
      },
      statements: [["content", "nameRHCI", ["loc", [null, [1, 8], [1, 20]]]], ["content", "name", ["loc", [null, [1, 33], [1, 41]]]], ["inline", "link-to", ["edit product selection", ["get", "routeNameStart", ["loc", [null, [1, 107], [1, 121]]]]], ["data-qci", "edit-deployment-products"], ["loc", [null, [1, 72], [1, 159]]]], ["inline", "error-message", [], ["errorMsg", ["subexpr", "@mut", [["get", "errorMsg", ["loc", [null, [3, 25], [3, 33]]]]], [], []]], ["loc", [null, [3, 0], [3, 35]]]], ["inline", "wizard-item", [], ["num", 1, "name", ["subexpr", "@mut", [["get", "nameSatellite", ["loc", [null, [6, 27], [6, 40]]]]], [], []], "routeName", ["subexpr", "@mut", [["get", "routeNameSatellite", ["loc", [null, [6, 51], [6, 69]]]]], [], []], "isDisabled", false, "currentStepNumber", ["subexpr", "@mut", [["get", "currentStepNumber", ["loc", [null, [6, 105], [6, 122]]]]], [], []]], ["loc", [null, [6, 2], [6, 124]]]], ["block", "if", [["get", "isRhev", ["loc", [null, [8, 8], [8, 14]]]]], [], 0, null, ["loc", [null, [8, 2], [10, 9]]]], ["block", "if", [["get", "isOpenStack", ["loc", [null, [12, 8], [12, 19]]]]], [], 1, null, ["loc", [null, [12, 2], [14, 9]]]], ["block", "if", [["get", "isOpenShift", ["loc", [null, [16, 8], [16, 19]]]]], [], 2, null, ["loc", [null, [16, 2], [18, 9]]]], ["block", "if", [["get", "isCloudForms", ["loc", [null, [20, 8], [20, 20]]]]], [], 3, null, ["loc", [null, [20, 2], [22, 9]]]], ["block", "if", [["get", "isSubscriptions", ["loc", [null, [24, 8], [24, 23]]]]], [], 4, null, ["loc", [null, [24, 2], [27, 9]]]], ["inline", "wizard-item", [], ["num", ["subexpr", "@mut", [["get", "stepNumberReview", ["loc", [null, [29, 20], [29, 36]]]]], [], []], "name", "Review", "routeName", "review", "isDisabled", ["subexpr", "@mut", [["get", "isDisabledReview", ["loc", [null, [29, 81], [29, 97]]]]], [], []], "currentStepNumber", ["subexpr", "@mut", [["get", "currentStepNumber", ["loc", [null, [29, 116], [29, 133]]]]], [], []]], ["loc", [null, [29, 2], [29, 135]]]]],
      locals: [],
      templates: [child0, child1, child2, child3, child4]
    };
  })());
});
define("fusor-ember-cli/templates/components/select-f", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.10",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 5,
                    "column": 6
                  },
                  "end": {
                    "line": 5,
                    "column": 46
                  }
                },
                "moduleName": "fusor-ember-cli/templates/components/select-f.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["content", "opt.name", ["loc", [null, [5, 34], [5, 46]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 4,
                  "column": 4
                },
                "end": {
                  "line": 6,
                  "column": 4
                }
              },
              "moduleName": "fusor-ember-cli/templates/components/select-f.hbs"
            },
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["block", "x-option", [], ["value", ["subexpr", "@mut", [["get", "opt.name", ["loc", [null, [5, 24], [5, 32]]]]], [], []]], 0, null, ["loc", [null, [5, 6], [5, 59]]]]],
            locals: ["opt"],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 3,
                "column": 2
              },
              "end": {
                "line": 7,
                "column": 2
              }
            },
            "moduleName": "fusor-ember-cli/templates/components/select-f.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "each", [["get", "content", ["loc", [null, [4, 12], [4, 19]]]]], [], 0, null, ["loc", [null, [4, 4], [6, 13]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 11,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/select-f.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          return morphs;
        },
        statements: [["block", "x-select", [], ["value", ["subexpr", "@mut", [["get", "value", ["loc", [null, [3, 20], [3, 25]]]]], [], []], "prompt", ["subexpr", "@mut", [["get", "prompt", ["loc", [null, [3, 33], [3, 39]]]]], [], []], "class", "form-control", "id", ["subexpr", "@mut", [["get", "cssId", ["loc", [null, [3, 64], [3, 69]]]]], [], []], "data-qci", ["subexpr", "@mut", [["get", "cssId", ["loc", [null, [3, 79], [3, 84]]]]], [], []], "disabled", ["subexpr", "@mut", [["get", "disabled", ["loc", [null, [3, 94], [3, 102]]]]], [], []]], 0, null, ["loc", [null, [3, 2], [7, 15]]]], ["content", "yield", ["loc", [null, [9, 2], [9, 11]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 12,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/select-f.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "base-f", [], ["label", ["subexpr", "@mut", [["get", "label", ["loc", [null, [1, 16], [1, 21]]]]], [], []], "labelSize", ["subexpr", "@mut", [["get", "labelSize", ["loc", [null, [1, 32], [1, 41]]]]], [], []], "inputSize", ["subexpr", "@mut", [["get", "inputSize", ["loc", [null, [1, 52], [1, 61]]]]], [], []], "unitsSize", ["subexpr", "@mut", [["get", "unitsSize", ["loc", [null, [1, 72], [1, 81]]]]], [], []], "unitsLabel", ["subexpr", "@mut", [["get", "unitsLabel", ["loc", [null, [1, 93], [1, 103]]]]], [], []], "isRequired", ["subexpr", "@mut", [["get", "isRequired", ["loc", [null, [1, 115], [1, 125]]]]], [], []], "helpText", ["subexpr", "@mut", [["get", "helpText", ["loc", [null, [1, 135], [1, 143]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [11, 11]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("fusor-ember-cli/templates/components/select-req-f", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.10",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 5,
                    "column": 6
                  },
                  "end": {
                    "line": 5,
                    "column": 48
                  }
                },
                "moduleName": "fusor-ember-cli/templates/components/select-req-f.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["content", "opt.label", ["loc", [null, [5, 35], [5, 48]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 4,
                  "column": 4
                },
                "end": {
                  "line": 6,
                  "column": 4
                }
              },
              "moduleName": "fusor-ember-cli/templates/components/select-req-f.hbs"
            },
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["block", "x-option", [], ["value", ["subexpr", "@mut", [["get", "opt.value", ["loc", [null, [5, 24], [5, 33]]]]], [], []]], 0, null, ["loc", [null, [5, 6], [5, 61]]]]],
            locals: ["opt"],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 3,
                "column": 2
              },
              "end": {
                "line": 7,
                "column": 2
              }
            },
            "moduleName": "fusor-ember-cli/templates/components/select-req-f.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "each", [["get", "content", ["loc", [null, [4, 12], [4, 19]]]]], [], 0, null, ["loc", [null, [4, 4], [6, 13]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.10",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 11,
                    "column": 6
                  },
                  "end": {
                    "line": 13,
                    "column": 6
                  }
                },
                "moduleName": "fusor-ember-cli/templates/components/select-req-f.hbs"
              },
              arity: 1,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("p");
                dom.setAttribute(el1, "class", "error errorForValidation");
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
                return morphs;
              },
              statements: [["content", "message", ["loc", [null, [12, 44], [12, 55]]]]],
              locals: ["message"],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 10,
                  "column": 4
                },
                "end": {
                  "line": 14,
                  "column": 4
                }
              },
              "moduleName": "fusor-ember-cli/templates/components/select-req-f.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "each", [["get", "validationMessages", ["loc", [null, [11, 14], [11, 32]]]]], [], 0, null, ["loc", [null, [11, 6], [13, 15]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 9,
                "column": 2
              },
              "end": {
                "line": 15,
                "column": 2
              }
            },
            "moduleName": "fusor-ember-cli/templates/components/select-req-f.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["get", "hasError", ["loc", [null, [10, 10], [10, 18]]]]], [], 0, null, ["loc", [null, [10, 4], [14, 11]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 19,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/select-req-f.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
          return morphs;
        },
        statements: [["block", "x-select", [], ["value", ["subexpr", "@mut", [["get", "value", ["loc", [null, [3, 20], [3, 25]]]]], [], []], "class", "form-control", "disabled", ["subexpr", "@mut", [["get", "disabled", ["loc", [null, [3, 56], [3, 64]]]]], [], []], "id", ["subexpr", "@mut", [["get", "cssId", ["loc", [null, [3, 68], [3, 73]]]]], [], []], "data-qci", ["subexpr", "@mut", [["get", "cssId", ["loc", [null, [3, 83], [3, 88]]]]], [], []]], 0, null, ["loc", [null, [3, 2], [7, 15]]]], ["block", "if", [["get", "showValidationError", ["loc", [null, [9, 8], [9, 27]]]]], [], 1, null, ["loc", [null, [9, 2], [15, 9]]]], ["content", "yield", ["loc", [null, [17, 2], [17, 11]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 20,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/select-req-f.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "base-f", [], ["label", ["subexpr", "@mut", [["get", "label", ["loc", [null, [1, 16], [1, 21]]]]], [], []], "labelSize", ["subexpr", "@mut", [["get", "labelSize", ["loc", [null, [1, 32], [1, 41]]]]], [], []], "inputSize", ["subexpr", "@mut", [["get", "inputSize", ["loc", [null, [1, 52], [1, 61]]]]], [], []], "unitsSize", ["subexpr", "@mut", [["get", "unitsSize", ["loc", [null, [1, 72], [1, 81]]]]], [], []], "unitsLabel", ["subexpr", "@mut", [["get", "unitsLabel", ["loc", [null, [1, 93], [1, 103]]]]], [], []], "isRequired", ["subexpr", "@mut", [["get", "isRequired", ["loc", [null, [1, 115], [1, 125]]]]], [], []], "helpText", ["subexpr", "@mut", [["get", "helpText", ["loc", [null, [1, 135], [1, 143]]]]], [], []], "errors", ["subexpr", "@mut", [["get", "errors", ["loc", [null, [1, 151], [1, 157]]]]], [], []], "hasError", ["subexpr", "@mut", [["get", "hasError", ["loc", [null, [1, 167], [1, 175]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [19, 11]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("fusor-ember-cli/templates/components/select-simple-f", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 3,
                "column": 2
              },
              "end": {
                "line": 11,
                "column": 2
              }
            },
            "moduleName": "fusor-ember-cli/templates/components/select-simple-f.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["content", "name", ["loc", [null, [10, 4], [10, 12]]]]],
          locals: ["name"],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 15,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/select-simple-f.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          return morphs;
        },
        statements: [["block", "power-select", [], ["options", ["subexpr", "@mut", [["get", "content", ["loc", [null, [3, 26], [3, 33]]]]], [], []], "selected", ["subexpr", "@mut", [["get", "value", ["loc", [null, [4, 27], [4, 32]]]]], [], []], "placeholder", ["subexpr", "@mut", [["get", "prompt", ["loc", [null, [5, 30], [5, 36]]]]], [], []], "disabled", ["subexpr", "@mut", [["get", "disabled", ["loc", [null, [6, 27], [6, 35]]]]], [], []], "data-qci", ["subexpr", "@mut", [["get", "cssId", ["loc", [null, [7, 27], [7, 32]]]]], [], []], "renderInPlace", ["subexpr", "@mut", [["get", "renderInPlace", ["loc", [null, [8, 32], [8, 45]]]]], [], []], "onchange", ["subexpr", "action", ["setValue"], [], ["loc", [null, [9, 27], [9, 46]]]]], 0, null, ["loc", [null, [3, 2], [11, 19]]]], ["content", "yield", ["loc", [null, [13, 2], [13, 11]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 16,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/select-simple-f.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "base-f", [], ["label", ["subexpr", "@mut", [["get", "label", ["loc", [null, [1, 16], [1, 21]]]]], [], []], "labelSize", ["subexpr", "@mut", [["get", "labelSize", ["loc", [null, [1, 32], [1, 41]]]]], [], []], "inputSize", ["subexpr", "@mut", [["get", "inputSize", ["loc", [null, [1, 52], [1, 61]]]]], [], []], "unitsSize", ["subexpr", "@mut", [["get", "unitsSize", ["loc", [null, [1, 72], [1, 81]]]]], [], []], "unitsLabel", ["subexpr", "@mut", [["get", "unitsLabel", ["loc", [null, [1, 93], [1, 103]]]]], [], []], "isRequired", ["subexpr", "@mut", [["get", "isRequired", ["loc", [null, [1, 115], [1, 125]]]]], [], []], "helpText", ["subexpr", "@mut", [["get", "helpText", ["loc", [null, [1, 135], [1, 143]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [15, 11]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("fusor-ember-cli/templates/components/simple-text-f", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 7,
                "column": 4
              },
              "end": {
                "line": 9,
                "column": 4
              }
            },
            "moduleName": "fusor-ember-cli/templates/components/simple-text-f.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "error errorForValidation");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
            return morphs;
          },
          statements: [["content", "message", ["loc", [null, [8, 46], [8, 57]]]]],
          locals: ["message"],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 6,
              "column": 2
            },
            "end": {
              "line": 10,
              "column": 2
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/simple-text-f.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "each", [["get", "validationMessages", ["loc", [null, [7, 12], [7, 30]]]]], [], 0, null, ["loc", [null, [7, 4], [9, 13]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 12,
            "column": 6
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/simple-text-f.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var morphs = new Array(4);
        morphs[0] = dom.createAttrMorph(element0, 'class');
        morphs[1] = dom.createMorphAt(element0, 1, 1);
        morphs[2] = dom.createMorphAt(element0, 3, 3);
        morphs[3] = dom.createMorphAt(element0, 5, 5);
        return morphs;
      },
      statements: [["attribute", "class", ["concat", ["form-group simple-text-error ", ["subexpr", "if", [["get", "hasError", ["loc", [null, [1, 46], [1, 54]]]], "has-error"], [], ["loc", [null, [1, 41], [1, 68]]]]]]], ["inline", "input", [], ["class", ["subexpr", "@mut", [["get", "cssFormClass", ["loc", [null, [3, 16], [3, 28]]]]], [], []], "value", ["subexpr", "@mut", [["get", "value", ["loc", [null, [3, 35], [3, 40]]]]], [], []], "placeholder", ["subexpr", "@mut", [["get", "placeholder", ["loc", [null, [3, 53], [3, 64]]]]], [], []], "type", ["subexpr", "@mut", [["get", "typeInput", ["loc", [null, [3, 70], [3, 79]]]]], [], []], "focus-out", "showValidationErrors", "id", ["subexpr", "@mut", [["get", "cssId", ["loc", [null, [3, 116], [3, 121]]]]], [], []], "data-qci", ["subexpr", "@mut", [["get", "cssId", ["loc", [null, [3, 131], [3, 136]]]]], [], []], "disabled", ["subexpr", "@mut", [["get", "disabled", ["loc", [null, [3, 146], [3, 154]]]]], [], []], "autocomplete", "off", "maxlength", "250", "class", "form-control ose-custom-input"], ["loc", [null, [3, 2], [4, 57]]]], ["content", "suffix", ["loc", [null, [4, 58], [4, 68]]]], ["block", "if", [["get", "showValidationError", ["loc", [null, [6, 8], [6, 27]]]]], [], 0, null, ["loc", [null, [6, 2], [10, 9]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("fusor-ember-cli/templates/components/sortable-objects", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 9
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/sortable-objects.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["content", "yield", ["loc", [null, [1, 0], [1, 9]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("fusor-ember-cli/templates/components/step-number", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 3,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/step-number.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["content", "value", ["loc", [null, [1, 0], [1, 9]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("fusor-ember-cli/templates/components/text-f", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 15,
                "column": 2
              },
              "end": {
                "line": 17,
                "column": 2
              }
            },
            "moduleName": "fusor-ember-cli/templates/components/text-f.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("i");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createAttrMorph(element0, 'class');
            morphs[1] = dom.createElementMorph(element0);
            return morphs;
          },
          statements: [["attribute", "class", ["concat", ["fa ", ["get", "eyeIcon", ["loc", [null, [16, 45], [16, 52]]]], " eye-icon"]]], ["element", "action", ["showPassword"], [], ["loc", [null, [16, 7], [16, 32]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 20,
                  "column": 4
                },
                "end": {
                  "line": 22,
                  "column": 4
                }
              },
              "moduleName": "fusor-ember-cli/templates/components/text-f.hbs"
            },
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("p");
              dom.setAttribute(el1, "class", "error errorForValidation");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
              return morphs;
            },
            statements: [["content", "message", ["loc", [null, [21, 42], [21, 53]]]]],
            locals: ["message"],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 19,
                "column": 2
              },
              "end": {
                "line": 25,
                "column": 2
              }
            },
            "moduleName": "fusor-ember-cli/templates/components/text-f.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("p");
            dom.setAttribute(el1, "class", "error errorForValidation");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 0, 0);
            dom.insertBoundary(fragment, 0);
            return morphs;
          },
          statements: [["block", "each", [["get", "validationMessages", ["loc", [null, [20, 12], [20, 30]]]]], [], 0, null, ["loc", [null, [20, 4], [22, 13]]]], ["content", "errors.name", ["loc", [null, [24, 40], [24, 55]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 29,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/text-f.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(6);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
          morphs[2] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          morphs[3] = dom.createMorphAt(fragment, 5, 5, contextualElement);
          morphs[4] = dom.createMorphAt(fragment, 7, 7, contextualElement);
          morphs[5] = dom.createMorphAt(fragment, 9, 9, contextualElement);
          return morphs;
        },
        statements: [["content", "preText", ["loc", [null, [3, 2], [3, 13]]]], ["inline", "input", [], ["class", ["subexpr", "@mut", [["get", "cssFormClass", ["loc", [null, [3, 27], [3, 39]]]]], [], []], "value", ["subexpr", "@mut", [["get", "value", ["loc", [null, [4, 27], [4, 32]]]]], [], []], "placeholder", ["subexpr", "@mut", [["get", "placeholder", ["loc", [null, [5, 33], [5, 44]]]]], [], []], "type", ["subexpr", "@mut", [["get", "typeInput", ["loc", [null, [6, 26], [6, 35]]]]], [], []], "key-down", "showValidationErrorsKeyDown", "focus-out", "showValidationErrors", "id", ["subexpr", "@mut", [["get", "cssId", ["loc", [null, [9, 24], [9, 29]]]]], [], []], "data-qci", ["subexpr", "@mut", [["get", "cssId", ["loc", [null, [10, 30], [10, 35]]]]], [], []], "disabled", ["subexpr", "@mut", [["get", "disabled", ["loc", [null, [11, 30], [11, 38]]]]], [], []], "autocomplete", "off", "maxlength", "250"], ["loc", [null, [3, 13], [13, 38]]]], ["content", "postText", ["loc", [null, [13, 38], [13, 50]]]], ["block", "if", [["get", "canShowPassword", ["loc", [null, [15, 8], [15, 23]]]]], [], 0, null, ["loc", [null, [15, 2], [17, 9]]]], ["block", "if", [["get", "showValidationError", ["loc", [null, [19, 8], [19, 27]]]]], [], 1, null, ["loc", [null, [19, 2], [25, 9]]]], ["content", "yield", ["loc", [null, [27, 2], [27, 11]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 30,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/text-f.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "base-f", [], ["label", ["subexpr", "@mut", [["get", "label", ["loc", [null, [1, 16], [1, 21]]]]], [], []], "labelSize", ["subexpr", "@mut", [["get", "labelSize", ["loc", [null, [1, 32], [1, 41]]]]], [], []], "inputSize", ["subexpr", "@mut", [["get", "inputSize", ["loc", [null, [1, 52], [1, 61]]]]], [], []], "unitsSize", ["subexpr", "@mut", [["get", "unitsSize", ["loc", [null, [1, 72], [1, 81]]]]], [], []], "unitsLabel", ["subexpr", "@mut", [["get", "unitsLabel", ["loc", [null, [1, 93], [1, 103]]]]], [], []], "help-inline", ["subexpr", "@mut", [["get", "help-inline", ["loc", [null, [1, 116], [1, 127]]]]], [], []], "errors", ["subexpr", "@mut", [["get", "errors", ["loc", [null, [1, 135], [1, 141]]]]], [], []], "isRequired", ["subexpr", "@mut", [["get", "isRequired", ["loc", [null, [1, 153], [1, 163]]]]], [], []], "hasError", ["subexpr", "@mut", [["get", "hasError", ["loc", [null, [1, 173], [1, 181]]]]], [], []], "helpText", ["subexpr", "@mut", [["get", "helpText", ["loc", [null, [1, 191], [1, 199]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [29, 11]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("fusor-ember-cli/templates/components/textarea-f-alt", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 6,
              "column": 8
            },
            "end": {
              "line": 8,
              "column": 8
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/textarea-f-alt.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("          ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "class", "errorForValidation");
          var el2 = dom.createTextNode("*");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 10,
              "column": 8
            },
            "end": {
              "line": 15,
              "column": 8
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/textarea-f-alt.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("          ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          dom.setAttribute(el1, "class", "pficon fa fa-info-circle rhci-popover-button");
          dom.setAttribute(el1, "data-toggle", "popover");
          var el2 = dom.createTextNode("\n          ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [1]);
          var morphs = new Array(1);
          morphs[0] = dom.createElementMorph(element1);
          return morphs;
        },
        statements: [["element", "action", ["doNothing"], ["bubbles", false], ["loc", [null, [11, 18], [11, 54]]]]],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 36,
                "column": 6
              },
              "end": {
                "line": 38,
                "column": 6
              }
            },
            "moduleName": "fusor-ember-cli/templates/components/textarea-f-alt.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("p");
            dom.setAttribute(el1, "class", "error errorForValidation");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
            return morphs;
          },
          statements: [["content", "message", ["loc", [null, [37, 44], [37, 55]]]]],
          locals: ["message"],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 34,
              "column": 2
            },
            "end": {
              "line": 42,
              "column": 2
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/textarea-f-alt.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("p");
          dom.setAttribute(el2, "class", "error errorForValidation");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(3);
          morphs[0] = dom.createAttrMorph(element0, 'class');
          morphs[1] = dom.createMorphAt(element0, 1, 1);
          morphs[2] = dom.createMorphAt(dom.childAt(element0, [3]), 0, 0);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", ["text-area-validation-errors-right ", ["get", "errorContainerClass", ["loc", [null, [35, 52], [35, 71]]]]]]], ["block", "each", [["get", "validationMessages", ["loc", [null, [36, 14], [36, 32]]]]], [], 0, null, ["loc", [null, [36, 6], [38, 15]]]], ["content", "errors.name", ["loc", [null, [40, 42], [40, 57]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 44,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/textarea-f-alt.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row text-f-alt ");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        var el4 = dom.createTextNode("\n\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("label");
        dom.setAttribute(el4, "class", "control-label");
        var el5 = dom.createTextNode("\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("span");
        dom.setAttribute(el4, "class", "help-block");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element2 = dom.childAt(fragment, [0]);
        var element3 = dom.childAt(element2, [1]);
        var element4 = dom.childAt(element3, [1]);
        var element5 = dom.childAt(element4, [1]);
        var morphs = new Array(8);
        morphs[0] = dom.createAttrMorph(element3, 'class');
        morphs[1] = dom.createAttrMorph(element4, 'class');
        morphs[2] = dom.createMorphAt(element5, 1, 1);
        morphs[3] = dom.createMorphAt(element5, 3, 3);
        morphs[4] = dom.createMorphAt(element5, 5, 5);
        morphs[5] = dom.createMorphAt(element4, 3, 3);
        morphs[6] = dom.createMorphAt(dom.childAt(element4, [5]), 1, 1);
        morphs[7] = dom.createMorphAt(element2, 3, 3);
        return morphs;
      },
      statements: [["attribute", "class", ["concat", [["get", "inputContainerClass", ["loc", [null, [2, 16], [2, 35]]]]]]], ["attribute", "class", ["concat", ["form-group ", ["subexpr", "if", [["get", "hasError", ["loc", [null, [3, 32], [3, 40]]]], "has-error"], [], ["loc", [null, [3, 27], [3, 54]]]]]]], ["block", "if", [["get", "isRequired", ["loc", [null, [6, 14], [6, 24]]]]], [], 0, null, ["loc", [null, [6, 8], [8, 15]]]], ["content", "label", ["loc", [null, [9, 8], [9, 17]]]], ["block", "if", [["get", "showHelpPopover", ["loc", [null, [10, 14], [10, 29]]]]], [], 1, null, ["loc", [null, [10, 8], [15, 15]]]], ["inline", "textarea", [], ["class", "form-control", "value", ["subexpr", "@mut", [["get", "value", ["loc", [null, [19, 24], [19, 29]]]]], [], []], "placeholder", ["subexpr", "@mut", [["get", "placeholder", ["loc", [null, [20, 30], [20, 41]]]]], [], []], "rows", ["subexpr", "@mut", [["get", "numRows", ["loc", [null, [21, 23], [21, 30]]]]], [], []], "cols", ["subexpr", "@mut", [["get", "numCols", ["loc", [null, [22, 23], [22, 30]]]]], [], []], "spellcheck", ["subexpr", "@mut", [["get", "spellcheckEnabled", ["loc", [null, [23, 29], [23, 46]]]]], [], []], "id", ["subexpr", "@mut", [["get", "cssId", ["loc", [null, [24, 21], [24, 26]]]]], [], []], "data-qci", ["subexpr", "@mut", [["get", "cssId", ["loc", [null, [25, 27], [25, 32]]]]], [], []], "focus-out", "showValidationErrors", "disabled", ["subexpr", "@mut", [["get", "disabled", ["loc", [null, [27, 27], [27, 35]]]]], [], []]], ["loc", [null, [18, 6], [27, 37]]]], ["content", "help-inline", ["loc", [null, [30, 8], [30, 23]]]], ["block", "if", [["get", "showValidationError", ["loc", [null, [34, 8], [34, 27]]]]], [], 2, null, ["loc", [null, [34, 2], [42, 9]]]]],
      locals: [],
      templates: [child0, child1, child2]
    };
  })());
});
define("fusor-ember-cli/templates/components/textarea-f-alt2", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 4,
              "column": 4
            },
            "end": {
              "line": 6,
              "column": 4
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/textarea-f-alt2.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "class", "errorForValidation");
          var el2 = dom.createTextNode("*");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 8,
              "column": 4
            },
            "end": {
              "line": 13,
              "column": 4
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/textarea-f-alt2.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          dom.setAttribute(el1, "class", "pficon fa fa-info-circle rhci-popover-button");
          dom.setAttribute(el1, "data-toggle", "popover");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [1]);
          var morphs = new Array(1);
          morphs[0] = dom.createElementMorph(element1);
          return morphs;
        },
        statements: [["element", "action", ["doNothing"], ["bubbles", false], ["loc", [null, [9, 14], [9, 50]]]]],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 30,
                "column": 6
              },
              "end": {
                "line": 32,
                "column": 6
              }
            },
            "moduleName": "fusor-ember-cli/templates/components/textarea-f-alt2.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("p");
            dom.setAttribute(el1, "class", "error errorForValidation");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
            return morphs;
          },
          statements: [["content", "message", ["loc", [null, [31, 44], [31, 55]]]]],
          locals: ["message"],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 28,
              "column": 2
            },
            "end": {
              "line": 36,
              "column": 2
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/textarea-f-alt2.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("p");
          dom.setAttribute(el2, "class", "error errorForValidation");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(3);
          morphs[0] = dom.createAttrMorph(element0, 'class');
          morphs[1] = dom.createMorphAt(element0, 1, 1);
          morphs[2] = dom.createMorphAt(dom.childAt(element0, [3]), 0, 0);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", ["text-area-validation-errors-right ", ["get", "errorContainerClass", ["loc", [null, [29, 52], [29, 71]]]]]]], ["block", "each", [["get", "validationMessages", ["loc", [null, [30, 14], [30, 32]]]]], [], 0, null, ["loc", [null, [30, 6], [32, 15]]]], ["content", "errors.name", ["loc", [null, [34, 42], [34, 57]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 38,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/textarea-f-alt2.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("label");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element2 = dom.childAt(fragment, [0]);
        var element3 = dom.childAt(element2, [1]);
        var element4 = dom.childAt(element2, [3]);
        var morphs = new Array(8);
        morphs[0] = dom.createAttrMorph(element2, 'class');
        morphs[1] = dom.createAttrMorph(element3, 'class');
        morphs[2] = dom.createMorphAt(element3, 1, 1);
        morphs[3] = dom.createMorphAt(element3, 3, 3);
        morphs[4] = dom.createMorphAt(element3, 5, 5);
        morphs[5] = dom.createAttrMorph(element4, 'class');
        morphs[6] = dom.createMorphAt(element4, 1, 1);
        morphs[7] = dom.createMorphAt(element2, 5, 5);
        return morphs;
      },
      statements: [["attribute", "class", ["concat", ["form-group text-f-alt2 ", ["subexpr", "if", [["get", "hasError", ["loc", [null, [1, 40], [1, 48]]]], "has-error"], [], ["loc", [null, [1, 35], [1, 62]]]]]]], ["attribute", "class", ["concat", ["control-label ", ["get", "labelContainerClass", ["loc", [null, [3, 32], [3, 51]]]]]]], ["block", "if", [["get", "isRequired", ["loc", [null, [4, 10], [4, 20]]]]], [], 0, null, ["loc", [null, [4, 4], [6, 11]]]], ["content", "label", ["loc", [null, [7, 4], [7, 13]]]], ["block", "if", [["get", "showHelpPopover", ["loc", [null, [8, 10], [8, 25]]]]], [], 1, null, ["loc", [null, [8, 4], [13, 11]]]], ["attribute", "class", ["concat", [["get", "inputContainerClass", ["loc", [null, [15, 16], [15, 35]]]]]]], ["inline", "textarea", [], ["class", "form-control", "value", ["subexpr", "@mut", [["get", "value", ["loc", [null, [18, 22], [18, 27]]]]], [], []], "placeholder", ["subexpr", "@mut", [["get", "placeholder", ["loc", [null, [19, 28], [19, 39]]]]], [], []], "rows", ["subexpr", "@mut", [["get", "numRows", ["loc", [null, [20, 21], [20, 28]]]]], [], []], "cols", ["subexpr", "@mut", [["get", "numCols", ["loc", [null, [21, 21], [21, 28]]]]], [], []], "spellcheck", ["subexpr", "@mut", [["get", "spellcheckEnabled", ["loc", [null, [22, 27], [22, 44]]]]], [], []], "id", ["subexpr", "@mut", [["get", "cssId", ["loc", [null, [23, 19], [23, 24]]]]], [], []], "data-qci", ["subexpr", "@mut", [["get", "cssId", ["loc", [null, [24, 25], [24, 30]]]]], [], []], "focus-out", "showValidationErrors", "disabled", ["subexpr", "@mut", [["get", "disabled", ["loc", [null, [26, 25], [26, 33]]]]], [], []]], ["loc", [null, [17, 4], [26, 35]]]], ["block", "if", [["get", "showValidationError", ["loc", [null, [28, 8], [28, 27]]]]], [], 2, null, ["loc", [null, [28, 2], [36, 9]]]]],
      locals: [],
      templates: [child0, child1, child2]
    };
  })());
});
define("fusor-ember-cli/templates/components/textarea-f", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 4,
                "column": 2
              },
              "end": {
                "line": 6,
                "column": 2
              }
            },
            "moduleName": "fusor-ember-cli/templates/components/textarea-f.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "textarea", [], ["class", "form-control", "value", ["subexpr", "@mut", [["get", "value", ["loc", [null, [5, 42], [5, 47]]]]], [], []], "placeholder", ["subexpr", "@mut", [["get", "placeholder", ["loc", [null, [5, 60], [5, 71]]]]], [], []], "rows", ["subexpr", "@mut", [["get", "numRows", ["loc", [null, [5, 77], [5, 84]]]]], [], []], "id", ["subexpr", "@mut", [["get", "cssId", ["loc", [null, [5, 88], [5, 93]]]]], [], []], "data-qci", ["subexpr", "@mut", [["get", "cssId", ["loc", [null, [5, 103], [5, 108]]]]], [], []], "disabled", ["subexpr", "@mut", [["get", "disabled", ["loc", [null, [5, 118], [5, 126]]]]], [], []]], ["loc", [null, [5, 4], [5, 128]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 6,
                "column": 2
              },
              "end": {
                "line": 8,
                "column": 2
              }
            },
            "moduleName": "fusor-ember-cli/templates/components/textarea-f.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "textarea", [], ["class", "form-control", "value", ["subexpr", "@mut", [["get", "value", ["loc", [null, [7, 42], [7, 47]]]]], [], []], "placeholder", ["subexpr", "@mut", [["get", "placeholder", ["loc", [null, [7, 60], [7, 71]]]]], [], []], "id", ["subexpr", "@mut", [["get", "cssId", ["loc", [null, [7, 75], [7, 80]]]]], [], []], "data-qci", ["subexpr", "@mut", [["get", "cssId", ["loc", [null, [7, 90], [7, 95]]]]], [], []], "disabled", ["subexpr", "@mut", [["get", "disabled", ["loc", [null, [7, 105], [7, 113]]]]], [], []]], ["loc", [null, [7, 4], [7, 115]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 11,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/textarea-f.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          return morphs;
        },
        statements: [["block", "if", [["get", "rowsPassed", ["loc", [null, [4, 8], [4, 18]]]]], [], 0, 1, ["loc", [null, [4, 2], [8, 9]]]], ["content", "yield", ["loc", [null, [9, 2], [9, 11]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 12,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/textarea-f.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "base-f", [], ["label", ["subexpr", "@mut", [["get", "label", ["loc", [null, [1, 16], [1, 21]]]]], [], []], "labelSize", ["subexpr", "@mut", [["get", "labelSize", ["loc", [null, [1, 32], [1, 41]]]]], [], []], "inputSize", ["subexpr", "@mut", [["get", "inputSize", ["loc", [null, [1, 52], [1, 61]]]]], [], []], "unitsSize", ["subexpr", "@mut", [["get", "unitsSize", ["loc", [null, [1, 72], [1, 81]]]]], [], []], "unitsLabel", ["subexpr", "@mut", [["get", "unitsLabel", ["loc", [null, [1, 93], [1, 103]]]]], [], []], "isRequired", ["subexpr", "@mut", [["get", "isRequired", ["loc", [null, [1, 115], [1, 125]]]]], [], []], "help-inline", ["subexpr", "@mut", [["get", "help-inline", ["loc", [null, [1, 138], [1, 149]]]]], [], []], "helpText", ["subexpr", "@mut", [["get", "helpText", ["loc", [null, [1, 159], [1, 167]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [11, 11]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("fusor-ember-cli/templates/components/tool-tip", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 3,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/tool-tip.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("img");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [1]);
          var morphs = new Array(1);
          morphs[0] = dom.createAttrMorph(element1, 'src');
          return morphs;
        },
        statements: [["attribute", "src", ["concat", [["get", "srcImage", ["loc", [null, [2, 14], [2, 22]]]]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 4,
              "column": 0
            },
            "end": {
              "line": 6,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/tool-tip.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("i");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [0]);
          var morphs = new Array(1);
          morphs[0] = dom.createAttrMorph(element0, 'class');
          return morphs;
        },
        statements: [["attribute", "class", ["concat", ["fa ", ["get", "faIcon", ["loc", [null, [5, 15], [5, 21]]]]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 8,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/tool-tip.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
        morphs[2] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["block", "if", [["get", "hasImage", ["loc", [null, [1, 6], [1, 14]]]]], [], 0, null, ["loc", [null, [1, 0], [3, 7]]]], ["block", "if", [["get", "hasFaIcon", ["loc", [null, [4, 6], [4, 15]]]]], [], 1, null, ["loc", [null, [4, 0], [6, 7]]]], ["content", "yield", ["loc", [null, [7, 0], [7, 9]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("fusor-ember-cli/templates/components/tr-deployment", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 5
            },
            "end": {
              "line": 1,
              "column": 67
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/tr-deployment.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode(" ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode(" ");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["content", "deployment.name", ["loc", [null, [1, 47], [1, 66]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 7,
              "column": 4
            },
            "end": {
              "line": 7,
              "column": 77
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/tr-deployment.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode(" Edit ");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 8,
              "column": 4
            },
            "end": {
              "line": 10,
              "column": 4
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/tr-deployment.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "delete-deployment-button", [], ["deployment", ["subexpr", "@mut", [["get", "deployment", ["loc", [null, [9, 46], [9, 56]]]]], [], []], "action", "openDeploymentModal"], ["loc", [null, [9, 8], [9, 87]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 12,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/tr-deployment.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("td");
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("  ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [10]);
        var morphs = new Array(7);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 1, 1);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 1, 1);
        morphs[2] = dom.createMorphAt(dom.childAt(fragment, [4]), 1, 1);
        morphs[3] = dom.createMorphAt(dom.childAt(fragment, [6]), 1, 1);
        morphs[4] = dom.createMorphAt(dom.childAt(fragment, [8]), 1, 1);
        morphs[5] = dom.createMorphAt(element0, 1, 1);
        morphs[6] = dom.createMorphAt(element0, 3, 3);
        return morphs;
      },
      statements: [["block", "link-to", [["get", "routeNameForEdit", ["loc", [null, [1, 16], [1, 32]]]], ["get", "deployment", ["loc", [null, [1, 33], [1, 43]]]]], [], 0, null, ["loc", [null, [1, 5], [1, 79]]]], ["content", "deployment.lifecycle_environment.name", ["loc", [null, [2, 5], [2, 46]]]], ["content", "deployment.organization.name", ["loc", [null, [3, 5], [3, 37]]]], ["content", "foremanTask.state", ["loc", [null, [4, 5], [4, 26]]]], ["inline", "moment", [["get", "deployment.created_at", ["loc", [null, [5, 14], [5, 35]]]], "lll"], [], ["loc", [null, [5, 5], [5, 43]]]], ["block", "link-to", ["deployment", ["get", "deployment", ["loc", [null, [7, 28], [7, 38]]]]], ["class", "btn btn-sm btn-default"], 1, null, ["loc", [null, [7, 4], [7, 89]]]], ["block", "if", [["get", "canDelete", ["loc", [null, [8, 10], [8, 19]]]]], [], 2, null, ["loc", [null, [8, 4], [10, 11]]]]],
      locals: [],
      templates: [child0, child1, child2]
    };
  })());
});
define("fusor-ember-cli/templates/components/tr-engine", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 5,
              "column": 4
            },
            "end": {
              "line": 7,
              "column": 4
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/tr-engine.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "partial", ["rhev-hostname-input"], [], ["loc", [null, [6, 6], [6, 39]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 7,
              "column": 4
            },
            "end": {
              "line": 9,
              "column": 4
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/tr-engine.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["content", "host.name", ["loc", [null, [8, 6], [8, 19]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 18,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/tr-engine.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("td");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        dom.setAttribute(el1, "class", "text-center");
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        dom.setAttribute(el1, "class", "text-center");
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(" CPU");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        dom.setAttribute(el1, "class", "text-center");
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        dom.setAttribute(el1, "class", "text-center");
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        dom.setAttribute(el1, "class", "text-center");
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [2]);
        var morphs = new Array(10);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 1, 1);
        morphs[1] = dom.createAttrMorph(element0, 'class');
        morphs[2] = dom.createMorphAt(element0, 1, 1);
        morphs[3] = dom.createMorphAt(dom.childAt(fragment, [4]), 1, 1);
        morphs[4] = dom.createMorphAt(dom.childAt(fragment, [6]), 1, 1);
        morphs[5] = dom.createMorphAt(dom.childAt(fragment, [8]), 1, 1);
        morphs[6] = dom.createMorphAt(dom.childAt(fragment, [10]), 1, 1);
        morphs[7] = dom.createMorphAt(dom.childAt(fragment, [12]), 1, 1);
        morphs[8] = dom.createMorphAt(dom.childAt(fragment, [14]), 1, 1);
        morphs[9] = dom.createMorphAt(dom.childAt(fragment, [16]), 1, 1);
        return morphs;
      },
      statements: [["inline", "radio-button", [], ["value", ["subexpr", "@mut", [["get", "host", ["loc", [null, [2, 23], [2, 27]]]]], [], []], "groupValue", ["subexpr", "@mut", [["get", "selectedRhevEngineHost", ["loc", [null, [2, 39], [2, 61]]]]], [], []], "changed", "engineHostChanged", "id", ["subexpr", "@mut", [["get", "cssIdHostId", ["loc", [null, [2, 93], [2, 104]]]]], [], []], "dataQci", ["subexpr", "@mut", [["get", "cssIdHostId", ["loc", [null, [2, 113], [2, 124]]]]], [], []], "disabled", ["subexpr", "@mut", [["get", "disabled", ["loc", [null, [2, 134], [2, 142]]]]], [], []]], ["loc", [null, [2, 2], [2, 144]]]], ["attribute", "class", ["concat", [["subexpr", "if", [["get", "isSelectedAsEngine", ["loc", [null, [4, 16], [4, 34]]]], "white-font", "not-selected"], [], ["loc", [null, [4, 11], [4, 64]]]]]]], ["block", "if", [["get", "isSelectedAsEngine", ["loc", [null, [5, 10], [5, 28]]]]], [], 0, 1, ["loc", [null, [5, 4], [9, 11]]]], ["content", "host.mac", ["loc", [null, [11, 5], [11, 17]]]], ["inline", "host-type-icon", [], ["isVM", ["subexpr", "@mut", [["get", "host.is_virtual", ["loc", [null, [12, 47], [12, 62]]]]], [], []], "isInverted", ["subexpr", "@mut", [["get", "isSelectedAsEngine", ["loc", [null, [12, 74], [12, 92]]]]], [], []]], ["loc", [null, [12, 25], [12, 94]]]], ["content", "host.cpus", ["loc", [null, [13, 25], [13, 38]]]], ["content", "host.memory_human_size", ["loc", [null, [14, 25], [14, 51]]]], ["content", "host.disk_count", ["loc", [null, [15, 25], [15, 44]]]], ["content", "host.disks_human_size", ["loc", [null, [16, 25], [16, 50]]]], ["content", "host.subnet_to_s", ["loc", [null, [17, 5], [17, 25]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("fusor-ember-cli/templates/components/tr-hypervisor", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 7,
                "column": 4
              },
              "end": {
                "line": 9,
                "column": 4
              }
            },
            "moduleName": "fusor-ember-cli/templates/components/tr-hypervisor.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "partial", ["rhev-hostname-input"], [], ["loc", [null, [8, 6], [8, 39]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 9,
                "column": 4
              },
              "end": {
                "line": 11,
                "column": 4
              }
            },
            "moduleName": "fusor-ember-cli/templates/components/tr-hypervisor.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["content", "host.name", ["loc", [null, [10, 6], [10, 19]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 6,
              "column": 2
            },
            "end": {
              "line": 12,
              "column": 2
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/tr-hypervisor.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "isFreeform", ["loc", [null, [7, 10], [7, 20]]]]], [], 0, 1, ["loc", [null, [7, 4], [11, 11]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 12,
              "column": 2
            },
            "end": {
              "line": 14,
              "column": 2
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/tr-hypervisor.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["content", "host.name", ["loc", [null, [13, 4], [13, 17]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 23,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/tr-hypervisor.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("td");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        dom.setAttribute(el1, "class", "text-center");
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        dom.setAttribute(el1, "class", "text-center");
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(" CPU");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        dom.setAttribute(el1, "class", "text-center");
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        dom.setAttribute(el1, "class", "text-center");
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        dom.setAttribute(el1, "class", "text-center");
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [2]);
        var morphs = new Array(10);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 1, 1);
        morphs[1] = dom.createAttrMorph(element0, 'class');
        morphs[2] = dom.createMorphAt(element0, 1, 1);
        morphs[3] = dom.createMorphAt(dom.childAt(fragment, [4]), 1, 1);
        morphs[4] = dom.createMorphAt(dom.childAt(fragment, [6]), 1, 1);
        morphs[5] = dom.createMorphAt(dom.childAt(fragment, [8]), 1, 1);
        morphs[6] = dom.createMorphAt(dom.childAt(fragment, [10]), 1, 1);
        morphs[7] = dom.createMorphAt(dom.childAt(fragment, [12]), 1, 1);
        morphs[8] = dom.createMorphAt(dom.childAt(fragment, [14]), 1, 1);
        morphs[9] = dom.createMorphAt(dom.childAt(fragment, [16]), 1, 1);
        return morphs;
      },
      statements: [["inline", "input", [], ["type", "checkbox", "name", "isSelectedAsHypervisor", "checked", ["subexpr", "@mut", [["get", "isSelectedAsHypervisor", ["loc", [null, [2, 64], [2, 86]]]]], [], []], "id", ["subexpr", "@mut", [["get", "cssIdHostId", ["loc", [null, [2, 90], [2, 101]]]]], [], []], "data-qci", ["subexpr", "@mut", [["get", "cssIdHostId", ["loc", [null, [2, 111], [2, 122]]]]], [], []], "disabled", ["subexpr", "@mut", [["get", "disabled", ["loc", [null, [2, 132], [2, 140]]]]], [], []]], ["loc", [null, [2, 2], [2, 142]]]], ["attribute", "class", ["concat", [["subexpr", "if", [["get", "isSelectedAsHypervisor", ["loc", [null, [5, 16], [5, 38]]]], "white-font", "not-selected"], [], ["loc", [null, [5, 11], [5, 68]]]]]]], ["block", "if", [["get", "isSelectedAsHypervisor", ["loc", [null, [6, 8], [6, 30]]]]], [], 0, 1, ["loc", [null, [6, 2], [14, 9]]]], ["content", "host.mac", ["loc", [null, [16, 5], [16, 17]]]], ["inline", "host-type-icon", [], ["isVM", ["subexpr", "@mut", [["get", "host.is_virtual", ["loc", [null, [17, 47], [17, 62]]]]], [], []], "isInverted", ["subexpr", "@mut", [["get", "isSelectedAsHypervisor", ["loc", [null, [17, 74], [17, 96]]]]], [], []]], ["loc", [null, [17, 25], [17, 98]]]], ["content", "host.cpus", ["loc", [null, [18, 25], [18, 38]]]], ["content", "host.memory_human_size", ["loc", [null, [19, 25], [19, 51]]]], ["content", "host.disk_count", ["loc", [null, [20, 25], [20, 44]]]], ["content", "host.disks_human_size", ["loc", [null, [21, 25], [21, 50]]]], ["content", "host.subnet_to_s", ["loc", [null, [22, 5], [22, 25]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("fusor-ember-cli/templates/components/tr-management-app", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 13,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/tr-management-app.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("td");
        var el2 = dom.createTextNode("\n   ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        dom.setAttribute(el1, "class", "text-center");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(4);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 1, 1);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 1, 1);
        morphs[2] = dom.createMorphAt(dom.childAt(fragment, [4]), 1, 1);
        morphs[3] = dom.createMorphAt(dom.childAt(fragment, [6]), 1, 1);
        return morphs;
      },
      statements: [["inline", "radio-button", [], ["value", ["subexpr", "@mut", [["get", "managementApp.id", ["loc", [null, [2, 24], [2, 40]]]]], [], []], "groupValue", ["subexpr", "@mut", [["get", "consumerUUID", ["loc", [null, [2, 52], [2, 64]]]]], [], []], "changed", "changeManagementApp", "id", ["subexpr", "@mut", [["get", "org.id", ["loc", [null, [2, 98], [2, 104]]]]], [], []], "disabled", ["subexpr", "@mut", [["get", "disabled", ["loc", [null, [2, 114], [2, 122]]]]], [], []], "dataQci", ["subexpr", "@mut", [["get", "dataQci", ["loc", [null, [2, 131], [2, 138]]]]], [], []]], ["loc", [null, [2, 3], [2, 140]]]], ["content", "managementApp.name", ["loc", [null, [5, 4], [5, 26]]]], ["content", "managementApp.entitlementCount", ["loc", [null, [8, 4], [8, 38]]]], ["content", "managementApp.id", ["loc", [null, [11, 4], [11, 24]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("fusor-ember-cli/templates/components/tr-subscription-manifest", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 6,
              "column": 0
            },
            "end": {
              "line": 8,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/tr-subscription-manifest.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("td");
          dom.setAttribute(el1, "class", "text-center");
          var el2 = dom.createTextNode(" ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode(" ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["content", "subscription.total_quantity", ["loc", [null, [7, 27], [7, 58]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 9,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/tr-subscription-manifest.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("td");
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        dom.setAttribute(el1, "class", "text-center");
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        dom.setAttribute(el1, "class", "text-center");
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        dom.setAttribute(el1, "class", "text-center");
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(6);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 1, 1);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 1, 1);
        morphs[2] = dom.createMorphAt(dom.childAt(fragment, [4]), 1, 1);
        morphs[3] = dom.createMorphAt(dom.childAt(fragment, [6]), 1, 1);
        morphs[4] = dom.createMorphAt(dom.childAt(fragment, [8]), 1, 1);
        morphs[5] = dom.createMorphAt(fragment, 10, 10, contextualElement);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["content", "subscription.product_name", ["loc", [null, [1, 5], [1, 34]]]], ["content", "subscription.contract_number", ["loc", [null, [2, 5], [2, 37]]]], ["inline", "moment", [["get", "subscription.start_date", ["loc", [null, [3, 34], [3, 57]]]], "ll"], [], ["loc", [null, [3, 25], [3, 64]]]], ["inline", "moment", [["get", "subscription.end_date", ["loc", [null, [4, 34], [4, 55]]]], "ll"], [], ["loc", [null, [4, 25], [4, 62]]]], ["content", "qtyColumn", ["loc", [null, [5, 25], [5, 38]]]], ["block", "unless", [["get", "useExistingManifest", ["loc", [null, [6, 10], [6, 29]]]]], [], 0, null, ["loc", [null, [6, 0], [8, 11]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("fusor-ember-cli/templates/components/tr-subscription-saved", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 8,
            "column": 5
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/tr-subscription-saved.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("td");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        dom.setAttribute(el1, "class", "text-center white-font");
        var el2 = dom.createTextNode("\n     ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(4);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 1, 1);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 1, 1);
        morphs[2] = dom.createMorphAt(dom.childAt(fragment, [4]), 1, 1);
        morphs[3] = dom.createMorphAt(dom.childAt(fragment, [6]), 1, 1);
        return morphs;
      },
      statements: [["inline", "input", [], ["type", "checkbox", "checked", true, "disabled", true], ["loc", [null, [2, 2], [2, 54]]]], ["content", "subscription.product_name", ["loc", [null, [4, 5], [4, 34]]]], ["content", "subscription.contract_number", ["loc", [null, [5, 5], [5, 37]]]], ["content", "subscription.quantity_attached", ["loc", [null, [7, 5], [7, 39]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("fusor-ember-cli/templates/components/tr-subscription", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 12,
              "column": 2
            },
            "end": {
              "line": 22,
              "column": 2
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/tr-subscription.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("     ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "input", [], ["type", "input", "name", "qtyToAttach", "value", ["subexpr", "@mut", [["get", "subscription.qtyToAttach", ["loc", [null, [14, 32], [14, 56]]]]], [], []], "size", 5, "maxlength", 5, "class", "center {{if isQtyInValid 'invalid-input'}}", "data-qci", ["subexpr", "@mut", [["get", "attachCssId", ["loc", [null, [18, 35], [18, 46]]]]], [], []], "disabled", ["subexpr", "@mut", [["get", "disableQty", ["loc", [null, [19, 35], [19, 45]]]]], [], []], "focus-out", "setValidQty"], ["loc", [null, [13, 5], [21, 28]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 22,
              "column": 2
            },
            "end": {
              "line": 24,
              "column": 2
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/tr-subscription.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    Not Selected\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 26,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/tr-subscription.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("td");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        dom.setAttribute(el1, "class", "text-center");
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        dom.setAttribute(el1, "class", "text-center");
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [16]);
        var morphs = new Array(10);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 1, 1);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 1, 1);
        morphs[2] = dom.createMorphAt(dom.childAt(fragment, [4]), 1, 1);
        morphs[3] = dom.createMorphAt(dom.childAt(fragment, [6]), 1, 1);
        morphs[4] = dom.createMorphAt(dom.childAt(fragment, [8]), 1, 1);
        morphs[5] = dom.createMorphAt(dom.childAt(fragment, [10]), 1, 1);
        morphs[6] = dom.createMorphAt(dom.childAt(fragment, [12]), 1, 1);
        morphs[7] = dom.createMorphAt(dom.childAt(fragment, [14]), 1, 1);
        morphs[8] = dom.createAttrMorph(element0, 'class');
        morphs[9] = dom.createMorphAt(element0, 1, 1);
        return morphs;
      },
      statements: [["inline", "input", [], ["type", "checkbox", "name", "isSelectedSubscription", "checked", ["subexpr", "@mut", [["get", "subscription.isSelectedSubscription", ["loc", [null, [2, 64], [2, 99]]]]], [], []], "data-qci", ["subexpr", "@mut", [["get", "subCssId", ["loc", [null, [2, 109], [2, 117]]]]], [], []]], ["loc", [null, [2, 2], [2, 119]]]], ["content", "subscription.productName", ["loc", [null, [4, 5], [4, 33]]]], ["content", "subscription.contractNumber", ["loc", [null, [5, 5], [5, 36]]]], ["content", "systemType", ["loc", [null, [6, 5], [6, 19]]]], ["inline", "moment", [["get", "subscription.startDate", ["loc", [null, [7, 14], [7, 36]]]], "ll"], [], ["loc", [null, [7, 5], [7, 43]]]], ["inline", "moment", [["get", "subscription.endDate", ["loc", [null, [8, 14], [8, 34]]]], "ll"], [], ["loc", [null, [8, 5], [8, 41]]]], ["content", "subscription.qtyAttached", ["loc", [null, [9, 25], [9, 53]]]], ["content", "subscription.qtyAvailableOfTotal", ["loc", [null, [10, 25], [10, 61]]]], ["attribute", "class", ["concat", ["text-center ", ["subexpr", "if", [["get", "subscription.isSelectedSubscription", ["loc", [null, [11, 28], [11, 63]]]], "black-font", "not-selected"], [], ["loc", [null, [11, 23], [11, 93]]]]]]], ["block", "if", [["get", "subscription.isSelectedSubscription", ["loc", [null, [12, 8], [12, 43]]]]], [], 0, 1, ["loc", [null, [12, 2], [24, 9]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("fusor-ember-cli/templates/components/tr-task", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 9,
                "column": 6
              },
              "end": {
                "line": 11,
                "column": 6
              }
            },
            "moduleName": "fusor-ember-cli/templates/components/tr-task.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("a");
            dom.setAttribute(el1, "target", "_blank");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element1 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createAttrMorph(element1, 'href');
            morphs[1] = dom.createMorphAt(element1, 0, 0);
            return morphs;
          },
          statements: [["attribute", "href", ["get", "task.taskUrl", ["loc", [null, [10, 20], [10, 32]]]]], ["content", "task.result", ["loc", [null, [10, 51], [10, 66]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 11,
                "column": 6
              },
              "end": {
                "line": 13,
                "column": 6
              }
            },
            "moduleName": "fusor-ember-cli/templates/components/tr-task.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["content", "task.result", ["loc", [null, [12, 10], [12, 25]]]]],
          locals: [],
          templates: []
        };
      })();
      var child2 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 16,
                "column": 6
              },
              "end": {
                "line": 18,
                "column": 6
              }
            },
            "moduleName": "fusor-ember-cli/templates/components/tr-task.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("a");
            dom.setAttribute(el1, "target", "_blank");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createAttrMorph(element0, 'href');
            morphs[1] = dom.createMorphAt(element0, 0, 0);
            return morphs;
          },
          statements: [["attribute", "href", ["get", "task.taskUrl", ["loc", [null, [17, 20], [17, 32]]]]], ["content", "percentProgress", ["loc", [null, [17, 51], [17, 70]]]]],
          locals: [],
          templates: []
        };
      })();
      var child3 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 18,
                "column": 6
              },
              "end": {
                "line": 20,
                "column": 6
              }
            },
            "moduleName": "fusor-ember-cli/templates/components/tr-task.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["content", "percentProgress", ["loc", [null, [19, 10], [19, 29]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 25,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/tr-task.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("td");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("a");
          dom.setAttribute(el2, "target", "_blank");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("td");
          dom.setAttribute(el1, "class", "center");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("td");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("td");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("td");
          dom.setAttribute(el1, "class", "center");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element2 = dom.childAt(fragment, [1, 1]);
          var element3 = dom.childAt(fragment, [5]);
          var element4 = dom.childAt(fragment, [7]);
          var morphs = new Array(8);
          morphs[0] = dom.createAttrMorph(element2, 'href');
          morphs[1] = dom.createMorphAt(element2, 0, 0);
          morphs[2] = dom.createMorphAt(dom.childAt(fragment, [3]), 1, 1);
          morphs[3] = dom.createAttrMorph(element3, 'class');
          morphs[4] = dom.createMorphAt(element3, 1, 1);
          morphs[5] = dom.createAttrMorph(element4, 'class');
          morphs[6] = dom.createMorphAt(element4, 1, 1);
          morphs[7] = dom.createMorphAt(dom.childAt(fragment, [9]), 1, 1);
          return morphs;
        },
        statements: [["attribute", "href", ["get", "task.taskUrl", ["loc", [null, [3, 16], [3, 28]]]]], ["content", "actionNameAndRepository", ["loc", [null, [3, 47], [3, 74]]]], ["content", "task.state", ["loc", [null, [6, 6], [6, 20]]]], ["attribute", "class", ["concat", ["center ", ["get", "textBold", ["loc", [null, [8, 22], [8, 30]]]], " ", ["get", "textColor", ["loc", [null, [8, 35], [8, 44]]]]]]], ["block", "if", [["get", "isError", ["loc", [null, [9, 12], [9, 19]]]]], [], 0, 1, ["loc", [null, [9, 6], [13, 13]]]], ["attribute", "class", ["concat", ["center ", ["get", "textBold", ["loc", [null, [15, 22], [15, 30]]]], " ", ["get", "textColor", ["loc", [null, [15, 35], [15, 44]]]]]]], ["block", "if", [["get", "isError", ["loc", [null, [16, 12], [16, 19]]]]], [], 2, 3, ["loc", [null, [16, 6], [20, 13]]]], ["inline", "moment", [["get", "task.started_at", ["loc", [null, [23, 15], [23, 30]]]], "lll"], [], ["loc", [null, [23, 6], [23, 38]]]]],
        locals: [],
        templates: [child0, child1, child2, child3]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 25,
            "column": 7
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/tr-task.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "task", ["loc", [null, [1, 6], [1, 10]]]]], [], 0, null, ["loc", [null, [1, 0], [25, 7]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("fusor-ember-cli/templates/components/wizard-item", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 3,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/wizard-item.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode(". ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          return morphs;
        },
        statements: [["content", "num", ["loc", [null, [2, 2], [2, 9]]]], ["content", "name", ["loc", [null, [2, 11], [2, 19]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 4,
                "column": 2
              },
              "end": {
                "line": 6,
                "column": 2
              }
            },
            "moduleName": "fusor-ember-cli/templates/components/wizard-item.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode(". ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            return morphs;
          },
          statements: [["content", "num", ["loc", [null, [5, 4], [5, 11]]]], ["content", "name", ["loc", [null, [5, 13], [5, 21]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 0
            },
            "end": {
              "line": 7,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/components/wizard-item.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "link-to", [["get", "routeName", ["loc", [null, [4, 13], [4, 22]]]]], ["data-qci", ["subexpr", "@mut", [["get", "routeName", ["loc", [null, [4, 32], [4, 41]]]]], [], []]], 0, null, ["loc", [null, [4, 2], [6, 14]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 8,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/wizard-item.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "isDisabled", ["loc", [null, [1, 6], [1, 16]]]]], [], 0, 1, ["loc", [null, [1, 0], [7, 7]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("fusor-ember-cli/templates/components/wizard-step", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 10,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/components/wizard-step.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "col-xs-8 col-sm-8 col-md-9 col-lg-10 col-xs-push-4 col-sm-push-4 col-md-push-3 col-lg-push-2 sidebar-pf-right");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "col-xs-4 col-sm-4 col-md-3 col-lg-2 col-xs-pull-8 col-sm-pull-8 col-md-pull-9 col-lg-pull-10 sidebar-pf sidebar-pf-left");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("ul");
        dom.setAttribute(el2, "class", "nav nav-pills nav-stacked");
        var el3 = dom.createTextNode("\n       ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var element1 = dom.childAt(fragment, [2]);
        var morphs = new Array(4);
        morphs[0] = dom.createAttrMorph(element0, 'style');
        morphs[1] = dom.createMorphAt(element0, 1, 1);
        morphs[2] = dom.createAttrMorph(element1, 'style');
        morphs[3] = dom.createMorphAt(dom.childAt(element1, [1]), 1, 1);
        return morphs;
      },
      statements: [["attribute", "style", ["get", "minHeightStyle", ["loc", [null, [1, 131], [1, 145]]]]], ["content", "outlet", ["loc", [null, [2, 4], [2, 14]]]], ["attribute", "style", ["get", "minHeightStyle", ["loc", [null, [5, 141], [5, 155]]]]], ["content", "yield", ["loc", [null, [7, 7], [7, 16]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('fusor-ember-cli/templates/components/x-select', ['exports', 'emberx-select/templates/components/x-select'], function (exports, _emberxSelectTemplatesComponentsXSelect) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberxSelectTemplatesComponentsXSelect['default'];
    }
  });
});
define("fusor-ember-cli/templates/configure-environment", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 11,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/configure-environment.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "row");
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "col-md-9");
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "alert alert-success rhci-alert");
          var el4 = dom.createTextNode("\n        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("i");
          dom.setAttribute(el4, "class", "fa fa-2x fa-check-circle-o green-circle");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n         \n        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode(" added successfully.\n    ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n  ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0, 1, 1]), 3, 3);
          return morphs;
        },
        statements: [["content", "selectedEnvironment.name", ["loc", [null, [7, 8], [7, 36]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 19,
              "column": 6
            },
            "end": {
              "line": 24,
              "column": 6
            }
          },
          "moduleName": "fusor-ember-cli/templates/configure-environment.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          var el2 = dom.createTextNode("\n          Immediately ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element6 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createAttrMorph(element6, 'class');
          morphs[1] = dom.createMorphAt(element6, 1, 1);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", [["subexpr", "if", [["get", "isStarted", ["loc", [null, [20, 26], [20, 35]]]], "disabled"], [], ["loc", [null, [20, 21], [20, 48]]]]]]], ["inline", "tool-tip", [], ["faIcon", "fa-info-circle blue-active", "title", "Choosing to not use a lifecycle environment will result in a faster deployment time, but new content will become available to your deployment automatically.  If you use a lifecycle environment, then content needs to be manually published to that environment to be available."], ["loc", [null, [21, 22], [22, 317]]]]],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 31,
              "column": 6
            },
            "end": {
              "line": 36,
              "column": 6
            }
          },
          "moduleName": "fusor-ember-cli/templates/configure-environment.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          var el2 = dom.createTextNode("\n        After manually publishing them ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element5 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createAttrMorph(element5, 'class');
          morphs[1] = dom.createMorphAt(element5, 1, 1);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", [["subexpr", "if", [["get", "isStarted", ["loc", [null, [32, 24], [32, 33]]]], "disabled"], [], ["loc", [null, [32, 19], [32, 46]]]]]]], ["inline", "tool-tip", [], ["faIcon", "fa-info-circle blue-active", "title", "For updates to be available within a deployment, they must be published to the lifecycle environment that is assigned to that deployment."], ["loc", [null, [33, 39], [34, 166]]]]],
        locals: [],
        templates: []
      };
    })();
    var child3 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 51,
                "column": 4
              },
              "end": {
                "line": 55,
                "column": 4
              }
            },
            "moduleName": "fusor-ember-cli/templates/configure-environment.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "alert alert-info rhci-alert");
            var el2 = dom.createTextNode("\n          No lifecycle environments are in organization ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("strong");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1]), 0, 0);
            return morphs;
          },
          statements: [["content", "selectedOrganization.name", ["loc", [null, [53, 64], [53, 93]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 72,
                  "column": 6
                },
                "end": {
                  "line": 95,
                  "column": 6
                }
              },
              "moduleName": "fusor-ember-cli/templates/configure-environment.hbs"
            },
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "path-selector");
              var el2 = dom.createTextNode("\n          ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("ul");
              dom.setAttribute(el2, "class", "path-list");
              var el3 = dom.createTextNode("\n            ");
              dom.appendChild(el2, el3);
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n            ");
              dom.appendChild(el2, el3);
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n            ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("li");
              dom.setAttribute(el3, "class", "path-list-item");
              var el4 = dom.createTextNode("\n              ");
              dom.appendChild(el3, el4);
              var el4 = dom.createElement("label");
              dom.setAttribute(el4, "class", "path-list-item-label");
              var el5 = dom.createTextNode("\n                 \n              ");
              dom.appendChild(el4, el5);
              dom.appendChild(el3, el4);
              var el4 = dom.createTextNode("\n            ");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n          ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element2 = dom.childAt(fragment, [1, 1]);
              var morphs = new Array(2);
              morphs[0] = dom.createMorphAt(element2, 1, 1);
              morphs[1] = dom.createMorphAt(element2, 3, 3);
              return morphs;
            },
            statements: [["inline", "env-path-list-item", [], ["env", ["subexpr", "@mut", [["get", "libraryEnv", ["loc", [null, [75, 37], [75, 47]]]]], [], []], "libraryEnv", ["subexpr", "@mut", [["get", "libraryEnv", ["loc", [null, [76, 44], [76, 54]]]]], [], []], "selectedEnvironment", ["subexpr", "@mut", [["get", "selectedEnvironment", ["loc", [null, [77, 53], [77, 72]]]]], [], []], "action", "selectEnvironment", "disabled", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [79, 42], [79, 51]]]]], [], []], "isSelectable", false], ["loc", [null, [75, 12], [80, 53]]]], ["inline", "env-path-list-item", [], ["env", ["subexpr", "@mut", [["get", "env", ["loc", [null, [81, 37], [81, 40]]]]], [], []], "libraryEnv", ["subexpr", "@mut", [["get", "libraryEnv", ["loc", [null, [82, 44], [82, 54]]]]], [], []], "selectedEnvironment", ["subexpr", "@mut", [["get", "selectedEnvironment", ["loc", [null, [83, 53], [83, 72]]]]], [], []], "action", "selectEnvironment", "disabled", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [85, 42], [85, 51]]]]], [], []], "dataQci", ["subexpr", "@mut", [["get", "env.name", ["loc", [null, [86, 41], [86, 49]]]]], [], []], "isSelectable", true], ["loc", [null, [81, 12], [87, 52]]]]],
            locals: ["env"],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 55,
                "column": 4
              },
              "end": {
                "line": 96,
                "column": 4
              }
            },
            "moduleName": "fusor-ember-cli/templates/configure-environment.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "path-selector");
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("ul");
            dom.setAttribute(el2, "class", "path-list");
            var el3 = dom.createTextNode("\n            ");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n            ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("li");
            dom.setAttribute(el3, "class", "path-list-item");
            var el4 = dom.createTextNode("\n              ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("label");
            dom.setAttribute(el4, "class", "path-list-item-label");
            var el5 = dom.createTextNode("\n                 \n              ");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n            ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n          ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1]), 1, 1);
            morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["inline", "env-path-list-item", [], ["env", ["subexpr", "@mut", [["get", "libraryEnv", ["loc", [null, [58, 37], [58, 47]]]]], [], []], "libraryEnv", ["subexpr", "@mut", [["get", "libraryEnv", ["loc", [null, [59, 44], [59, 54]]]]], [], []], "selectedEnvironment", ["subexpr", "@mut", [["get", "selectedEnvironment", ["loc", [null, [60, 53], [60, 72]]]]], [], []], "action", "selectEnvironment", "disabled", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [62, 42], [62, 51]]]]], [], []], "dataQci", ["subexpr", "@mut", [["get", "libraryEnv.name", ["loc", [null, [63, 41], [63, 56]]]]], [], []], "isSelectable", true], ["loc", [null, [58, 12], [64, 52]]]], ["block", "each", [["get", "priorLibraryEnvironments", ["loc", [null, [72, 14], [72, 38]]]]], [], 0, null, ["loc", [null, [72, 6], [95, 15]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 47,
              "column": 0
            },
            "end": {
              "line": 108,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/configure-environment.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "row");
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "col-md-9");
          var el3 = dom.createTextNode("\n\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "style", "margin:15px 0px;");
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("button");
          dom.setAttribute(el4, "class", "btn btn-default");
          var el5 = dom.createTextNode("\n        New Environment Path\n      ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n    ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n\n  ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element3 = dom.childAt(fragment, [0, 1]);
          var element4 = dom.childAt(element3, [3, 1]);
          var morphs = new Array(4);
          morphs[0] = dom.createMorphAt(element3, 1, 1);
          morphs[1] = dom.createAttrMorph(element4, 'disabled');
          morphs[2] = dom.createElementMorph(element4);
          morphs[3] = dom.createMorphAt(element3, 5, 5);
          return morphs;
        },
        statements: [["block", "if", [["get", "hasNoEnvironments", ["loc", [null, [51, 10], [51, 27]]]]], [], 0, 1, ["loc", [null, [51, 4], [96, 11]]]], ["attribute", "disabled", ["get", "isStarted", ["loc", [null, [99, 77], [99, 86]]]]], ["element", "action", ["newEnvironment"], [], ["loc", [null, [99, 38], [99, 65]]]], ["inline", "error-message", [], ["errorMsg", ["subexpr", "@mut", [["get", "errorMsg", ["loc", [null, [104, 29], [104, 37]]]]], [], []]], ["loc", [null, [104, 4], [104, 39]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    var child4 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 130,
                  "column": 10
                },
                "end": {
                  "line": 132,
                  "column": 10
                }
              },
              "moduleName": "fusor-ember-cli/templates/configure-environment.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            Loading ... ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("i");
              dom.setAttribute(el1, "class", "fa fa-angle-right");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() {
              return [];
            },
            statements: [],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 132,
                  "column": 10
                },
                "end": {
                  "line": 134,
                  "column": 10
                }
              },
              "moduleName": "fusor-ember-cli/templates/configure-environment.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            Next ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("i");
              dom.setAttribute(el1, "class", "fa fa-angle-right");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() {
              return [];
            },
            statements: [],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 126,
                "column": 4
              },
              "end": {
                "line": 136,
                "column": 4
              }
            },
            "moduleName": "fusor-ember-cli/templates/configure-environment.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "class", "btn btn-primary next-button");
            dom.setAttribute(el1, "data-qci", "next-deployment-new.satellite.access-insights");
            var el2 = dom.createTextNode("\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("      ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element1 = dom.childAt(fragment, [1]);
            var morphs = new Array(3);
            morphs[0] = dom.createAttrMorph(element1, 'disabled');
            morphs[1] = dom.createElementMorph(element1);
            morphs[2] = dom.createMorphAt(element1, 1, 1);
            return morphs;
          },
          statements: [["attribute", "disabled", ["get", "disableNextOnLifecycleEnvironment", ["loc", [null, [128, 25], [128, 58]]]]], ["element", "action", ["saveDeployment", ["get", "step1DRouteName", ["loc", [null, [127, 40], [127, 55]]]]], [], ["loc", [null, [127, 14], [127, 57]]]], ["block", "if", [["get", "deployment.isSaving", ["loc", [null, [130, 16], [130, 35]]]]], [], 0, 1, ["loc", [null, [130, 10], [134, 17]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 136,
                "column": 4
              },
              "end": {
                "line": 142,
                "column": 4
              }
            },
            "moduleName": "fusor-ember-cli/templates/configure-environment.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "class", "btn btn-primary next-button");
            dom.setAttribute(el1, "data-qci", "next-satellite.access-insights");
            var el2 = dom.createTextNode("\n          Next ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("i");
            dom.setAttribute(el2, "class", "fa fa-angle-right");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createAttrMorph(element0, 'disabled');
            morphs[1] = dom.createElementMorph(element0);
            return morphs;
          },
          statements: [["attribute", "disabled", ["get", "disableNextOnLifecycleEnvironment", ["loc", [null, [138, 25], [138, 58]]]]], ["element", "action", ["saveDeployment", ["get", "step1DRouteName", ["loc", [null, [137, 40], [137, 55]]]]], [], ["loc", [null, [137, 14], [137, 57]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 121,
              "column": 0
            },
            "end": {
              "line": 143,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/configure-environment.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "deployment.isNew", ["loc", [null, [126, 10], [126, 26]]]]], [], 0, 1, ["loc", [null, [126, 4], [142, 11]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 144,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/configure-environment.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "col-md-9");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        var el4 = dom.createTextNode("\n      Select how this deployment's instances should receive updates.\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "ident-radio");
        dom.setAttribute(el3, "data-qci", "immediately");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("p");
        dom.setAttribute(el4, "class", "lifecycle-option-help explanatory-text");
        var el5 = dom.createTextNode("\n        Updates will be available to install in the deployment as soon as they are released.\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "ident-radio");
        dom.setAttribute(el3, "data-qci", "after_publishing");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("p");
        dom.setAttribute(el4, "class", "lifecycle-option-help explanatory-text");
        var el5 = dom.createTextNode("\n        Updates will only be available to install in the deployment after being manually published to the selected environment.\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element7 = dom.childAt(fragment, [2, 1]);
        var morphs = new Array(6);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(dom.childAt(element7, [3]), 1, 1);
        morphs[2] = dom.createMorphAt(dom.childAt(element7, [5]), 1, 1);
        morphs[3] = dom.createMorphAt(fragment, 6, 6, contextualElement);
        morphs[4] = dom.createMorphAt(fragment, 12, 12, contextualElement);
        morphs[5] = dom.createMorphAt(fragment, 14, 14, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "showAlertMessage", ["loc", [null, [1, 6], [1, 22]]]]], [], 0, null, ["loc", [null, [1, 0], [11, 7]]]], ["block", "radio-button", [], ["value", "immediately", "groupValue", ["subexpr", "@mut", [["get", "envSetup", ["loc", [null, [19, 53], [19, 61]]]]], [], []], "changed", "envSetupChanged", "id", "immediately", "disabled", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [19, 114], [19, 123]]]]], [], []], "dataQci", "immediately"], 1, null, ["loc", [null, [19, 6], [24, 23]]]], ["block", "radio-button", [], ["value", "after_publishing", "groupValue", ["subexpr", "@mut", [["get", "envSetup", ["loc", [null, [31, 58], [31, 66]]]]], [], []], "changed", "envSetupChanged", "id", "after_publishing", "disabled", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [31, 124], [31, 133]]]]], [], []], "dataQci", "after_publishing"], 2, null, ["loc", [null, [31, 6], [36, 23]]]], ["block", "unless", [["get", "useDefaultOrgViewForEnv", ["loc", [null, [47, 10], [47, 33]]]]], [], 3, null, ["loc", [null, [47, 0], [108, 11]]]], ["inline", "new-environment-modal", [], ["openModal", ["subexpr", "@mut", [["get", "openModal", ["loc", [null, [114, 34], [114, 43]]]]], [], []], "showValidationError", ["subexpr", "@mut", [["get", "showValidationError", ["loc", [null, [115, 44], [115, 63]]]]], [], []], "createEnvironment", "createEnvironment", "name", ["subexpr", "@mut", [["get", "name", ["loc", [null, [117, 29], [117, 33]]]]], [], []], "envNameValidator", ["subexpr", "@mut", [["get", "envNameValidator", ["loc", [null, [118, 41], [118, 57]]]]], [], []], "description", ["subexpr", "@mut", [["get", "description", ["loc", [null, [119, 36], [119, 47]]]]], [], []]], ["loc", [null, [114, 0], [119, 49]]]], ["block", "cancel-back-next", [], ["backRouteName", ["subexpr", "@mut", [["get", "satelliteTabRouteName", ["loc", [null, [121, 34], [121, 55]]]]], [], []], "disableBack", false, "disableCancel", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [123, 34], [123, 43]]]]], [], []], "deploymentName", ["subexpr", "@mut", [["get", "deploymentName", ["loc", [null, [124, 35], [124, 49]]]]], [], []], "isNew", ["subexpr", "@mut", [["get", "isNew", ["loc", [null, [125, 26], [125, 31]]]]], [], []]], 4, null, ["loc", [null, [121, 0], [143, 21]]]]],
      locals: [],
      templates: [child0, child1, child2, child3, child4]
    };
  })());
});
define("fusor-ember-cli/templates/configure-environment.loading", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 24
          }
        },
        "moduleName": "fusor-ember-cli/templates/configure-environment.loading.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("Loading Environments ...");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() {
        return [];
      },
      statements: [],
      locals: [],
      templates: []
    };
  })());
});
define("fusor-ember-cli/templates/consumer", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/consumer.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["content", "outlet", ["loc", [null, [1, 0], [1, 10]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("fusor-ember-cli/templates/debug-deployment", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 45,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/debug-deployment.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("ID: ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("  (isNew: ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode(")\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\nDesc: ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\nOrg: ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("   (");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode(") ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\nEnv: ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("     (");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode(") ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\nhasName: ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\nhasOrganization: ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\nhasLifecycleEnvironment: ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\ndisableTabConfigureOrganization: ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\ndisableTabLifecycleEnvironment: ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\ndisableNextOnDeploymentName: ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\ndisableNextOnConfigureOrganization: ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\ndisableNextOnLifecycleEnvironment: ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\nisDisabledRhev: ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\nisDisabledOpenstack: ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\nisDisabledCloudForms: ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\nisDisabledSubscriptions: ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\nisDisabledReview: ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\ndeploy_rhev: ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\ndeploy_openstack: ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\ndeploy_cfme: ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\ndeploy_openshift: ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("hr");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(26);
        morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
        morphs[2] = dom.createMorphAt(fragment, 7, 7, contextualElement);
        morphs[3] = dom.createMorphAt(fragment, 11, 11, contextualElement);
        morphs[4] = dom.createMorphAt(fragment, 13, 13, contextualElement);
        morphs[5] = dom.createMorphAt(fragment, 15, 15, contextualElement);
        morphs[6] = dom.createMorphAt(fragment, 19, 19, contextualElement);
        morphs[7] = dom.createMorphAt(fragment, 21, 21, contextualElement);
        morphs[8] = dom.createMorphAt(fragment, 23, 23, contextualElement);
        morphs[9] = dom.createMorphAt(fragment, 27, 27, contextualElement);
        morphs[10] = dom.createMorphAt(fragment, 31, 31, contextualElement);
        morphs[11] = dom.createMorphAt(fragment, 35, 35, contextualElement);
        morphs[12] = dom.createMorphAt(fragment, 39, 39, contextualElement);
        morphs[13] = dom.createMorphAt(fragment, 43, 43, contextualElement);
        morphs[14] = dom.createMorphAt(fragment, 47, 47, contextualElement);
        morphs[15] = dom.createMorphAt(fragment, 51, 51, contextualElement);
        morphs[16] = dom.createMorphAt(fragment, 55, 55, contextualElement);
        morphs[17] = dom.createMorphAt(fragment, 61, 61, contextualElement);
        morphs[18] = dom.createMorphAt(fragment, 65, 65, contextualElement);
        morphs[19] = dom.createMorphAt(fragment, 69, 69, contextualElement);
        morphs[20] = dom.createMorphAt(fragment, 73, 73, contextualElement);
        morphs[21] = dom.createMorphAt(fragment, 77, 77, contextualElement);
        morphs[22] = dom.createMorphAt(fragment, 81, 81, contextualElement);
        morphs[23] = dom.createMorphAt(fragment, 85, 85, contextualElement);
        morphs[24] = dom.createMorphAt(fragment, 89, 89, contextualElement);
        morphs[25] = dom.createMorphAt(fragment, 93, 93, contextualElement);
        return morphs;
      },
      statements: [["content", "id", ["loc", [null, [1, 4], [1, 10]]]], ["content", "isNew", ["loc", [null, [1, 20], [1, 29]]]], ["content", "description", ["loc", [null, [3, 6], [3, 21]]]], ["content", "organization.name", ["loc", [null, [5, 5], [5, 26]]]], ["content", "organization.id", ["loc", [null, [5, 35], [5, 54]]]], ["content", "organization", ["loc", [null, [5, 56], [5, 72]]]], ["content", "lifecycle_environment.name", ["loc", [null, [7, 5], [7, 35]]]], ["content", "lifecycle_environment.id", ["loc", [null, [7, 46], [7, 74]]]], ["content", "lifecycle_environment", ["loc", [null, [7, 76], [7, 101]]]], ["content", "hasName", ["loc", [null, [9, 9], [9, 20]]]], ["content", "hasOrganization", ["loc", [null, [11, 17], [11, 36]]]], ["content", "hasLifecycleEnvironment", ["loc", [null, [13, 25], [13, 52]]]], ["content", "disableTabConfigureOrganization", ["loc", [null, [15, 33], [15, 68]]]], ["content", "disableTabLifecycleEnvironment", ["loc", [null, [17, 32], [17, 66]]]], ["content", "disableNextOnDeploymentName", ["loc", [null, [19, 29], [19, 60]]]], ["content", "disableNextOnConfigureOrganization", ["loc", [null, [21, 36], [21, 74]]]], ["content", "disableNextOnLifecycleEnvironment", ["loc", [null, [23, 35], [23, 72]]]], ["content", "isDisabledRhev", ["loc", [null, [26, 16], [26, 34]]]], ["content", "isDisabledOpenstack", ["loc", [null, [28, 21], [28, 44]]]], ["content", "isDisabledCloudForms", ["loc", [null, [30, 22], [30, 46]]]], ["content", "isDisabledSubscriptions", ["loc", [null, [32, 25], [32, 52]]]], ["content", "isDisabledReview", ["loc", [null, [34, 18], [34, 38]]]], ["content", "model.deploy_rhev", ["loc", [null, [36, 13], [36, 34]]]], ["content", "model.deploy_openstack", ["loc", [null, [38, 18], [38, 44]]]], ["content", "model.deploy_cfme", ["loc", [null, [40, 13], [40, 34]]]], ["content", "model.deploy_openshift", ["loc", [null, [42, 18], [42, 44]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("fusor-ember-cli/templates/deployment/start", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 22,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/deployment/start.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "rhci-start", [], ["isRhev", ["subexpr", "@mut", [["get", "isRhev", ["loc", [null, [1, 20], [1, 26]]]]], [], []], "isOpenStack", ["subexpr", "@mut", [["get", "isOpenStack", ["loc", [null, [2, 25], [2, 36]]]]], [], []], "isCloudForms", ["subexpr", "@mut", [["get", "isCloudForms", ["loc", [null, [3, 26], [3, 38]]]]], [], []], "isOpenShift", ["subexpr", "@mut", [["get", "isOpenShift", ["loc", [null, [4, 25], [4, 36]]]]], [], []], "nameRedHat", ["subexpr", "@mut", [["get", "nameRedHat", ["loc", [null, [5, 24], [5, 34]]]]], [], []], "nameRhev", ["subexpr", "@mut", [["get", "nameRhev", ["loc", [null, [6, 22], [6, 30]]]]], [], []], "nameOpenStack", ["subexpr", "@mut", [["get", "nameOpenStack", ["loc", [null, [7, 27], [7, 40]]]]], [], []], "nameCloudForms", ["subexpr", "@mut", [["get", "nameCloudForms", ["loc", [null, [8, 28], [8, 42]]]]], [], []], "nameOpenShift", ["subexpr", "@mut", [["get", "nameOpenShift", ["loc", [null, [9, 27], [9, 40]]]]], [], []], "fullnameRhev", ["subexpr", "@mut", [["get", "fullnameRhev", ["loc", [null, [10, 26], [10, 38]]]]], [], []], "fullnameOpenStack", ["subexpr", "@mut", [["get", "fullnameOpenStack", ["loc", [null, [11, 31], [11, 48]]]]], [], []], "fullnameCloudForms", ["subexpr", "@mut", [["get", "fullnameCloudForms", ["loc", [null, [12, 32], [12, 50]]]]], [], []], "fullnameOpenShift", ["subexpr", "@mut", [["get", "fullnameOpenShift", ["loc", [null, [13, 31], [13, 48]]]]], [], []], "isUpstream", ["subexpr", "@mut", [["get", "isUpstream", ["loc", [null, [14, 24], [14, 34]]]]], [], []], "satelliteTabRouteName", ["subexpr", "@mut", [["get", "satelliteTabRouteName", ["loc", [null, [15, 35], [15, 56]]]]], [], []], "disableNextOnStart", ["subexpr", "@mut", [["get", "disableNextOnStart", ["loc", [null, [16, 32], [16, 50]]]]], [], []], "isDisabledOpenShift", ["subexpr", "@mut", [["get", "isDisabledOpenShift", ["loc", [null, [17, 33], [17, 52]]]]], [], []], "isDisabledCfme", ["subexpr", "@mut", [["get", "isDisabledCfme", ["loc", [null, [18, 28], [18, 42]]]]], [], []], "isNew", ["subexpr", "@mut", [["get", "isNew", ["loc", [null, [19, 19], [19, 24]]]]], [], []], "deploymentName", ["subexpr", "@mut", [["get", "deploymentName", ["loc", [null, [20, 28], [20, 42]]]]], [], []]], ["loc", [null, [1, 0], [21, 2]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("fusor-ember-cli/templates/deployment-new/index", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/deployment-new/index.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["content", "outlet", ["loc", [null, [1, 0], [1, 10]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("fusor-ember-cli/templates/deployment-new/satellite/configure-environment", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/deployment-new/satellite/configure-environment.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "partial", ["configure-environment"], [], ["loc", [null, [1, 0], [1, 35]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("fusor-ember-cli/templates/deployment-new/satellite/configure-environment.loading", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 24
          }
        },
        "moduleName": "fusor-ember-cli/templates/deployment-new/satellite/configure-environment.loading.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("Loading Environments ...");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() {
        return [];
      },
      statements: [],
      locals: [],
      templates: []
    };
  })());
});
define("fusor-ember-cli/templates/deployment-new/satellite/index", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/deployment-new/satellite/index.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "partial", ["satellite/index"], [], ["loc", [null, [1, 0], [1, 29]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("fusor-ember-cli/templates/deployment-new/satellite/loading", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/deployment-new/satellite/loading.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("Loading ....\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() {
        return [];
      },
      statements: [],
      locals: [],
      templates: []
    };
  })());
});
define("fusor-ember-cli/templates/deployment-new/satellite", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/deployment-new/satellite.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "partial", ["satellite"], [], ["loc", [null, [1, 0], [1, 23]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("fusor-ember-cli/templates/deployment-new/start", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 30
          }
        },
        "moduleName": "fusor-ember-cli/templates/deployment-new/start.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "partial", ["deployment/start"], [], ["loc", [null, [1, 0], [1, 30]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("fusor-ember-cli/templates/deployment-new", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/deployment-new.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "partial", ["deployment"], [], ["loc", [null, [1, 0], [1, 24]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("fusor-ember-cli/templates/deployment", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 37,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/deployment.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "row");
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 1, 1);
          return morphs;
        },
        statements: [["inline", "rhci-wizard", [], ["name", ["subexpr", "@mut", [["get", "model.name", ["loc", [null, [3, 21], [3, 31]]]]], [], []], "nameRHCI", ["subexpr", "@mut", [["get", "nameRHCI", ["loc", [null, [4, 25], [4, 33]]]]], [], []], "nameSatellite", ["subexpr", "@mut", [["get", "nameSatellite", ["loc", [null, [5, 30], [5, 43]]]]], [], []], "routeNameSatellite", ["subexpr", "@mut", [["get", "routeNameSatellite", ["loc", [null, [6, 35], [6, 53]]]]], [], []], "nameRhev", ["subexpr", "@mut", [["get", "nameRhev", ["loc", [null, [7, 25], [7, 33]]]]], [], []], "nameOpenStack", ["subexpr", "@mut", [["get", "nameOpenStack", ["loc", [null, [8, 30], [8, 43]]]]], [], []], "nameCloudForms", ["subexpr", "@mut", [["get", "nameCloudForms", ["loc", [null, [9, 31], [9, 45]]]]], [], []], "nameOpenShift", ["subexpr", "@mut", [["get", "nameOpenShift", ["loc", [null, [10, 30], [10, 43]]]]], [], []], "fullnameRhev", ["subexpr", "@mut", [["get", "fullnameRhev", ["loc", [null, [11, 29], [11, 41]]]]], [], []], "fullnameOpenStack", ["subexpr", "@mut", [["get", "fullnameOpenStack", ["loc", [null, [12, 34], [12, 51]]]]], [], []], "fullnameCloudForms", ["subexpr", "@mut", [["get", "fullnameCloudForms", ["loc", [null, [13, 35], [13, 53]]]]], [], []], "fullnameOpenShift", ["subexpr", "@mut", [["get", "fullnameOpenShift", ["loc", [null, [14, 34], [14, 51]]]]], [], []], "stepNumberRhev", ["subexpr", "@mut", [["get", "stepNumberRhev", ["loc", [null, [15, 31], [15, 45]]]]], [], []], "stepNumberOpenstack", ["subexpr", "@mut", [["get", "stepNumberOpenstack", ["loc", [null, [16, 36], [16, 55]]]]], [], []], "stepNumberCloudForms", ["subexpr", "@mut", [["get", "stepNumberCloudForms", ["loc", [null, [17, 37], [17, 57]]]]], [], []], "stepNumberOpenShift", ["subexpr", "@mut", [["get", "stepNumberOpenShift", ["loc", [null, [18, 36], [18, 55]]]]], [], []], "stepNumberSubscriptions", ["subexpr", "@mut", [["get", "stepNumberSubscriptions", ["loc", [null, [19, 40], [19, 63]]]]], [], []], "stepNumberReview", ["subexpr", "@mut", [["get", "stepNumberReview", ["loc", [null, [20, 33], [20, 49]]]]], [], []], "isDisabledRhev", ["subexpr", "@mut", [["get", "isDisabledRhev", ["loc", [null, [21, 31], [21, 45]]]]], [], []], "isDisabledOpenstack", ["subexpr", "@mut", [["get", "isDisabledOpenstack", ["loc", [null, [22, 36], [22, 55]]]]], [], []], "isDisabledCloudForms", ["subexpr", "@mut", [["get", "isDisabledCloudForms", ["loc", [null, [23, 37], [23, 57]]]]], [], []], "isDisabledOpenShift", ["subexpr", "@mut", [["get", "isDisabledOpenShift", ["loc", [null, [24, 36], [24, 55]]]]], [], []], "isDisabledSubscriptions", ["subexpr", "@mut", [["get", "isDisabledSubscriptions", ["loc", [null, [25, 40], [25, 63]]]]], [], []], "isDisabledReview", ["subexpr", "@mut", [["get", "isDisabledReview", ["loc", [null, [26, 33], [26, 49]]]]], [], []], "isRhev", ["subexpr", "@mut", [["get", "isRhev", ["loc", [null, [27, 23], [27, 29]]]]], [], []], "isOpenStack", ["subexpr", "@mut", [["get", "isOpenStack", ["loc", [null, [28, 28], [28, 39]]]]], [], []], "isCloudForms", ["subexpr", "@mut", [["get", "isCloudForms", ["loc", [null, [29, 29], [29, 41]]]]], [], []], "isOpenShift", ["subexpr", "@mut", [["get", "isOpenShift", ["loc", [null, [30, 28], [30, 39]]]]], [], []], "isSubscriptions", ["subexpr", "@mut", [["get", "isSubscriptions", ["loc", [null, [31, 32], [31, 47]]]]], [], []], "currentStepNumber", ["subexpr", "@mut", [["get", "currentStepNumber", ["loc", [null, [32, 34], [32, 51]]]]], [], []], "errorMsg", ["subexpr", "@mut", [["get", "errorMsg", ["loc", [null, [33, 25], [33, 33]]]]], [], []], "routeNameStart", ["subexpr", "@mut", [["get", "routeNameStart", ["loc", [null, [34, 31], [34, 45]]]]], [], []]], ["loc", [null, [3, 2], [35, 18]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 42,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/deployment.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row parent-sidebar-pf");
        var el2 = dom.createTextNode("\n ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 1, 1);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["block", "unless", [["get", "isHideWizard", ["loc", [null, [1, 10], [1, 22]]]]], [], 0, null, ["loc", [null, [1, 0], [37, 11]]]], ["content", "outlet", ["loc", [null, [40, 1], [40, 11]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("fusor-ember-cli/templates/deployments", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 0
            },
            "end": {
              "line": 8,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/deployments.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "spinner spinner-md spinner-inline");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "class", "spinner-text");
          var el2 = dom.createTextNode("\n    Loading ....\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 11,
              "column": 2
            },
            "end": {
              "line": 13,
              "column": 2
            }
          },
          "moduleName": "fusor-ember-cli/templates/deployments.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      New Deployment\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 35,
              "column": 8
            },
            "end": {
              "line": 37,
              "column": 8
            }
          },
          "moduleName": "fusor-ember-cli/templates/deployments.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("          ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "column-name", [], ["name", "Name", "col_name", "name", "sort_by", ["subexpr", "@mut", [["get", "sort_by", ["loc", [null, [36, 60], [36, 67]]]]], [], []], "dir", ["subexpr", "@mut", [["get", "dir", ["loc", [null, [36, 72], [36, 75]]]]], [], []]], ["loc", [null, [36, 10], [36, 77]]]]],
        locals: [],
        templates: []
      };
    })();
    var child3 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 40,
              "column": 8
            },
            "end": {
              "line": 42,
              "column": 8
            }
          },
          "moduleName": "fusor-ember-cli/templates/deployments.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("          ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "column-name", [], ["name", "Environment", "col_name", "lifecycle_environment", "sort_by", ["subexpr", "@mut", [["get", "sort_by", ["loc", [null, [41, 84], [41, 91]]]]], [], []], "dir", ["subexpr", "@mut", [["get", "dir", ["loc", [null, [41, 96], [41, 99]]]]], [], []]], ["loc", [null, [41, 10], [41, 101]]]]],
        locals: [],
        templates: []
      };
    })();
    var child4 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 45,
              "column": 8
            },
            "end": {
              "line": 47,
              "column": 8
            }
          },
          "moduleName": "fusor-ember-cli/templates/deployments.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("          ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "column-name", [], ["name", "Organization", "col_name", "organization", "sort_by", ["subexpr", "@mut", [["get", "sort_by", ["loc", [null, [46, 76], [46, 83]]]]], [], []], "dir", ["subexpr", "@mut", [["get", "dir", ["loc", [null, [46, 88], [46, 91]]]]], [], []]], ["loc", [null, [46, 10], [46, 93]]]]],
        locals: [],
        templates: []
      };
    })();
    var child5 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 50,
              "column": 8
            },
            "end": {
              "line": 52,
              "column": 8
            }
          },
          "moduleName": "fusor-ember-cli/templates/deployments.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("          ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "column-name", [], ["name", "Status", "col_name", "status", "sort_by", ["subexpr", "@mut", [["get", "sort_by", ["loc", [null, [51, 64], [51, 71]]]]], [], []], "dir", ["subexpr", "@mut", [["get", "dir", ["loc", [null, [51, 76], [51, 79]]]]], [], []]], ["loc", [null, [51, 10], [51, 81]]]]],
        locals: [],
        templates: []
      };
    })();
    var child6 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 55,
              "column": 8
            },
            "end": {
              "line": 57,
              "column": 8
            }
          },
          "moduleName": "fusor-ember-cli/templates/deployments.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("          ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "column-name", [], ["name", "Last Updated", "col_name", "updated_at", "sort_by", ["subexpr", "@mut", [["get", "sort_by", ["loc", [null, [56, 74], [56, 81]]]]], [], []], "dir", ["subexpr", "@mut", [["get", "dir", ["loc", [null, [56, 86], [56, 89]]]]], [], []]], ["loc", [null, [56, 10], [56, 91]]]]],
        locals: [],
        templates: []
      };
    })();
    var child7 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 64,
              "column": 2
            },
            "end": {
              "line": 66,
              "column": 2
            }
          },
          "moduleName": "fusor-ember-cli/templates/deployments.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "tr-deployment", [], ["deployment", ["subexpr", "@mut", [["get", "deployment", ["loc", [null, [65, 33], [65, 43]]]]], [], []]], ["loc", [null, [65, 6], [65, 45]]]]],
        locals: ["deployment"],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 80,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/deployments.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h1");
        dom.setAttribute(el1, "class", "rhci-title");
        var el2 = dom.createTextNode("Deployments");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "new-deployment-button");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "form");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "clearfix");
        var el3 = dom.createTextNode("\n   ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "form-group filter-deployments");
        var el4 = dom.createTextNode("\n     ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "col-md-5");
        var el5 = dom.createTextNode("\n       ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n     ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n     ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("button");
        dom.setAttribute(el4, "class", "btn btn-default");
        dom.setAttribute(el4, "style", "margin-left:-20px");
        var el5 = dom.createElement("i");
        dom.setAttribute(el5, "class", "fa fa-search");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode(" Search");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n   ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "table-responsive");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("table");
        dom.setAttribute(el2, "class", "table table-bordered table-striped small deployments-table");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("thead");
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("tr");
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("th");
        var el6 = dom.createTextNode("\n");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("      ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("th");
        var el6 = dom.createTextNode("\n");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("      ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("th");
        var el6 = dom.createTextNode("\n");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("      ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("th");
        var el6 = dom.createTextNode("\n");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("      ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("th");
        var el6 = dom.createTextNode("\n");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("      ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("th");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n    ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n  ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("tbody");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("  ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [10, 1]);
        var element1 = dom.childAt(element0, [1, 1]);
        var morphs = new Array(11);
        morphs[0] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [4]), 1, 1);
        morphs[2] = dom.createMorphAt(dom.childAt(fragment, [8, 1, 1, 1]), 1, 1);
        morphs[3] = dom.createMorphAt(dom.childAt(element1, [1]), 1, 1);
        morphs[4] = dom.createMorphAt(dom.childAt(element1, [3]), 1, 1);
        morphs[5] = dom.createMorphAt(dom.childAt(element1, [5]), 1, 1);
        morphs[6] = dom.createMorphAt(dom.childAt(element1, [7]), 1, 1);
        morphs[7] = dom.createMorphAt(dom.childAt(element1, [9]), 1, 1);
        morphs[8] = dom.createMorphAt(dom.childAt(element0, [3]), 1, 1);
        morphs[9] = dom.createMorphAt(fragment, 12, 12, contextualElement);
        morphs[10] = dom.createMorphAt(fragment, 14, 14, contextualElement);
        return morphs;
      },
      statements: [["block", "if", [["get", "isLoading", ["loc", [null, [3, 6], [3, 15]]]]], [], 0, null, ["loc", [null, [3, 0], [8, 7]]]], ["block", "link-to", ["deployment-new.start"], ["class", "btn btn-success"], 1, null, ["loc", [null, [11, 2], [13, 14]]]], ["inline", "input", [], ["type", "text", "class", "form-control filter-input", "placeholder", "Filter ...", "value", ["subexpr", "@mut", [["get", "search", ["loc", [null, [23, 33], [23, 39]]]]], [], []]], ["loc", [null, [21, 7], [23, 41]]]], ["block", "link-to", ["deployments", ["subexpr", "query-params", [], ["sort_by", "name", "dir", ["get", "sortByDirection", ["loc", [null, [35, 66], [35, 81]]]]], ["loc", [null, [35, 33], [35, 82]]]]], [], 2, null, ["loc", [null, [35, 8], [37, 20]]]], ["block", "link-to", ["deployments", ["subexpr", "query-params", [], ["sort_by", "lifecycle_environment", "dir", ["get", "sortByDirection", ["loc", [null, [40, 83], [40, 98]]]]], ["loc", [null, [40, 33], [40, 99]]]]], [], 3, null, ["loc", [null, [40, 8], [42, 20]]]], ["block", "link-to", ["deployments", ["subexpr", "query-params", [], ["sort_by", "organization", "dir", ["get", "sortByDirection", ["loc", [null, [45, 74], [45, 89]]]]], ["loc", [null, [45, 33], [45, 90]]]]], [], 4, null, ["loc", [null, [45, 8], [47, 20]]]], ["block", "link-to", ["deployments", ["subexpr", "query-params", [], ["sort_by", "status", "dir", ["get", "sortByDirection", ["loc", [null, [50, 68], [50, 83]]]]], ["loc", [null, [50, 33], [50, 84]]]]], [], 5, null, ["loc", [null, [50, 8], [52, 20]]]], ["block", "link-to", ["deployments", ["subexpr", "query-params", [], ["sort_by", "updated_at", "dir", ["get", "sortByDirection", ["loc", [null, [55, 72], [55, 87]]]]], ["loc", [null, [55, 33], [55, 88]]]]], [], 6, null, ["loc", [null, [55, 8], [57, 20]]]], ["block", "each", [["get", "filteredDeployments", ["loc", [null, [64, 10], [64, 29]]]]], [], 7, null, ["loc", [null, [64, 2], [66, 11]]]], ["inline", "pagination-footer", [], ["routeName", "deployments", "totalCnt", ["subexpr", "@mut", [["get", "totalCnt", ["loc", [null, [72, 29], [72, 37]]]]], [], []], "pageNumber", ["subexpr", "@mut", [["get", "pageNumber", ["loc", [null, [73, 31], [73, 41]]]]], [], []], "totalPages", ["subexpr", "@mut", [["get", "totalPages", ["loc", [null, [74, 31], [74, 41]]]]], [], []], "pageRange", ["subexpr", "@mut", [["get", "pageRange", ["loc", [null, [75, 30], [75, 39]]]]], [], []]], ["loc", [null, [71, 0], [75, 41]]]], ["inline", "delete-deployment-modal", [], ["openModal", ["subexpr", "@mut", [["get", "openModal", ["loc", [null, [77, 36], [77, 45]]]]], [], []], "deployment", ["subexpr", "@mut", [["get", "deploymentInModal", ["loc", [null, [78, 37], [78, 54]]]]], [], []], "deleteDeployment", "deleteDeployment"], ["loc", [null, [77, 0], [79, 63]]]]],
      locals: [],
      templates: [child0, child1, child2, child3, child4, child5, child6, child7]
    };
  })());
});
define("fusor-ember-cli/templates/engine/discovered-host", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 4,
              "column": 4
            },
            "end": {
              "line": 10,
              "column": 4
            }
          },
          "moduleName": "fusor-ember-cli/templates/engine/discovered-host.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "spinner spinner-md spinner-inline");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "class", "spinner-text");
          var el2 = dom.createTextNode("\n        Loading ....\n      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 41,
                "column": 10
              },
              "end": {
                "line": 47,
                "column": 10
              }
            },
            "moduleName": "fusor-ember-cli/templates/engine/discovered-host.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("             ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "tr-engine", [], ["host", ["subexpr", "@mut", [["get", "host", ["loc", [null, [42, 30], [42, 34]]]]], [], []], "selectedRhevEngineHost", ["subexpr", "@mut", [["get", "selectedRhevEngineHost", ["loc", [null, [43, 48], [43, 70]]]]], [], []], "disabled", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [44, 34], [44, 43]]]]], [], []], "action", "onEngineChanged", "setIfHostnameInvalid", "setIfHostnameInvalid"], ["loc", [null, [42, 13], [46, 70]]]]],
          locals: ["host"],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 10,
              "column": 4
            },
            "end": {
              "line": 51,
              "column": 4
            }
          },
          "moduleName": "fusor-ember-cli/templates/engine/discovered-host.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "rhev-searchbar clearfix");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("form");
          dom.setAttribute(el2, "class", "form-inline");
          var el3 = dom.createTextNode("\n          ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "col-md-5");
          var el4 = dom.createTextNode("\n            ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("div");
          dom.setAttribute(el4, "class", "form-group");
          var el5 = dom.createTextNode("\n              ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("div");
          dom.setAttribute(el5, "class", "rhev-search-box");
          var el6 = dom.createTextNode("\n                  ");
          dom.appendChild(el5, el6);
          var el6 = dom.createComment("");
          dom.appendChild(el5, el6);
          var el6 = dom.createTextNode("\n              ");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n            ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n          ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n\n          ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "col-md-7 text-right");
          var el4 = dom.createTextNode("\n\n            ");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode(" selected\n\n            ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("button");
          dom.setAttribute(el4, "class", "btn btn-default btn-sm");
          dom.setAttribute(el4, "data-qci", "refresh_engines");
          var el5 = dom.createTextNode("\n                Refresh Data\n            ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n          ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n\n        ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("table");
          dom.setAttribute(el1, "class", "table table-bordered small fusor-table");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("tbody");
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("        ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1, 1]);
          var element1 = dom.childAt(element0, [3]);
          var element2 = dom.childAt(element1, [3]);
          var element3 = dom.childAt(fragment, [3]);
          var morphs = new Array(6);
          morphs[0] = dom.createMorphAt(dom.childAt(element0, [1, 1, 1]), 1, 1);
          morphs[1] = dom.createMorphAt(element1, 1, 1);
          morphs[2] = dom.createAttrMorph(element2, 'disabled');
          morphs[3] = dom.createElementMorph(element2);
          morphs[4] = dom.createMorphAt(element3, 1, 1);
          morphs[5] = dom.createMorphAt(dom.childAt(element3, [3]), 1, 1);
          return morphs;
        },
        statements: [["inline", "input", [], ["type", "text", "class", "form-control rhev-search-input", "placeholder", " Search ...", "data-qci", "rhev-search-input", "value", ["subexpr", "@mut", [["get", "searchString", ["loc", [null, [20, 37], [20, 49]]]]], [], []], "disabled", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [21, 40], [21, 49]]]]], [], []]], ["loc", [null, [17, 18], [21, 51]]]], ["content", "numSelected", ["loc", [null, [28, 12], [28, 27]]]], ["attribute", "disabled", ["get", "isStarted", ["loc", [null, [30, 98], [30, 107]]]]], ["element", "action", ["refreshDiscoveredHosts"], [], ["loc", [null, [30, 51], [30, 86]]]], ["inline", "partial", ["thead-discovered-hosts"], [], ["loc", [null, [39, 8], [39, 44]]]], ["block", "each", [["get", "sortedHosts", ["loc", [null, [41, 18], [41, 29]]]]], [], 0, null, ["loc", [null, [41, 10], [47, 19]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 62,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/engine/discovered-host.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "col-lg-9");
        var el3 = dom.createTextNode("\n\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0, 1]), 1, 1);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        return morphs;
      },
      statements: [["block", "if", [["get", "isLoadingHosts", ["loc", [null, [4, 10], [4, 24]]]]], [], 0, 1, ["loc", [null, [4, 4], [51, 11]]]], ["inline", "cancel-back-next", [], ["backRouteName", "rhev-setup", "disableBack", false, "nextRouteName", ["subexpr", "@mut", [["get", "engineNextRouteName", ["loc", [null, [58, 33], [58, 52]]]]], [], []], "disableNext", ["subexpr", "@mut", [["get", "disableNextOnEngine", ["loc", [null, [59, 31], [59, 50]]]]], [], []], "disableCancel", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [60, 33], [60, 42]]]]], [], []], "deploymentName", ["subexpr", "@mut", [["get", "deploymentName", ["loc", [null, [61, 34], [61, 48]]]]], [], []]], ["loc", [null, [56, 0], [61, 50]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("fusor-ember-cli/templates/engine", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 12,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/engine.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "col-md-12");
        var el3 = dom.createTextNode("\n\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        var el4 = dom.createTextNode("\n      Select a target machine for the ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode(":\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0, 1]);
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(element0, [1]), 1, 1);
        morphs[1] = dom.createMorphAt(element0, 3, 3);
        return morphs;
      },
      statements: [["content", "engineTabNameLowercase", ["loc", [null, [5, 38], [5, 64]]]], ["content", "outlet", ["loc", [null, [8, 4], [8, 14]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("fusor-ember-cli/templates/entitlements.loading", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/entitlements.loading.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() {
        return [];
      },
      statements: [],
      locals: [],
      templates: []
    };
  })());
});
define("fusor-ember-cli/templates/hypervisor/discovered-host", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 4,
              "column": 4
            },
            "end": {
              "line": 10,
              "column": 4
            }
          },
          "moduleName": "fusor-ember-cli/templates/hypervisor/discovered-host.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "spinner spinner-md spinner-inline");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "class", "spinner-text");
          var el2 = dom.createTextNode("\n        Loading ....\n      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 32,
                  "column": 16
                },
                "end": {
                  "line": 34,
                  "column": 16
                }
              },
              "moduleName": "fusor-ember-cli/templates/hypervisor/discovered-host.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                  ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("a");
              dom.setAttribute(el1, "data-qci", "deselect-all");
              var el2 = dom.createTextNode("Deselect all (");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode(")");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element2 = dom.childAt(fragment, [1]);
              var morphs = new Array(2);
              morphs[0] = dom.createElementMorph(element2);
              morphs[1] = dom.createMorphAt(element2, 1, 1);
              return morphs;
            },
            statements: [["element", "action", ["setUncheckAll"], [], ["loc", [null, [33, 45], [33, 71]]]], ["content", "availableHosts.length", ["loc", [null, [33, 86], [33, 111]]]]],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 34,
                  "column": 16
                },
                "end": {
                  "line": 36,
                  "column": 16
                }
              },
              "moduleName": "fusor-ember-cli/templates/hypervisor/discovered-host.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                  ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("a");
              dom.setAttribute(el1, "data-qci", "deselect-all");
              var el2 = dom.createTextNode("Select all (");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode(")");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element1 = dom.childAt(fragment, [1]);
              var morphs = new Array(2);
              morphs[0] = dom.createElementMorph(element1);
              morphs[1] = dom.createMorphAt(element1, 1, 1);
              return morphs;
            },
            statements: [["element", "action", ["setCheckAll"], [], ["loc", [null, [35, 45], [35, 69]]]], ["content", "availableHosts.length", ["loc", [null, [35, 82], [35, 107]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 30,
                "column": 12
              },
              "end": {
                "line": 38,
                "column": 12
              }
            },
            "moduleName": "fusor-ember-cli/templates/hypervisor/discovered-host.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("              ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            dom.setAttribute(el1, "class", "rhev-select-all");
            var el2 = dom.createTextNode("\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("              ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
            return morphs;
          },
          statements: [["block", "if", [["get", "isAllChecked", ["loc", [null, [32, 22], [32, 34]]]]], [], 0, 1, ["loc", [null, [32, 16], [36, 23]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 55,
                "column": 8
              },
              "end": {
                "line": 69,
                "column": 8
              }
            },
            "moduleName": "fusor-ember-cli/templates/hypervisor/discovered-host.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("           ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "tr-hypervisor", [], ["host", ["subexpr", "@mut", [["get", "host", ["loc", [null, [56, 32], [56, 36]]]]], [], []], "model", ["subexpr", "@mut", [["get", "model", ["loc", [null, [57, 33], [57, 38]]]]], [], []], "isCustomScheme", ["subexpr", "@mut", [["get", "isCustomScheme", ["loc", [null, [58, 42], [58, 56]]]]], [], []], "isMac", ["subexpr", "@mut", [["get", "isMac", ["loc", [null, [59, 33], [59, 38]]]]], [], []], "isHypervisorN", ["subexpr", "@mut", [["get", "isHypervisorN", ["loc", [null, [60, 41], [60, 54]]]]], [], []], "customPreprendName", ["subexpr", "@mut", [["get", "customPreprendName", ["loc", [null, [61, 46], [61, 64]]]]], [], []], "isFreeform", ["subexpr", "@mut", [["get", "isFreeform", ["loc", [null, [62, 38], [62, 48]]]]], [], []], "num", ["subexpr", "@mut", [["get", "host.id", ["loc", [null, [63, 31], [63, 38]]]]], [], []], "disabled", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [64, 36], [64, 45]]]]], [], []], "filteredHosts", ["subexpr", "@mut", [["get", "filteredHosts", ["loc", [null, [65, 41], [65, 54]]]]], [], []], "setIfHostnameInvalid", "setIfHostnameInvalid", "customPrefixValidator", ["subexpr", "@mut", [["get", "customPrefixValidator", ["loc", [null, [67, 49], [67, 70]]]]], [], []]], ["loc", [null, [56, 11], [68, 29]]]]],
          locals: ["host"],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 10,
              "column": 4
            },
            "end": {
              "line": 73,
              "column": 4
            }
          },
          "moduleName": "fusor-ember-cli/templates/hypervisor/discovered-host.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "rhev-searchbar clearfix");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("form");
          dom.setAttribute(el2, "class", "form-inline");
          var el3 = dom.createTextNode("\n          ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "col-md-5");
          var el4 = dom.createTextNode("\n            ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("div");
          dom.setAttribute(el4, "class", "form-group");
          var el5 = dom.createTextNode("\n              ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("div");
          dom.setAttribute(el5, "class", "rhev-search-box");
          var el6 = dom.createTextNode("\n                  ");
          dom.appendChild(el5, el6);
          var el6 = dom.createComment("");
          dom.appendChild(el5, el6);
          var el6 = dom.createTextNode("\n              ");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n            ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n          ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n\n          ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "col-md-7 text-right");
          var el4 = dom.createTextNode("\n\n            ");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode(" selected\n\n");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n            ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("button");
          dom.setAttribute(el4, "class", "btn btn-default btn-sm");
          dom.setAttribute(el4, "data-qci", "edit-naming-scheme");
          var el5 = dom.createTextNode("\n                Edit Naming Scheme\n            ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n\n            ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("button");
          dom.setAttribute(el4, "class", "btn btn-default btn-sm");
          dom.setAttribute(el4, "data-qci", "refresh_hypervisors");
          var el5 = dom.createTextNode("\n                Refresh Data\n            ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n          ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n\n        ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("table");
          dom.setAttribute(el1, "class", "table table-bordered small fusor-table");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("tbody");
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("        ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element3 = dom.childAt(fragment, [1, 1]);
          var element4 = dom.childAt(element3, [3]);
          var element5 = dom.childAt(element4, [5]);
          var element6 = dom.childAt(element4, [7]);
          var element7 = dom.childAt(fragment, [3]);
          var morphs = new Array(9);
          morphs[0] = dom.createMorphAt(dom.childAt(element3, [1, 1, 1]), 1, 1);
          morphs[1] = dom.createMorphAt(element4, 1, 1);
          morphs[2] = dom.createMorphAt(element4, 3, 3);
          morphs[3] = dom.createAttrMorph(element5, 'disabled');
          morphs[4] = dom.createElementMorph(element5);
          morphs[5] = dom.createAttrMorph(element6, 'disabled');
          morphs[6] = dom.createElementMorph(element6);
          morphs[7] = dom.createMorphAt(element7, 1, 1);
          morphs[8] = dom.createMorphAt(dom.childAt(element7, [3]), 1, 1);
          return morphs;
        },
        statements: [["inline", "input", [], ["type", "text", "class", "form-control rhev-search-input", "placeholder", " Search ...", "data-qci", "rhev-search-input", "value", ["subexpr", "@mut", [["get", "searchString", ["loc", [null, [20, 37], [20, 49]]]]], [], []], "disabled", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [21, 40], [21, 49]]]]], [], []]], ["loc", [null, [17, 18], [21, 51]]]], ["content", "model.length", ["loc", [null, [28, 12], [28, 28]]]], ["block", "if", [["get", "isNotStarted", ["loc", [null, [30, 18], [30, 30]]]]], [], 0, null, ["loc", [null, [30, 12], [38, 19]]]], ["attribute", "disabled", ["get", "isStarted", ["loc", [null, [40, 97], [40, 106]]]]], ["element", "action", ["openNamingSchemeModal"], [], ["loc", [null, [40, 51], [40, 85]]]], ["attribute", "disabled", ["get", "isStarted", ["loc", [null, [44, 98], [44, 107]]]]], ["element", "action", ["refreshDiscoveredHosts"], [], ["loc", [null, [44, 51], [44, 86]]]], ["inline", "partial", ["thead-discovered-hosts"], [], ["loc", [null, [53, 8], [53, 44]]]], ["block", "each", [["get", "filteredHosts", ["loc", [null, [55, 16], [55, 29]]]]], [], 1, null, ["loc", [null, [55, 8], [69, 17]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 78,
              "column": 0
            },
            "end": {
              "line": 83,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/hypervisor/discovered-host.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          dom.setAttribute(el1, "class", "btn btn-primary next-button");
          dom.setAttribute(el1, "data-qci", "next-button");
          var el2 = dom.createTextNode("Next ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("i");
          dom.setAttribute(el2, "class", "fa fa-angle-right");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createAttrMorph(element0, 'disabled');
          morphs[1] = dom.createElementMorph(element0);
          return morphs;
        },
        statements: [["attribute", "disabled", ["get", "disableNextOnHypervisor", ["loc", [null, [82, 101], [82, 124]]]]], ["element", "action", ["saveHyperVisors", "rhev-options"], [], ["loc", [null, [82, 10], [82, 53]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 95,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/hypervisor/discovered-host.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "col-lg-9");
        var el3 = dom.createTextNode("\n\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0, 1]), 1, 1);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[2] = dom.createMorphAt(fragment, 4, 4, contextualElement);
        return morphs;
      },
      statements: [["block", "if", [["get", "isLoadingHosts", ["loc", [null, [4, 10], [4, 24]]]]], [], 0, 1, ["loc", [null, [4, 4], [73, 11]]]], ["block", "cancel-back-next", [], ["backRouteName", ["subexpr", "@mut", [["get", "hypervisorBackRouteName", ["loc", [null, [78, 34], [78, 57]]]]], [], []], "disableBack", false, "disableCancel", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [80, 34], [80, 43]]]]], [], []], "deploymentName", ["subexpr", "@mut", [["get", "deploymentName", ["loc", [null, [81, 35], [81, 49]]]]], [], []]], 2, null, ["loc", [null, [78, 0], [83, 21]]]], ["inline", "naming-scheme-modal", [], ["openModal", ["subexpr", "@mut", [["get", "openModalNamingScheme", ["loc", [null, [85, 32], [85, 53]]]]], [], []], "namingOptions", ["subexpr", "@mut", [["get", "namingOptions", ["loc", [null, [86, 36], [86, 49]]]]], [], []], "hostNamingScheme", ["subexpr", "@mut", [["get", "hostNamingScheme", ["loc", [null, [87, 39], [87, 55]]]]], [], []], "isStarted", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [88, 32], [88, 41]]]]], [], []], "customPreprendName", ["subexpr", "@mut", [["get", "customPreprendName", ["loc", [null, [89, 41], [89, 59]]]]], [], []], "saveNamingScheme", "saveNamingScheme", "cancelNamingScheme", "cancelNamingScheme", "setSelectValue", "setSelectValue", "customPrefixValidator", ["subexpr", "@mut", [["get", "customPrefixValidator", ["loc", [null, [93, 44], [93, 65]]]]], [], []]], ["loc", [null, [85, 0], [94, 24]]]]],
      locals: [],
      templates: [child0, child1, child2]
    };
  })());
});
define("fusor-ember-cli/templates/hypervisor", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 13,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/hypervisor.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "col-md-12");
        var el3 = dom.createTextNode("\n\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        var el4 = dom.createTextNode("\n      Select one or more target machines to be hypervisors.\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("br");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0, 1]), 5, 5);
        return morphs;
      },
      statements: [["content", "outlet", ["loc", [null, [10, 4], [10, 14]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("fusor-ember-cli/templates/loading", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 9,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/loading.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "spinner spinner-md spinner-inline");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("span");
        dom.setAttribute(el1, "class", "spinner-text");
        var el2 = dom.createTextNode("\n  Loading ....\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() {
        return [];
      },
      statements: [],
      locals: [],
      templates: []
    };
  })());
});
define("fusor-ember-cli/templates/mainmenu", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 13,
              "column": 10
            },
            "end": {
              "line": 13,
              "column": 62
            }
          },
          "moduleName": "fusor-ember-cli/templates/mainmenu.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("FUSOR-EMBER-CLI / QCI DEMO");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 14,
              "column": 10
            },
            "end": {
              "line": 14,
              "column": 51
            }
          },
          "moduleName": "fusor-ember-cli/templates/mainmenu.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("All Deployments");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 15,
              "column": 10
            },
            "end": {
              "line": 15,
              "column": 59
            }
          },
          "moduleName": "fusor-ember-cli/templates/mainmenu.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("New Deployment");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child3 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 16,
              "column": 10
            },
            "end": {
              "line": 16,
              "column": 37
            }
          },
          "moduleName": "fusor-ember-cli/templates/mainmenu.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("README");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 21,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/mainmenu.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "style", "position: static; top: 0px;");
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "navbar-header");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("button");
        dom.setAttribute(el3, "type", "button");
        dom.setAttribute(el3, "class", "navbar-toggle collapsed");
        dom.setAttribute(el3, "data-toggle", "collapse");
        dom.setAttribute(el3, "data-target", "#bs-example-navbar-collapse-1");
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("span");
        dom.setAttribute(el4, "class", "sr-only");
        var el5 = dom.createTextNode("Toggle navigation");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("span");
        dom.setAttribute(el4, "class", "icon-bar");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("span");
        dom.setAttribute(el4, "class", "icon-bar");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("span");
        dom.setAttribute(el4, "class", "icon-bar");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("a");
        dom.setAttribute(el3, "class", "navbar-brand");
        dom.setAttribute(el3, "href", "#");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("ul");
        dom.setAttribute(el3, "class", "nav navbar-nav");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("li");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("li");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("li");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("li");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("li");
        var el5 = dom.createElement("a");
        dom.setAttribute(el5, "href", "/tests?coverage=true");
        var el6 = dom.createTextNode("Run Tests");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var element1 = dom.childAt(element0, [1, 5]);
        var morphs = new Array(5);
        morphs[0] = dom.createAttrMorph(element0, 'class');
        morphs[1] = dom.createMorphAt(dom.childAt(element1, [1]), 0, 0);
        morphs[2] = dom.createMorphAt(dom.childAt(element1, [3]), 0, 0);
        morphs[3] = dom.createMorphAt(dom.childAt(element1, [5]), 0, 0);
        morphs[4] = dom.createMorphAt(dom.childAt(element1, [7]), 0, 0);
        return morphs;
      },
      statements: [["attribute", "class", ["concat", ["navbar navbar-default navbar-inner navbar-fixed-top persist-header ", ["subexpr", "if", [["get", "isUpstream", ["loc", [null, [1, 84], [1, 94]]]], "navbar-inner-upstream"], [], ["loc", [null, [1, 79], [1, 120]]]]]]], ["block", "link-to", ["deployments"], [], 0, null, ["loc", [null, [13, 10], [13, 74]]]], ["block", "link-to", ["deployments"], [], 1, null, ["loc", [null, [14, 10], [14, 63]]]], ["block", "link-to", ["deployment-new.start"], [], 2, null, ["loc", [null, [15, 10], [15, 71]]]], ["block", "link-to", ["readme"], [], 3, null, ["loc", [null, [16, 10], [16, 49]]]]],
      locals: [],
      templates: [child0, child1, child2, child3]
    };
  })());
});
define("fusor-ember-cli/templates/new-node-registration-csv", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 15,
                "column": 8
              },
              "end": {
                "line": 17,
                "column": 8
              }
            },
            "moduleName": "fusor-ember-cli/templates/new-node-registration-csv.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("li");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
            return morphs;
          },
          statements: [["content", "error", ["loc", [null, [16, 14], [16, 23]]]]],
          locals: ["error"],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 10,
              "column": 0
            },
            "end": {
              "line": 21,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/new-node-registration-csv.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "row new-node-registration-csv-errors");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "col-xs-offset-1  col-xs-11");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("p");
          var el4 = dom.createTextNode("There were errors encountered while trying to parse the CSV file.");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("ul");
          var el4 = dom.createTextNode("\n");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("      ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1, 3]), 1, 1);
          return morphs;
        },
        statements: [["block", "each", [["get", "csvErrors", ["loc", [null, [15, 16], [15, 25]]]]], [], 0, null, ["loc", [null, [15, 8], [17, 17]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 26,
                  "column": 8
                },
                "end": {
                  "line": 28,
                  "column": 8
                }
              },
              "moduleName": "fusor-ember-cli/templates/new-node-registration-csv.hbs"
            },
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("          ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("li");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
              return morphs;
            },
            statements: [["content", "macAddress", ["loc", [null, [27, 14], [27, 28]]]]],
            locals: ["macAddress"],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 21,
                "column": 0
              },
              "end": {
                "line": 32,
                "column": 0
              }
            },
            "moduleName": "fusor-ember-cli/templates/new-node-registration-csv.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("  ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "row new-node-registration-csv-success");
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "col-xs-offset-1 col-xs-10");
            var el3 = dom.createTextNode("\n      ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("p");
            dom.setAttribute(el3, "class", "csv-success-message");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode(" nodes ready for registration:");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n      ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("ul");
            dom.setAttribute(el3, "class", "csv-mac-list");
            var el4 = dom.createTextNode("\n");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("      ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n    ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n  ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1, 1]);
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(dom.childAt(element0, [1]), 0, 0);
            morphs[1] = dom.createMorphAt(dom.childAt(element0, [3]), 1, 1);
            return morphs;
          },
          statements: [["content", "csvInfo.length", ["loc", [null, [24, 37], [24, 55]]]], ["block", "each", [["get", "csvMacList", ["loc", [null, [26, 16], [26, 26]]]]], [], 0, null, ["loc", [null, [26, 8], [28, 17]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 21,
              "column": 0
            },
            "end": {
              "line": 32,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/new-node-registration-csv.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "hasCsvInfo", ["loc", [null, [21, 10], [21, 20]]]]], [], 0, null, ["loc", [null, [21, 0], [32, 0]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 33,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/new-node-registration-csv.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "col-xs-offset-1  col-xs-11");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        var el4 = dom.createTextNode("Sample syntax for specifying nodes via CSV can be seen here:\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("a");
        dom.setAttribute(el4, "download", "");
        dom.setAttribute(el4, "href", "/fusor_ui/files/sample-nodes.csv");
        dom.setAttribute(el4, "target", "_blank");
        var el5 = dom.createTextNode("sample-nodes.csv");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("form");
        dom.setAttribute(el3, "class", "form-horizontal new-node-form-csv");
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("input");
        dom.setAttribute(el4, "id", "csvUploadInput");
        dom.setAttribute(el4, "class", "csv-upload-input");
        dom.setAttribute(el4, "value", "selectedCSVFile");
        dom.setAttribute(el4, "type", "file");
        dom.setAttribute(el4, "data-qci", "csvUploadInput");
        dom.setAttribute(el4, "accept", ".csv");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element1 = dom.childAt(fragment, [0, 1, 3, 1]);
        var morphs = new Array(2);
        morphs[0] = dom.createElementMorph(element1);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["element", "action", ["csvFileChosen"], ["on", "change"], ["loc", [null, [6, 134], [6, 172]]]], ["block", "if", [["get", "hasCsvErrors", ["loc", [null, [10, 6], [10, 18]]]]], [], 0, 1, ["loc", [null, [10, 0], [32, 7]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("fusor-ember-cli/templates/new-node-registration-specify", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 51,
              "column": 0
            },
            "end": {
              "line": 69,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/new-node-registration-specify.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("form");
          dom.setAttribute(el1, "class", "form-horizontal new-node-form-manual");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "row");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "col-xs-offset-3 col-xs-7");
          var el4 = dom.createTextNode("\n        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("p");
          var el5 = dom.createTextNode("One or more nodes of the above IP address can be specified by supplying\n          their MAC address(es), ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("strong");
          var el6 = dom.createTextNode("one address per line");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode(".");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 3, 3);
          return morphs;
        },
        statements: [["inline", "textarea-f-alt", [], ["cssId", "newNodeMacAddressManualInput", "label", "MAC address(es)", "value", ["subexpr", "@mut", [["get", "manualMacAddresses", ["loc", [null, [61, 28], [61, 46]]]]], [], []], "validator", ["subexpr", "@mut", [["get", "manualMacAddressesValidator", ["loc", [null, [62, 32], [62, 59]]]]], [], []], "resetErrorsMessageKey", ["subexpr", "@mut", [["get", "resetErrorsMessageKey", ["loc", [null, [63, 44], [63, 65]]]]], [], []], "inputContainerClass", "mac-address-manual-container col-xs-offset-3 col-xs-3", "errorContainerClass", "col-xs-5", "rows", 3, "spellcheck", false], ["loc", [null, [59, 4], [67, 40]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 82,
                "column": 6
              },
              "end": {
                "line": 90,
                "column": 6
              }
            },
            "moduleName": "fusor-ember-cli/templates/new-node-registration-specify.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "select-req-f", [], ["cssId", "newNodeVendorInputIpmi", "label", ["subexpr", "@mut", [["get", "newNodeVendorLabel", ["loc", [null, [84, 30], [84, 48]]]]], [], []], "labelSize", "left-aligned-label col-xs-2", "inputSize", "col-xs-3", "content", ["subexpr", "@mut", [["get", "vendors", ["loc", [null, [87, 32], [87, 39]]]]], [], []], "value", ["subexpr", "@mut", [["get", "ipmiVendor", ["loc", [null, [88, 30], [88, 40]]]]], [], []], "isRequired", true], ["loc", [null, [83, 8], [89, 41]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 90,
                "column": 6
              },
              "end": {
                "line": 98,
                "column": 6
              }
            },
            "moduleName": "fusor-ember-cli/templates/new-node-registration-specify.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "select-req-f", [], ["cssId", "newNodeVendorInputSsh", "label", ["subexpr", "@mut", [["get", "newNodeVendorLabel", ["loc", [null, [92, 30], [92, 48]]]]], [], []], "labelSize", "left-aligned-label col-xs-2", "inputSize", "col-xs-3", "content", ["subexpr", "@mut", [["get", "vendors", ["loc", [null, [95, 32], [95, 39]]]]], [], []], "value", ["subexpr", "@mut", [["get", "virtVendor", ["loc", [null, [96, 30], [96, 40]]]]], [], []], "isRequired", true], ["loc", [null, [91, 8], [97, 41]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 71,
              "column": 0
            },
            "end": {
              "line": 101,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/new-node-registration-specify.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("form");
          dom.setAttribute(el1, "class", "form-horizontal new-node-form-auto");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "row");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "col-xs-offset-3 col-xs-7");
          var el4 = dom.createTextNode("\n        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("p");
          var el5 = dom.createTextNode("Auto-detection works with a limited number of vendors, but will\n          attempt to find any nodes associated with the above IP address,\n          using the credentials supplied.");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "row");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "col-xs-3");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 3]), 3, 3);
          return morphs;
        },
        statements: [["block", "if", [["get", "isIpmi", ["loc", [null, [82, 12], [82, 18]]]]], [], 0, 1, ["loc", [null, [82, 6], [98, 13]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 102,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/new-node-registration-specify.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "form-horizontal new-node-form-specify");
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "form-group");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        dom.setAttribute(el3, "class", "control-label col-xs-3");
        dom.setAttribute(el3, "for", "registerNodesAutoInput");
        var el4 = dom.createTextNode("Auto-Detect");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "col-xs-4 bs-switch-register-nodes-auto");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var morphs = new Array(7);
        morphs[0] = dom.createMorphAt(element0, 1, 1);
        morphs[1] = dom.createMorphAt(element0, 3, 3);
        morphs[2] = dom.createMorphAt(element0, 5, 5);
        morphs[3] = dom.createMorphAt(element0, 7, 7);
        morphs[4] = dom.createMorphAt(dom.childAt(element0, [9, 3]), 0, 0);
        morphs[5] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[6] = dom.createMorphAt(fragment, 4, 4, contextualElement);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "text-f", [], ["cssId", "newNodeIpAddressInput", "label", "IP Address", "type", "text", "labelSize", "col-xs-3", "inputSize", "col-xs-4", "helpText", ["subexpr", "@mut", [["get", "helpText.ipAddress", ["loc", [null, [8, 21], [8, 39]]]]], [], []], "value", ["subexpr", "@mut", [["get", "nodeInfo.address", ["loc", [null, [9, 18], [9, 34]]]]], [], []], "validator", ["subexpr", "@mut", [["get", "hostAddressValidator", ["loc", [null, [10, 22], [10, 42]]]]], [], []], "resetErrorsMessageKey", ["subexpr", "@mut", [["get", "resetErrorsMessageKey", ["loc", [null, [11, 34], [11, 55]]]]], [], []], "isRequired", true], ["loc", [null, [3, 2], [12, 29]]]], ["inline", "select-req-f", [], ["cssId", "newNodeDriverInput", "label", "Driver", "labelSize", "col-xs-3", "inputSize", "col-xs-4", "content", ["subexpr", "@mut", [["get", "drivers", ["loc", [null, [18, 26], [18, 33]]]]], [], []], "helpText", ["subexpr", "@mut", [["get", "helpText.driver", ["loc", [null, [19, 27], [19, 42]]]]], [], []], "value", ["subexpr", "@mut", [["get", "nodeInfo.driver", ["loc", [null, [20, 24], [20, 39]]]]], [], []], "isValid", ["subexpr", "@mut", [["get", "isDriverValid", ["loc", [null, [21, 26], [21, 39]]]]], [], []], "showValidationError", ["subexpr", "@mut", [["get", "showDriverValidationError", ["loc", [null, [22, 38], [22, 63]]]]], [], []], "isRequired", true], ["loc", [null, [14, 2], [23, 35]]]], ["inline", "text-f", [], ["cssId", "newNodeIpmiUserInput", "label", ["subexpr", "@mut", [["get", "newNodeUsernameLabel", ["loc", [null, [26, 18], [26, 38]]]]], [], []], "type", "text", "labelSize", "col-xs-3", "inputSize", "col-xs-4", "helpText", ["subexpr", "@mut", [["get", "helpText.username", ["loc", [null, [30, 21], [30, 38]]]]], [], []], "value", ["subexpr", "@mut", [["get", "nodeInfo.username", ["loc", [null, [31, 18], [31, 35]]]]], [], []], "resetErrorsMessageKey", ["subexpr", "@mut", [["get", "resetErrorsMessageKey", ["loc", [null, [32, 34], [32, 55]]]]], [], []], "isRequired", true], ["loc", [null, [25, 2], [33, 29]]]], ["inline", "text-f", [], ["cssId", "newNodePasswordInput", "label", ["subexpr", "@mut", [["get", "newNodePasswordLabel", ["loc", [null, [36, 18], [36, 38]]]]], [], []], "type", "password", "labelSize", "form-label-nowrap col-xs-3", "inputSize", "col-xs-4", "helpText", ["subexpr", "@mut", [["get", "helpText.password", ["loc", [null, [40, 21], [40, 38]]]]], [], []], "value", ["subexpr", "@mut", [["get", "nodeInfo.password", ["loc", [null, [41, 18], [41, 35]]]]], [], []], "resetErrorsMessageKey", ["subexpr", "@mut", [["get", "resetErrorsMessageKey", ["loc", [null, [42, 34], [42, 55]]]]], [], []], "isRequired", true], ["loc", [null, [35, 2], [43, 29]]]], ["inline", "bs-switch", [], ["checked", ["subexpr", "@mut", [["get", "registerNodesAuto", ["loc", [null, [47, 76], [47, 93]]]]], [], []], "data-qci", "bs-switch-auto-detect"], ["loc", [null, [47, 56], [47, 128]]]], ["block", "if", [["get", "isNewNodeMethodManual", ["loc", [null, [51, 6], [51, 27]]]]], [], 0, null, ["loc", [null, [51, 0], [69, 7]]]], ["block", "if", [["get", "isNewNodeMethodAuto", ["loc", [null, [71, 6], [71, 25]]]]], [], 1, null, ["loc", [null, [71, 0], [101, 7]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("fusor-ember-cli/templates/new-node-registration-step1-body", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 12,
              "column": 8
            },
            "end": {
              "line": 12,
              "column": 140
            }
          },
          "moduleName": "fusor-ember-cli/templates/new-node-registration-step1-body.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 17,
              "column": 4
            },
            "end": {
              "line": 19,
              "column": 4
            }
          },
          "moduleName": "fusor-ember-cli/templates/new-node-registration-step1-body.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "partial", ["new-node-registration-specify"], [], ["loc", [null, [18, 6], [18, 49]]]]],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 23,
              "column": 8
            },
            "end": {
              "line": 23,
              "column": 135
            }
          },
          "moduleName": "fusor-ember-cli/templates/new-node-registration-step1-body.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child3 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 28,
              "column": 4
            },
            "end": {
              "line": 30,
              "column": 4
            }
          },
          "moduleName": "fusor-ember-cli/templates/new-node-registration-step1-body.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "partial", ["new-node-registration-csv"], [], ["loc", [null, [29, 6], [29, 45]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 32,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/new-node-registration-step1-body.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "col-xs-12");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        var el4 = dom.createTextNode("Nodes are registered with OpenStack by connecting to their power management interfaces.\n      In some environments, nodes can be auto-detected using those interfaces.\n      Otherwise, you can upload a CSV file that includes node details, or manually provide those details for each node.");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h3");
        var el4 = dom.createTextNode("Determine how to register nodes.");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "radio");
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        Auto-Detect or Specify Nodes\n      ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "radio");
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        Upload a CSV file\n      ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [2]);
        var morphs = new Array(4);
        morphs[0] = dom.createMorphAt(dom.childAt(element0, [1, 1]), 1, 1);
        morphs[1] = dom.createMorphAt(element0, 3, 3);
        morphs[2] = dom.createMorphAt(dom.childAt(element0, [5, 1]), 1, 1);
        morphs[3] = dom.createMorphAt(element0, 7, 7);
        return morphs;
      },
      statements: [["block", "radio-button", [], ["value", "specify", "groupValue", ["subexpr", "@mut", [["get", "registerNodesRadio", ["loc", [null, [12, 51], [12, 69]]]]], [], []], "id", "optionNewNodeMethodSpecify", "dataQci", "optionNewNodeMethodSpecify"], 0, null, ["loc", [null, [12, 8], [12, 157]]]], ["block", "if", [["get", "isNewNodeMethodSpecify", ["loc", [null, [17, 10], [17, 32]]]]], [], 1, null, ["loc", [null, [17, 4], [19, 11]]]], ["block", "radio-button", [], ["value", "csv_upload", "groupValue", ["subexpr", "@mut", [["get", "registerNodesRadio", ["loc", [null, [23, 54], [23, 72]]]]], [], []], "id", "optionNewNodeMethodCSV", "dataQci", "optionNewNodeMethodCSV"], 2, null, ["loc", [null, [23, 8], [23, 152]]]], ["block", "if", [["get", "isNewNodeMethodCSV", ["loc", [null, [28, 10], [28, 28]]]]], [], 3, null, ["loc", [null, [28, 4], [30, 11]]]]],
      locals: [],
      templates: [child0, child1, child2, child3]
    };
  })());
});
define("fusor-ember-cli/templates/new-node-registration-step2-body", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 19,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/new-node-registration-step2-body.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "row new-node-detect-infobar");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "col-xs-1 new-node-detect-infobar-col");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "new-node-detect-infobar-left");
          var el4 = dom.createTextNode("\n        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("span");
          dom.setAttribute(el4, "class", "fa fa-exclamation-triangle detect-nodes-error-icon");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "col-xs-9 new-node-detect-infobar-col");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "new-node-detect-infobar-middle");
          var el4 = dom.createTextNode("\n        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("span");
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "col-xs-2 new-node-detect-infobar-col");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "new-node-detect-infobar-right");
          var el4 = dom.createTextNode("\n        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("a");
          var el5 = dom.createTextNode("Re-scan");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element3 = dom.childAt(fragment, [1]);
          var element4 = dom.childAt(element3, [5, 1, 1]);
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(dom.childAt(element3, [3, 1, 1]), 0, 0);
          morphs[1] = dom.createElementMorph(element4);
          return morphs;
        },
        statements: [["content", "detectNodesErrorMsg", ["loc", [null, [10, 14], [10, 37]]]], ["element", "action", ["submitDetectNodes"], [], ["loc", [null, [15, 11], [15, 41]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 19,
                "column": 0
              },
              "end": {
                "line": 37,
                "column": 0
              }
            },
            "moduleName": "fusor-ember-cli/templates/new-node-registration-step2-body.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("  ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "row new-node-detect-infobar");
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "col-xs-1 new-node-detect-infobar-col");
            var el3 = dom.createTextNode("\n      ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "new-node-detect-infobar-left");
            var el4 = dom.createTextNode("\n        ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("span");
            dom.setAttribute(el4, "class", "fa fa-exclamation-triangle");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n      ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n    ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "col-xs-9 new-node-detect-infobar-col");
            var el3 = dom.createTextNode("\n      ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "new-node-detect-infobar-middle");
            var el4 = dom.createTextNode("\n        ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("span");
            var el5 = dom.createTextNode("Detection canceled.");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n      ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n    ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "col-xs-2 new-node-detect-infobar-col");
            var el3 = dom.createTextNode("\n      ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "new-node-detect-infobar-right");
            var el4 = dom.createTextNode("\n        ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("a");
            var el5 = dom.createTextNode("Re-scan");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n      ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n    ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n  ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element2 = dom.childAt(fragment, [1, 5, 1, 1]);
            var morphs = new Array(1);
            morphs[0] = dom.createElementMorph(element2);
            return morphs;
          },
          statements: [["element", "action", ["submitDetectNodes"], [], ["loc", [null, [33, 11], [33, 41]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 37,
                  "column": 0
                },
                "end": {
                  "line": 55,
                  "column": 0
                }
              },
              "moduleName": "fusor-ember-cli/templates/new-node-registration-step2-body.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("  ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "row new-node-detect-infobar");
              var el2 = dom.createTextNode("\n    ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("div");
              dom.setAttribute(el2, "class", "col-xs-1 new-node-detect-infobar-col");
              var el3 = dom.createTextNode("\n      ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("div");
              dom.setAttribute(el3, "class", "new-node-detect-infobar-left");
              var el4 = dom.createTextNode("\n        ");
              dom.appendChild(el3, el4);
              var el4 = dom.createElement("span");
              dom.setAttribute(el4, "class", "spinner spinner-sm spinner-inline");
              dom.appendChild(el3, el4);
              var el4 = dom.createTextNode("\n      ");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n    ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n    ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("div");
              dom.setAttribute(el2, "class", "col-xs-9 new-node-detect-infobar-col");
              var el3 = dom.createTextNode("\n      ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("div");
              dom.setAttribute(el3, "class", "new-node-detect-infobar-middle");
              var el4 = dom.createTextNode("\n        ");
              dom.appendChild(el3, el4);
              var el4 = dom.createElement("span");
              var el5 = dom.createTextNode("Detecting nodes...");
              dom.appendChild(el4, el5);
              dom.appendChild(el3, el4);
              var el4 = dom.createTextNode("\n      ");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n    ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n    ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("div");
              dom.setAttribute(el2, "class", "col-xs-2 new-node-detect-infobar-col");
              var el3 = dom.createTextNode("\n      ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("div");
              dom.setAttribute(el3, "class", "new-node-detect-infobar-right");
              var el4 = dom.createTextNode("\n        ");
              dom.appendChild(el3, el4);
              var el4 = dom.createElement("a");
              var el5 = dom.createTextNode("Cancel");
              dom.appendChild(el4, el5);
              dom.appendChild(el3, el4);
              var el4 = dom.createTextNode("\n      ");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n    ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n  ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element1 = dom.childAt(fragment, [1, 5, 1, 1]);
              var morphs = new Array(1);
              morphs[0] = dom.createElementMorph(element1);
              return morphs;
            },
            statements: [["element", "action", ["cancelDetectNodes"], [], ["loc", [null, [51, 11], [51, 41]]]]],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 55,
                  "column": 0
                },
                "end": {
                  "line": 73,
                  "column": 0
                }
              },
              "moduleName": "fusor-ember-cli/templates/new-node-registration-step2-body.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("  ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "row new-node-detect-infobar");
              var el2 = dom.createTextNode("\n    ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("div");
              dom.setAttribute(el2, "class", "col-xs-1 new-node-detect-infobar-col");
              var el3 = dom.createTextNode("\n      ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("div");
              dom.setAttribute(el3, "class", "new-node-detect-infobar-left");
              var el4 = dom.createTextNode("\n        ");
              dom.appendChild(el3, el4);
              var el4 = dom.createElement("span");
              dom.setAttribute(el4, "class", "pficon pficon-info");
              dom.appendChild(el3, el4);
              var el4 = dom.createTextNode("\n      ");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n    ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n    ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("div");
              dom.setAttribute(el2, "class", "col-xs-9 new-node-detect-infobar-col");
              var el3 = dom.createTextNode("\n      ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("div");
              dom.setAttribute(el3, "class", "new-node-detect-infobar-middle");
              var el4 = dom.createTextNode("\n        ");
              dom.appendChild(el3, el4);
              var el4 = dom.createElement("span");
              var el5 = dom.createTextNode("Detection finished.");
              dom.appendChild(el4, el5);
              dom.appendChild(el3, el4);
              var el4 = dom.createTextNode("\n      ");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n    ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n    ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("div");
              dom.setAttribute(el2, "class", "col-xs-2 new-node-detect-infobar-col");
              var el3 = dom.createTextNode("\n      ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("div");
              dom.setAttribute(el3, "class", "new-node-detect-infobar-right");
              var el4 = dom.createTextNode("\n        ");
              dom.appendChild(el3, el4);
              var el4 = dom.createElement("a");
              var el5 = dom.createTextNode("Re-scan");
              dom.appendChild(el4, el5);
              dom.appendChild(el3, el4);
              var el4 = dom.createTextNode("\n      ");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n    ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n  ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element0 = dom.childAt(fragment, [1, 5, 1, 1]);
              var morphs = new Array(1);
              morphs[0] = dom.createElementMorph(element0);
              return morphs;
            },
            statements: [["element", "action", ["submitDetectNodes"], [], ["loc", [null, [69, 11], [69, 41]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 37,
                "column": 0
              },
              "end": {
                "line": 73,
                "column": 0
              }
            },
            "moduleName": "fusor-ember-cli/templates/new-node-registration-step2-body.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["get", "autoDetectNodesInProgress", ["loc", [null, [37, 10], [37, 35]]]]], [], 0, 1, ["loc", [null, [37, 0], [73, 0]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 19,
              "column": 0
            },
            "end": {
              "line": 73,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/new-node-registration-step2-body.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "detectNodesCanceled", ["loc", [null, [19, 10], [19, 29]]]]], [], 0, 1, ["loc", [null, [19, 0], [73, 0]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 87,
              "column": 4
            },
            "end": {
              "line": 89,
              "column": 4
            }
          },
          "moduleName": "fusor-ember-cli/templates/new-node-registration-step2-body.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "class", "new-node-detect-invalid-icon fa fa-times-circle-o");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child3 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 107,
              "column": 4
            },
            "end": {
              "line": 109,
              "column": 4
            }
          },
          "moduleName": "fusor-ember-cli/templates/new-node-registration-step2-body.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("p");
          var el2 = dom.createElement("strong");
          var el3 = dom.createTextNode("No nodes detected yet...");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child4 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 110,
                "column": 6
              },
              "end": {
                "line": 112,
                "column": 6
              }
            },
            "moduleName": "fusor-ember-cli/templates/new-node-registration-step2-body.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("p");
            var el2 = dom.createElement("strong");
            var el3 = dom.createTextNode("No nodes detected.");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode(" ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("span");
            dom.setAttribute(el2, "class", "new-node-auto-detect-error");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 2]), 0, 0);
            return morphs;
          },
          statements: [["content", "autoDetectedNodesErrorMsg", ["loc", [null, [111, 88], [111, 117]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 117,
                  "column": 12
                },
                "end": {
                  "line": 119,
                  "column": 12
                }
              },
              "moduleName": "fusor-ember-cli/templates/new-node-registration-step2-body.hbs"
            },
            arity: 2,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("              ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "auto-node-registration-mac-address", [], ["host", ["subexpr", "@mut", [["get", "host", ["loc", [null, [118, 56], [118, 60]]]]], [], []], "index", ["subexpr", "@mut", [["get", "index", ["loc", [null, [118, 67], [118, 72]]]]], [], []]], ["loc", [null, [118, 14], [118, 74]]]]],
            locals: ["host", "index"],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 115,
                "column": 8
              },
              "end": {
                "line": 121,
                "column": 8
              }
            },
            "moduleName": "fusor-ember-cli/templates/new-node-registration-step2-body.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "new-node-detect-list");
            var el2 = dom.createTextNode("\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("          ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
            return morphs;
          },
          statements: [["block", "each", [["get", "autoDetectedNodes", ["loc", [null, [117, 20], [117, 37]]]]], [], 0, null, ["loc", [null, [117, 12], [119, 21]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 109,
              "column": 4
            },
            "end": {
              "line": 123,
              "column": 4
            }
          },
          "moduleName": "fusor-ember-cli/templates/new-node-registration-step2-body.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "new-node-detect-hosts-container");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 1, 1);
          dom.insertBoundary(fragment, 0);
          return morphs;
        },
        statements: [["block", "if", [["get", "noNodesDetected", ["loc", [null, [110, 12], [110, 27]]]]], [], 0, null, ["loc", [null, [110, 6], [112, 13]]]], ["block", "if", [["get", "hasAutoDetectedNodes", ["loc", [null, [115, 14], [115, 34]]]]], [], 1, null, ["loc", [null, [115, 8], [121, 15]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 126,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/new-node-registration-step2-body.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "col-xs-12");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        var el4 = dom.createTextNode("Choose a network interface for registration on any node with multiple detected.\n      Unselected nodes will not be registered.");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row node-auto-detect-status");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "col-xs-2 new-node-auto-detect-label-section");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("span");
        var el4 = dom.createElement("strong");
        var el5 = dom.createTextNode("Node Status:");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "col-xs-2 new-node-auto-detect-count-section");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("span");
        dom.setAttribute(el3, "class", "new-node-auto-detect-count");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "col-xs-2 new-node-auto-detect-text-section");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        var el4 = dom.createTextNode("unassigned");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        var el4 = dom.createTextNode("interfaces");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "col-xs-1 new-node-auto-detect-count-section light-left-border");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("span");
        dom.setAttribute(el3, "class", "new-node-auto-detect-count");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "col-xs-3 new-node-auto-detect-text-section");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        var el4 = dom.createTextNode("nodes selected");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        var el4 = dom.createTextNode("to register");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "col-xs-12");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element5 = dom.childAt(fragment, [4]);
        var element6 = dom.childAt(element5, [3]);
        var morphs = new Array(5);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(element6, 1, 1);
        morphs[2] = dom.createMorphAt(dom.childAt(element6, [3]), 0, 0);
        morphs[3] = dom.createMorphAt(dom.childAt(element5, [7, 1]), 0, 0);
        morphs[4] = dom.createMorphAt(dom.childAt(fragment, [6, 1]), 1, 1);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["block", "if", [["get", "detectNodesErrorMsg", ["loc", [null, [1, 6], [1, 25]]]]], [], 0, 1, ["loc", [null, [1, 0], [73, 7]]]], ["block", "if", [["get", "hasInvalidAutoDetectedNodes", ["loc", [null, [87, 10], [87, 37]]]]], [], 2, null, ["loc", [null, [87, 4], [89, 11]]]], ["content", "numAutoDetectedNodesInvalidCount", ["loc", [null, [90, 45], [90, 81]]]], ["content", "numAutoDetectedNodesValidCount", ["loc", [null, [97, 45], [97, 79]]]], ["block", "if", [["get", "autoDetectNodesInProgress", ["loc", [null, [107, 10], [107, 35]]]]], [], 3, 4, ["loc", [null, [107, 4], [123, 11]]]]],
      locals: [],
      templates: [child0, child1, child2, child3, child4]
    };
  })());
});
define("fusor-ember-cli/templates/openshift/openshift-configuration", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 9,
                "column": 4
              },
              "end": {
                "line": 14,
                "column": 4
              }
            },
            "moduleName": "fusor-ember-cli/templates/openshift/openshift-configuration.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            var el2 = dom.createTextNode("\n        NFS\n      ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element1 = dom.childAt(fragment, [1]);
            var morphs = new Array(1);
            morphs[0] = dom.createAttrMorph(element1, 'class');
            return morphs;
          },
          statements: [["attribute", "class", ["concat", [["subexpr", "if", [["get", "isStarted", ["loc", [null, [11, 24], [11, 33]]]], "disabled"], [], ["loc", [null, [11, 19], [11, 46]]]]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 16,
                "column": 4
              },
              "end": {
                "line": 20,
                "column": 4
              }
            },
            "moduleName": "fusor-ember-cli/templates/openshift/openshift-configuration.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            var el2 = dom.createTextNode("\n        Gluster\n      ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(1);
            morphs[0] = dom.createAttrMorph(element0, 'class');
            return morphs;
          },
          statements: [["attribute", "class", ["concat", [["subexpr", "if", [["get", "isStarted", ["loc", [null, [17, 24], [17, 33]]]], "disabled"], [], ["loc", [null, [17, 19], [17, 46]]]]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 7,
              "column": 2
            },
            "end": {
              "line": 21,
              "column": 2
            }
          },
          "moduleName": "fusor-ember-cli/templates/openshift/openshift-configuration.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("        \n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "radio-button", [], ["value", "NFS", "groupValue", ["subexpr", "@mut", [["get", "model.openshift_storage_type", ["loc", [null, [9, 43], [9, 71]]]]], [], []], "id", "nfs", "disabled", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [10, 29], [10, 38]]]]], [], []], "dataQci", "nfs-storage-type"], 0, null, ["loc", [null, [9, 4], [14, 21]]]], ["block", "radio-button", [], ["value", "GFS", "groupValue", ["subexpr", "@mut", [["get", "model.openshift_storage_type", ["loc", [null, [16, 43], [16, 71]]]]], [], []], "id", "gluster", "dataQci", "gluster-storage-type"], 1, null, ["loc", [null, [16, 4], [20, 21]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 93,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/openshift/openshift-configuration.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("p");
        var el2 = dom.createTextNode("\n  Configure persistent storage for OpenShift internal Docker registry\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "form form-horizontal");
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("br");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("p");
        var el3 = dom.createTextNode("\n    Set the user account that will be created and used to configure all nodes.\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("br");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("p");
        var el3 = dom.createTextNode("\n    Set subdomain name for a wildcard entry to point to the OpenShift router.\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("br");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("p");
        var el3 = dom.createTextNode("\n    Select OpenShift sample applications\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "ose-sample-apps");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element2 = dom.childAt(fragment, [2]);
        var morphs = new Array(9);
        morphs[0] = dom.createMorphAt(element2, 1, 1);
        morphs[1] = dom.createMorphAt(element2, 3, 3);
        morphs[2] = dom.createMorphAt(element2, 5, 5);
        morphs[3] = dom.createMorphAt(element2, 11, 11);
        morphs[4] = dom.createMorphAt(element2, 13, 13);
        morphs[5] = dom.createMorphAt(element2, 15, 15);
        morphs[6] = dom.createMorphAt(element2, 21, 21);
        morphs[7] = dom.createMorphAt(dom.childAt(element2, [27]), 1, 1);
        morphs[8] = dom.createMorphAt(fragment, 4, 4, contextualElement);
        return morphs;
      },
      statements: [["block", "base-f", [], ["label", "Storage Type", "isRequired", true], 0, null, ["loc", [null, [7, 2], [21, 13]]]], ["inline", "text-f", [], ["label", "Host", "value", ["subexpr", "@mut", [["get", "model.openshift_storage_host", ["loc", [null, [24, 10], [24, 38]]]]], [], []], "isRequired", true, "cssId", "openshift_storage_host", "disabled", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [26, 13], [26, 22]]]]], [], []], "validator", ["subexpr", "@mut", [["get", "storageHostValidator", ["loc", [null, [27, 14], [27, 34]]]]], [], []]], ["loc", [null, [23, 2], [28, 4]]]], ["inline", "text-f", [], ["label", "Export Path", "value", ["subexpr", "@mut", [["get", "model.openshift_export_path", ["loc", [null, [31, 10], [31, 37]]]]], [], []], "isRequired", true, "cssId", "openshift_export_path", "disabled", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [33, 13], [33, 22]]]]], [], []], "validator", ["subexpr", "@mut", [["get", "exportPathValidator", ["loc", [null, [34, 14], [34, 33]]]]], [], []]], ["loc", [null, [30, 2], [35, 4]]]], ["inline", "text-f", [], ["label", "Username", "value", ["subexpr", "@mut", [["get", "model.openshift_username", ["loc", [null, [43, 34], [43, 58]]]]], [], []], "isRequired", true, "cssId", "openshift_username", "disabled", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [44, 56], [44, 65]]]]], [], []], "validator", ["subexpr", "@mut", [["get", "usernameValidator", ["loc", [null, [45, 14], [45, 31]]]]], [], []]], ["loc", [null, [43, 2], [46, 4]]]], ["inline", "text-f", [], ["label", "Password", "type", "password", "value", ["subexpr", "@mut", [["get", "userPassword", ["loc", [null, [49, 10], [49, 22]]]]], [], []], "cssId", "openshift_password", "isRequired", true, "placeholder", "Must be 8 or more characters", "validator", ["subexpr", "@mut", [["get", "passwordValidator", ["loc", [null, [51, 14], [51, 31]]]]], [], []]], ["loc", [null, [48, 2], [52, 4]]]], ["inline", "text-f", [], ["label", "Confirm Password", "type", "password", "value", ["subexpr", "@mut", [["get", "confirmUserPassword", ["loc", [null, [55, 10], [55, 29]]]]], [], []], "cssId", "confirm_openshift_password", "isRequired", true, "placeholder", "Must match user password", "validator", ["subexpr", "@mut", [["get", "confirmUserPasswordValidator", ["loc", [null, [57, 14], [57, 42]]]]], [], []]], ["loc", [null, [54, 2], [58, 4]]]], ["inline", "text-f", [], ["label", "Subdomain", "value", ["subexpr", "@mut", [["get", "model.openshift_subdomain_name", ["loc", [null, [67, 8], [67, 38]]]]], [], []], "isRequired", true, "cssId", "openshift_subdomain_name", "disabled", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [68, 11], [68, 20]]]]], [], []], "validator", ["subexpr", "@mut", [["get", "subdomainValidator", ["loc", [null, [68, 31], [68, 49]]]]], [], []], "preText", "*.", "postText", ["subexpr", "@mut", [["get", "postTextDomainName", ["loc", [null, [69, 24], [69, 42]]]]], [], []]], ["loc", [null, [66, 2], [69, 44]]]], ["inline", "check-f", [], ["label", "Hello World", "checked", ["subexpr", "@mut", [["get", "model.openshift_sample_helloworld", ["loc", [null, [79, 14], [79, 47]]]]], [], []], "cssId", "openshift_hello_world", "isRequired", false, "helpText", "A Hello World sample HTML application"], ["loc", [null, [78, 4], [82, 56]]]], ["inline", "cancel-back-next", [], ["backRouteName", "openshift.openshift-nodes", "disableBack", false, "nextRouteName", ["subexpr", "@mut", [["get", "nextRouteNameAfterOpenshift", ["loc", [null, [89, 33], [89, 60]]]]], [], []], "disableNext", ["subexpr", "@mut", [["get", "disableNextOpenshiftConfig", ["loc", [null, [90, 31], [90, 57]]]]], [], []], "disableCancel", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [91, 33], [91, 42]]]]], [], []], "deploymentName", ["subexpr", "@mut", [["get", "deploymentName", ["loc", [null, [92, 34], [92, 48]]]]], [], []]], ["loc", [null, [87, 0], [92, 50]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("fusor-ember-cli/templates/openshift/openshift-nodes", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 18,
                  "column": 12
                },
                "end": {
                  "line": 21,
                  "column": 12
                }
              },
              "moduleName": "fusor-ember-cli/templates/openshift/openshift-nodes.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("              ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "tool-tip", [], ["faIcon", "fa-info-circle", "title", ["subexpr", "@mut", [["get", "cfmeTooltipError.cpu", ["loc", [null, [20, 20], [20, 40]]]]], [], []]], ["loc", [null, [19, 14], [20, 42]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 12,
                "column": 2
              },
              "end": {
                "line": 30,
                "column": 2
              }
            },
            "moduleName": "fusor-ember-cli/templates/openshift/openshift-nodes.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "row");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "col-md-9");
            var el3 = dom.createTextNode("\n        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "alert alert-warning rhci-alert");
            var el4 = dom.createTextNode("\n          ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("p");
            var el5 = dom.createTextNode("\n            Current Configuration Requirements\n");
            dom.appendChild(el4, el5);
            var el5 = dom.createComment("");
            dom.appendChild(el4, el5);
            var el5 = dom.createTextNode("          ");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n          ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("p");
            var el5 = dom.createTextNode("Master CPUs: ");
            dom.appendChild(el4, el5);
            var el5 = dom.createComment("");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n          ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("p");
            var el5 = dom.createTextNode("Worker CPUs: ");
            dom.appendChild(el4, el5);
            var el5 = dom.createComment("");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n          ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("p");
            var el5 = dom.createElement("strong");
            var el6 = dom.createTextNode("Total CPUs required: ");
            dom.appendChild(el5, el6);
            var el6 = dom.createComment("");
            dom.appendChild(el5, el6);
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n          ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("p");
            var el5 = dom.createElement("strong");
            var el6 = dom.createTextNode("Total CPUs available: ");
            dom.appendChild(el5, el6);
            var el6 = dom.createComment("");
            dom.appendChild(el5, el6);
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n        ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n      ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element9 = dom.childAt(fragment, [1, 1, 1]);
            var morphs = new Array(5);
            morphs[0] = dom.createMorphAt(dom.childAt(element9, [1]), 1, 1);
            morphs[1] = dom.createMorphAt(dom.childAt(element9, [3]), 1, 1);
            morphs[2] = dom.createMorphAt(dom.childAt(element9, [5]), 1, 1);
            morphs[3] = dom.createMorphAt(dom.childAt(element9, [7, 0]), 1, 1);
            morphs[4] = dom.createMorphAt(dom.childAt(element9, [9, 0]), 1, 1);
            return morphs;
          },
          statements: [["block", "if", [["get", "isCloudForms", ["loc", [null, [18, 18], [18, 30]]]]], [], 0, null, ["loc", [null, [18, 12], [21, 19]]]], ["content", "totalMasterCpus", ["loc", [null, [23, 26], [23, 45]]]], ["content", "totalWorkerCpus", ["loc", [null, [24, 26], [24, 45]]]], ["content", "vcpuNeeded", ["loc", [null, [25, 42], [25, 56]]]], ["content", "vcpuAvailable", ["loc", [null, [26, 43], [26, 60]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 38,
                  "column": 12
                },
                "end": {
                  "line": 41,
                  "column": 12
                }
              },
              "moduleName": "fusor-ember-cli/templates/openshift/openshift-nodes.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("              ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "tool-tip", [], ["faIcon", "fa-info-circle", "title", ["subexpr", "@mut", [["get", "cfmeTooltipError.ram", ["loc", [null, [40, 20], [40, 40]]]]], [], []]], ["loc", [null, [39, 14], [40, 42]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 32,
                "column": 2
              },
              "end": {
                "line": 50,
                "column": 2
              }
            },
            "moduleName": "fusor-ember-cli/templates/openshift/openshift-nodes.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "row");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "col-md-9");
            var el3 = dom.createTextNode("\n        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "alert alert-warning rhci-alert");
            var el4 = dom.createTextNode("\n          ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("p");
            var el5 = dom.createTextNode("\n            Current Configuration Requirements\n");
            dom.appendChild(el4, el5);
            var el5 = dom.createComment("");
            dom.appendChild(el4, el5);
            var el5 = dom.createTextNode("          ");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n          ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("p");
            var el5 = dom.createTextNode("Master RAM: ");
            dom.appendChild(el4, el5);
            var el5 = dom.createComment("");
            dom.appendChild(el4, el5);
            var el5 = dom.createTextNode(" GB");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n          ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("p");
            var el5 = dom.createTextNode("Worker RAM: ");
            dom.appendChild(el4, el5);
            var el5 = dom.createComment("");
            dom.appendChild(el4, el5);
            var el5 = dom.createTextNode(" GB");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n          ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("p");
            var el5 = dom.createElement("strong");
            var el6 = dom.createTextNode("Total RAM required: ");
            dom.appendChild(el5, el6);
            var el6 = dom.createComment("");
            dom.appendChild(el5, el6);
            var el6 = dom.createTextNode(" GB");
            dom.appendChild(el5, el6);
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n          ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("p");
            var el5 = dom.createElement("strong");
            var el6 = dom.createTextNode("Total RAM available: ");
            dom.appendChild(el5, el6);
            var el6 = dom.createComment("");
            dom.appendChild(el5, el6);
            var el6 = dom.createTextNode(" GB");
            dom.appendChild(el5, el6);
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n        ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n      ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element8 = dom.childAt(fragment, [1, 1, 1]);
            var morphs = new Array(5);
            morphs[0] = dom.createMorphAt(dom.childAt(element8, [1]), 1, 1);
            morphs[1] = dom.createMorphAt(dom.childAt(element8, [3]), 1, 1);
            morphs[2] = dom.createMorphAt(dom.childAt(element8, [5]), 1, 1);
            morphs[3] = dom.createMorphAt(dom.childAt(element8, [7, 0]), 1, 1);
            morphs[4] = dom.createMorphAt(dom.childAt(element8, [9, 0]), 1, 1);
            return morphs;
          },
          statements: [["block", "if", [["get", "isCloudForms", ["loc", [null, [38, 18], [38, 30]]]]], [], 0, null, ["loc", [null, [38, 12], [41, 19]]]], ["content", "totalMasterRam", ["loc", [null, [43, 25], [43, 43]]]], ["content", "totalWorkerRam", ["loc", [null, [44, 25], [44, 43]]]], ["content", "ramNeeded", ["loc", [null, [45, 41], [45, 54]]]], ["content", "ramAvailable", ["loc", [null, [46, 42], [46, 58]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child2 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 58,
                  "column": 12
                },
                "end": {
                  "line": 61,
                  "column": 12
                }
              },
              "moduleName": "fusor-ember-cli/templates/openshift/openshift-nodes.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("              ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "tool-tip", [], ["faIcon", "fa-info-circle", "title", ["subexpr", "@mut", [["get", "cfmeTooltipError.disk", ["loc", [null, [60, 20], [60, 41]]]]], [], []]], ["loc", [null, [59, 14], [60, 43]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 52,
                "column": 2
              },
              "end": {
                "line": 70,
                "column": 2
              }
            },
            "moduleName": "fusor-ember-cli/templates/openshift/openshift-nodes.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "row");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "col-md-9");
            var el3 = dom.createTextNode("\n        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "alert alert-warning rhci-alert");
            var el4 = dom.createTextNode("\n          ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("p");
            var el5 = dom.createTextNode("\n            Current Configuration Requirements\n");
            dom.appendChild(el4, el5);
            var el5 = dom.createComment("");
            dom.appendChild(el4, el5);
            var el5 = dom.createTextNode("          ");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n          ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("p");
            var el5 = dom.createTextNode("Master Disk: ");
            dom.appendChild(el4, el5);
            var el5 = dom.createComment("");
            dom.appendChild(el4, el5);
            var el5 = dom.createTextNode(" GB");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n          ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("p");
            var el5 = dom.createTextNode("Worker Disk + Storage: ");
            dom.appendChild(el4, el5);
            var el5 = dom.createComment("");
            dom.appendChild(el4, el5);
            var el5 = dom.createTextNode(" GB");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n          ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("p");
            var el5 = dom.createElement("strong");
            var el6 = dom.createTextNode("Total Disk required: ");
            dom.appendChild(el5, el6);
            var el6 = dom.createComment("");
            dom.appendChild(el5, el6);
            var el6 = dom.createTextNode(" GB");
            dom.appendChild(el5, el6);
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n          ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("p");
            var el5 = dom.createElement("strong");
            var el6 = dom.createTextNode("Total Disk available: ");
            dom.appendChild(el5, el6);
            var el6 = dom.createComment("");
            dom.appendChild(el5, el6);
            var el6 = dom.createTextNode(" GB");
            dom.appendChild(el5, el6);
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n        ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n      ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element7 = dom.childAt(fragment, [1, 1, 1]);
            var morphs = new Array(5);
            morphs[0] = dom.createMorphAt(dom.childAt(element7, [1]), 1, 1);
            morphs[1] = dom.createMorphAt(dom.childAt(element7, [3]), 1, 1);
            morphs[2] = dom.createMorphAt(dom.childAt(element7, [5]), 1, 1);
            morphs[3] = dom.createMorphAt(dom.childAt(element7, [7, 0]), 1, 1);
            morphs[4] = dom.createMorphAt(dom.childAt(element7, [9, 0]), 1, 1);
            return morphs;
          },
          statements: [["block", "if", [["get", "isCloudForms", ["loc", [null, [58, 18], [58, 30]]]]], [], 0, null, ["loc", [null, [58, 12], [61, 19]]]], ["content", "totalMasterDisk", ["loc", [null, [63, 26], [63, 45]]]], ["content", "totalWorkerDiskPlusStorage", ["loc", [null, [64, 36], [64, 66]]]], ["content", "diskNeeded", ["loc", [null, [65, 42], [65, 56]]]], ["content", "diskAvailable", ["loc", [null, [66, 43], [66, 60]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 71,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/openshift/openshift-nodes.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "row");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "col-md-9");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "alert alert-warning rhci-alert");
          var el4 = dom.createTextNode("\n        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("i");
          dom.setAttribute(el4, "class", "fa fa-2x fa-exclamation-triangle errorForValidation");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n         \n        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode(" is overcommitted. Consider lowering node counts or ");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode(" sizes.\n      ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element10 = dom.childAt(fragment, [1, 1, 1]);
          var morphs = new Array(5);
          morphs[0] = dom.createMorphAt(element10, 3, 3);
          morphs[1] = dom.createMorphAt(element10, 5, 5);
          morphs[2] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          morphs[3] = dom.createMorphAt(fragment, 5, 5, contextualElement);
          morphs[4] = dom.createMorphAt(fragment, 7, 7, contextualElement);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["content", "errorTypes", ["loc", [null, [7, 8], [7, 22]]]], ["content", "errorTypes", ["loc", [null, [7, 74], [7, 88]]]], ["block", "if", [["get", "isOverCapacityVcpu", ["loc", [null, [12, 8], [12, 26]]]]], [], 0, null, ["loc", [null, [12, 2], [30, 9]]]], ["block", "if", [["get", "isOverCapacityRam", ["loc", [null, [32, 8], [32, 25]]]]], [], 1, null, ["loc", [null, [32, 2], [50, 9]]]], ["block", "if", [["get", "isOverCapacityDisk", ["loc", [null, [52, 8], [52, 26]]]]], [], 2, null, ["loc", [null, [52, 2], [70, 9]]]]],
        locals: [],
        templates: [child0, child1, child2]
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 81,
              "column": 6
            },
            "end": {
              "line": 85,
              "column": 6
            }
          },
          "moduleName": "fusor-ember-cli/templates/openshift/openshift-nodes.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          var el2 = dom.createTextNode("\n          ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element6 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createAttrMorph(element6, 'class');
          morphs[1] = dom.createMorphAt(element6, 1, 1);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", [["subexpr", "if", [["get", "disableRHEV", ["loc", [null, [82, 26], [82, 37]]]], "disabled"], [], ["loc", [null, [82, 21], [82, 50]]]]]]], ["content", "fullnameRhev", ["loc", [null, [83, 10], [83, 26]]]]],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 89,
              "column": 6
            },
            "end": {
              "line": 93,
              "column": 6
            }
          },
          "moduleName": "fusor-ember-cli/templates/openshift/openshift-nodes.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          var el2 = dom.createTextNode("\n          ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element5 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createAttrMorph(element5, 'class');
          morphs[1] = dom.createMorphAt(element5, 1, 1);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", ["inline-block ", ["subexpr", "if", [["get", "disableOpenStack", ["loc", [null, [90, 39], [90, 55]]]], "disabled"], [], ["loc", [null, [90, 34], [90, 68]]]]]]], ["content", "fullnameOpenStack", ["loc", [null, [91, 10], [91, 31]]]]],
        locals: [],
        templates: []
      };
    })();
    var child3 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 96,
              "column": 4
            },
            "end": {
              "line": 104,
              "column": 4
            }
          },
          "moduleName": "fusor-ember-cli/templates/openshift/openshift-nodes.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("br");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("p");
          var el2 = dom.createTextNode("\n      Select how many virtual machines should be created as nodes for the OpenShift environment.\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [3]), 1, 1);
          return morphs;
        },
        statements: [["inline", "tool-tip", [], ["faIcon", "fa-info-circle", "title", "The environment consists of worker nodes and master nodes, which orchestrates tasks across the other nodes. Master and worker nodes are provisioned with different specifications, as seen in Node Details."], ["loc", [null, [100, 6], [101, 230]]]]],
        locals: [],
        templates: []
      };
    })();
    var child4 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 137,
                "column": 6
              },
              "end": {
                "line": 148,
                "column": 6
              }
            },
            "moduleName": "fusor-ember-cli/templates/openshift/openshift-nodes.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "button-selection", [], ["label", ["subexpr", "@mut", [["get", "_node.ordinal", ["loc", [null, [140, 16], [140, 29]]]]], [], []], "value", ["subexpr", "@mut", [["get", "_node.ordinal", ["loc", [null, [141, 16], [141, 29]]]]], [], []], "buttonType", "worker", "groupValue", ["subexpr", "@mut", [["get", "numWorkerNodes", ["loc", [null, [143, 21], [143, 35]]]]], [], []], "changed", "numWorkerNodesChanged", "customFocused", ["subexpr", "@mut", [["get", "isCustomNumWorkerNodes", ["loc", [null, [145, 24], [145, 46]]]]], [], []], "disabled", ["subexpr", "@mut", [["get", "_node.isOverCapacity", ["loc", [null, [146, 19], [146, 39]]]]], [], []]], ["loc", [null, [138, 8], [147, 10]]]]],
          locals: ["_node"],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 150,
                "column": 6
              },
              "end": {
                "line": 157,
                "column": 6
              }
            },
            "moduleName": "fusor-ember-cli/templates/openshift/openshift-nodes.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "simple-text-f", [], ["value", ["subexpr", "@mut", [["get", "numWorkerNodes", ["loc", [null, [151, 30], [151, 44]]]]], [], []], "class", "ose-custom-field", "disabled", ["subexpr", "@mut", [["get", "deploymentController.isStarted", ["loc", [null, [153, 33], [153, 63]]]]], [], []], "validator", ["subexpr", "@mut", [["get", "positiveIntegerValidator", ["loc", [null, [154, 34], [154, 58]]]]], [], []], "cssId", "custom-worker-nodes", "placeholder", "Enter"], ["loc", [null, [151, 8], [156, 45]]]]],
          locals: [],
          templates: []
        };
      })();
      var child2 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 157,
                "column": 6
              },
              "end": {
                "line": 159,
                "column": 6
              }
            },
            "moduleName": "fusor-ember-cli/templates/openshift/openshift-nodes.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("a");
            dom.setAttribute(el1, "data-qci", "show-custom-worker-nodes");
            var el2 = dom.createTextNode("custom");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element1 = dom.childAt(fragment, [1]);
            var morphs = new Array(1);
            morphs[0] = dom.createElementMorph(element1);
            return morphs;
          },
          statements: [["element", "action", ["showCustomNumWorkerNodes"], [], ["loc", [null, [158, 46], [158, 83]]]]],
          locals: [],
          templates: []
        };
      })();
      var child3 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 194,
                "column": 4
              },
              "end": {
                "line": 202,
                "column": 4
              }
            },
            "moduleName": "fusor-ember-cli/templates/openshift/openshift-nodes.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "simple-text-f", [], ["value", ["subexpr", "@mut", [["get", "model.openshift_storage_size", ["loc", [null, [195, 28], [195, 56]]]]], [], []], "class", "ose-custom-field", "disabled", ["subexpr", "@mut", [["get", "deploymentController.isStarted", ["loc", [null, [197, 31], [197, 61]]]]], [], []], "validator", ["subexpr", "@mut", [["get", "positiveIntegerValidator", ["loc", [null, [198, 32], [198, 56]]]]], [], []], "cssId", "custom-storage-size", "placeholder", "Enter", "suffix", "GB"], ["loc", [null, [195, 6], [201, 35]]]]],
          locals: [],
          templates: []
        };
      })();
      var child4 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 202,
                "column": 4
              },
              "end": {
                "line": 204,
                "column": 4
              }
            },
            "moduleName": "fusor-ember-cli/templates/openshift/openshift-nodes.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("a");
            dom.setAttribute(el1, "data-qci", "show-custom-storage-size");
            var el2 = dom.createTextNode("custom");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(1);
            morphs[0] = dom.createElementMorph(element0);
            return morphs;
          },
          statements: [["element", "action", ["showCustomStorageSize"], [], ["loc", [null, [203, 44], [203, 78]]]]],
          locals: [],
          templates: []
        };
      })();
      var child5 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 206,
                "column": 4
              },
              "end": {
                "line": 241,
                "column": 4
              }
            },
            "moduleName": "fusor-ember-cli/templates/openshift/openshift-nodes.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n\n        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            return morphs;
          },
          statements: [["inline", "ose-env-summary", [], ["numNodesDisplay", ["subexpr", "@mut", [["get", "numNodesDisplay", ["loc", [null, [207, 42], [207, 57]]]]], [], []], "positiveIntegerValidator", ["subexpr", "@mut", [["get", "positiveIntegerValidator", ["loc", [null, [208, 51], [208, 75]]]]], [], []], "numMasterNodes", ["subexpr", "@mut", [["get", "numMasterNodes", ["loc", [null, [209, 41], [209, 55]]]]], [], []], "numWorkerNodes", ["subexpr", "@mut", [["get", "numWorkerNodes", ["loc", [null, [210, 41], [210, 55]]]]], [], []], "storageSize", ["subexpr", "@mut", [["get", "storageSize", ["loc", [null, [211, 38], [211, 49]]]]], [], []], "masterVcpu", ["subexpr", "@mut", [["get", "masterVcpu", ["loc", [null, [212, 37], [212, 47]]]]], [], []], "masterRam", ["subexpr", "@mut", [["get", "masterRam", ["loc", [null, [213, 36], [213, 45]]]]], [], []], "masterDisk", ["subexpr", "@mut", [["get", "masterDisk", ["loc", [null, [214, 37], [214, 47]]]]], [], []], "workerVcpu", ["subexpr", "@mut", [["get", "workerVcpu", ["loc", [null, [215, 37], [215, 47]]]]], [], []], "workerRam", ["subexpr", "@mut", [["get", "workerRam", ["loc", [null, [216, 36], [216, 45]]]]], [], []], "workerDisk", ["subexpr", "@mut", [["get", "workerDisk", ["loc", [null, [217, 37], [217, 47]]]]], [], []], "vcpuNeeded", ["subexpr", "@mut", [["get", "vcpuNeeded", ["loc", [null, [218, 37], [218, 47]]]]], [], []], "ramNeeded", ["subexpr", "@mut", [["get", "ramNeeded", ["loc", [null, [219, 36], [219, 45]]]]], [], []], "diskNeeded", ["subexpr", "@mut", [["get", "diskNeeded", ["loc", [null, [220, 37], [220, 47]]]]], [], []], "vcpuAvailable", ["subexpr", "@mut", [["get", "vcpuAvailable", ["loc", [null, [221, 40], [221, 53]]]]], [], []], "ramAvailable", ["subexpr", "@mut", [["get", "ramAvailable", ["loc", [null, [222, 39], [222, 51]]]]], [], []], "diskAvailable", ["subexpr", "@mut", [["get", "diskAvailable", ["loc", [null, [223, 40], [223, 53]]]]], [], []], "isCloudForms", ["subexpr", "@mut", [["get", "isCloudForms", ["loc", [null, [224, 39], [224, 51]]]]], [], []], "substractCfme", ["subexpr", "@mut", [["get", "substractCfme", ["loc", [null, [225, 40], [225, 53]]]]], [], []], "cfmeDisk", ["subexpr", "@mut", [["get", "cfmeDisk", ["loc", [null, [226, 35], [226, 43]]]]], [], []], "cfmeRam", ["subexpr", "@mut", [["get", "cfmeRam", ["loc", [null, [227, 34], [227, 41]]]]], [], []], "cfmeVcpu", ["subexpr", "@mut", [["get", "cfmeVcpu", ["loc", [null, [228, 35], [228, 43]]]]], [], []]], ["loc", [null, [207, 8], [228, 45]]]], ["inline", "node-details", [], ["numNodesDisplay", ["subexpr", "@mut", [["get", "numNodesDisplay", ["loc", [null, [230, 39], [230, 54]]]]], [], []], "numMasterNodes", ["subexpr", "@mut", [["get", "numMasterNodes", ["loc", [null, [231, 38], [231, 52]]]]], [], []], "numWorkerNodes", ["subexpr", "@mut", [["get", "numWorkerNodes", ["loc", [null, [232, 38], [232, 52]]]]], [], []], "storageSize", ["subexpr", "@mut", [["get", "storageSize", ["loc", [null, [233, 35], [233, 46]]]]], [], []], "validator", ["subexpr", "@mut", [["get", "positiveIntegerValidator", ["loc", [null, [234, 33], [234, 57]]]]], [], []], "masterVcpu", ["subexpr", "@mut", [["get", "masterVcpu", ["loc", [null, [235, 34], [235, 44]]]]], [], []], "masterRam", ["subexpr", "@mut", [["get", "masterRam", ["loc", [null, [236, 33], [236, 42]]]]], [], []], "masterDisk", ["subexpr", "@mut", [["get", "masterDisk", ["loc", [null, [237, 34], [237, 44]]]]], [], []], "workerVcpu", ["subexpr", "@mut", [["get", "workerVcpu", ["loc", [null, [238, 34], [238, 44]]]]], [], []], "workerRam", ["subexpr", "@mut", [["get", "workerRam", ["loc", [null, [239, 33], [239, 42]]]]], [], []], "workerDisk", ["subexpr", "@mut", [["get", "workerDisk", ["loc", [null, [240, 34], [240, 44]]]]], [], []]], ["loc", [null, [230, 8], [240, 46]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 106,
              "column": 0
            },
            "end": {
              "line": 243,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/openshift/openshift-nodes.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "row");
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "col-xs-12 col-sm-12 col-md-9 col-lg-7 ose-number-node-buttons");
          var el3 = dom.createTextNode("\n\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "ose-number-buttons-block");
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("span");
          dom.setAttribute(el4, "class", "ose-node-label");
          var el5 = dom.createTextNode("Master Nodes");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n\n      ");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n\n      ");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n    ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "ose-number-buttons-block");
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("span");
          dom.setAttribute(el4, "class", "ose-node-label worker-nodes-label");
          var el5 = dom.createTextNode("Worker Nodes");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n\n      ");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n\n");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n    ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("br");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("p");
          var el2 = dom.createTextNode("\n      Select how much additional storage is needed for Docker containers on each worker node.\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element2 = dom.childAt(fragment, [0, 1]);
          var element3 = dom.childAt(element2, [1]);
          var element4 = dom.childAt(element2, [3]);
          var morphs = new Array(11);
          morphs[0] = dom.createMorphAt(element3, 3, 3);
          morphs[1] = dom.createMorphAt(element3, 5, 5);
          morphs[2] = dom.createMorphAt(element4, 3, 3);
          morphs[3] = dom.createMorphAt(element4, 5, 5);
          morphs[4] = dom.createMorphAt(element4, 7, 7);
          morphs[5] = dom.createMorphAt(fragment, 6, 6, contextualElement);
          morphs[6] = dom.createMorphAt(fragment, 8, 8, contextualElement);
          morphs[7] = dom.createMorphAt(fragment, 10, 10, contextualElement);
          morphs[8] = dom.createMorphAt(fragment, 12, 12, contextualElement);
          morphs[9] = dom.createMorphAt(fragment, 14, 14, contextualElement);
          morphs[10] = dom.createMorphAt(fragment, 16, 16, contextualElement);
          return morphs;
        },
        statements: [["inline", "button-selection", [], ["label", 1, "value", 1, "groupValue", ["subexpr", "@mut", [["get", "numMasterNodes", ["loc", [null, [116, 19], [116, 33]]]]], [], []], "buttonType", "master", "disabled", false], ["loc", [null, [113, 6], [118, 24]]]], ["inline", "tool-tip", [], ["faIcon", "fa-info-circle", "title", "OpenShift deployments currently only support one Master Node"], ["loc", [null, [120, 6], [121, 87]]]], ["inline", "button-selection", [], ["label", ["subexpr", "@mut", [["get", "_firstWorkerNode.ordinal", ["loc", [null, [129, 14], [129, 38]]]]], [], []], "value", ["subexpr", "@mut", [["get", "_firstWorkerNode.ordinal", ["loc", [null, [130, 14], [130, 38]]]]], [], []], "groupValue", ["subexpr", "@mut", [["get", "numWorkerNodes", ["loc", [null, [131, 19], [131, 33]]]]], [], []], "buttonType", "worker", "customFocused", ["subexpr", "@mut", [["get", "isCustomNumWorkerNodes", ["loc", [null, [133, 22], [133, 44]]]]], [], []], "changed", "numWorkerNodesChanged"], ["loc", [null, [127, 6], [135, 8]]]], ["block", "each", [["get", "_workerNodesMinusFirst", ["loc", [null, [137, 14], [137, 36]]]]], [], 0, null, ["loc", [null, [137, 6], [148, 15]]]], ["block", "if", [["get", "isCustomNumWorkerNodes", ["loc", [null, [150, 12], [150, 34]]]]], [], 1, 2, ["loc", [null, [150, 6], [159, 13]]]], ["inline", "button-selection", [], ["label", "15 GB", "value", 15, "groupValue", ["subexpr", "@mut", [["get", "model.openshift_storage_size", ["loc", [null, [172, 34], [172, 62]]]]], [], []], "buttonType", "storageSize", "customFocused", ["subexpr", "@mut", [["get", "isCustomStorageSize", ["loc", [null, [174, 37], [174, 56]]]]], [], []], "changed", "storageSizeChanged"], ["loc", [null, [170, 4], [175, 53]]]], ["inline", "button-selection", [], ["label", "20 GB", "value", 20, "groupValue", ["subexpr", "@mut", [["get", "model.openshift_storage_size", ["loc", [null, [178, 34], [178, 62]]]]], [], []], "buttonType", "storageSize", "customFocused", ["subexpr", "@mut", [["get", "isCustomStorageSize", ["loc", [null, [180, 37], [180, 56]]]]], [], []], "changed", "storageSizeChanged"], ["loc", [null, [176, 4], [181, 53]]]], ["inline", "button-selection", [], ["label", "25 GB", "value", 25, "groupValue", ["subexpr", "@mut", [["get", "model.openshift_storage_size", ["loc", [null, [184, 34], [184, 62]]]]], [], []], "buttonType", "storageSize", "customFocused", ["subexpr", "@mut", [["get", "isCustomStorageSize", ["loc", [null, [186, 37], [186, 56]]]]], [], []], "changed", "storageSizeChanged"], ["loc", [null, [182, 4], [187, 53]]]], ["inline", "button-selection", [], ["label", "30 GB", "value", 30, "groupValue", ["subexpr", "@mut", [["get", "model.openshift_storage_size", ["loc", [null, [190, 34], [190, 62]]]]], [], []], "buttonType", "storageSize", "customFocused", ["subexpr", "@mut", [["get", "isCustomStorageSize", ["loc", [null, [192, 37], [192, 56]]]]], [], []], "changed", "storageSizeChanged"], ["loc", [null, [188, 4], [193, 53]]]], ["block", "if", [["get", "isCustomStorageSize", ["loc", [null, [194, 10], [194, 29]]]]], [], 3, 4, ["loc", [null, [194, 4], [204, 11]]]], ["block", "if", [["get", "showEnvironmentSummary", ["loc", [null, [206, 10], [206, 32]]]]], [], 5, null, ["loc", [null, [206, 4], [241, 11]]]]],
        locals: [],
        templates: [child0, child1, child2, child3, child4, child5]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 253,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/openshift/openshift-nodes.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "col-md-9");
        var el3 = dom.createTextNode("\n\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        var el4 = dom.createTextNode("\n      Select where to provision the OpenShift Enterprise nodes.\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "ident-radio");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "ident-radio");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element11 = dom.childAt(fragment, [2, 1]);
        var morphs = new Array(6);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(dom.childAt(element11, [3]), 1, 1);
        morphs[2] = dom.createMorphAt(dom.childAt(element11, [5]), 1, 1);
        morphs[3] = dom.createMorphAt(element11, 7, 7);
        morphs[4] = dom.createMorphAt(element11, 9, 9);
        morphs[5] = dom.createMorphAt(fragment, 4, 4, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["block", "if", [["get", "isError", ["loc", [null, [1, 6], [1, 13]]]]], [], 0, null, ["loc", [null, [1, 0], [71, 7]]]], ["block", "radio-button", [], ["value", "RHEV", "groupValue", ["subexpr", "@mut", [["get", "openshiftInstallLoc", ["loc", [null, [81, 46], [81, 65]]]]], [], []], "changed", "openshiftLocationChanged", "id", "install_on_rhev", "disabled", ["subexpr", "@mut", [["get", "disableRHEVradio", ["loc", [null, [81, 131], [81, 147]]]]], [], []], "dataQci", "rhevOspInstallLoc"], 1, null, ["loc", [null, [81, 6], [85, 23]]]], ["block", "radio-button", [], ["value", "OpenStack", "groupValue", ["subexpr", "@mut", [["get", "openshiftInstallLoc", ["loc", [null, [89, 51], [89, 70]]]]], [], []], "changed", "openshiftLocationChanged", "id", "install_on_openstack", "disabled", ["subexpr", "@mut", [["get", "disableOpenstackradio", ["loc", [null, [89, 141], [89, 162]]]]], [], []], "dataQci", "openstackOspInstallLoc"], 2, null, ["loc", [null, [89, 6], [93, 23]]]], ["block", "if", [["get", "openshiftInstallLoc", ["loc", [null, [96, 10], [96, 29]]]]], [], 3, null, ["loc", [null, [96, 4], [104, 11]]]], ["block", "if", [["get", "openshiftInstallLoc", ["loc", [null, [106, 6], [106, 25]]]]], [], 4, null, ["loc", [null, [106, 0], [243, 7]]]], ["inline", "cancel-back-next", [], ["backRouteName", ["subexpr", "@mut", [["get", "backRouteName", ["loc", [null, [247, 33], [247, 46]]]]], [], []], "disableBack", false, "nextRouteName", "openshift.openshift-configuration", "disableNext", ["subexpr", "@mut", [["get", "isInvalidOpenshiftNodes", ["loc", [null, [250, 31], [250, 54]]]]], [], []], "disableCancel", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [251, 33], [251, 42]]]]], [], []], "deploymentName", ["subexpr", "@mut", [["get", "deploymentName", ["loc", [null, [252, 34], [252, 48]]]]], [], []]], ["loc", [null, [247, 0], [252, 50]]]]],
      locals: [],
      templates: [child0, child1, child2, child3, child4]
    };
  })());
});
define("fusor-ember-cli/templates/openshift", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 3,
                "column": 6
              },
              "end": {
                "line": 9,
                "column": 6
              }
            },
            "moduleName": "fusor-ember-cli/templates/openshift.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("a");
            dom.setAttribute(el1, "data-qci", "ose-master-nodes");
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("span");
            dom.setAttribute(el2, "class", "hanging-indent");
            var el3 = dom.createTextNode("\n            ");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("A. Master/Nodes\n          ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1]), 1, 1);
            return morphs;
          },
          statements: [["content", "stepNumberOpenShift", ["loc", [null, [6, 12], [6, 35]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 11,
                "column": 6
              },
              "end": {
                "line": 17,
                "column": 6
              }
            },
            "moduleName": "fusor-ember-cli/templates/openshift.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("a");
            dom.setAttribute(el1, "data-qci", "ose-configuration");
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("span");
            dom.setAttribute(el2, "class", "hanging-indent");
            var el3 = dom.createTextNode("\n            ");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("B. Configuration\n          ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1]), 1, 1);
            return morphs;
          },
          statements: [["content", "stepNumberOpenShift", ["loc", [null, [14, 12], [14, 35]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 19,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/openshift.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          return morphs;
        },
        statements: [["block", "link-to", ["openshift.openshift-nodes"], ["tagName", "li"], 0, null, ["loc", [null, [3, 6], [9, 18]]]], ["block", "link-to", ["openshift.openshift-configuration"], ["tagName", "li", "disabled", ["subexpr", "@mut", [["get", "isInvalidOpenshiftNodes", ["loc", [null, [11, 75], [11, 98]]]]], [], []]], 1, null, ["loc", [null, [11, 6], [17, 18]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 20,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/openshift.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "wizard-step", [], ["outlet", ["subexpr", "@mut", [["get", "outlet", ["loc", [null, [1, 22], [1, 28]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [19, 16]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("fusor-ember-cli/templates/openstack/assign-nodes", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 11,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/openstack/assign-nodes.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "row");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "col-md-9");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "alert alert-danger rhci-alert");
          var el4 = dom.createTextNode("\n        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("i");
          dom.setAttribute(el4, "class", "fa fa-2x fa-exclamation-triangle errorForValidation");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n         \n        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1, 1]), 3, 3);
          return morphs;
        },
        statements: [["content", "errorMsg", ["loc", [null, [7, 8], [7, 20]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 11,
                "column": 0
              },
              "end": {
                "line": 16,
                "column": 0
              }
            },
            "moduleName": "fusor-ember-cli/templates/openstack/assign-nodes.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("  ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "spinner spinner-md spinner-inline");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n  ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            dom.setAttribute(el1, "class", "spinner-text");
            var el2 = dom.createTextNode("\n    Loading...\n  ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 20,
                  "column": 6
                },
                "end": {
                  "line": 22,
                  "column": 6
                }
              },
              "moduleName": "fusor-ember-cli/templates/openstack/assign-nodes.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("a");
              dom.setAttribute(el1, "class", "edit-global-config");
              var el2 = dom.createTextNode(" Edit Global Configuration");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element1 = dom.childAt(fragment, [1]);
              var morphs = new Array(1);
              morphs[0] = dom.createElementMorph(element1);
              return morphs;
            },
            statements: [["element", "action", ["editGlobalServiceConfig"], [], ["loc", [null, [21, 38], [21, 74]]]]],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "revision": "Ember@1.13.10",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 26,
                      "column": 12
                    },
                    "end": {
                      "line": 28,
                      "column": 12
                    }
                  },
                  "moduleName": "fusor-ember-cli/templates/openstack/assign-nodes.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("              ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                  return morphs;
                },
                statements: [["inline", "deployment-role", [], ["role", ["subexpr", "@mut", [["get", "role", ["loc", [null, [27, 37], [27, 41]]]]], [], []], "edit", "editRole", "disabled", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [27, 67], [27, 76]]]]], [], []]], ["loc", [null, [27, 14], [27, 78]]]]],
                locals: [],
                templates: []
              };
            })();
            return {
              meta: {
                "revision": "Ember@1.13.10",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 25,
                    "column": 10
                  },
                  "end": {
                    "line": 29,
                    "column": 10
                  }
                },
                "moduleName": "fusor-ember-cli/templates/openstack/assign-nodes.hbs"
              },
              arity: 1,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["block", "draggable-object", [], ["content", ["subexpr", "@mut", [["get", "role", ["loc", [null, [26, 40], [26, 44]]]]], [], []], "data-qci", ["subexpr", "@mut", [["get", "role.roleType", ["loc", [null, [26, 54], [26, 67]]]]], [], []]], 0, null, ["loc", [null, [26, 12], [28, 33]]]]],
              locals: ["role"],
              templates: [child0]
            };
          })();
          var child1 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.10",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 30,
                    "column": 10
                  },
                  "end": {
                    "line": 32,
                    "column": 10
                  }
                },
                "moduleName": "fusor-ember-cli/templates/openstack/assign-nodes.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("            ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("span");
                dom.setAttribute(el1, "class", "deployment-roles-all-assigned");
                var el2 = dom.createTextNode("All deployment roles have been assigned.");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes() {
                return [];
              },
              statements: [],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 23,
                  "column": 6
                },
                "end": {
                  "line": 34,
                  "column": 6
                }
              },
              "moduleName": "fusor-ember-cli/templates/openstack/assign-nodes.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              var el2 = dom.createTextNode("\n");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("        ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element0 = dom.childAt(fragment, [1]);
              var morphs = new Array(3);
              morphs[0] = dom.createAttrMorph(element0, 'class');
              morphs[1] = dom.createMorphAt(element0, 1, 1);
              morphs[2] = dom.createMorphAt(element0, 2, 2);
              return morphs;
            },
            statements: [["attribute", "class", ["concat", ["row col-md-12 deployment-roles deployment-roles-unassigned deployment-roles-assignable ", ["get", "droppableClass", ["loc", [null, [24, 109], [24, 123]]]]]]], ["block", "each", [["get", "unassignedRoles", ["loc", [null, [25, 18], [25, 33]]]]], [], 0, null, ["loc", [null, [25, 10], [29, 19]]]], ["block", "if", [["get", "allRolesAssigned", ["loc", [null, [30, 16], [30, 32]]]]], [], 1, null, ["loc", [null, [30, 10], [32, 17]]]]],
            locals: [],
            templates: [child0, child1]
          };
        })();
        var child2 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.10",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 43,
                    "column": 20
                  },
                  "end": {
                    "line": 55,
                    "column": 19
                  }
                },
                "moduleName": "fusor-ember-cli/templates/openstack/assign-nodes.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                      ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                return morphs;
              },
              statements: [["inline", "node-profile", [], ["profile", ["subexpr", "@mut", [["get", "profile", ["loc", [null, [44, 45], [44, 52]]]]], [], []], "nodes", ["subexpr", "@mut", [["get", "nodes", ["loc", [null, [45, 43], [45, 48]]]]], [], []], "plan", ["subexpr", "@mut", [["get", "plan", ["loc", [null, [46, 42], [46, 46]]]]], [], []], "roles", ["subexpr", "@mut", [["get", "roles", ["loc", [null, [47, 43], [47, 48]]]]], [], []], "allRolesAssigned", ["subexpr", "@mut", [["get", "allRolesAssigned", ["loc", [null, [48, 54], [48, 70]]]]], [], []], "doAssign", true, "disabled", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [50, 46], [50, 55]]]]], [], []], "assignRole", "assignRole", "unassignRole", "unassignRole", "editRole", "editRole", "roleCountUpdated", "roleCountUpdated"], ["loc", [null, [44, 22], [54, 74]]]]],
              locals: [],
              templates: []
            };
          })();
          var child1 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.10",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 55,
                    "column": 19
                  },
                  "end": {
                    "line": 66,
                    "column": 19
                  }
                },
                "moduleName": "fusor-ember-cli/templates/openstack/assign-nodes.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                      ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                return morphs;
              },
              statements: [["inline", "node-profile", [], ["profile", ["subexpr", "@mut", [["get", "profile", ["loc", [null, [56, 45], [56, 52]]]]], [], []], "plan", ["subexpr", "@mut", [["get", "plan", ["loc", [null, [57, 42], [57, 46]]]]], [], []], "roles", ["subexpr", "@mut", [["get", "roles", ["loc", [null, [58, 43], [58, 48]]]]], [], []], "allRolesAssigned", ["subexpr", "@mut", [["get", "allRolesAssigned", ["loc", [null, [59, 54], [59, 70]]]]], [], []], "doAssign", true, "disabled", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [61, 46], [61, 55]]]]], [], []], "assignRole", "assignRole", "unassignRole", "unassignRole", "editRole", "editRole", "roleCountUpdated", "roleCountUpdated"], ["loc", [null, [56, 22], [65, 74]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 40,
                  "column": 10
                },
                "end": {
                  "line": 69,
                  "column": 10
                }
              },
              "moduleName": "fusor-ember-cli/templates/openstack/assign-nodes.hbs"
            },
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("              ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "row");
              var el2 = dom.createTextNode("\n                  ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("div");
              dom.setAttribute(el2, "class", "col-md-7");
              var el3 = dom.createTextNode("\n");
              dom.appendChild(el2, el3);
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("                  ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n              ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1]), 1, 1);
              return morphs;
            },
            statements: [["block", "if", [["get", "nodes", ["loc", [null, [43, 26], [43, 31]]]]], [], 0, 1, ["loc", [null, [43, 20], [66, 26]]]]],
            locals: ["profile"],
            templates: [child0, child1]
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 16,
                "column": 0
              },
              "end": {
                "line": 102,
                "column": 0
              }
            },
            "moduleName": "fusor-ember-cli/templates/openstack/assign-nodes.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("  ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "row");
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "col-md-12");
            dom.setAttribute(el2, "style", "float: left;");
            var el3 = dom.createTextNode("\n      ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("h2");
            dom.setAttribute(el3, "style", "vertical-align: bottom;display:inline-block;");
            var el4 = dom.createTextNode("Available Deployment Roles");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("    ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createComment(" /col ");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n  ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createComment(" /row ");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n  ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "row");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "col-md-12");
            var el3 = dom.createTextNode("\n          ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("h2");
            var el4 = dom.createTextNode("Flavors");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("      ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "col-sm-6 col-md-5");
            var el3 = dom.createTextNode("\n          ");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment(" a network topology is planned for this space ");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n      ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n  ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n\n  ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n\n  ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n  ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n  ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element2 = dom.childAt(fragment, [1, 1]);
            var morphs = new Array(7);
            morphs[0] = dom.createMorphAt(element2, 3, 3);
            morphs[1] = dom.createMorphAt(element2, 4, 4);
            morphs[2] = dom.createMorphAt(dom.childAt(fragment, [4, 1]), 3, 3);
            morphs[3] = dom.createMorphAt(fragment, 6, 6, contextualElement);
            morphs[4] = dom.createMorphAt(fragment, 8, 8, contextualElement);
            morphs[5] = dom.createMorphAt(fragment, 10, 10, contextualElement);
            morphs[6] = dom.createMorphAt(fragment, 12, 12, contextualElement);
            return morphs;
          },
          statements: [["block", "unless", [["get", "isStarted", ["loc", [null, [20, 16], [20, 25]]]]], [], 0, null, ["loc", [null, [20, 6], [22, 17]]]], ["block", "draggable-object-target", [], ["action", "unassignRole"], 1, null, ["loc", [null, [23, 6], [34, 34]]]], ["block", "each", [["get", "profiles", ["loc", [null, [40, 18], [40, 26]]]]], [], 2, null, ["loc", [null, [40, 10], [69, 19]]]], ["inline", "cancel-back-next", [], ["backRouteName", "openstack.register-nodes", "disableBack", false, "nextRouteName", "openstack.overcloud", "disableNext", ["subexpr", "@mut", [["get", "disableAssignNodesNext", ["loc", [null, [79, 33], [79, 55]]]]], [], []], "disableCancel", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [80, 35], [80, 44]]]]], [], []], "deploymentName", ["subexpr", "@mut", [["get", "deploymentName", ["loc", [null, [81, 36], [81, 50]]]]], [], []]], ["loc", [null, [76, 2], [81, 52]]]], ["inline", "edit-deployment-role", [], ["openModal", ["subexpr", "@mut", [["get", "openModalEditRole", ["loc", [null, [83, 35], [83, 52]]]]], [], []], "settingsActiveClass", ["subexpr", "@mut", [["get", "settingsActiveClass", ["loc", [null, [84, 45], [84, 64]]]]], [], []], "configActiveClass", ["subexpr", "@mut", [["get", "configActiveClass", ["loc", [null, [85, 43], [85, 60]]]]], [], []], "doShowSettings", "doShowSettings", "doShowConfig", "doShowConfig", "images", ["subexpr", "@mut", [["get", "images", ["loc", [null, [88, 32], [88, 38]]]]], [], []], "profiles", ["subexpr", "@mut", [["get", "profiles", ["loc", [null, [89, 34], [89, 42]]]]], [], []], "nodes", ["subexpr", "@mut", [["get", "nodes", ["loc", [null, [90, 31], [90, 36]]]]], [], []], "editedRole", ["subexpr", "@mut", [["get", "editedRole", ["loc", [null, [91, 36], [91, 46]]]]], [], []], "editedRoleImage", ["subexpr", "@mut", [["get", "editedRoleImage", ["loc", [null, [92, 41], [92, 56]]]]], [], []], "editedRoleProfile", ["subexpr", "@mut", [["get", "editedRoleProfile", ["loc", [null, [93, 43], [93, 60]]]]], [], []], "editedRoleNodeCount", ["subexpr", "@mut", [["get", "editedRoleNodeCount", ["loc", [null, [94, 45], [94, 64]]]]], [], []], "editedRoleParameters", ["subexpr", "@mut", [["get", "editedRoleParameters", ["loc", [null, [95, 46], [95, 66]]]]], [], []], "saveRole", "saveRole"], ["loc", [null, [83, 2], [96, 46]]]], ["inline", "edit-global-service-config", [], ["openModal", ["subexpr", "@mut", [["get", "openModalEditGlobal", ["loc", [null, [97, 41], [97, 60]]]]], [], []], "globalPlanParameters", ["subexpr", "@mut", [["get", "globalPlanParameters", ["loc", [null, [98, 52], [98, 72]]]]], [], []], "cancelGlobalServiceConfig", "cancelGlobalServiceConfig", "saveGlobalServiceConfig", "saveGlobalServiceConfig"], ["loc", [null, [97, 2], [100, 82]]]], ["inline", "loading-spinner", [], ["show", ["subexpr", "@mut", [["get", "showLoadingSpinner", ["loc", [null, [101, 25], [101, 43]]]]], [], []], "text", ["subexpr", "@mut", [["get", "loadingSpinnerText", ["loc", [null, [101, 49], [101, 67]]]]], [], []]], ["loc", [null, [101, 2], [101, 69]]]]],
          locals: [],
          templates: [child0, child1, child2]
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 11,
              "column": 0
            },
            "end": {
              "line": 102,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/openstack/assign-nodes.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "showSpinner", ["loc", [null, [11, 10], [11, 21]]]]], [], 0, 1, ["loc", [null, [11, 0], [102, 0]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 102,
            "column": 7
          }
        },
        "moduleName": "fusor-ember-cli/templates/openstack/assign-nodes.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "errorMsg", ["loc", [null, [1, 6], [1, 14]]]]], [], 0, 1, ["loc", [null, [1, 0], [102, 7]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("fusor-ember-cli/templates/openstack/index", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/openstack/index.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["content", "outlet", ["loc", [null, [1, 0], [1, 10]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("fusor-ember-cli/templates/openstack/loading", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/openstack/loading.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "loading-spinner", [], ["show", true, "text", "Loading..."], ["loc", [null, [1, 0], [1, 47]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("fusor-ember-cli/templates/openstack/overcloud", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 78,
              "column": 6
            },
            "end": {
              "line": 120,
              "column": 6
            }
          },
          "moduleName": "fusor-ember-cli/templates/openstack/overcloud.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(7);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
          morphs[3] = dom.createMorphAt(fragment, 7, 7, contextualElement);
          morphs[4] = dom.createMorphAt(fragment, 9, 9, contextualElement);
          morphs[5] = dom.createMorphAt(fragment, 11, 11, contextualElement);
          morphs[6] = dom.createMorphAt(fragment, 13, 13, contextualElement);
          return morphs;
        },
        statements: [["inline", "text-f", [], ["label", "Ceph External Mon Host", "value", ["subexpr", "@mut", [["get", "openstackDeployment.ceph_ext_mon_host", ["loc", [null, [80, 24], [80, 61]]]]], [], []], "cssId", "cephExternalMonHostInput", "validator", ["subexpr", "@mut", [["get", "openstackDeployment.validations.ceph_ext_mon_host", ["loc", [null, [82, 28], [82, 77]]]]], [], []], "disabled", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [83, 27], [83, 36]]]]], [], []]], ["loc", [null, [79, 8], [83, 38]]]], ["inline", "text-f", [], ["label", "Ceph Cluster FSID", "value", ["subexpr", "@mut", [["get", "openstackDeployment.ceph_cluster_fsid", ["loc", [null, [86, 24], [86, 61]]]]], [], []], "cssId", "cephClusterFSIDInput", "validator", ["subexpr", "@mut", [["get", "openstackDeployment.validations.ceph_cluster_fsid", ["loc", [null, [88, 28], [88, 77]]]]], [], []], "disabled", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [89, 27], [89, 36]]]]], [], []]], ["loc", [null, [85, 8], [89, 38]]]], ["inline", "text-f", [], ["label", "Ceph Client Username", "value", ["subexpr", "@mut", [["get", "openstackDeployment.ceph_client_username", ["loc", [null, [92, 24], [92, 64]]]]], [], []], "cssId", "cephClientUsernameInput", "validator", ["subexpr", "@mut", [["get", "openstackDeployment.validations.ceph_client_username", ["loc", [null, [94, 28], [94, 80]]]]], [], []], "disabled", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [95, 27], [95, 36]]]]], [], []]], ["loc", [null, [91, 8], [95, 38]]]], ["inline", "text-f", [], ["label", "Ceph Client Key", "value", ["subexpr", "@mut", [["get", "openstackDeployment.ceph_client_key", ["loc", [null, [98, 24], [98, 59]]]]], [], []], "cssId", "cephClientKeyInput", "validator", ["subexpr", "@mut", [["get", "openstackDeployment.validations.ceph_client_key", ["loc", [null, [100, 28], [100, 75]]]]], [], []], "disabled", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [101, 27], [101, 36]]]]], [], []]], ["loc", [null, [97, 8], [101, 38]]]], ["inline", "text-f", [], ["label", "Nova RBD Pool Name", "value", ["subexpr", "@mut", [["get", "openstackDeployment.nova_rbd_pool_name", ["loc", [null, [104, 24], [104, 62]]]]], [], []], "cssId", "novarRbdPoolNameInput", "validator", ["subexpr", "@mut", [["get", "openstackDeployment.validations.nova_rbd_pool_name", ["loc", [null, [106, 28], [106, 78]]]]], [], []], "disabled", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [107, 27], [107, 36]]]]], [], []]], ["loc", [null, [103, 8], [107, 38]]]], ["inline", "text-f", [], ["label", "Cinder RBD Pool Name", "value", ["subexpr", "@mut", [["get", "openstackDeployment.cinder_rbd_pool_name", ["loc", [null, [110, 24], [110, 64]]]]], [], []], "cssId", "cinderRbdPoolNameInput", "validator", ["subexpr", "@mut", [["get", "openstackDeployment.validations.cinder_rbd_pool_name", ["loc", [null, [112, 28], [112, 80]]]]], [], []], "disabled", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [113, 27], [113, 36]]]]], [], []]], ["loc", [null, [109, 8], [113, 38]]]], ["inline", "text-f", [], ["label", "Glance RBD Pool Name", "value", ["subexpr", "@mut", [["get", "openstackDeployment.glance_rbd_pool_name", ["loc", [null, [116, 24], [116, 64]]]]], [], []], "cssId", "glanceRbdPoolNameInput", "validator", ["subexpr", "@mut", [["get", "openstackDeployment.validations.glance_rbd_pool_name", ["loc", [null, [118, 28], [118, 80]]]]], [], []], "disabled", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [119, 27], [119, 36]]]]], [], []]], ["loc", [null, [115, 8], [119, 38]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 134,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/openstack/overcloud.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "col-md-12");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("br");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("form");
        dom.setAttribute(el3, "class", "form form-horizontal");
        var el4 = dom.createTextNode("\n\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("p");
        var el5 = dom.createTextNode("\n      Enter an interface to provide external network access for the overcloud.\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("br");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("p");
        var el5 = dom.createTextNode("\n      Enter network blocks to assign to the overcloud for private networking and floating IP addresses.\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n\n\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("br");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("p");
        var el5 = dom.createTextNode("\n      Create an administrative password for the overcloud.\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("br");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("p");
        var el5 = dom.createTextNode("\n        Assign an existing Ceph Storage cluster to the overcloud.\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0, 1, 3]);
        var morphs = new Array(9);
        morphs[0] = dom.createMorphAt(element0, 3, 3);
        morphs[1] = dom.createMorphAt(element0, 9, 9);
        morphs[2] = dom.createMorphAt(element0, 11, 11);
        morphs[3] = dom.createMorphAt(element0, 13, 13);
        morphs[4] = dom.createMorphAt(element0, 19, 19);
        morphs[5] = dom.createMorphAt(element0, 21, 21);
        morphs[6] = dom.createMorphAt(element0, 27, 27);
        morphs[7] = dom.createMorphAt(element0, 29, 29);
        morphs[8] = dom.createMorphAt(fragment, 4, 4, contextualElement);
        return morphs;
      },
      statements: [["inline", "text-f", [], ["label", "External Network Interface", "value", ["subexpr", "@mut", [["get", "openstackDeployment.overcloud_ext_net_interface", ["loc", [null, [11, 21], [11, 68]]]]], [], []], "cssId", "external-osp-interface", "isRequired", true, "disabled", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [14, 24], [14, 33]]]]], [], []], "placeholder", "Enter External Network Interface"], ["loc", [null, [10, 6], [15, 63]]]], ["inline", "text-f", [], ["label", "Private Network", "value", ["subexpr", "@mut", [["get", "openstackDeployment.overcloud_private_net", ["loc", [null, [24, 21], [24, 62]]]]], [], []], "cssId", "osp-private-network", "isRequired", true, "disabled", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [27, 24], [27, 33]]]]], [], []], "placeholder", "192.168.254.0/24", "help-inline", "CIDR notation, 192.168.254.0/24", "validator", ["subexpr", "@mut", [["get", "openstackDeployment.validations.overcloud_private_net", ["loc", [null, [30, 25], [30, 78]]]]], [], []]], ["loc", [null, [23, 6], [30, 80]]]], ["inline", "text-f", [], ["label", "Floating IP Network", "value", ["subexpr", "@mut", [["get", "openstackDeployment.overcloud_float_net", ["loc", [null, [33, 21], [33, 60]]]]], [], []], "cssId", "osp-floating-network", "isRequired", true, "disabled", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [36, 24], [36, 33]]]]], [], []], "placeholder", "192.168.253.0/24", "help-inline", "CIDR notation, 192.168.253.0/24", "validator", ["subexpr", "@mut", [["get", "openstackDeployment.validations.overcloud_float_net", ["loc", [null, [39, 25], [39, 76]]]]], [], []]], ["loc", [null, [32, 6], [39, 78]]]], ["inline", "text-f", [], ["label", "Floating IP Network Gateway", "value", ["subexpr", "@mut", [["get", "openstackDeployment.overcloud_float_gateway", ["loc", [null, [42, 21], [42, 64]]]]], [], []], "cssId", "osp-float-gatewway", "isRequired", true, "disabled", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [45, 24], [45, 33]]]]], [], []], "validator", ["subexpr", "@mut", [["get", "openstackDeployment.validations.overcloud_float_gateway", ["loc", [null, [46, 25], [46, 80]]]]], [], []]], ["loc", [null, [41, 6], [46, 82]]]], ["inline", "text-f", [], ["label", "Admin Password", "type", "password", "value", ["subexpr", "@mut", [["get", "openstackDeployment.overcloud_password", ["loc", [null, [54, 22], [54, 60]]]]], [], []], "cssId", "osp_overcloud_password", "isRequired", true, "disabled", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [57, 25], [57, 34]]]]], [], []]], ["loc", [null, [53, 6], [57, 36]]]], ["inline", "text-f", [], ["label", "Confirm Password", "type", "password", "value", ["subexpr", "@mut", [["get", "confirmOvercloudPassword", ["loc", [null, [60, 22], [60, 46]]]]], [], []], "cssId", "confirm_osp_overcloud_password", "isRequired", true, "validator", ["subexpr", "@mut", [["get", "confirmOvercloudPasswordValidator", ["loc", [null, [63, 26], [63, 59]]]]], [], []], "disabled", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [64, 25], [64, 34]]]]], [], []], "placeholder", "Must match admin password"], ["loc", [null, [59, 6], [65, 57]]]], ["inline", "check-f", [], ["cssId", "ospCephStorageCheckbox", "label", "External Ceph Storage", "checked", ["subexpr", "@mut", [["get", "openstackDeployment.external_ceph_storage", ["loc", [null, [74, 24], [74, 65]]]]], [], []], "isRequired", false, "disabled", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [76, 25], [76, 34]]]]], [], []]], ["loc", [null, [72, 6], [76, 36]]]], ["block", "if", [["get", "openstackDeployment.external_ceph_storage", ["loc", [null, [78, 12], [78, 53]]]]], [], 0, null, ["loc", [null, [78, 6], [120, 13]]]], ["inline", "cancel-back-next", [], ["backRouteName", "openstack.assign-nodes", "disableBack", false, "nextRouteName", ["subexpr", "@mut", [["get", "nextStepRouteNameOvercloud", ["loc", [null, [129, 33], [129, 59]]]]], [], []], "disableNext", ["subexpr", "@mut", [["get", "disableNextOvercloud", ["loc", [null, [130, 31], [130, 51]]]]], [], []], "disableCancel", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [131, 33], [131, 42]]]]], [], []], "deploymentName", ["subexpr", "@mut", [["get", "deploymentName", ["loc", [null, [132, 34], [132, 48]]]]], [], []]], ["loc", [null, [127, 0], [132, 50]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("fusor-ember-cli/templates/openstack/register-nodes", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 6,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/openstack/register-nodes.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "spinner spinner-md spinner-inline");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "class", "spinner-text");
          var el2 = dom.createTextNode("\n    Loading OSP Nodes\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 7,
                "column": 2
              },
              "end": {
                "line": 16,
                "column": 2
              }
            },
            "moduleName": "fusor-ember-cli/templates/openstack/register-nodes.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "row register-nodes-errors");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "col-md-9 col-lg-6");
            var el3 = dom.createTextNode("\n        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "alert alert-danger rhci-alert");
            var el4 = dom.createTextNode("\n          ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("i");
            dom.setAttribute(el4, "class", "fa fa-2x fa-exclamation-triangle errorForValidation validation-alert-icon");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n          ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("p");
            dom.setAttribute(el4, "class", "validation-alert-message");
            var el5 = dom.createComment("");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n        ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n      ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1, 1, 3]), 0, 0);
            return morphs;
          },
          statements: [["content", "loadErrorMsg", ["loc", [null, [12, 46], [12, 62]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 18,
                "column": 2
              },
              "end": {
                "line": 27,
                "column": 2
              }
            },
            "moduleName": "fusor-ember-cli/templates/openstack/register-nodes.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "row register-nodes-errors");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "col-md-9 col-lg-6");
            var el3 = dom.createTextNode("\n        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "alert alert-danger rhci-alert");
            var el4 = dom.createTextNode("\n          ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("i");
            dom.setAttribute(el4, "class", "fa fa-2x fa-exclamation-triangle errorForValidation validation-alert-icon");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n          ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("p");
            dom.setAttribute(el4, "class", "validation-alert-message");
            var el5 = dom.createComment("");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n        ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n      ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1, 1, 3]), 0, 0);
            return morphs;
          },
          statements: [["content", "errorMsg", ["loc", [null, [23, 46], [23, 58]]]]],
          locals: [],
          templates: []
        };
      })();
      var child2 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 36,
                  "column": 12
                },
                "end": {
                  "line": 38,
                  "column": 12
                }
              },
              "moduleName": "fusor-ember-cli/templates/openstack/register-nodes.hbs"
            },
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("              ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("li");
              var el2 = dom.createElement("a");
              dom.setAttribute(el2, "target", "_blank");
              dom.setAttribute(el2, "class", "foreman-task-error-link");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element2 = dom.childAt(fragment, [1, 0]);
              var morphs = new Array(2);
              morphs[0] = dom.createAttrMorph(element2, 'href');
              morphs[1] = dom.createMorphAt(element2, 0, 0);
              return morphs;
            },
            statements: [["attribute", "href", ["concat", [["get", "nodeError.taskUrl", ["loc", [null, [37, 29], [37, 46]]]]]]], ["content", "nodeError.message", ["loc", [null, [37, 98], [37, 119]]]]],
            locals: ["nodeError"],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 29,
                "column": 2
              },
              "end": {
                "line": 43,
                "column": 2
              }
            },
            "moduleName": "fusor-ember-cli/templates/openstack/register-nodes.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "row register-nodes-errors");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "col-md-9 col-lg-6");
            var el3 = dom.createTextNode("\n        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "alert alert-danger rhci-alert");
            var el4 = dom.createTextNode("\n          ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("i");
            dom.setAttribute(el4, "class", "fa fa-2x fa-exclamation-triangle errorForValidation validation-alert-icon");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n          ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("p");
            dom.setAttribute(el4, "class", "validation-alert-message");
            var el5 = dom.createTextNode("The following nodes have errors:");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n          ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("ul");
            dom.setAttribute(el4, "class", "validation-alert-message");
            var el5 = dom.createTextNode("\n");
            dom.appendChild(el4, el5);
            var el5 = dom.createComment("");
            dom.appendChild(el4, el5);
            var el5 = dom.createTextNode("          ");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n        ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n      ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1, 1, 5]), 1, 1);
            return morphs;
          },
          statements: [["block", "each", [["get", "nodeErrors", ["loc", [null, [36, 20], [36, 30]]]]], [], 0, null, ["loc", [null, [36, 12], [38, 21]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child3 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 51,
                "column": 2
              },
              "end": {
                "line": 60,
                "column": 2
              }
            },
            "moduleName": "fusor-ember-cli/templates/openstack/register-nodes.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "row");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "col-md-9 col-lg-6");
            var el3 = dom.createTextNode("\n        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("button");
            dom.setAttribute(el3, "id", "register-nodes-button");
            dom.setAttribute(el3, "class", "btn btn-default register-more-nodes-button");
            var el4 = dom.createTextNode("\n          Register More Nodes\n        ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n      ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element1 = dom.childAt(fragment, [1, 1, 1]);
            var morphs = new Array(2);
            morphs[0] = dom.createAttrMorph(element1, 'disabled');
            morphs[1] = dom.createElementMorph(element1);
            return morphs;
          },
          statements: [["attribute", "disabled", ["get", "isStarted", ["loc", [null, [55, 60], [55, 69]]]]], ["element", "action", ["showNodeRegistrationModal"], [], ["loc", [null, [55, 10], [55, 48]]]]],
          locals: [],
          templates: []
        };
      })();
      var child4 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 60,
                "column": 2
              },
              "end": {
                "line": 78,
                "column": 2
              }
            },
            "moduleName": "fusor-ember-cli/templates/openstack/register-nodes.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "row");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "col-md-9 col-lg-6");
            var el3 = dom.createTextNode("\n        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("button");
            dom.setAttribute(el3, "id", "register-nodes-button");
            dom.setAttribute(el3, "class", "btn btn-primary register-nodes-button");
            var el4 = dom.createTextNode("\n          Register Nodes\n        ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n      ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n\n    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "row");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "col-md-9 col-lg-6");
            var el3 = dom.createTextNode("\n        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("p");
            var el4 = dom.createTextNode("\n          No nodes have been registered yet. Discover nodes through auto-detection,\n          mapping them in a CSV file, or entering node information manually.\n        ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n      ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1, 1, 1]);
            var morphs = new Array(2);
            morphs[0] = dom.createAttrMorph(element0, 'disabled');
            morphs[1] = dom.createElementMorph(element0);
            return morphs;
          },
          statements: [["attribute", "disabled", ["get", "isStarted", ["loc", [null, [64, 60], [64, 69]]]]], ["element", "action", ["showNodeRegistrationModal"], [], ["loc", [null, [64, 10], [64, 48]]]]],
          locals: [],
          templates: []
        };
      })();
      var child5 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 81,
                "column": 4
              },
              "end": {
                "line": 89,
                "column": 4
              }
            },
            "moduleName": "fusor-ember-cli/templates/openstack/register-nodes.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "osp-node-manager", [], ["nodeManager", ["subexpr", "@mut", [["get", "nodeManager", ["loc", [null, [82, 38], [82, 49]]]]], [], []], "ports", ["subexpr", "@mut", [["get", "ports", ["loc", [null, [83, 32], [83, 37]]]]], [], []], "introspectionTasks", ["subexpr", "@mut", [["get", "introspectionTasks", ["loc", [null, [84, 45], [84, 63]]]]], [], []], "foremanTasks", ["subexpr", "@mut", [["get", "foremanTasks", ["loc", [null, [85, 39], [85, 51]]]]], [], []], "disabled", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [86, 35], [86, 44]]]]], [], []], "addNodes", "addNodesToManager", "deleteNode", "deleteNode"], ["loc", [null, [82, 6], [88, 51]]]]],
          locals: ["nodeManager"],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 6,
              "column": 0
            },
            "end": {
              "line": 91,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/openstack/register-nodes.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "row");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "col-md-9 col-lg-6");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("p");
          var el4 = dom.createTextNode("Register at least 2 nodes with the selected undercloud to build out your OpenStack environment.");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "osp-node-manager-list");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(5);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
          morphs[2] = dom.createMorphAt(fragment, 4, 4, contextualElement);
          morphs[3] = dom.createMorphAt(fragment, 8, 8, contextualElement);
          morphs[4] = dom.createMorphAt(dom.childAt(fragment, [10]), 1, 1);
          dom.insertBoundary(fragment, 0);
          return morphs;
        },
        statements: [["block", "if", [["get", "loadErrorMsg", ["loc", [null, [7, 8], [7, 20]]]]], [], 0, null, ["loc", [null, [7, 2], [16, 9]]]], ["block", "if", [["get", "errorMsg", ["loc", [null, [18, 8], [18, 16]]]]], [], 1, null, ["loc", [null, [18, 2], [27, 9]]]], ["block", "if", [["get", "showNodeErrors", ["loc", [null, [29, 8], [29, 22]]]]], [], 2, null, ["loc", [null, [29, 2], [43, 9]]]], ["block", "if", [["get", "hasNodes", ["loc", [null, [51, 8], [51, 16]]]]], [], 3, 4, ["loc", [null, [51, 2], [78, 9]]]], ["block", "each", [["get", "nodeManagers", ["loc", [null, [81, 12], [81, 24]]]]], [], 5, null, ["loc", [null, [81, 4], [89, 13]]]]],
        locals: [],
        templates: [child0, child1, child2, child3, child4, child5]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 120,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/openstack/register-nodes.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(5);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[2] = dom.createMorphAt(fragment, 4, 4, contextualElement);
        morphs[3] = dom.createMorphAt(fragment, 6, 6, contextualElement);
        morphs[4] = dom.createMorphAt(fragment, 8, 8, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["block", "if", [["get", "showSpinner", ["loc", [null, [1, 6], [1, 17]]]]], [], 0, 1, ["loc", [null, [1, 0], [91, 7]]]], ["inline", "cancel-back-next", [], ["backRouteName", "openstack.undercloud-deploy", "disableBack", false, "nextRouteName", "openstack.assign-nodes", "disableNext", ["subexpr", "@mut", [["get", "disableRegisterNodesNext", ["loc", [null, [96, 32], [96, 56]]]]], [], []], "disableCancel", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [97, 34], [97, 43]]]]], [], []], "deploymentName", ["subexpr", "@mut", [["get", "deploymentName", ["loc", [null, [98, 35], [98, 49]]]]], [], []]], ["loc", [null, [93, 0], [98, 51]]]], ["inline", "new-node-registration", [], ["openModal", ["subexpr", "@mut", [["get", "openModalNewNode", ["loc", [null, [100, 34], [100, 50]]]]], [], []], "deployment", ["subexpr", "@mut", [["get", "deployment", ["loc", [null, [101, 35], [101, 45]]]]], [], []], "openstackDeployment", ["subexpr", "@mut", [["get", "openstackDeployment", ["loc", [null, [102, 44], [102, 63]]]]], [], []], "ports", ["subexpr", "@mut", [["get", "ports", ["loc", [null, [103, 30], [103, 35]]]]], [], []], "introspectionTasks", ["subexpr", "@mut", [["get", "introspectionTasks", ["loc", [null, [104, 43], [104, 61]]]]], [], []], "foremanTasks", ["subexpr", "@mut", [["get", "foremanTasks", ["loc", [null, [105, 37], [105, 49]]]]], [], []], "submitRegisterNodes", "submitRegisterNodes"], ["loc", [null, [100, 0], [106, 67]]]], ["inline", "add-node-registration", [], ["openModal", ["subexpr", "@mut", [["get", "openModalAddNode", ["loc", [null, [108, 34], [108, 50]]]]], [], []], "nodeInfo", ["subexpr", "@mut", [["get", "addNodeInfo", ["loc", [null, [109, 33], [109, 44]]]]], [], []], "deployment", ["subexpr", "@mut", [["get", "deployment", ["loc", [null, [110, 35], [110, 45]]]]], [], []], "openstackDeployment", ["subexpr", "@mut", [["get", "openstackDeployment", ["loc", [null, [111, 44], [111, 63]]]]], [], []], "ports", ["subexpr", "@mut", [["get", "ports", ["loc", [null, [112, 30], [112, 35]]]]], [], []], "introspectionTasks", ["subexpr", "@mut", [["get", "introspectionTasks", ["loc", [null, [113, 43], [113, 61]]]]], [], []], "foremanTasks", ["subexpr", "@mut", [["get", "foremanTasks", ["loc", [null, [114, 37], [114, 49]]]]], [], []], "submitAddNodes", "submitAddNodes"], ["loc", [null, [108, 0], [115, 57]]]], ["inline", "delete-node-confirmation", [], ["openModal", ["subexpr", "@mut", [["get", "openModalDeleteNode", ["loc", [null, [117, 37], [117, 56]]]]], [], []], "nodeToDeleteLabel", ["subexpr", "@mut", [["get", "nodeToDeleteLabel", ["loc", [null, [118, 45], [118, 62]]]]], [], []], "confirmDeleteNode", "confirmDeleteNode"], ["loc", [null, [117, 0], [119, 66]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("fusor-ember-cli/templates/openstack/undercloud-deploy", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 12,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/openstack/undercloud-deploy.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "row");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "col-md-9");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "col-md-9");
          var el4 = dom.createTextNode("\n        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("div");
          dom.setAttribute(el4, "class", "alert alert-danger");
          var el5 = dom.createTextNode("\n          ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("span");
          dom.setAttribute(el5, "class", "pficon pficon-error-circle-o");
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n          ");
          dom.appendChild(el4, el5);
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n        ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1, 1, 1]), 3, 3);
          return morphs;
        },
        statements: [["content", "errorMsg", ["loc", [null, [7, 10], [7, 22]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 12,
                "column": 0
              },
              "end": {
                "line": 17,
                "column": 0
              }
            },
            "moduleName": "fusor-ember-cli/templates/openstack/undercloud-deploy.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("  ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "spinner spinner-md spinner-inline");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n  ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            dom.setAttribute(el1, "class", "spinner-text");
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n  ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [3]), 1, 1);
            return morphs;
          },
          statements: [["content", "loadingSpinnerText", ["loc", [null, [15, 4], [15, 26]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "revision": "Ember@1.13.10",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 24,
                      "column": 12
                    },
                    "end": {
                      "line": 26,
                      "column": 12
                    }
                  },
                  "moduleName": "fusor-ember-cli/templates/openstack/undercloud-deploy.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("              Deleting the \"");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\" stack failed.  You may try again.\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                  return morphs;
                },
                statements: [["content", "stack.stack_name", ["loc", [null, [25, 28], [25, 48]]]]],
                locals: [],
                templates: []
              };
            })();
            var child1 = (function () {
              return {
                meta: {
                  "revision": "Ember@1.13.10",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 26,
                      "column": 12
                    },
                    "end": {
                      "line": 28,
                      "column": 12
                    }
                  },
                  "moduleName": "fusor-ember-cli/templates/openstack/undercloud-deploy.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("              The undercloud is already running the \"");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\" stack.\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                  return morphs;
                },
                statements: [["content", "stack.stack_name", ["loc", [null, [27, 53], [27, 73]]]]],
                locals: [],
                templates: []
              };
            })();
            return {
              meta: {
                "revision": "Ember@1.13.10",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 18,
                    "column": 2
                  },
                  "end": {
                    "line": 35,
                    "column": 2
                  }
                },
                "moduleName": "fusor-ember-cli/templates/openstack/undercloud-deploy.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("    ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("div");
                dom.setAttribute(el1, "class", "row");
                var el2 = dom.createTextNode("\n      ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("div");
                dom.setAttribute(el2, "class", "col-md-9");
                var el3 = dom.createTextNode("\n        ");
                dom.appendChild(el2, el3);
                var el3 = dom.createElement("div");
                dom.setAttribute(el3, "class", "col-md-9");
                var el4 = dom.createTextNode("\n          ");
                dom.appendChild(el3, el4);
                var el4 = dom.createElement("div");
                dom.setAttribute(el4, "class", "alert alert-danger");
                var el5 = dom.createTextNode("\n            ");
                dom.appendChild(el4, el5);
                var el5 = dom.createElement("span");
                dom.setAttribute(el5, "class", "pficon pficon-error-circle-o");
                dom.appendChild(el4, el5);
                var el5 = dom.createTextNode("\n");
                dom.appendChild(el4, el5);
                var el5 = dom.createComment("");
                dom.appendChild(el4, el5);
                var el5 = dom.createTextNode("            ");
                dom.appendChild(el4, el5);
                var el5 = dom.createElement("a");
                var el6 = dom.createTextNode(" Delete ");
                dom.appendChild(el5, el6);
                var el6 = dom.createComment("");
                dom.appendChild(el5, el6);
                dom.appendChild(el4, el5);
                var el5 = dom.createTextNode(" to continue the current deployment or\n            ");
                dom.appendChild(el4, el5);
                var el5 = dom.createElement("a");
                var el6 = dom.createTextNode("use a different undercloud");
                dom.appendChild(el5, el6);
                dom.appendChild(el4, el5);
                var el5 = dom.createTextNode(".\n          ");
                dom.appendChild(el4, el5);
                dom.appendChild(el3, el4);
                var el4 = dom.createTextNode("\n        ");
                dom.appendChild(el3, el4);
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("\n      ");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n    ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element3 = dom.childAt(fragment, [1, 1, 1, 1]);
                var element4 = dom.childAt(element3, [5]);
                var element5 = dom.childAt(element3, [7]);
                var morphs = new Array(4);
                morphs[0] = dom.createMorphAt(element3, 3, 3);
                morphs[1] = dom.createElementMorph(element4);
                morphs[2] = dom.createMorphAt(element4, 1, 1);
                morphs[3] = dom.createElementMorph(element5);
                return morphs;
              },
              statements: [["block", "if", [["get", "stackDeleteFailed", ["loc", [null, [24, 18], [24, 35]]]]], [], 0, 1, ["loc", [null, [24, 12], [28, 19]]]], ["element", "action", ["deleteStack"], [], ["loc", [null, [29, 15], [29, 39]]]], ["content", "stack.stack_name", ["loc", [null, [29, 48], [29, 68]]]], ["element", "action", ["resetCredentials"], [], ["loc", [null, [30, 15], [30, 44]]]]],
              locals: [],
              templates: [child0, child1]
            };
          })();
          var child1 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.10",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 35,
                    "column": 2
                  },
                  "end": {
                    "line": 47,
                    "column": 2
                  }
                },
                "moduleName": "fusor-ember-cli/templates/openstack/undercloud-deploy.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("    ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("div");
                dom.setAttribute(el1, "class", "row");
                var el2 = dom.createTextNode("\n      ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("div");
                dom.setAttribute(el2, "class", "col-md-9");
                var el3 = dom.createTextNode("\n        ");
                dom.appendChild(el2, el3);
                var el3 = dom.createElement("div");
                dom.setAttribute(el3, "class", "col-md-9");
                var el4 = dom.createTextNode("\n          ");
                dom.appendChild(el3, el4);
                var el4 = dom.createElement("div");
                dom.setAttribute(el4, "class", "alert alert-success");
                dom.setAttribute(el4, "style", "margin-bottom: 0px;");
                var el5 = dom.createTextNode("\n            ");
                dom.appendChild(el4, el5);
                var el5 = dom.createElement("span");
                dom.setAttribute(el5, "class", "pficon pficon-ok");
                dom.appendChild(el4, el5);
                var el5 = dom.createTextNode("\n            Undercloud has been successfully detected. If you want to connect to a different undercloud\n            ");
                dom.appendChild(el4, el5);
                var el5 = dom.createElement("a");
                var el6 = dom.createTextNode(" click here to enter new credentials");
                dom.appendChild(el5, el6);
                dom.appendChild(el4, el5);
                var el5 = dom.createTextNode(".\n          ");
                dom.appendChild(el4, el5);
                dom.appendChild(el3, el4);
                var el4 = dom.createTextNode("\n        ");
                dom.appendChild(el3, el4);
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("\n      ");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n    ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element2 = dom.childAt(fragment, [1, 1, 1, 1, 3]);
                var morphs = new Array(1);
                morphs[0] = dom.createElementMorph(element2);
                return morphs;
              },
              statements: [["element", "action", ["resetCredentials"], [], ["loc", [null, [42, 15], [42, 44]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 17,
                  "column": 0
                },
                "end": {
                  "line": 48,
                  "column": 0
                }
              },
              "moduleName": "fusor-ember-cli/templates/openstack/undercloud-deploy.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "if", [["get", "stack", ["loc", [null, [18, 8], [18, 13]]]]], [], 0, 1, ["loc", [null, [18, 2], [47, 9]]]]],
            locals: [],
            templates: [child0, child1]
          };
        })();
        var child1 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.10",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 84,
                    "column": 2
                  },
                  "end": {
                    "line": 92,
                    "column": 2
                  }
                },
                "moduleName": "fusor-ember-cli/templates/openstack/undercloud-deploy.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("    ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("div");
                dom.setAttribute(el1, "class", "row");
                var el2 = dom.createTextNode("\n      ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("div");
                dom.setAttribute(el2, "class", "col-md-9");
                dom.setAttribute(el2, "style", "padding-top: 10px;");
                var el3 = dom.createTextNode("\n        ");
                dom.appendChild(el2, el3);
                var el3 = dom.createElement("div");
                dom.setAttribute(el3, "class", "alert alert-danger");
                dom.setAttribute(el3, "style", "margin-bottom: 0px; max-width: 600px");
                var el4 = dom.createTextNode("\n          ");
                dom.appendChild(el3, el4);
                var el4 = dom.createElement("span");
                dom.setAttribute(el4, "class", "pficon pficon-error-circle-o");
                dom.appendChild(el3, el4);
                var el4 = dom.createTextNode(" Undercloud detection failed: ");
                dom.appendChild(el3, el4);
                var el4 = dom.createComment("");
                dom.appendChild(el3, el4);
                var el4 = dom.createTextNode("\n        ");
                dom.appendChild(el3, el4);
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("\n      ");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n    ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1, 1]), 3, 3);
                return morphs;
              },
              statements: [["content", "deploymentError", ["loc", [null, [88, 90], [88, 109]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 48,
                  "column": 0
                },
                "end": {
                  "line": 93,
                  "column": 0
                }
              },
              "moduleName": "fusor-ember-cli/templates/openstack/undercloud-deploy.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("  ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "row");
              var el2 = dom.createTextNode("\n    ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("div");
              dom.setAttribute(el2, "class", "col-md-9");
              var el3 = dom.createTextNode("\n      ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("form");
              dom.setAttribute(el3, "class", "form-horizontal undercloud-deploy-form");
              dom.setAttribute(el3, "role", "form");
              var el4 = dom.createTextNode("\n        ");
              dom.appendChild(el3, el4);
              var el4 = dom.createComment("");
              dom.appendChild(el3, el4);
              var el4 = dom.createTextNode("\n        ");
              dom.appendChild(el3, el4);
              var el4 = dom.createComment("");
              dom.appendChild(el3, el4);
              var el4 = dom.createTextNode("\n        ");
              dom.appendChild(el3, el4);
              var el4 = dom.createComment("");
              dom.appendChild(el3, el4);
              var el4 = dom.createTextNode("\n\n        ");
              dom.appendChild(el3, el4);
              var el4 = dom.createElement("button");
              dom.setAttribute(el4, "id", "detectUndercloudButton");
              dom.setAttribute(el4, "class", "btn btn-primary pull-left");
              dom.setAttribute(el4, "data-qci", "detect-undercloud");
              var el5 = dom.createTextNode("\n          Detect Undercloud\n        ");
              dom.appendChild(el4, el5);
              dom.appendChild(el3, el4);
              var el4 = dom.createTextNode("\n      ");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n    ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n  ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n\n");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element0 = dom.childAt(fragment, [1, 1, 1]);
              var element1 = dom.childAt(element0, [7]);
              var morphs = new Array(6);
              morphs[0] = dom.createMorphAt(element0, 1, 1);
              morphs[1] = dom.createMorphAt(element0, 3, 3);
              morphs[2] = dom.createMorphAt(element0, 5, 5);
              morphs[3] = dom.createAttrMorph(element1, 'disabled');
              morphs[4] = dom.createElementMorph(element1);
              morphs[5] = dom.createMorphAt(fragment, 3, 3, contextualElement);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["inline", "text-f", [], ["cssId", "undercloudIpInput", "label", "Undercloud IP", "value", ["subexpr", "@mut", [["get", "openstackDeployment.undercloud_ip_address", ["loc", [null, [54, 24], [54, 65]]]]], [], []], "labelSize", "deploy-undercloud-param-label", "inputSize", "deploy-undercloud-param-input", "isRequired", true, "helpText", ["subexpr", "@mut", [["get", "undercloudIPHelp", ["loc", [null, [58, 27], [58, 43]]]]], [], []], "validator", ["subexpr", "@mut", [["get", "undercloudIpValidator", ["loc", [null, [59, 28], [59, 49]]]]], [], []], "disabled", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [60, 27], [60, 36]]]]], [], []]], ["loc", [null, [52, 8], [60, 38]]]], ["inline", "text-f", [], ["cssId", "undercloudSshUserInput", "label", "SSH User", "value", ["subexpr", "@mut", [["get", "openstackDeployment.undercloud_ssh_username", ["loc", [null, [63, 24], [63, 67]]]]], [], []], "labelSize", "deploy-undercloud-param-label", "inputSize", "deploy-undercloud-param-input", "isRequired", true, "disabled", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [67, 27], [67, 36]]]]], [], []]], ["loc", [null, [61, 8], [67, 38]]]], ["inline", "text-f", [], ["cssId", "undercloudSshPasswordInput", "label", "SSH Password", "value", ["subexpr", "@mut", [["get", "openstackDeployment.undercloud_ssh_password", ["loc", [null, [70, 24], [70, 67]]]]], [], []], "labelSize", "deploy-undercloud-param-label", "inputSize", "deploy-undercloud-param-input", "type", "password", "isRequired", true, "disabled", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [75, 27], [75, 36]]]]], [], []]], ["loc", [null, [68, 8], [75, 38]]]], ["attribute", "disabled", ["get", "deployDisabled", ["loc", [null, [77, 119], [77, 133]]]]], ["element", "action", ["deployUndercloud"], [], ["loc", [null, [77, 78], [77, 107]]]], ["block", "if", [["get", "deploymentError", ["loc", [null, [84, 8], [84, 23]]]]], [], 0, null, ["loc", [null, [84, 2], [92, 9]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 17,
                "column": 0
              },
              "end": {
                "line": 93,
                "column": 0
              }
            },
            "moduleName": "fusor-ember-cli/templates/openstack/undercloud-deploy.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["get", "isConnected", ["loc", [null, [17, 10], [17, 21]]]]], [], 0, 1, ["loc", [null, [17, 0], [93, 0]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 12,
              "column": 0
            },
            "end": {
              "line": 93,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/openstack/undercloud-deploy.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "showLoadingSpinner", ["loc", [null, [12, 10], [12, 28]]]]], [], 0, 1, ["loc", [null, [12, 0], [93, 0]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 101,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/openstack/undercloud-deploy.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["block", "if", [["get", "errorMsg", ["loc", [null, [1, 6], [1, 14]]]]], [], 0, 1, ["loc", [null, [1, 0], [93, 7]]]], ["inline", "cancel-back-next", [], ["backRouteName", ["subexpr", "@mut", [["get", "backRouteNameUndercloud", ["loc", [null, [95, 33], [95, 56]]]]], [], []], "disableBack", false, "nextRouteName", "openstack.register-nodes", "disableNext", ["subexpr", "@mut", [["get", "disableDeployUndercloudNext", ["loc", [null, [98, 32], [98, 59]]]]], [], []], "disableCancel", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [99, 34], [99, 43]]]]], [], []], "deploymentName", ["subexpr", "@mut", [["get", "deploymentName", ["loc", [null, [100, 35], [100, 49]]]]], [], []]], ["loc", [null, [95, 0], [100, 51]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("fusor-ember-cli/templates/openstack", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 3,
                "column": 6
              },
              "end": {
                "line": 9,
                "column": 6
              }
            },
            "moduleName": "fusor-ember-cli/templates/openstack.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("a");
            dom.setAttribute(el1, "data-qci", "detect-undercloud");
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("span");
            dom.setAttribute(el2, "class", "hanging-indent");
            var el3 = dom.createTextNode("\n            ");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("A. Detect Undercloud\n          ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1]), 1, 1);
            return morphs;
          },
          statements: [["content", "stepNumberOpenstack", ["loc", [null, [6, 12], [6, 35]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 11,
                "column": 6
              },
              "end": {
                "line": 17,
                "column": 6
              }
            },
            "moduleName": "fusor-ember-cli/templates/openstack.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("a");
            dom.setAttribute(el1, "data-qci", "osp-register-nodes");
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("span");
            dom.setAttribute(el2, "class", "hanging-indent");
            var el3 = dom.createTextNode("\n            ");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("B. Register Nodes\n          ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1]), 1, 1);
            return morphs;
          },
          statements: [["content", "stepNumberOpenstack", ["loc", [null, [14, 12], [14, 35]]]]],
          locals: [],
          templates: []
        };
      })();
      var child2 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 19,
                "column": 6
              },
              "end": {
                "line": 25,
                "column": 6
              }
            },
            "moduleName": "fusor-ember-cli/templates/openstack.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("a");
            dom.setAttribute(el1, "data-qci", "osp-assign-nodes");
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("span");
            dom.setAttribute(el2, "class", "hanging-indent");
            var el3 = dom.createTextNode("\n            ");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("C. Assign Nodes\n          ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1]), 1, 1);
            return morphs;
          },
          statements: [["content", "stepNumberOpenstack", ["loc", [null, [22, 12], [22, 35]]]]],
          locals: [],
          templates: []
        };
      })();
      var child3 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 27,
                "column": 6
              },
              "end": {
                "line": 33,
                "column": 6
              }
            },
            "moduleName": "fusor-ember-cli/templates/openstack.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("a");
            dom.setAttribute(el1, "data-qci", "configure-overcloud");
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("span");
            dom.setAttribute(el2, "class", "hanging-indent");
            var el3 = dom.createTextNode("\n            ");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("D. Configure Overcloud\n          ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1]), 1, 1);
            return morphs;
          },
          statements: [["content", "stepNumberOpenstack", ["loc", [null, [30, 12], [30, 35]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 35,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/openstack.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(4);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
          morphs[3] = dom.createMorphAt(fragment, 7, 7, contextualElement);
          return morphs;
        },
        statements: [["block", "link-to", ["openstack.undercloud-deploy"], ["tagName", "li"], 0, null, ["loc", [null, [3, 6], [9, 18]]]], ["block", "link-to", ["openstack.register-nodes"], ["tagName", "li", "disabled", ["subexpr", "@mut", [["get", "disableTabRegisterNodes", ["loc", [null, [11, 66], [11, 89]]]]], [], []]], 1, null, ["loc", [null, [11, 6], [17, 18]]]], ["block", "link-to", ["openstack.assign-nodes"], ["tagName", "li", "disabled", ["subexpr", "@mut", [["get", "disableTabAssignNodes", ["loc", [null, [19, 64], [19, 85]]]]], [], []]], 2, null, ["loc", [null, [19, 6], [25, 18]]]], ["block", "link-to", ["openstack.overcloud"], ["tagName", "li", "disabled", ["subexpr", "@mut", [["get", "disableTabOvercloud", ["loc", [null, [27, 61], [27, 80]]]]], [], []]], 3, null, ["loc", [null, [27, 6], [33, 18]]]]],
        locals: [],
        templates: [child0, child1, child2, child3]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 36,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/openstack.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "wizard-step", [], ["outlet", ["subexpr", "@mut", [["get", "outlet", ["loc", [null, [1, 22], [1, 28]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [35, 16]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("fusor-ember-cli/templates/readme", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/readme.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "markdown-to-html", [], ["markdown", ["subexpr", "@mut", [["get", "model", ["loc", [null, [1, 28], [1, 33]]]]], [], []]], ["loc", [null, [1, 0], [1, 35]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("fusor-ember-cli/templates/req-cloudforms", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 10,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/req-cloudforms.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "req-section");
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("p");
        dom.setAttribute(el2, "class", "req-title");
        var el3 = dom.createTextNode("Red Hat CloudForms");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("ul");
        dom.setAttribute(el2, "class", "req-list");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createTextNode("No specific requirements");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() {
        return [];
      },
      statements: [],
      locals: [],
      templates: []
    };
  })());
});
define("fusor-ember-cli/templates/req-disconnected", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 13,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/req-disconnected.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "req-section");
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("p");
        dom.setAttribute(el2, "class", "req-title");
        var el3 = dom.createTextNode("Disconnected network scenario");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("p");
        var el3 = dom.createTextNode("If you are deploying into an environment that does not have external network access, these are additional requirements:");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("ul");
        dom.setAttribute(el2, "class", "req-list");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createTextNode("URL to an alternate repository to download content from");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createElement("a");
        dom.setAttribute(el4, "href", "https://access.redhat.com/solutions/118573");
        dom.setAttribute(el4, "target", "_blank");
        var el5 = dom.createTextNode("Subscription manifest");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() {
        return [];
      },
      statements: [],
      locals: [],
      templates: []
    };
  })());
});
define("fusor-ember-cli/templates/req-general", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 13,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/req-general.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "req-section");
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("p");
        dom.setAttribute(el2, "class", "req-title");
        var el3 = dom.createTextNode("General");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("ul");
        dom.setAttribute(el2, "class", "req-list");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createTextNode("Red Hat Customer Portal username and password. This account must be an Organization Administrator within the Portal");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createElement("a");
        dom.setAttribute(el4, "href", "https://access.redhat.com/management/subscriptions");
        dom.setAttribute(el4, "target", "_blank");
        var el5 = dom.createTextNode("Sufficient subscriptions");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode(" to complete this deployment");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createTextNode("Host machines are started and discoverable");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createTextNode("Networks and subsets are set up and available");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() {
        return [];
      },
      statements: [],
      locals: [],
      templates: []
    };
  })());
});
define("fusor-ember-cli/templates/req-openshift", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 15,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/req-openshift.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "req-section");
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("p");
        dom.setAttribute(el2, "class", "req-title");
        var el3 = dom.createTextNode("OpenShift Enterprise by Red Hat");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("ul");
        dom.setAttribute(el2, "class", "req-list");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createTextNode("Requires RHEV to be selected to deploy OpenShift");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createTextNode("NFS/GlusterFS share for persistent storage to be used with internal OpenShift registry");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createTextNode("All host hardware clocks are synchronized with the hardware clock on the Satellite system");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createTextNode("Hypervisor host minimum requirements: 18 GB RAM, 4 CPU");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createTextNode("Data domain NFS/GlusterFS share must have at least 60 GB free space");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createTextNode("Note: Requirements will change depending upon OpenShift configuration of master and worker nodes");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() {
        return [];
      },
      statements: [],
      locals: [],
      templates: []
    };
  })());
});
define("fusor-ember-cli/templates/req-openstack", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 15,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/req-openstack.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "req-section");
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("p");
        dom.setAttribute(el2, "class", "req-title");
        var el3 = dom.createTextNode("Red Hat OpenStack Platform");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("ul");
        dom.setAttribute(el2, "class", "req-list");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createTextNode("IP address to the undercloud that was set up according to the instructions found in QuickStart Cloud Installer Installation Guide");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createTextNode("2 nodes (1 controller, 1 compute). Each node requires 100GB disk space, 16GB RAM, and 4 CPUs");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createTextNode("All node hardware clocks are synchronized with the hardware clock on the Satellite system");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createTextNode("Refer to the ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("a");
        dom.setAttribute(el4, "href", "https://access.redhat.com/documentation/en/red-hat-openstack-platform/8/director-installation-and-usage/appendix-b-power-management-drivers");
        dom.setAttribute(el4, "target", "_blank");
        var el5 = dom.createTextNode("Power Management Drivers");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode(" appendix in the ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("a");
        dom.setAttribute(el4, "href", "https://access.redhat.com/documentation/en/red-hat-openstack-platform/8/director-installation-and-usage/director-installation-and-usage");
        dom.setAttribute(el4, "target", "_blank");
        var el5 = dom.createTextNode("Director Installation and Usage");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode(" manual for the current list of supported power management interfaces.");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() {
        return [];
      },
      statements: [],
      locals: [],
      templates: []
    };
  })());
});
define("fusor-ember-cli/templates/req-rhev", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 22,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/req-rhev.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "req-section");
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("p");
        dom.setAttribute(el2, "class", "req-title");
        var el3 = dom.createTextNode("Red Hat Virtualization");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n  Engine + Hypervisor\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("ul");
        dom.setAttribute(el2, "class", "req-list");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createTextNode("2 hosts (1 for engine, 1 for hypervisor).\n    Engine host requires 10 GB disk space, 2GB RAM, and 1 CPU.\n    Hypervisor host requires 10 GB disk space, 12GB RAM, and 4 CPUs");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createTextNode("All host hardware clocks are synchronized with the hardware clock on the Satellite system");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createTextNode("NFS/GlusterFS share. For both data domain and export domain: IP address and shared path");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n  Self-hosted\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("ul");
        dom.setAttribute(el2, "class", "req-list");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createTextNode("1 host for hypervisor. Hypervisor host requires 60 GB disk space, 12GB RAM, and 4 CPUs");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createTextNode("All host hardware clocks are synchronized with the hardware clock on the Satellite system");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createTextNode("NFS/GlusterFS share. For data domain, export domain, and self-hosted domain: IP address and shared path");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() {
        return [];
      },
      statements: [],
      locals: [],
      templates: []
    };
  })());
});
define("fusor-ember-cli/templates/review/index", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/review/index.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["content", "outlet", ["loc", [null, [1, 0], [1, 10]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("fusor-ember-cli/templates/review/installation", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 3,
                "column": 2
              },
              "end": {
                "line": 13,
                "column": 2
              }
            },
            "moduleName": "fusor-ember-cli/templates/review/installation.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "row");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "col-md-9");
            var el3 = dom.createTextNode("\n        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "alert alert-danger rhci-alert");
            var el4 = dom.createTextNode("\n          ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("i");
            dom.setAttribute(el4, "class", "fa fa-2x fa-exclamation-triangle errorForValidation");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n           \n          ");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n        ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n      ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1, 1]), 3, 3);
            return morphs;
          },
          statements: [["content", "errorMsg", ["loc", [null, [9, 10], [9, 22]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 21,
                  "column": 12
                },
                "end": {
                  "line": 23,
                  "column": 12
                }
              },
              "moduleName": "fusor-ember-cli/templates/review/installation.hbs"
            },
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("              ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("li");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
              return morphs;
            },
            statements: [["content", "errorMsg", ["loc", [null, [22, 18], [22, 30]]]]],
            locals: ["errorMsg"],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 15,
                "column": 2
              },
              "end": {
                "line": 28,
                "column": 2
              }
            },
            "moduleName": "fusor-ember-cli/templates/review/installation.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "row");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "col-md-9");
            var el3 = dom.createTextNode("\n        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "alert alert-danger rhci-alert");
            var el4 = dom.createTextNode("\n          ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("i");
            dom.setAttribute(el4, "class", "fa fa-2x fa-exclamation-triangle errorForValidation validation-alert-icon");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n          ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("ul");
            dom.setAttribute(el4, "class", "validation-alert-message");
            var el5 = dom.createTextNode("\n");
            dom.appendChild(el4, el5);
            var el5 = dom.createComment("");
            dom.appendChild(el4, el5);
            var el5 = dom.createTextNode("          ");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n        ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n      ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1, 1, 3]), 1, 1);
            return morphs;
          },
          statements: [["block", "each", [["get", "validationErrors", ["loc", [null, [21, 20], [21, 36]]]]], [], 0, null, ["loc", [null, [21, 12], [23, 21]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child2 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 36,
                  "column": 14
                },
                "end": {
                  "line": 38,
                  "column": 14
                }
              },
              "moduleName": "fusor-ember-cli/templates/review/installation.hbs"
            },
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("li");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
              return morphs;
            },
            statements: [["content", "warningMsg", ["loc", [null, [37, 20], [37, 34]]]]],
            locals: ["warningMsg"],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 30,
                "column": 2
              },
              "end": {
                "line": 43,
                "column": 2
              }
            },
            "moduleName": "fusor-ember-cli/templates/review/installation.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "row");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "col-md-9");
            var el3 = dom.createTextNode("\n        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "alert alert-warning rhci-alert");
            var el4 = dom.createTextNode("\n            ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("i");
            dom.setAttribute(el4, "class", "fa fa-2x fa-exclamation-triangle warningForValidation validation-alert-icon");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n            ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("ul");
            dom.setAttribute(el4, "class", "validation-alert-message");
            var el5 = dom.createTextNode("\n");
            dom.appendChild(el4, el5);
            var el5 = dom.createComment("");
            dom.appendChild(el4, el5);
            var el5 = dom.createTextNode("            ");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n        ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n      ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1, 1, 3]), 1, 1);
            return morphs;
          },
          statements: [["block", "each", [["get", "validationWarnings", ["loc", [null, [36, 22], [36, 40]]]]], [], 0, null, ["loc", [null, [36, 14], [38, 23]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child3 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 48,
                "column": 6
              },
              "end": {
                "line": 62,
                "column": 6
              }
            },
            "moduleName": "fusor-ember-cli/templates/review/installation.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n\n        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n\n        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n\n        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(4);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
            morphs[3] = dom.createMorphAt(fragment, 7, 7, contextualElement);
            return morphs;
          },
          statements: [["inline", "review-link", [], ["label", "Name", "routeName", "satellite", "isRequired", true, "value", ["subexpr", "@mut", [["get", "model.name", ["loc", [null, [50, 28], [50, 38]]]]], [], []]], ["loc", [null, [49, 8], [50, 40]]]], ["inline", "review-link", [], ["label", "Organization", "isRequired", true, "value", ["subexpr", "@mut", [["get", "model.organization.name", ["loc", [null, [53, 28], [53, 51]]]]], [], []]], ["loc", [null, [52, 8], [53, 53]]]], ["inline", "review-link", [], ["label", "Environment", "routeName", "configure-environment", "value", ["subexpr", "@mut", [["get", "lifecycleEnvironmentName", ["loc", [null, [56, 28], [56, 52]]]]], [], []]], ["loc", [null, [55, 8], [56, 54]]]], ["inline", "review-link", [], ["label", "Red Hat Insights", "routeName", "satellite.access-insights", "value", ["subexpr", "@mut", [["get", "deploymentController.enableAccessInsights", ["loc", [null, [60, 28], [60, 69]]]]], [], []]], ["loc", [null, [58, 8], [60, 72]]]]],
          locals: [],
          templates: []
        };
      })();
      var child4 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              var child0 = (function () {
                return {
                  meta: {
                    "revision": "Ember@1.13.10",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 71,
                        "column": 16
                      },
                      "end": {
                        "line": 73,
                        "column": 16
                      }
                    },
                    "moduleName": "fusor-ember-cli/templates/review/installation.hbs"
                  },
                  arity: 1,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode("                   ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                  },
                  statements: [["inline", "hypervisor-name", [], ["host", ["subexpr", "@mut", [["get", "host", ["loc", [null, [72, 42], [72, 46]]]]], [], []], "hypervisorDomain", ["subexpr", "@mut", [["get", "hypervisorDomain", ["loc", [null, [72, 64], [72, 80]]]]], [], []]], ["loc", [null, [72, 19], [72, 82]]]]],
                  locals: ["host"],
                  templates: []
                };
              })();
              return {
                meta: {
                  "revision": "Ember@1.13.10",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 70,
                      "column": 12
                    },
                    "end": {
                      "line": 74,
                      "column": 12
                    }
                  },
                  "moduleName": "fusor-ember-cli/templates/review/installation.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                  dom.insertBoundary(fragment, 0);
                  dom.insertBoundary(fragment, null);
                  return morphs;
                },
                statements: [["block", "each", [["get", "selectedHypervisorHosts", ["loc", [null, [71, 24], [71, 47]]]]], [], 0, null, ["loc", [null, [71, 16], [73, 25]]]]],
                locals: [],
                templates: [child0]
              };
            })();
            return {
              meta: {
                "revision": "Ember@1.13.10",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 69,
                    "column": 8
                  },
                  "end": {
                    "line": 76,
                    "column": 8
                  }
                },
                "moduleName": "fusor-ember-cli/templates/review/installation.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                return morphs;
              },
              statements: [["block", "review-link", [], ["label", "Engine/Hypervisor Host Name", "routeName", "hypervisor.discovered-host", "isRequired", true, "value", ["subexpr", "@mut", [["get", "selectedHypervisorHosts", ["loc", [null, [70, 124], [70, 147]]]]], [], []], "useYieldInstead", true], 0, null, ["loc", [null, [70, 12], [74, 28]]]]],
              locals: [],
              templates: [child0]
            };
          })();
          var child1 = (function () {
            var child0 = (function () {
              var child0 = (function () {
                return {
                  meta: {
                    "revision": "Ember@1.13.10",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 81,
                        "column": 16
                      },
                      "end": {
                        "line": 83,
                        "column": 16
                      }
                    },
                    "moduleName": "fusor-ember-cli/templates/review/installation.hbs"
                  },
                  arity: 1,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode("                   ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                  },
                  statements: [["inline", "hypervisor-name", [], ["host", ["subexpr", "@mut", [["get", "host", ["loc", [null, [82, 42], [82, 46]]]]], [], []], "hypervisorDomain", ["subexpr", "@mut", [["get", "hypervisorDomain", ["loc", [null, [82, 64], [82, 80]]]]], [], []]], ["loc", [null, [82, 19], [82, 82]]]]],
                  locals: ["host"],
                  templates: []
                };
              })();
              return {
                meta: {
                  "revision": "Ember@1.13.10",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 80,
                      "column": 12
                    },
                    "end": {
                      "line": 84,
                      "column": 12
                    }
                  },
                  "moduleName": "fusor-ember-cli/templates/review/installation.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                  dom.insertBoundary(fragment, 0);
                  dom.insertBoundary(fragment, null);
                  return morphs;
                },
                statements: [["block", "each", [["get", "selectedHypervisorHosts", ["loc", [null, [81, 24], [81, 47]]]]], [], 0, null, ["loc", [null, [81, 16], [83, 25]]]]],
                locals: [],
                templates: [child0]
              };
            })();
            return {
              meta: {
                "revision": "Ember@1.13.10",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 76,
                    "column": 8
                  },
                  "end": {
                    "line": 85,
                    "column": 8
                  }
                },
                "moduleName": "fusor-ember-cli/templates/review/installation.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("            ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n\n");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(2);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["inline", "review-link", [], ["label", "Engine Host Name", "routeName", "engine.discovered-host", "isRequired", true, "value", ["subexpr", "@mut", [["get", "engineNamePlusDomain", ["loc", [null, [78, 32], [78, 52]]]]], [], []]], ["loc", [null, [77, 12], [78, 54]]]], ["block", "review-link", [], ["label", "Hypervisor Host Name", "routeName", "hypervisor.discovered-host", "isRequired", true, "value", ["subexpr", "@mut", [["get", "selectedHypervisorHosts", ["loc", [null, [80, 117], [80, 140]]]]], [], []], "useYieldInstead", true], 0, null, ["loc", [null, [80, 12], [84, 28]]]]],
              locals: [],
              templates: [child0]
            };
          })();
          var child2 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.10",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 114,
                    "column": 8
                  },
                  "end": {
                    "line": 125,
                    "column": 8
                  }
                },
                "moduleName": "fusor-ember-cli/templates/review/installation.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("\n            ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n\n            ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n\n            ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(3);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
                morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
                return morphs;
              },
              statements: [["inline", "review-link", [], ["label", "Export Domain Name", "routeName", "storage", "isDefault", true, "value", ["subexpr", "@mut", [["get", "model.rhev_export_domain_name", ["loc", [null, [117, 32], [117, 61]]]]], [], []]], ["loc", [null, [116, 12], [117, 63]]]], ["inline", "review-link", [], ["label", "Export Storage Address", "routeName", "storage", "isDefault", true, "value", ["subexpr", "@mut", [["get", "model.rhev_export_domain_address", ["loc", [null, [120, 32], [120, 64]]]]], [], []]], ["loc", [null, [119, 12], [120, 66]]]], ["inline", "review-link", [], ["label", "Export Storage Path", "routeName", "storage", "isDefault", true, "value", ["subexpr", "@mut", [["get", "model.rhev_export_domain_path", ["loc", [null, [123, 32], [123, 61]]]]], [], []]], ["loc", [null, [122, 12], [123, 63]]]]],
              locals: [],
              templates: []
            };
          })();
          var child3 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.10",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 126,
                    "column": 8
                  },
                  "end": {
                    "line": 137,
                    "column": 8
                  }
                },
                "moduleName": "fusor-ember-cli/templates/review/installation.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("\n            ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n\n            ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n\n            ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(3);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
                morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
                return morphs;
              },
              statements: [["inline", "review-link", [], ["label", "Hosted Storage Domain Name", "routeName", "storage", "isDefault", true, "value", ["subexpr", "@mut", [["get", "model.hosted_storage_name", ["loc", [null, [129, 32], [129, 57]]]]], [], []]], ["loc", [null, [128, 12], [129, 59]]]], ["inline", "review-link", [], ["label", "Hosted Storage Address", "routeName", "storage", "isDefault", true, "value", ["subexpr", "@mut", [["get", "model.hosted_storage_address", ["loc", [null, [132, 32], [132, 60]]]]], [], []]], ["loc", [null, [131, 12], [132, 62]]]], ["inline", "review-link", [], ["label", "Hosted Storage Path", "routeName", "storage", "isDefault", true, "value", ["subexpr", "@mut", [["get", "model.hosted_storage_path", ["loc", [null, [135, 32], [135, 57]]]]], [], []]], ["loc", [null, [134, 12], [135, 59]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 65,
                  "column": 6
                },
                "end": {
                  "line": 140,
                  "column": 6
                }
              },
              "moduleName": "fusor-ember-cli/templates/review/installation.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("\n        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n\n        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n\n        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n\n        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n\n        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n\n        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n\n        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n\n        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n\n        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n\n");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("br");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(13);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
              morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
              morphs[3] = dom.createMorphAt(fragment, 7, 7, contextualElement);
              morphs[4] = dom.createMorphAt(fragment, 9, 9, contextualElement);
              morphs[5] = dom.createMorphAt(fragment, 11, 11, contextualElement);
              morphs[6] = dom.createMorphAt(fragment, 13, 13, contextualElement);
              morphs[7] = dom.createMorphAt(fragment, 15, 15, contextualElement);
              morphs[8] = dom.createMorphAt(fragment, 17, 17, contextualElement);
              morphs[9] = dom.createMorphAt(fragment, 19, 19, contextualElement);
              morphs[10] = dom.createMorphAt(fragment, 21, 21, contextualElement);
              morphs[11] = dom.createMorphAt(fragment, 23, 23, contextualElement);
              morphs[12] = dom.createMorphAt(fragment, 24, 24, contextualElement);
              return morphs;
            },
            statements: [["inline", "review-link", [], ["label", "Setup Type", "routeName", "rhev-setup", "isRequired", true, "value", ["subexpr", "@mut", [["get", "rhevSetupController.rhevSetupTitle", ["loc", [null, [68, 32], [68, 66]]]]], [], []]], ["loc", [null, [67, 8], [68, 68]]]], ["block", "if", [["get", "isSelfHosted", ["loc", [null, [69, 14], [69, 26]]]]], [], 0, 1, ["loc", [null, [69, 8], [85, 15]]]], ["inline", "review-link", [], ["label", "Root password Engine & Hypervisor", "routeName", "rhev-options", "isRequired", true, "isPassword", true, "value", ["subexpr", "@mut", [["get", "model.rhev_root_password", ["loc", [null, [88, 44], [88, 68]]]]], [], []]], ["loc", [null, [87, 8], [88, 71]]]], ["inline", "review-link", [], ["label", "Engine admin password", "routeName", "rhev-options", "isRequired", true, "isPassword", true, "value", ["subexpr", "@mut", [["get", "model.rhev_engine_admin_password", ["loc", [null, [91, 28], [91, 60]]]]], [], []]], ["loc", [null, [90, 8], [91, 63]]]], ["inline", "review-link", [], ["label", "Datacenter Name", "routeName", "rhev-options", "isDefault", true, "value", ["subexpr", "@mut", [["get", "model.rhev_data_center_name", ["loc", [null, [94, 28], [94, 55]]]]], [], []]], ["loc", [null, [93, 8], [94, 57]]]], ["inline", "review-link", [], ["label", "Cluster Name", "routeName", "rhev-options", "isDefault", true, "value", ["subexpr", "@mut", [["get", "model.rhev_cluster_name", ["loc", [null, [97, 28], [97, 51]]]]], [], []]], ["loc", [null, [96, 8], [97, 53]]]], ["inline", "review-link", [], ["label", "CPU Type", "routeName", "rhev-options", "isDefault", true, "value", ["subexpr", "@mut", [["get", "model.rhev_cpu_type", ["loc", [null, [100, 28], [100, 47]]]]], [], []]], ["loc", [null, [99, 8], [100, 49]]]], ["inline", "review-link", [], ["label", "Storage Type", "routeName", "storage", "isRequired", true, "value", ["subexpr", "@mut", [["get", "model.rhev_storage_type", ["loc", [null, [103, 28], [103, 51]]]]], [], []]], ["loc", [null, [102, 8], [103, 53]]]], ["inline", "review-link", [], ["label", "Data Domain Name", "routeName", "storage", "isDefault", true, "value", ["subexpr", "@mut", [["get", "model.rhev_storage_name", ["loc", [null, [106, 28], [106, 51]]]]], [], []]], ["loc", [null, [105, 8], [106, 53]]]], ["inline", "review-link", [], ["label", "Data Storage Address", "routeName", "storage", "isDefault", true, "value", ["subexpr", "@mut", [["get", "model.rhev_storage_address", ["loc", [null, [109, 28], [109, 54]]]]], [], []]], ["loc", [null, [108, 8], [109, 56]]]], ["inline", "review-link", [], ["label", "Data Storage Path", "routeName", "storage", "isDefault", true, "value", ["subexpr", "@mut", [["get", "model.rhev_share_path", ["loc", [null, [112, 28], [112, 49]]]]], [], []]], ["loc", [null, [111, 8], [112, 51]]]], ["block", "if", [["get", "isCloudForms", ["loc", [null, [114, 14], [114, 26]]]]], [], 2, null, ["loc", [null, [114, 8], [125, 15]]]], ["block", "if", [["get", "isSelfHosted", ["loc", [null, [126, 14], [126, 26]]]]], [], 3, null, ["loc", [null, [126, 8], [137, 15]]]]],
            locals: [],
            templates: [child0, child1, child2, child3]
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 64,
                "column": 4
              },
              "end": {
                "line": 141,
                "column": 4
              }
            },
            "moduleName": "fusor-ember-cli/templates/review/installation.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "accordion-item", [], ["name", ["subexpr", "@mut", [["get", "fullnameRhev", ["loc", [null, [65, 29], [65, 41]]]]], [], []], "isOpen", ["subexpr", "@mut", [["get", "isRhevOpen", ["loc", [null, [65, 49], [65, 59]]]]], [], []]], 0, null, ["loc", [null, [65, 6], [140, 25]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child5 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              var child0 = (function () {
                return {
                  meta: {
                    "revision": "Ember@1.13.10",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 151,
                        "column": 16
                      },
                      "end": {
                        "line": 153,
                        "column": 16
                      }
                    },
                    "moduleName": "fusor-ember-cli/templates/review/installation.hbs"
                  },
                  arity: 1,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode("                  ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createElement("div");
                    dom.setAttribute(el1, "class", "node-count-review-link");
                    var el2 = dom.createComment("");
                    dom.appendChild(el1, el2);
                    var el2 = dom.createTextNode(" ");
                    dom.appendChild(el1, el2);
                    var el2 = dom.createComment("");
                    dom.appendChild(el1, el2);
                    var el2 = dom.createTextNode(" Nodes");
                    dom.appendChild(el1, el2);
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var element0 = dom.childAt(fragment, [1]);
                    var morphs = new Array(2);
                    morphs[0] = dom.createMorphAt(element0, 0, 0);
                    morphs[1] = dom.createMorphAt(element0, 2, 2);
                    return morphs;
                  },
                  statements: [["content", "node.count", ["loc", [null, [152, 54], [152, 68]]]], ["content", "node.name", ["loc", [null, [152, 69], [152, 82]]]]],
                  locals: ["node"],
                  templates: []
                };
              })();
              return {
                meta: {
                  "revision": "Ember@1.13.10",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 149,
                      "column": 14
                    },
                    "end": {
                      "line": 154,
                      "column": 14
                    }
                  },
                  "moduleName": "fusor-ember-cli/templates/review/installation.hbs"
                },
                arity: 1,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("                ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("div");
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createTextNode(":");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(2);
                  morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
                  morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
                  dom.insertBoundary(fragment, null);
                  return morphs;
                },
                statements: [["content", "profile.flavor", ["loc", [null, [150, 21], [150, 39]]]], ["block", "each", [["get", "profile.nodes", ["loc", [null, [151, 24], [151, 37]]]]], [], 0, null, ["loc", [null, [151, 16], [153, 25]]]]],
                locals: ["profile"],
                templates: [child0]
              };
            })();
            return {
              meta: {
                "revision": "Ember@1.13.10",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 147,
                    "column": 12
                  },
                  "end": {
                    "line": 155,
                    "column": 12
                  }
                },
                "moduleName": "fusor-ember-cli/templates/review/installation.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["block", "each", [["get", "profiles", ["loc", [null, [149, 22], [149, 30]]]]], [], 0, null, ["loc", [null, [149, 14], [154, 23]]]]],
              locals: [],
              templates: [child0]
            };
          })();
          var child1 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.10",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 182,
                    "column": 8
                  },
                  "end": {
                    "line": 224,
                    "column": 8
                  }
                },
                "moduleName": "fusor-ember-cli/templates/review/installation.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("          ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n\n\n          ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n\n\n          ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n\n\n          ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n\n\n          ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n\n\n          ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n\n\n          ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(7);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
                morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
                morphs[3] = dom.createMorphAt(fragment, 7, 7, contextualElement);
                morphs[4] = dom.createMorphAt(fragment, 9, 9, contextualElement);
                morphs[5] = dom.createMorphAt(fragment, 11, 11, contextualElement);
                morphs[6] = dom.createMorphAt(fragment, 13, 13, contextualElement);
                return morphs;
              },
              statements: [["inline", "review-link", [], ["label", "Ceph External Mon Host", "value", ["subexpr", "@mut", [["get", "model.openstack_deployment.ceph_ext_mon_host", ["loc", [null, [184, 30], [184, 74]]]]], [], []], "isRequired", true, "routeName", "openstack.overcloud"], ["loc", [null, [183, 10], [186, 57]]]], ["inline", "review-link", [], ["label", "Ceph Cluster FSID", "value", ["subexpr", "@mut", [["get", "model.openstack_deployment.ceph_cluster_fsid", ["loc", [null, [190, 30], [190, 74]]]]], [], []], "isRequired", true, "routeName", "openstack.overcloud"], ["loc", [null, [189, 10], [192, 57]]]], ["inline", "review-link", [], ["label", "Ceph Client Username", "value", ["subexpr", "@mut", [["get", "model.openstack_deployment.ceph_client_username", ["loc", [null, [196, 30], [196, 77]]]]], [], []], "isRequired", true, "routeName", "openstack.overcloud"], ["loc", [null, [195, 10], [198, 57]]]], ["inline", "review-link", [], ["label", "Ceph Client Key", "value", ["subexpr", "@mut", [["get", "model.openstack_deployment.ceph_client_key", ["loc", [null, [202, 30], [202, 72]]]]], [], []], "isRequired", true, "routeName", "openstack.overcloud"], ["loc", [null, [201, 10], [204, 57]]]], ["inline", "review-link", [], ["label", "Nova Rbd Pool Name", "value", ["subexpr", "@mut", [["get", "model.openstack_deployment.nova_rbd_pool_name", ["loc", [null, [208, 30], [208, 75]]]]], [], []], "isRequired", true, "routeName", "openstack.overcloud"], ["loc", [null, [207, 10], [210, 57]]]], ["inline", "review-link", [], ["label", "Cinder Rbd Pool Name", "value", ["subexpr", "@mut", [["get", "model.openstack_deployment.cinder_rbd_pool_name", ["loc", [null, [214, 30], [214, 77]]]]], [], []], "isRequired", true, "routeName", "openstack.overcloud"], ["loc", [null, [213, 10], [216, 57]]]], ["inline", "review-link", [], ["label", "Glance Rbd Pool Name", "value", ["subexpr", "@mut", [["get", "model.openstack_deployment.glance_rbd_pool_name", ["loc", [null, [220, 30], [220, 77]]]]], [], []], "isRequired", true, "routeName", "openstack.overcloud"], ["loc", [null, [219, 10], [222, 57]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 144,
                  "column": 6
                },
                "end": {
                  "line": 225,
                  "column": 6
                }
              },
              "moduleName": "fusor-ember-cli/templates/review/installation.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n\n\n");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(10);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
              morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
              morphs[3] = dom.createMorphAt(fragment, 7, 7, contextualElement);
              morphs[4] = dom.createMorphAt(fragment, 9, 9, contextualElement);
              morphs[5] = dom.createMorphAt(fragment, 11, 11, contextualElement);
              morphs[6] = dom.createMorphAt(fragment, 13, 13, contextualElement);
              morphs[7] = dom.createMorphAt(fragment, 15, 15, contextualElement);
              morphs[8] = dom.createMorphAt(fragment, 17, 17, contextualElement);
              morphs[9] = dom.createMorphAt(fragment, 19, 19, contextualElement);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["inline", "review-link", [], ["label", "Undercloud username", "value", "admin", "isRequired", true], ["loc", [null, [145, 12], [145, 85]]]], ["inline", "review-link", [], ["label", "Undercloud password", "value", ["subexpr", "@mut", [["get", "model.openstack_deployment.undercloud_admin_password", ["loc", [null, [146, 60], [146, 112]]]]], [], []], "isPassword", true, "isRequired", true], ["loc", [null, [146, 12], [146, 146]]]], ["block", "review-link", [], ["label", "Assigned Nodes", "routeName", "openstack.assign-nodes", "isRequired", true, "value", ["subexpr", "@mut", [["get", "profiles", ["loc", [null, [148, 24], [148, 32]]]]], [], []], "useYieldInstead", true], 0, null, ["loc", [null, [147, 12], [155, 28]]]], ["inline", "review-link", [], ["label", "External Network Interface", "value", ["subexpr", "@mut", [["get", "model.openstack_deployment.overcloud_ext_net_interface", ["loc", [null, [157, 32], [157, 86]]]]], [], []], "isRequired", true, "routeName", "openstack.overcloud"], ["loc", [null, [156, 12], [159, 59]]]], ["inline", "review-link", [], ["label", "Private Network", "value", ["subexpr", "@mut", [["get", "model.openstack_deployment.overcloud_private_net", ["loc", [null, [161, 32], [161, 80]]]]], [], []], "isRequired", true, "routeName", "openstack.overcloud"], ["loc", [null, [160, 12], [163, 59]]]], ["inline", "review-link", [], ["label", "Floating IP Network", "value", ["subexpr", "@mut", [["get", "model.openstack_deployment.overcloud_float_net", ["loc", [null, [165, 32], [165, 78]]]]], [], []], "isRequired", true, "routeName", "openstack.overcloud"], ["loc", [null, [164, 12], [167, 59]]]], ["inline", "review-link", [], ["label", "Floating IP Network Gateway", "value", ["subexpr", "@mut", [["get", "model.openstack_deployment.overcloud_float_gateway", ["loc", [null, [169, 32], [169, 82]]]]], [], []], "isRequired", true, "routeName", "openstack.overcloud"], ["loc", [null, [168, 12], [171, 59]]]], ["inline", "review-link", [], ["label", "Overcloud Admin Password", "value", ["subexpr", "@mut", [["get", "model.openstack_deployment.overcloud_password", ["loc", [null, [173, 32], [173, 77]]]]], [], []], "isPassword", true, "isRequired", true, "routeName", "openstack.overcloud"], ["loc", [null, [172, 12], [176, 59]]]], ["inline", "review-link", [], ["label", "Ceph Storage", "value", ["subexpr", "@mut", [["get", "model.openstack_deployment.cephStorageStatus", ["loc", [null, [178, 32], [178, 76]]]]], [], []], "routeName", "openstack.overcloud"], ["loc", [null, [177, 12], [179, 59]]]], ["block", "if", [["get", "model.openstack_deployment.external_ceph_storage", ["loc", [null, [182, 14], [182, 62]]]]], [], 1, null, ["loc", [null, [182, 8], [224, 15]]]]],
            locals: [],
            templates: [child0, child1]
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 143,
                "column": 4
              },
              "end": {
                "line": 226,
                "column": 4
              }
            },
            "moduleName": "fusor-ember-cli/templates/review/installation.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "accordion-item", [], ["name", ["subexpr", "@mut", [["get", "fullnameOpenStack", ["loc", [null, [144, 29], [144, 46]]]]], [], []], "isOpen", ["subexpr", "@mut", [["get", "isOpenStackOpen", ["loc", [null, [144, 54], [144, 69]]]]], [], []]], 0, null, ["loc", [null, [144, 6], [225, 25]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child6 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 229,
                  "column": 6
                },
                "end": {
                  "line": 287,
                  "column": 6
                }
              },
              "moduleName": "fusor-ember-cli/templates/review/installation.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("\n        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n\n        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n\n        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n\n        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n\n        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n\n        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n\n        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n\n        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n\n        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n\n        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n\n        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n\n        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(12);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
              morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
              morphs[3] = dom.createMorphAt(fragment, 7, 7, contextualElement);
              morphs[4] = dom.createMorphAt(fragment, 9, 9, contextualElement);
              morphs[5] = dom.createMorphAt(fragment, 11, 11, contextualElement);
              morphs[6] = dom.createMorphAt(fragment, 13, 13, contextualElement);
              morphs[7] = dom.createMorphAt(fragment, 15, 15, contextualElement);
              morphs[8] = dom.createMorphAt(fragment, 17, 17, contextualElement);
              morphs[9] = dom.createMorphAt(fragment, 19, 19, contextualElement);
              morphs[10] = dom.createMorphAt(fragment, 21, 21, contextualElement);
              morphs[11] = dom.createMorphAt(fragment, 23, 23, contextualElement);
              return morphs;
            },
            statements: [["inline", "review-link", [], ["label", "Nodes Location", "routeName", "openshift.openshift-nodes", "isRequired", true, "value", ["subexpr", "@mut", [["get", "model.openshift_install_loc", ["loc", [null, [234, 28], [234, 55]]]]], [], []]], ["loc", [null, [231, 8], [234, 57]]]], ["inline", "review-link", [], ["label", "# of Master Nodes", "routeName", "openshift.openshift-nodes", "isRequired", true, "value", ["subexpr", "@mut", [["get", "model.openshift_number_master_nodes", ["loc", [null, [239, 28], [239, 63]]]]], [], []]], ["loc", [null, [236, 8], [239, 65]]]], ["inline", "review-link", [], ["label", "# of Worker Nodes", "routeName", "openshift.openshift-nodes", "isRequired", true, "value", ["subexpr", "@mut", [["get", "model.openshift_number_worker_nodes", ["loc", [null, [244, 28], [244, 63]]]]], [], []]], ["loc", [null, [241, 8], [244, 65]]]], ["inline", "review-link", [], ["label", "Docker Storage per Worker", "routeName", "openshift.openshift-nodes", "isRequired", true, "value", ["subexpr", "@mut", [["get", "storageSizeGB", ["loc", [null, [249, 28], [249, 41]]]]], [], []]], ["loc", [null, [246, 8], [249, 43]]]], ["inline", "review-link", [], ["label", "vCPU Needed", "routeName", "openshift.openshift-nodes", "isRequired", true, "value", ["subexpr", "@mut", [["get", "vcpuNeeded", ["loc", [null, [254, 28], [254, 38]]]]], [], []]], ["loc", [null, [251, 8], [254, 40]]]], ["inline", "review-link", [], ["label", "RAM Needed", "routeName", "openshift.openshift-nodes", "isRequired", true, "value", ["subexpr", "@mut", [["get", "ramNeededGB", ["loc", [null, [259, 28], [259, 39]]]]], [], []]], ["loc", [null, [256, 8], [259, 41]]]], ["inline", "review-link", [], ["label", "Disk Needed", "routeName", "openshift.openshift-nodes", "isRequired", true, "value", ["subexpr", "@mut", [["get", "diskNeededGB", ["loc", [null, [264, 28], [264, 40]]]]], [], []]], ["loc", [null, [261, 8], [264, 42]]]], ["inline", "review-link", [], ["label", "Storage Type", "routeName", "openshift.openshift-configuration", "isRequired", true, "value", ["subexpr", "@mut", [["get", "model.openshift_storage_type", ["loc", [null, [269, 28], [269, 56]]]]], [], []]], ["loc", [null, [266, 8], [269, 58]]]], ["inline", "review-link", [], ["label", "Storage Host", "routeName", "openshift.openshift-configuration", "value", ["subexpr", "@mut", [["get", "model.openshift_storage_host", ["loc", [null, [273, 28], [273, 56]]]]], [], []]], ["loc", [null, [271, 8], [273, 58]]]], ["inline", "review-link", [], ["label", "Export Path", "routeName", "openshift.openshift-configuration", "value", ["subexpr", "@mut", [["get", "model.openshift_export_path", ["loc", [null, [277, 28], [277, 55]]]]], [], []]], ["loc", [null, [275, 8], [277, 57]]]], ["inline", "review-link", [], ["label", "Username", "routeName", "openshift.openshift-configuration", "value", ["subexpr", "@mut", [["get", "model.openshift_username", ["loc", [null, [281, 28], [281, 52]]]]], [], []]], ["loc", [null, [279, 8], [281, 54]]]], ["inline", "review-link", [], ["label", "Subdomain", "routeName", "openshift.openshift-configuration", "value", ["subexpr", "@mut", [["get", "fullOpenshiftSubdomain", ["loc", [null, [285, 28], [285, 50]]]]], [], []]], ["loc", [null, [283, 8], [285, 52]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 228,
                "column": 4
              },
              "end": {
                "line": 288,
                "column": 4
              }
            },
            "moduleName": "fusor-ember-cli/templates/review/installation.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "accordion-item", [], ["name", ["subexpr", "@mut", [["get", "fullnameOpenShift", ["loc", [null, [229, 29], [229, 46]]]]], [], []], "isOpen", ["subexpr", "@mut", [["get", "isOpenshiftOpen", ["loc", [null, [229, 54], [229, 69]]]]], [], []]], 0, null, ["loc", [null, [229, 6], [287, 25]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child7 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 291,
                  "column": 6
                },
                "end": {
                  "line": 297,
                  "column": 6
                }
              },
              "moduleName": "fusor-ember-cli/templates/review/installation.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("          ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n          ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n          ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n          ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(4);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
              morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
              morphs[3] = dom.createMorphAt(fragment, 7, 7, contextualElement);
              return morphs;
            },
            statements: [["inline", "review-link", [], ["label", "Installation Location", "routeName", "where-install", "isRequired", true, "value", ["subexpr", "@mut", [["get", "model.cfme_install_loc", ["loc", [null, [293, 30], [293, 52]]]]], [], []]], ["loc", [null, [292, 10], [293, 55]]]], ["inline", "review-link", [], ["label", "CFME Root password", "routeName", "cloudforms.cfme-configuration", "isRequired", true, "isPassword", true, "value", ["subexpr", "@mut", [["get", "model.cfme_root_password", ["loc", [null, [294, 131], [294, 155]]]]], [], []]], ["loc", [null, [294, 10], [294, 158]]]], ["inline", "review-link", [], ["label", "CFME Admin password", "routeName", "cloudforms.cfme-configuration", "isRequired", true, "isPassword", true, "value", ["subexpr", "@mut", [["get", "model.cfme_admin_password", ["loc", [null, [295, 132], [295, 157]]]]], [], []]], ["loc", [null, [295, 10], [295, 160]]]], ["inline", "review-link", [], ["label", "CFME Database password", "routeName", "cloudforms.cfme-configuration", "isRequired", true, "isPassword", true, "value", ["subexpr", "@mut", [["get", "model.cfme_db_password", ["loc", [null, [296, 135], [296, 157]]]]], [], []]], ["loc", [null, [296, 10], [296, 160]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 290,
                "column": 4
              },
              "end": {
                "line": 298,
                "column": 4
              }
            },
            "moduleName": "fusor-ember-cli/templates/review/installation.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "accordion-item", [], ["name", ["subexpr", "@mut", [["get", "fullnameCloudForms", ["loc", [null, [291, 29], [291, 47]]]]], [], []], "isOpen", ["subexpr", "@mut", [["get", "isCloudFormsOpen", ["loc", [null, [291, 55], [291, 71]]]]], [], []]], 0, null, ["loc", [null, [291, 6], [297, 25]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child8 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.10",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 302,
                    "column": 12
                  },
                  "end": {
                    "line": 311,
                    "column": 12
                  }
                },
                "moduleName": "fusor-ember-cli/templates/review/installation.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n                ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(2);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
                return morphs;
              },
              statements: [["inline", "review-link", [], ["label", "Content Mirror URL", "routeName", "subscriptions.credentials", "isRequired", true, "value", ["subexpr", "@mut", [["get", "cdnUrl", ["loc", [null, [306, 36], [306, 42]]]]], [], []]], ["loc", [null, [303, 16], [306, 45]]]], ["inline", "review-link", [], ["label", "Manifest File", "routeName", "subscriptions.credentials", "isRequired", true, "value", ["subexpr", "@mut", [["get", "model.manifest_file", ["loc", [null, [310, 36], [310, 55]]]]], [], []]], ["loc", [null, [307, 16], [310, 58]]]]],
              locals: [],
              templates: []
            };
          })();
          var child1 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.10",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 311,
                    "column": 12
                  },
                  "end": {
                    "line": 315,
                    "column": 12
                  }
                },
                "moduleName": "fusor-ember-cli/templates/review/installation.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                return morphs;
              },
              statements: [["inline", "review-link", [], ["label", "Subscription Management Application", "routeName", "subscriptions.management-application", "isRequired", true, "value", ["subexpr", "@mut", [["get", "deploymentController.managementApplicationName", ["loc", [null, [314, 36], [314, 82]]]]], [], []]], ["loc", [null, [312, 16], [314, 85]]]]],
              locals: [],
              templates: []
            };
          })();
          var child2 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "revision": "Ember@1.13.10",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 327,
                      "column": 16
                    },
                    "end": {
                      "line": 333,
                      "column": 16
                    }
                  },
                  "moduleName": "fusor-ember-cli/templates/review/installation.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("                    ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                  return morphs;
                },
                statements: [["inline", "review-link", [], ["label", "Quantity Added", "routeName", "subscriptions.select-subscriptions", "value", ["subexpr", "if", [["get", "isMissingSubscriptions", ["loc", [null, [330, 44], [330, 66]]]], null, ["get", "sub.quantity_to_add", ["loc", [null, [330, 72], [330, 91]]]]], [], ["loc", [null, [330, 40], [330, 92]]]], "isRequired", true, "validationMessage", "Need to re-enter"], ["loc", [null, [328, 20], [332, 72]]]]],
                locals: [],
                templates: []
              };
            })();
            return {
              meta: {
                "revision": "Ember@1.13.10",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 317,
                    "column": 12
                  },
                  "end": {
                    "line": 334,
                    "column": 12
                  }
                },
                "moduleName": "fusor-ember-cli/templates/review/installation.hbs"
              },
              arity: 1,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n                ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n                ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(4);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
                morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
                morphs[3] = dom.createMorphAt(fragment, 7, 7, contextualElement);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["inline", "review-link", [], ["label", "Subscription Name", "routeName", "subscriptions.select-subscriptions", "value", ["subexpr", "@mut", [["get", "sub.product_name", ["loc", [null, [320, 36], [320, 52]]]]], [], []]], ["loc", [null, [318, 16], [320, 55]]]], ["inline", "review-link", [], ["label", "Contract Number", "routeName", "subscriptions.select-subscriptions", "value", ["subexpr", "@mut", [["get", "sub.contract_number", ["loc", [null, [323, 36], [323, 55]]]]], [], []]], ["loc", [null, [321, 16], [323, 58]]]], ["inline", "review-link", [], ["label", "Quantity Attached", "routeName", "subscriptions.select-subscriptions", "value", ["subexpr", "@mut", [["get", "sub.quantity_attached", ["loc", [null, [326, 36], [326, 57]]]]], [], []]], ["loc", [null, [324, 16], [326, 60]]]], ["block", "if", [["get", "hasSubscriptionsToAttach", ["loc", [null, [327, 22], [327, 46]]]]], [], 0, null, ["loc", [null, [327, 16], [333, 23]]]]],
              locals: ["sub"],
              templates: [child0]
            };
          })();
          var child3 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.10",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 334,
                    "column": 12
                  },
                  "end": {
                    "line": 338,
                    "column": 12
                  }
                },
                "moduleName": "fusor-ember-cli/templates/review/installation.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                return morphs;
              },
              statements: [["inline", "review-link", [], ["label", "Quantity", "routeName", "subscriptions.select-subscriptions", "value", "0 - no subscriptions in manifest"], ["loc", [null, [335, 16], [337, 73]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 301,
                  "column": 8
                },
                "end": {
                  "line": 340,
                  "column": 8
                }
              },
              "moduleName": "fusor-ember-cli/templates/review/installation.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(2);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
              dom.insertBoundary(fragment, 0);
              return morphs;
            },
            statements: [["block", "if", [["get", "isDisconnected", ["loc", [null, [302, 18], [302, 32]]]]], [], 0, 1, ["loc", [null, [302, 12], [315, 19]]]], ["block", "each", [["get", "reviewSubscriptions", ["loc", [null, [317, 20], [317, 39]]]]], [], 2, 3, ["loc", [null, [317, 12], [338, 21]]]]],
            locals: [],
            templates: [child0, child1, child2, child3]
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 300,
                "column": 4
              },
              "end": {
                "line": 342,
                "column": 4
              }
            },
            "moduleName": "fusor-ember-cli/templates/review/installation.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            return morphs;
          },
          statements: [["block", "accordion-item", [], ["name", "Subscriptions", "isOpen", ["subexpr", "@mut", [["get", "isSubscriptionsOpen", ["loc", [null, [301, 54], [301, 73]]]]], [], []]], 0, null, ["loc", [null, [301, 8], [340, 27]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child9 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.10",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 351,
                    "column": 10
                  },
                  "end": {
                    "line": 353,
                    "column": 10
                  }
                },
                "moduleName": "fusor-ember-cli/templates/review/installation.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("            Next ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("i");
                dom.setAttribute(el1, "class", "fa fa-angle-right");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes() {
                return [];
              },
              statements: [],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 350,
                  "column": 6
                },
                "end": {
                  "line": 354,
                  "column": 6
                }
              },
              "moduleName": "fusor-ember-cli/templates/review/installation.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "link-to", ["review.progress.overview"], ["role", "button", "class", "btn btn-primary next-button"], 0, null, ["loc", [null, [351, 10], [353, 22]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        var child1 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.10",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 355,
                    "column": 10
                  },
                  "end": {
                    "line": 357,
                    "column": 10
                  }
                },
                "moduleName": "fusor-ember-cli/templates/review/installation.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("             ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode(" ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("i");
                dom.setAttribute(el1, "class", "fa fa-angle-right");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                return morphs;
              },
              statements: [["content", "buttonDeployTitle", ["loc", [null, [356, 13], [356, 34]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 354,
                  "column": 6
                },
                "end": {
                  "line": 358,
                  "column": 6
                }
              },
              "moduleName": "fusor-ember-cli/templates/review/installation.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "button-f", [], ["disabled", ["subexpr", "@mut", [["get", "buttonDeployDisabled", ["loc", [null, [355, 31], [355, 51]]]]], [], []], "action", "onDeployButton"], 0, null, ["loc", [null, [355, 10], [357, 23]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 347,
                "column": 2
              },
              "end": {
                "line": 359,
                "column": 2
              }
            },
            "moduleName": "fusor-ember-cli/templates/review/installation.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["get", "isStarted", ["loc", [null, [350, 12], [350, 21]]]]], [], 0, 1, ["loc", [null, [350, 6], [358, 13]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 361,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/review/installation.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "row");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "col-md-12");
          var el3 = dom.createTextNode("\n\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [7, 1]);
          var morphs = new Array(10);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
          morphs[3] = dom.createMorphAt(element1, 1, 1);
          morphs[4] = dom.createMorphAt(element1, 3, 3);
          morphs[5] = dom.createMorphAt(element1, 5, 5);
          morphs[6] = dom.createMorphAt(element1, 7, 7);
          morphs[7] = dom.createMorphAt(element1, 9, 9);
          morphs[8] = dom.createMorphAt(element1, 11, 11);
          morphs[9] = dom.createMorphAt(fragment, 9, 9, contextualElement);
          return morphs;
        },
        statements: [["block", "if", [["get", "showErrorMessage", ["loc", [null, [3, 8], [3, 24]]]]], [], 0, null, ["loc", [null, [3, 2], [13, 9]]]], ["block", "if", [["get", "showValidationErrors", ["loc", [null, [15, 8], [15, 28]]]]], [], 1, null, ["loc", [null, [15, 2], [28, 9]]]], ["block", "if", [["get", "showValidationWarnings", ["loc", [null, [30, 8], [30, 30]]]]], [], 2, null, ["loc", [null, [30, 2], [43, 9]]]], ["block", "accordion-item", [], ["name", ["subexpr", "@mut", [["get", "fullnameSatellite", ["loc", [null, [48, 29], [48, 46]]]]], [], []], "isOpen", true], 3, null, ["loc", [null, [48, 6], [62, 25]]]], ["block", "if", [["get", "isRhev", ["loc", [null, [64, 10], [64, 16]]]]], [], 4, null, ["loc", [null, [64, 4], [141, 11]]]], ["block", "if", [["get", "isOpenStack", ["loc", [null, [143, 10], [143, 21]]]]], [], 5, null, ["loc", [null, [143, 4], [226, 11]]]], ["block", "if", [["get", "isOpenShift", ["loc", [null, [228, 10], [228, 21]]]]], [], 6, null, ["loc", [null, [228, 4], [288, 11]]]], ["block", "if", [["get", "isCloudForms", ["loc", [null, [290, 10], [290, 22]]]]], [], 7, null, ["loc", [null, [290, 4], [298, 11]]]], ["block", "if", [["get", "isSubscriptions", ["loc", [null, [300, 10], [300, 25]]]]], [], 8, null, ["loc", [null, [300, 4], [342, 11]]]], ["block", "cancel-back-next", [], ["backRouteName", ["subexpr", "@mut", [["get", "backRouteNameonReviewInstallation", ["loc", [null, [347, 36], [347, 69]]]]], [], []], "disableBack", false, "disableCancel", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [349, 36], [349, 45]]]]], [], []]], 9, null, ["loc", [null, [347, 2], [359, 23]]]]],
        locals: [],
        templates: [child0, child1, child2, child3, child4, child5, child6, child7, child8, child9]
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 361,
              "column": 0
            },
            "end": {
              "line": 368,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/review/installation.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "spinner spinner-md spinner-inline");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "class", "spinner-text");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [3]), 1, 1);
          return morphs;
        },
        statements: [["content", "spinnerTextMessage", ["loc", [null, [365, 6], [365, 28]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 374,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/review/installation.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["block", "unless", [["get", "showSpinner", ["loc", [null, [1, 10], [1, 21]]]]], [], 0, 1, ["loc", [null, [1, 0], [368, 11]]]], ["inline", "continue-deployment-modal", [], ["openModal", ["subexpr", "@mut", [["get", "openModal", ["loc", [null, [370, 38], [370, 47]]]]], [], []], "deployment", ["subexpr", "@mut", [["get", "deploymentController.model", ["loc", [null, [371, 39], [371, 65]]]]], [], []], "installDeployment", "installDeployment"], ["loc", [null, [370, 0], [373, 30]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("fusor-ember-cli/templates/review/progress/details", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 0
            },
            "end": {
              "line": 9,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/review/progress/details.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "spinner spinner-md spinner-inline");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "class", "spinner-text");
          var el2 = dom.createTextNode("\n      Loading Data from Tasks ...\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 26,
                "column": 14
              },
              "end": {
                "line": 28,
                "column": 14
              }
            },
            "moduleName": "fusor-ember-cli/templates/review/progress/details.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                  ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "tr-task", [], ["task", ["subexpr", "@mut", [["get", "synctask", ["loc", [null, [27, 33], [27, 41]]]]], [], []]], ["loc", [null, [27, 18], [27, 43]]]]],
          locals: ["synctask"],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 9,
              "column": 0
            },
            "end": {
              "line": 35,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/review/progress/details.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "row");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "col-md-9");
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("table");
          dom.setAttribute(el3, "class", "table table-bordered small");
          var el4 = dom.createTextNode("\n          ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("thead");
          var el5 = dom.createTextNode("\n            ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("th");
          var el6 = dom.createTextNode("Action");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n            ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("th");
          dom.setAttribute(el5, "class", "center");
          var el6 = dom.createTextNode("State");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n            ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("th");
          dom.setAttribute(el5, "class", "center");
          var el6 = dom.createTextNode("Result");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n            ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("th");
          dom.setAttribute(el5, "class", "center");
          var el6 = dom.createTextNode("Progress");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n            ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("th");
          dom.setAttribute(el5, "class", "center");
          var el6 = dom.createTextNode("Started at");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n          ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n          ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("tbody");
          var el5 = dom.createTextNode("\n              ");
          dom.appendChild(el4, el5);
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n              ");
          dom.appendChild(el4, el5);
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n              ");
          dom.appendChild(el4, el5);
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n              ");
          dom.appendChild(el4, el5);
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n");
          dom.appendChild(el4, el5);
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("          ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n        ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1, 1, 1, 3]);
          var morphs = new Array(6);
          morphs[0] = dom.createMorphAt(element0, 1, 1);
          morphs[1] = dom.createMorphAt(element0, 3, 3);
          morphs[2] = dom.createMorphAt(element0, 5, 5);
          morphs[3] = dom.createMorphAt(element0, 7, 7);
          morphs[4] = dom.createMorphAt(element0, 9, 9);
          morphs[5] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          return morphs;
        },
        statements: [["inline", "tr-task", [], ["task", ["subexpr", "@mut", [["get", "model.deployTask", ["loc", [null, [22, 29], [22, 45]]]]], [], []]], ["loc", [null, [22, 14], [22, 47]]]], ["inline", "tr-task", [], ["task", ["subexpr", "@mut", [["get", "model.manageContentTask", ["loc", [null, [23, 29], [23, 52]]]]], [], []]], ["loc", [null, [23, 14], [23, 54]]]], ["inline", "tr-task", [], ["task", ["subexpr", "@mut", [["get", "model.rhevTask", ["loc", [null, [24, 29], [24, 43]]]]], [], []]], ["loc", [null, [24, 14], [24, 45]]]], ["inline", "tr-task", [], ["task", ["subexpr", "@mut", [["get", "model.cfmeTask", ["loc", [null, [25, 29], [25, 43]]]]], [], []]], ["loc", [null, [25, 14], [25, 45]]]], ["block", "each", [["get", "synctasks", ["loc", [null, [26, 22], [26, 31]]]]], [], 0, null, ["loc", [null, [26, 14], [28, 23]]]], ["content", "outlet", ["loc", [null, [33, 4], [33, 14]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 36,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/review/progress/details.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "isLoadingMoreTasks", ["loc", [null, [2, 6], [2, 24]]]]], [], 0, 1, ["loc", [null, [2, 0], [35, 7]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("fusor-ember-cli/templates/review/progress/log", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 6,
                  "column": 10
                },
                "end": {
                  "line": 6,
                  "column": 52
                }
              },
              "moduleName": "fusor-ember-cli/templates/review/progress/log.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["content", "opt.label", ["loc", [null, [6, 39], [6, 52]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 5,
                "column": 8
              },
              "end": {
                "line": 7,
                "column": 8
              }
            },
            "moduleName": "fusor-ember-cli/templates/review/progress/log.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["block", "x-option", [], ["value", ["subexpr", "@mut", [["get", "opt.value", ["loc", [null, [6, 28], [6, 37]]]]], [], []]], 0, null, ["loc", [null, [6, 10], [6, 65]]]]],
          locals: ["opt"],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 4,
              "column": 6
            },
            "end": {
              "line": 8,
              "column": 6
            }
          },
          "moduleName": "fusor-ember-cli/templates/review/progress/log.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "each", [["get", "logTypes", ["loc", [null, [5, 16], [5, 24]]]]], [], 0, null, ["loc", [null, [5, 8], [7, 17]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 23,
              "column": 14
            },
            "end": {
              "line": 28,
              "column": 14
            }
          },
          "moduleName": "fusor-ember-cli/templates/review/progress/log.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "class", "log-search-result-counter inside-log-search-input");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode(" of ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          dom.setAttribute(el1, "type", "button");
          dom.setAttribute(el1, "class", "clear btn btn-log-result-up");
          dom.setAttribute(el1, "aria-hidden", "true");
          var el2 = dom.createElement("span");
          dom.setAttribute(el2, "class", "fa fa-angle-up inside-log-search-input");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          dom.setAttribute(el1, "type", "button");
          dom.setAttribute(el1, "class", "clear btn btn-log-result-down");
          dom.setAttribute(el1, "aria-hidden", "true");
          var el2 = dom.createElement("span");
          dom.setAttribute(el2, "class", "fa fa-angle-down inside-log-search-input");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          dom.setAttribute(el1, "type", "button");
          dom.setAttribute(el1, "class", "clear btn");
          dom.setAttribute(el1, "aria-hidden", "true");
          var el2 = dom.createElement("span");
          dom.setAttribute(el2, "class", "pficon pficon-close");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var element1 = dom.childAt(fragment, [3]);
          var element2 = dom.childAt(fragment, [5]);
          var element3 = dom.childAt(fragment, [7]);
          var morphs = new Array(5);
          morphs[0] = dom.createMorphAt(element0, 0, 0);
          morphs[1] = dom.createMorphAt(element0, 2, 2);
          morphs[2] = dom.createElementMorph(element1);
          morphs[3] = dom.createElementMorph(element2);
          morphs[4] = dom.createElementMorph(element3);
          return morphs;
        },
        statements: [["content", "searchResultIdx", ["loc", [null, [24, 80], [24, 99]]]], ["content", "searchResults.length", ["loc", [null, [24, 103], [24, 127]]]], ["element", "action", ["navPreviousSearchResult"], [], ["loc", [null, [25, 93], [25, 129]]]], ["element", "action", ["navNextSearchResult"], [], ["loc", [null, [26, 95], [26, 127]]]], ["element", "action", ["clearSearch"], [], ["loc", [null, [27, 75], [27, 99]]]]],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 63,
              "column": 6
            },
            "end": {
              "line": 65,
              "column": 6
            }
          },
          "moduleName": "fusor-ember-cli/templates/review/progress/log.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("p");
          dom.setAttribute(el1, "class", "log-top-message");
          var el2 = dom.createElement("span");
          dom.setAttribute(el2, "class", "spinner spinner-md spinner-inline log-updating-spinner");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode(" Loading...");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child3 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 66,
              "column": 6
            },
            "end": {
              "line": 68,
              "column": 6
            }
          },
          "moduleName": "fusor-ember-cli/templates/review/progress/log.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("p");
          dom.setAttribute(el1, "class", "log-top-message");
          var el2 = dom.createTextNode("No data in the log file yet, there should be something to see in a few minutes.");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child4 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 69,
              "column": 6
            },
            "end": {
              "line": 71,
              "column": 6
            }
          },
          "moduleName": "fusor-ember-cli/templates/review/progress/log.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("p");
          dom.setAttribute(el1, "class", "log-top-message");
          var el2 = dom.createElement("i");
          dom.setAttribute(el2, "class", "fa fa-2x fa-exclamation-triangle log-warning-icon");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode(" Very large log file.  Only the last ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode(" lines shown");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 2, 2);
          return morphs;
        },
        statements: [["content", "displayedLog.entries.length", ["loc", [null, [70, 137], [70, 168]]]]],
        locals: [],
        templates: []
      };
    })();
    var child5 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 74,
              "column": 6
            },
            "end": {
              "line": 76,
              "column": 6
            }
          },
          "moduleName": "fusor-ember-cli/templates/review/progress/log.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createUnsafeMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["content", "newEntry", ["loc", [null, [75, 8], [75, 22]]]]],
        locals: ["newEntry"],
        templates: []
      };
    })();
    var child6 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 78,
              "column": 6
            },
            "end": {
              "line": 80,
              "column": 6
            }
          },
          "moduleName": "fusor-ember-cli/templates/review/progress/log.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("p");
          dom.setAttribute(el1, "class", "log-bottom-message");
          var el2 = dom.createElement("i");
          dom.setAttribute(el2, "class", "fa fa-2x fa-exclamation-triangle log-error-icon");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode(" ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 2, 2);
          return morphs;
        },
        statements: [["content", "errorMessage", ["loc", [null, [79, 102], [79, 118]]]]],
        locals: [],
        templates: []
      };
    })();
    var child7 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 81,
              "column": 6
            },
            "end": {
              "line": 83,
              "column": 6
            }
          },
          "moduleName": "fusor-ember-cli/templates/review/progress/log.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("p");
          dom.setAttribute(el1, "class", "log-bottom-message");
          var el2 = dom.createElement("span");
          dom.setAttribute(el2, "class", "spinner spinner-md spinner-inline log-updating-spinner");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode(" Deployment in progress, log file updating.");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 98,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/review/progress/log.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row log-selection-row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "col-sm-12 col-lg-9");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("form");
        dom.setAttribute(el3, "role", "form-inline");
        dom.setAttribute(el3, "class", "form-inline log-file-form");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("span");
        dom.setAttribute(el4, "class", "log-file-path");
        var el5 = dom.createTextNode("Viewing ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "col-sm-5 col-lg-4");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "row log-search-row");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "col-sm-12");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("form");
        dom.setAttribute(el5, "role", "form-inline");
        dom.setAttribute(el5, "class", "search-pf has-button log-search-form");
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6, "class", "form-group has-clear");
        var el7 = dom.createTextNode("\n            ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("div");
        dom.setAttribute(el7, "class", "search-pf-input-group log-search-input-group");
        var el8 = dom.createTextNode("\n              ");
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("label");
        dom.setAttribute(el8, "for", "log-search-input");
        dom.setAttribute(el8, "class", "sr-only");
        var el9 = dom.createTextNode("Search Log Input");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        var el8 = dom.createTextNode("\n              ");
        dom.appendChild(el7, el8);
        var el8 = dom.createComment("");
        dom.appendChild(el7, el8);
        var el8 = dom.createTextNode("\n");
        dom.appendChild(el7, el8);
        var el8 = dom.createComment("");
        dom.appendChild(el7, el8);
        var el8 = dom.createTextNode("            ");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n          ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6, "class", "form-group");
        var el7 = dom.createTextNode("\n            ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("button");
        dom.setAttribute(el7, "class", "btn btn-default");
        dom.setAttribute(el7, "type", "submit");
        var el8 = dom.createElement("span");
        dom.setAttribute(el8, "class", "fa fa-search");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n          ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "col-sm-7 col-lg-5");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("form");
        dom.setAttribute(el3, "class", "pull-right log-level-form form-inline");
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "checkbox");
        var el5 = dom.createTextNode("\n          ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("label");
        var el6 = dom.createTextNode("Show:");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n         ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "checkbox");
        var el5 = dom.createTextNode("\n          ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("label");
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode(" Error");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "checkbox");
        var el5 = dom.createTextNode("\n          ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("label");
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode(" Warning");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "checkbox");
        var el5 = dom.createTextNode("\n          ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("label");
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode(" Informational");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "checkbox");
        var el5 = dom.createTextNode("\n          ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("label");
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode(" Debug");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "col-sm-12 col-lg-9");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "log-output");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "log-output-bottom");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "col-sm-12 col-lg-9");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("form");
        dom.setAttribute(el3, "class", "pull-right log-scroll-output-form");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "checkbox");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("label");
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode(" Auto-scroll to follow new log data");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element4 = dom.childAt(fragment, [0, 1, 1]);
        var element5 = dom.childAt(fragment, [2]);
        var element6 = dom.childAt(element5, [1, 1, 1, 1]);
        var element7 = dom.childAt(element6, [1, 1]);
        var element8 = dom.childAt(element6, [3, 1]);
        var element9 = dom.childAt(element5, [3, 1]);
        var element10 = dom.childAt(fragment, [4, 1, 1]);
        var morphs = new Array(17);
        morphs[0] = dom.createMorphAt(element4, 1, 1);
        morphs[1] = dom.createMorphAt(dom.childAt(element4, [3]), 1, 1);
        morphs[2] = dom.createMorphAt(element7, 3, 3);
        morphs[3] = dom.createMorphAt(element7, 5, 5);
        morphs[4] = dom.createElementMorph(element8);
        morphs[5] = dom.createMorphAt(dom.childAt(element9, [3, 1]), 0, 0);
        morphs[6] = dom.createMorphAt(dom.childAt(element9, [5, 1]), 0, 0);
        morphs[7] = dom.createMorphAt(dom.childAt(element9, [7, 1]), 0, 0);
        morphs[8] = dom.createMorphAt(dom.childAt(element9, [9, 1]), 0, 0);
        morphs[9] = dom.createMorphAt(element10, 1, 1);
        morphs[10] = dom.createMorphAt(element10, 2, 2);
        morphs[11] = dom.createMorphAt(element10, 3, 3);
        morphs[12] = dom.createUnsafeMorphAt(element10, 5, 5);
        morphs[13] = dom.createMorphAt(element10, 7, 7);
        morphs[14] = dom.createMorphAt(element10, 9, 9);
        morphs[15] = dom.createMorphAt(element10, 10, 10);
        morphs[16] = dom.createMorphAt(dom.childAt(fragment, [6, 1, 1, 1, 1]), 0, 0);
        return morphs;
      },
      statements: [["block", "x-select", [], ["value", ["subexpr", "@mut", [["get", "logType", ["loc", [null, [4, 24], [4, 31]]]]], [], []], "action", "logTypeChanged", "id", "log-file-select", "class", "form-control log-file-select"], 0, null, ["loc", [null, [4, 6], [8, 19]]]], ["content", "logPath", ["loc", [null, [9, 42], [9, 53]]]], ["inline", "input", [], ["id", "log-search-input", "type", "text", "class", "form-control log-search-input", "placeholder", "Search", "value", ["subexpr", "@mut", [["get", "searchLogInputValue", ["loc", [null, [22, 121], [22, 140]]]]], [], []]], ["loc", [null, [22, 14], [22, 142]]]], ["block", "if", [["get", "isSearchActive", ["loc", [null, [23, 20], [23, 34]]]]], [], 1, null, ["loc", [null, [23, 14], [28, 21]]]], ["element", "action", ["search"], [], ["loc", [null, [32, 58], [32, 77]]]], ["inline", "input", [], ["type", "checkbox", "name", "error", "checked", ["subexpr", "@mut", [["get", "errorChecked", ["loc", [null, [45, 62], [45, 74]]]]], [], []]], ["loc", [null, [45, 17], [45, 76]]]], ["inline", "input", [], ["type", "checkbox", "name", "warn", "checked", ["subexpr", "@mut", [["get", "warnChecked", ["loc", [null, [48, 61], [48, 72]]]]], [], []]], ["loc", [null, [48, 17], [48, 74]]]], ["inline", "input", [], ["type", "checkbox", "name", "info", "checked", ["subexpr", "@mut", [["get", "infoChecked", ["loc", [null, [51, 61], [51, 72]]]]], [], []]], ["loc", [null, [51, 17], [51, 74]]]], ["inline", "input", [], ["type", "checkbox", "name", "debug", "checked", ["subexpr", "@mut", [["get", "debugChecked", ["loc", [null, [54, 62], [54, 74]]]]], [], []]], ["loc", [null, [54, 17], [54, 76]]]], ["block", "if", [["get", "showLogLoading", ["loc", [null, [63, 12], [63, 26]]]]], [], 2, null, ["loc", [null, [63, 6], [65, 13]]]], ["block", "if", [["get", "showLogEmpty", ["loc", [null, [66, 12], [66, 24]]]]], [], 3, null, ["loc", [null, [66, 6], [68, 13]]]], ["block", "if", [["get", "showLogTruncated", ["loc", [null, [69, 12], [69, 28]]]]], [], 4, null, ["loc", [null, [69, 6], [71, 13]]]], ["content", "displayedLogHtml", ["loc", [null, [73, 6], [73, 28]]]], ["block", "each", [["get", "newEntries", ["loc", [null, [74, 14], [74, 24]]]]], [], 5, null, ["loc", [null, [74, 6], [76, 15]]]], ["block", "if", [["get", "errorMessage", ["loc", [null, [78, 12], [78, 24]]]]], [], 6, null, ["loc", [null, [78, 6], [80, 13]]]], ["block", "if", [["get", "showLogUpdating", ["loc", [null, [81, 12], [81, 27]]]]], [], 7, null, ["loc", [null, [81, 6], [83, 13]]]], ["inline", "input", [], ["type", "checkbox", "name", "scrollToEnd", "checked", ["subexpr", "@mut", [["get", "scrollToEndChecked", ["loc", [null, [93, 66], [93, 84]]]]], [], []]], ["loc", [null, [93, 15], [93, 86]]]]],
      locals: [],
      templates: [child0, child1, child2, child3, child4, child5, child6, child7]
    };
  })());
});
define("fusor-ember-cli/templates/review/progress/overview", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 5,
                "column": 4
              },
              "end": {
                "line": 8,
                "column": 4
              }
            },
            "moduleName": "fusor-ember-cli/templates/review/progress/overview.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("h1");
            dom.setAttribute(el1, "class", "pre-err-header");
            var el2 = dom.createTextNode("Content Error Occurred");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "spinner spinner-md spinner-inline err-spinner");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.10",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 14,
                    "column": 8
                  },
                  "end": {
                    "line": 16,
                    "column": 8
                  }
                },
                "moduleName": "fusor-ember-cli/templates/review/progress/overview.hbs"
              },
              arity: 1,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("          ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("a");
                dom.setAttribute(el1, "class", "repo-link");
                dom.setAttribute(el1, "target", "_blank");
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element0 = dom.childAt(fragment, [1]);
                var morphs = new Array(2);
                morphs[0] = dom.createAttrMorph(element0, 'href');
                morphs[1] = dom.createMorphAt(element0, 0, 0);
                return morphs;
              },
              statements: [["attribute", "href", ["get", "ktask.taskUrl", ["loc", [null, [15, 38], [15, 51]]]]], ["content", "ktask.repository", ["loc", [null, [15, 70], [15, 90]]]]],
              locals: ["ktask"],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 11,
                  "column": 6
                },
                "end": {
                  "line": 17,
                  "column": 6
                }
              },
              "moduleName": "fusor-ember-cli/templates/review/progress/overview.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              var el2 = dom.createTextNode("The following repos failed to sync:");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n\n");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 3, 3, contextualElement);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "each", [["get", "katelloSyncErrorTasks", ["loc", [null, [14, 16], [14, 37]]]]], [], 0, null, ["loc", [null, [14, 8], [16, 17]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 8,
                "column": 4
              },
              "end": {
                "line": 24,
                "column": 4
              }
            },
            "moduleName": "fusor-ember-cli/templates/review/progress/overview.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("h1");
            var el2 = dom.createTextNode("Content Error Occurred");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "style", "margin-top: 10px");
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("button");
            dom.setAttribute(el2, "class", "btn btn-default");
            var el3 = dom.createTextNode("Abandon");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("button");
            dom.setAttribute(el2, "class", "btn btn-default");
            var el3 = dom.createTextNode("Abandon and Delete");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("button");
            dom.setAttribute(el2, "class", "btn btn-primary");
            var el3 = dom.createTextNode("Redeploy");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element1 = dom.childAt(fragment, [5]);
            var element2 = dom.childAt(element1, [1]);
            var element3 = dom.childAt(element1, [3]);
            var element4 = dom.childAt(element1, [5]);
            var morphs = new Array(4);
            morphs[0] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            morphs[1] = dom.createElementMorph(element2);
            morphs[2] = dom.createElementMorph(element3);
            morphs[3] = dom.createElementMorph(element4);
            return morphs;
          },
          statements: [["block", "if", [["get", "katelloSyncErrorTasks", ["loc", [null, [11, 12], [11, 33]]]]], [], 0, null, ["loc", [null, [11, 6], [17, 13]]]], ["element", "action", ["abandon"], [], ["loc", [null, [20, 40], [20, 60]]]], ["element", "action", ["abandonAndDelete"], [], ["loc", [null, [21, 40], [21, 69]]]], ["element", "action", ["redeploy"], [], ["loc", [null, [22, 40], [22, 61]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 0
            },
            "end": {
              "line": 26,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/review/progress/overview.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "content-error-container");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["block", "if", [["get", "loadingRedeployment", ["loc", [null, [5, 10], [5, 29]]]]], [], 0, 1, ["loc", [null, [5, 4], [24, 11]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 36,
                "column": 2
              },
              "end": {
                "line": 38,
                "column": 2
              }
            },
            "moduleName": "fusor-ember-cli/templates/review/progress/overview.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "progress-bar", [], ["task", ["subexpr", "@mut", [["get", "rhevTask", ["loc", [null, [37, 24], [37, 32]]]]], [], []], "name", ["subexpr", "@mut", [["get", "nameRhev", ["loc", [null, [37, 38], [37, 46]]]]], [], []], "isSatelliteProgressBar", false], ["loc", [null, [37, 4], [37, 77]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 40,
                "column": 2
              },
              "end": {
                "line": 42,
                "column": 2
              }
            },
            "moduleName": "fusor-ember-cli/templates/review/progress/overview.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "progress-bar", [], ["task", ["subexpr", "@mut", [["get", "openstackTask", ["loc", [null, [41, 24], [41, 37]]]]], [], []], "name", ["subexpr", "@mut", [["get", "nameOpenStack", ["loc", [null, [41, 43], [41, 56]]]]], [], []], "isSatelliteProgressBar", false], ["loc", [null, [41, 4], [41, 87]]]]],
          locals: [],
          templates: []
        };
      })();
      var child2 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 44,
                "column": 2
              },
              "end": {
                "line": 46,
                "column": 2
              }
            },
            "moduleName": "fusor-ember-cli/templates/review/progress/overview.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "progress-bar", [], ["task", ["subexpr", "@mut", [["get", "openshiftTask", ["loc", [null, [45, 24], [45, 37]]]]], [], []], "name", ["subexpr", "@mut", [["get", "nameOpenShift", ["loc", [null, [45, 43], [45, 56]]]]], [], []], "isSatelliteProgressBar", false], ["loc", [null, [45, 4], [45, 87]]]]],
          locals: [],
          templates: []
        };
      })();
      var child3 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 48,
                "column": 2
              },
              "end": {
                "line": 50,
                "column": 2
              }
            },
            "moduleName": "fusor-ember-cli/templates/review/progress/overview.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "progress-bar", [], ["task", ["subexpr", "@mut", [["get", "cfmeTask", ["loc", [null, [49, 24], [49, 32]]]]], [], []], "name", ["subexpr", "@mut", [["get", "nameCloudForms", ["loc", [null, [49, 38], [49, 52]]]]], [], []], "isSatelliteProgressBar", false], ["loc", [null, [49, 4], [49, 83]]]]],
          locals: [],
          templates: []
        };
      })();
      var child4 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 52,
                "column": 2
              },
              "end": {
                "line": 54,
                "column": 2
              }
            },
            "moduleName": "fusor-ember-cli/templates/review/progress/overview.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "progress-bar", [], ["task", ["subexpr", "@mut", [["get", "deployTask", ["loc", [null, [53, 24], [53, 34]]]]], [], []], "name", "Total Deployment", "isSatelliteProgressBar", false], ["loc", [null, [53, 4], [53, 89]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 26,
              "column": 0
            },
            "end": {
              "line": 56,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/review/progress/overview.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(6);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
          morphs[3] = dom.createMorphAt(fragment, 7, 7, contextualElement);
          morphs[4] = dom.createMorphAt(fragment, 9, 9, contextualElement);
          morphs[5] = dom.createMorphAt(fragment, 11, 11, contextualElement);
          return morphs;
        },
        statements: [["inline", "progress-bar-satellite", [], ["name", ["subexpr", "@mut", [["get", "nameSatellite", ["loc", [null, [30, 9], [30, 22]]]]], [], []], "isSatelliteProgressBar", true, "manageContentTask", ["subexpr", "@mut", [["get", "manageContentTask", ["loc", [null, [32, 22], [32, 39]]]]], [], []], "configureHostGroupsTask", ["subexpr", "@mut", [["get", "configureHostGroupsTask", ["loc", [null, [33, 28], [33, 51]]]]], [], []]], ["loc", [null, [28, 2], [34, 4]]]], ["block", "if", [["get", "isRhev", ["loc", [null, [36, 8], [36, 14]]]]], [], 0, null, ["loc", [null, [36, 2], [38, 9]]]], ["block", "if", [["get", "isOpenStack", ["loc", [null, [40, 8], [40, 19]]]]], [], 1, null, ["loc", [null, [40, 2], [42, 9]]]], ["block", "if", [["get", "isOpenShift", ["loc", [null, [44, 8], [44, 19]]]]], [], 2, null, ["loc", [null, [44, 2], [46, 9]]]], ["block", "if", [["get", "isCloudForms", ["loc", [null, [48, 8], [48, 20]]]]], [], 3, null, ["loc", [null, [48, 2], [50, 9]]]], ["block", "if", [["get", "showDeployTaskProgressBar", ["loc", [null, [52, 8], [52, 33]]]]], [], 4, null, ["loc", [null, [52, 2], [54, 9]]]]],
        locals: [],
        templates: [child0, child1, child2, child3, child4]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 59,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/review/progress/overview.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 4, 4, contextualElement);
        return morphs;
      },
      statements: [["block", "if", [["get", "deployment.has_content_error", ["loc", [null, [3, 6], [3, 34]]]]], [], 0, 1, ["loc", [null, [3, 0], [56, 7]]]], ["inline", "abandon-deployment-modal", [], ["openModal", ["subexpr", "@mut", [["get", "openModal", ["loc", [null, [58, 37], [58, 46]]]]], [], []], "executeAbandonment", "executeAbandonment"], ["loc", [null, [58, 0], [58, 88]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("fusor-ember-cli/templates/review/progress", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 11,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/review/progress.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "row");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "col-md-9");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "alert alert-danger rhci-alert");
          var el4 = dom.createTextNode("\n          ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("i");
          dom.setAttribute(el4, "class", "fa fa-2x fa-exclamation-triangle errorForValidation");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n           \n          ");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1, 1]), 3, 3);
          return morphs;
        },
        statements: [["content", "errorMsg", ["loc", [null, [7, 10], [7, 22]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 16,
              "column": 8
            },
            "end": {
              "line": 18,
              "column": 8
            }
          },
          "moduleName": "fusor-ember-cli/templates/review/progress.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("          ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("a");
          var el2 = dom.createTextNode("Overview");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 19,
              "column": 8
            },
            "end": {
              "line": 21,
              "column": 8
            }
          },
          "moduleName": "fusor-ember-cli/templates/review/progress.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("          ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("a");
          var el2 = dom.createTextNode("Details");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child3 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 22,
              "column": 8
            },
            "end": {
              "line": 24,
              "column": 8
            }
          },
          "moduleName": "fusor-ember-cli/templates/review/progress.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("          ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("a");
          var el2 = dom.createTextNode("Log");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child4 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.10",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 40,
                    "column": 6
                  },
                  "end": {
                    "line": 42,
                    "column": 6
                  }
                },
                "moduleName": "fusor-ember-cli/templates/review/progress.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("          Next ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("i");
                dom.setAttribute(el1, "class", "fa fa-angle-right");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes() {
                return [];
              },
              statements: [],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 39,
                  "column": 4
                },
                "end": {
                  "line": 43,
                  "column": 4
                }
              },
              "moduleName": "fusor-ember-cli/templates/review/progress.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "link-to", ["review.summary"], ["role", "button", "class", "btn btn-primary next-button"], 0, null, ["loc", [null, [40, 6], [42, 18]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 43,
                  "column": 4
                },
                "end": {
                  "line": 47,
                  "column": 4
                }
              },
              "moduleName": "fusor-ember-cli/templates/review/progress.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("button");
              dom.setAttribute(el1, "class", "btn btn-primary next-button");
              dom.setAttribute(el1, "disabled", "true");
              var el2 = dom.createTextNode("\n          ");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode(" ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("i");
              dom.setAttribute(el2, "class", "fa fa-angle-right");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n      ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
              return morphs;
            },
            statements: [["content", "deployButtonTitle", ["loc", [null, [45, 10], [45, 31]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 36,
                "column": 2
              },
              "end": {
                "line": 48,
                "column": 2
              }
            },
            "moduleName": "fusor-ember-cli/templates/review/progress.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["get", "deployTaskIsFinished", ["loc", [null, [39, 10], [39, 30]]]]], [], 0, 1, ["loc", [null, [39, 4], [47, 11]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 35,
              "column": 0
            },
            "end": {
              "line": 49,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/review/progress.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "cancel-back-next", [], ["backRouteName", "review.installation", "disableBack", false, "disableCancel", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [38, 36], [38, 45]]]]], [], []]], 0, null, ["loc", [null, [36, 2], [48, 23]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 50,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/review/progress.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "col-md-12");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("ul");
        dom.setAttribute(el3, "class", "nav nav-tabs col-md-12");
        dom.setAttribute(el3, "data-tabs", "pills");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "col-md-12");
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [2, 1]);
        var element1 = dom.childAt(element0, [1]);
        var morphs = new Array(6);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(element1, 1, 1);
        morphs[2] = dom.createMorphAt(element1, 2, 2);
        morphs[3] = dom.createMorphAt(element1, 3, 3);
        morphs[4] = dom.createMorphAt(dom.childAt(element0, [3]), 1, 1);
        morphs[5] = dom.createMorphAt(fragment, 4, 4, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "showErrorMessage", ["loc", [null, [1, 6], [1, 22]]]]], [], 0, null, ["loc", [null, [1, 0], [11, 7]]]], ["block", "link-to", ["review.progress.overview"], ["tagName", "li"], 1, null, ["loc", [null, [16, 8], [18, 20]]]], ["block", "link-to", ["review.progress.details"], ["tagName", "li"], 2, null, ["loc", [null, [19, 8], [21, 20]]]], ["block", "link-to", ["review.progress.log"], ["tagName", "li"], 3, null, ["loc", [null, [22, 8], [24, 20]]]], ["content", "outlet", ["loc", [null, [28, 8], [28, 18]]]], ["block", "unless", [["get", "deploymentController.model.has_content_error", ["loc", [null, [35, 10], [35, 54]]]]], [], 4, null, ["loc", [null, [35, 0], [49, 11]]]]],
      locals: [],
      templates: [child0, child1, child2, child3, child4]
    };
  })());
});
define("fusor-ember-cli/templates/review/summary", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 6,
                "column": 6
              },
              "end": {
                "line": 15,
                "column": 6
              }
            },
            "moduleName": "fusor-ember-cli/templates/review/summary.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("\n        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n\n        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            return morphs;
          },
          statements: [["inline", "review-link", [], ["label", "URL", "value", ["subexpr", "@mut", [["get", "rhevEngineUrl", ["loc", [null, [9, 28], [9, 41]]]]], [], []], "isExternalURL", true, "ipAddress", ["subexpr", "@mut", [["get", "rhevEngineUrlIP", ["loc", [null, [11, 32], [11, 47]]]]], [], []]], ["loc", [null, [8, 8], [11, 49]]]], ["inline", "review-link", [], ["label", "Username", "value", "admin"], ["loc", [null, [13, 8], [13, 54]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 5,
              "column": 4
            },
            "end": {
              "line": 16,
              "column": 4
            }
          },
          "moduleName": "fusor-ember-cli/templates/review/summary.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "accordion-item", [], ["name", ["subexpr", "@mut", [["get", "fullnameRhev", ["loc", [null, [6, 29], [6, 41]]]]], [], []], "isOpen", true], 0, null, ["loc", [null, [6, 6], [15, 25]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 19,
                "column": 8
              },
              "end": {
                "line": 34,
                "column": 8
              }
            },
            "moduleName": "fusor-ember-cli/templates/review/summary.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n\n            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(5);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
            morphs[3] = dom.createMorphAt(fragment, 7, 7, contextualElement);
            morphs[4] = dom.createMorphAt(fragment, 9, 9, contextualElement);
            return morphs;
          },
          statements: [["inline", "review-link", [], ["label", "Undercloud username", "value", ["subexpr", "@mut", [["get", "undercloudUsername", ["loc", [null, [21, 32], [21, 50]]]]], [], []]], ["loc", [null, [20, 12], [21, 52]]]], ["inline", "review-link", [], ["label", "Undercloud password", "value", ["subexpr", "@mut", [["get", "undercloudPassword", ["loc", [null, [23, 32], [23, 50]]]]], [], []], "isPassword", true], ["loc", [null, [22, 12], [24, 43]]]], ["inline", "review-link", [], ["label", "Overcloud URL", "value", ["subexpr", "@mut", [["get", "overcloudUrlIP", ["loc", [null, [27, 32], [27, 46]]]]], [], []], "isExternalURL", true], ["loc", [null, [26, 12], [28, 46]]]], ["inline", "review-link", [], ["label", "Overcloud username", "value", ["subexpr", "@mut", [["get", "overcloudUsername", ["loc", [null, [30, 32], [30, 49]]]]], [], []]], ["loc", [null, [29, 12], [30, 51]]]], ["inline", "review-link", [], ["label", "Overcloud password", "value", ["subexpr", "@mut", [["get", "overcloudPassword", ["loc", [null, [32, 32], [32, 49]]]]], [], []], "isPassword", true], ["loc", [null, [31, 12], [33, 43]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 18,
              "column": 4
            },
            "end": {
              "line": 35,
              "column": 4
            }
          },
          "moduleName": "fusor-ember-cli/templates/review/summary.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "accordion-item", [], ["name", ["subexpr", "@mut", [["get", "fullnameOpenStack", ["loc", [null, [19, 31], [19, 48]]]]], [], []], "isOpen", ["subexpr", "@mut", [["get", "isOpenStackOpen", ["loc", [null, [19, 56], [19, 71]]]]], [], []]], 0, null, ["loc", [null, [19, 8], [34, 27]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child2 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 39,
                  "column": 8
                },
                "end": {
                  "line": 41,
                  "column": 8
                }
              },
              "moduleName": "fusor-ember-cli/templates/review/summary.hbs"
            },
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("          ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "ose-host-review-link", [], ["oseHost", ["subexpr", "@mut", [["get", "masterHost", ["loc", [null, [40, 41], [40, 51]]]]], [], []]], ["loc", [null, [40, 10], [40, 53]]]]],
            locals: ["masterHost"],
            templates: []
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 43,
                  "column": 8
                },
                "end": {
                  "line": 45,
                  "column": 8
                }
              },
              "moduleName": "fusor-ember-cli/templates/review/summary.hbs"
            },
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("          ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "ose-host-review-link", [], ["oseHost", ["subexpr", "@mut", [["get", "workerHost", ["loc", [null, [44, 41], [44, 51]]]]], [], []]], ["loc", [null, [44, 10], [44, 53]]]]],
            locals: ["workerHost"],
            templates: []
          };
        })();
        var child2 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 47,
                  "column": 6
                },
                "end": {
                  "line": 51,
                  "column": 6
                }
              },
              "moduleName": "fusor-ember-cli/templates/review/summary.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "review-link", [], ["label", "Example Application", "value", ["subexpr", "@mut", [["get", "exampleAppUrl", ["loc", [null, [49, 28], [49, 41]]]]], [], []], "isExternalURL", true], ["loc", [null, [48, 8], [50, 42]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 38,
                "column": 6
              },
              "end": {
                "line": 60,
                "column": 6
              }
            },
            "moduleName": "fusor-ember-cli/templates/review/summary.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(5);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
            morphs[2] = dom.createMorphAt(fragment, 4, 4, contextualElement);
            morphs[3] = dom.createMorphAt(fragment, 6, 6, contextualElement);
            morphs[4] = dom.createMorphAt(fragment, 8, 8, contextualElement);
            dom.insertBoundary(fragment, 0);
            return morphs;
          },
          statements: [["block", "each", [["get", "model.openshift_master_hosts", ["loc", [null, [39, 16], [39, 44]]]]], [], 0, null, ["loc", [null, [39, 8], [41, 17]]]], ["block", "each", [["get", "model.openshift_worker_hosts", ["loc", [null, [43, 16], [43, 44]]]]], [], 1, null, ["loc", [null, [43, 8], [45, 17]]]], ["block", "if", [["get", "model.openshift_sample_helloworld", ["loc", [null, [47, 12], [47, 45]]]]], [], 2, null, ["loc", [null, [47, 6], [51, 13]]]], ["inline", "review-link", [], ["label", "WebUI Username ", "value", ["subexpr", "@mut", [["get", "model.openshift_username", ["loc", [null, [55, 16], [55, 40]]]]], [], []]], ["loc", [null, [53, 8], [55, 42]]]], ["inline", "review-link", [], ["label", "WebUI Password", "value", ["subexpr", "@mut", [["get", "model.openshift_user_password", ["loc", [null, [58, 16], [58, 45]]]]], [], []], "isPassword", true], ["loc", [null, [56, 8], [59, 27]]]]],
          locals: [],
          templates: [child0, child1, child2]
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 37,
              "column": 4
            },
            "end": {
              "line": 61,
              "column": 4
            }
          },
          "moduleName": "fusor-ember-cli/templates/review/summary.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "accordion-item", [], ["name", ["subexpr", "@mut", [["get", "fullnameOpenShift", ["loc", [null, [38, 29], [38, 46]]]]], [], []], "isOpen", ["subexpr", "@mut", [["get", "isOpenShiftOpen", ["loc", [null, [38, 54], [38, 69]]]]], [], []]], 0, null, ["loc", [null, [38, 6], [60, 25]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child3 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 64,
                "column": 6
              },
              "end": {
                "line": 78,
                "column": 6
              }
            },
            "moduleName": "fusor-ember-cli/templates/review/summary.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("\n        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n\n        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n\n        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(3);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
            return morphs;
          },
          statements: [["inline", "review-link", [], ["label", "Admin Console", "value", ["subexpr", "@mut", [["get", "cfmeUrl", ["loc", [null, [67, 28], [67, 35]]]]], [], []], "isExternalURL", true, "ipAddress", ["subexpr", "@mut", [["get", "cfmeUrlIP", ["loc", [null, [69, 32], [69, 41]]]]], [], []]], ["loc", [null, [66, 8], [69, 43]]]], ["inline", "review-link", [], ["label", "Self-Service Console", "value", ["subexpr", "@mut", [["get", "cfmeUrlSelfService", ["loc", [null, [72, 28], [72, 46]]]]], [], []], "isExternalURL", true, "ipAddress", ["subexpr", "@mut", [["get", "cfmeUrlSelfServiceIP", ["loc", [null, [74, 32], [74, 52]]]]], [], []]], ["loc", [null, [71, 8], [74, 54]]]], ["inline", "review-link", [], ["label", "Username", "value", "admin"], ["loc", [null, [76, 8], [76, 54]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 63,
              "column": 4
            },
            "end": {
              "line": 79,
              "column": 4
            }
          },
          "moduleName": "fusor-ember-cli/templates/review/summary.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "accordion-item", [], ["name", ["subexpr", "@mut", [["get", "fullnameCloudForms", ["loc", [null, [64, 29], [64, 47]]]]], [], []], "isOpen", true], 0, null, ["loc", [null, [64, 6], [78, 25]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child4 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 88,
                "column": 4
              },
              "end": {
                "line": 90,
                "column": 4
              }
            },
            "moduleName": "fusor-ember-cli/templates/review/summary.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        View Deployments\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 84,
              "column": 0
            },
            "end": {
              "line": 91,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/review/summary.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "link-to", ["deployments"], ["role", "button", "class", "btn btn-primary next-button"], 0, null, ["loc", [null, [88, 4], [90, 16]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 93,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/review/summary.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "col-md-12");
        var el3 = dom.createTextNode("\n\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [1, 1]);
        var morphs = new Array(5);
        morphs[0] = dom.createMorphAt(element0, 1, 1);
        morphs[1] = dom.createMorphAt(element0, 3, 3);
        morphs[2] = dom.createMorphAt(element0, 5, 5);
        morphs[3] = dom.createMorphAt(element0, 7, 7);
        morphs[4] = dom.createMorphAt(fragment, 3, 3, contextualElement);
        return morphs;
      },
      statements: [["block", "if", [["get", "isRhev", ["loc", [null, [5, 10], [5, 16]]]]], [], 0, null, ["loc", [null, [5, 4], [16, 11]]]], ["block", "if", [["get", "isOpenStack", ["loc", [null, [18, 10], [18, 21]]]]], [], 1, null, ["loc", [null, [18, 4], [35, 11]]]], ["block", "if", [["get", "isOpenShift", ["loc", [null, [37, 10], [37, 21]]]]], [], 2, null, ["loc", [null, [37, 4], [61, 11]]]], ["block", "if", [["get", "isCloudForms", ["loc", [null, [63, 10], [63, 22]]]]], [], 3, null, ["loc", [null, [63, 4], [79, 11]]]], ["block", "cancel-back-next", [], ["backRouteName", "review.progress.overview", "disableBack", false, "disableCancel", true], 4, null, ["loc", [null, [84, 0], [91, 21]]]]],
      locals: [],
      templates: [child0, child1, child2, child3, child4]
    };
  })());
});
define("fusor-ember-cli/templates/review", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 3,
                "column": 6
              },
              "end": {
                "line": 9,
                "column": 6
              }
            },
            "moduleName": "fusor-ember-cli/templates/review.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("a");
            dom.setAttribute(el1, "data-qci", "installation-review");
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("span");
            dom.setAttribute(el2, "class", "hanging-indent");
            var el3 = dom.createTextNode("\n            ");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("A. Installation Review\n          ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1]), 1, 1);
            return morphs;
          },
          statements: [["content", "stepNumberReview", ["loc", [null, [6, 12], [6, 32]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 11,
                "column": 6
              },
              "end": {
                "line": 17,
                "column": 6
              }
            },
            "moduleName": "fusor-ember-cli/templates/review.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("a");
            dom.setAttribute(el1, "data-qci", "progress-overview");
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("span");
            dom.setAttribute(el2, "class", "hanging-indent");
            var el3 = dom.createTextNode("\n            ");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("B. Installation Progress\n          ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1]), 1, 1);
            return morphs;
          },
          statements: [["content", "stepNumberReview", ["loc", [null, [14, 12], [14, 32]]]]],
          locals: [],
          templates: []
        };
      })();
      var child2 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 19,
                "column": 6
              },
              "end": {
                "line": 25,
                "column": 6
              }
            },
            "moduleName": "fusor-ember-cli/templates/review.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("a");
            dom.setAttribute(el1, "data-qci", "review-summary");
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("span");
            dom.setAttribute(el2, "class", "hanging-indent");
            var el3 = dom.createTextNode("\n            ");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("C. Installation Summary\n          ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1]), 1, 1);
            return morphs;
          },
          statements: [["content", "stepNumberReview", ["loc", [null, [22, 12], [22, 32]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 27,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/review.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
          return morphs;
        },
        statements: [["block", "link-to", ["review.installation"], ["tagName", "li", "disabled", ["subexpr", "@mut", [["get", "disableTabInstallation", ["loc", [null, [3, 61], [3, 83]]]]], [], []]], 0, null, ["loc", [null, [3, 6], [9, 18]]]], ["block", "link-to", ["review.progress.overview"], ["tagName", "li", "disabled", ["subexpr", "@mut", [["get", "disableTabProgress", ["loc", [null, [11, 66], [11, 84]]]]], [], []]], 1, null, ["loc", [null, [11, 6], [17, 18]]]], ["block", "link-to", ["review.summary"], ["tagName", "li", "disabled", ["subexpr", "@mut", [["get", "disableTabSummary", ["loc", [null, [19, 56], [19, 73]]]]], [], []]], 2, null, ["loc", [null, [19, 6], [25, 18]]]]],
        locals: [],
        templates: [child0, child1, child2]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 28,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/review.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "wizard-step", [], ["outlet", ["subexpr", "@mut", [["get", "outlet", ["loc", [null, [1, 22], [1, 28]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [27, 16]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("fusor-ember-cli/templates/rhev-hostname-input", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 3,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/rhev-hostname-input.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["content", "host.name", ["loc", [null, [2, 2], [2, 15]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 6,
                "column": 6
              },
              "end": {
                "line": 10,
                "column": 6
              }
            },
            "moduleName": "fusor-ember-cli/templates/rhev-hostname-input.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            dom.setAttribute(el1, "class", "error errorForValidation invalid-rhev-hostname");
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("i");
            dom.setAttribute(el2, "class", "fa fa-warning");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode(" Hostname is invalid.\n        ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 0
            },
            "end": {
              "line": 12,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/rhev-hostname-input.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("   ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("   ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(3);
          morphs[0] = dom.createAttrMorph(element0, 'class');
          morphs[1] = dom.createMorphAt(element0, 1, 1);
          morphs[2] = dom.createMorphAt(element0, 3, 3);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", [["subexpr", "if", [["get", "isInvalidHostname", ["loc", [null, [4, 20], [4, 37]]]], "has-error"], [], ["loc", [null, [4, 15], [4, 51]]]]]]], ["inline", "input", [], ["type", "text", "value", ["subexpr", "@mut", [["get", "host.name", ["loc", [null, [5, 32], [5, 41]]]]], [], []], "class", "form-control", "key-up", "saveHostname", "id", ["subexpr", "@mut", [["get", "cssHostHostId", ["loc", [null, [5, 88], [5, 101]]]]], [], []], "data-qci", ["subexpr", "@mut", [["get", "cssHostHostId", ["loc", [null, [5, 111], [5, 124]]]]], [], []]], ["loc", [null, [5, 6], [5, 126]]]], ["block", "if", [["get", "isInvalidHostname", ["loc", [null, [6, 12], [6, 29]]]]], [], 0, null, ["loc", [null, [6, 6], [10, 13]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 13,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/rhev-hostname-input.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "disabled", ["loc", [null, [1, 6], [1, 14]]]]], [], 0, 1, ["loc", [null, [1, 0], [12, 7]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("fusor-ember-cli/templates/rhev-options", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 50,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/rhev-options.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "col-md-12");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("br");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("form");
        dom.setAttribute(el3, "class", "form form-horizontal");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("span");
        dom.setAttribute(el4, "data-qci", "rhev-cpu-type");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0, 1, 3]);
        var morphs = new Array(8);
        morphs[0] = dom.createMorphAt(element0, 1, 1);
        morphs[1] = dom.createMorphAt(element0, 3, 3);
        morphs[2] = dom.createMorphAt(element0, 5, 5);
        morphs[3] = dom.createMorphAt(element0, 7, 7);
        morphs[4] = dom.createMorphAt(element0, 9, 9);
        morphs[5] = dom.createMorphAt(element0, 11, 11);
        morphs[6] = dom.createMorphAt(dom.childAt(element0, [13]), 1, 1);
        morphs[7] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        return morphs;
      },
      statements: [["inline", "text-f", [], ["label", "Root Password", "type", "password", "value", ["subexpr", "@mut", [["get", "rhevRootPassword", ["loc", [null, [5, 59], [5, 75]]]]], [], []], "cssId", "rhev-root-password", "isRequired", true, "disabled", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [6, 31], [6, 40]]]]], [], []], "validator", ["subexpr", "@mut", [["get", "passwordValidator", ["loc", [null, [6, 51], [6, 68]]]]], [], []], "help-inline", "Applies to root user accounts for deployed RHEV hosts", "placeholder", "Must be 8 or more characters"], ["loc", [null, [5, 6], [8, 50]]]], ["inline", "text-f", [], ["label", "Confirm Root Password", "type", "password", "value", ["subexpr", "@mut", [["get", "confirmRhevRootPassword", ["loc", [null, [10, 67], [10, 90]]]]], [], []], "cssId", "confirm-rhev-root-password", "isRequired", true, "disabled", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [11, 31], [11, 40]]]]], [], []], "validator", ["subexpr", "@mut", [["get", "confirmRhevRootPasswordValidator", ["loc", [null, [11, 51], [11, 83]]]]], [], []], "placeholder", "Must match root password"], ["loc", [null, [10, 6], [12, 46]]]], ["inline", "text-f", [], ["label", "Engine Admin Password", "type", "password", "value", ["subexpr", "@mut", [["get", "rhevEngineAdminPassword", ["loc", [null, [14, 67], [14, 90]]]]], [], []], "cssId", "rhev-engine-admin-password", "isRequired", true, "disabled", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [15, 31], [15, 40]]]]], [], []], "validator", ["subexpr", "@mut", [["get", "passwordValidator", ["loc", [null, [15, 51], [15, 68]]]]], [], []], "help-inline", "Applies to admin user account for RHEV web UI", "placeholder", "Must be 8 or more characters"], ["loc", [null, [14, 6], [17, 50]]]], ["inline", "text-f", [], ["label", "Confirm Engine Admin Password", "type", "password", "value", ["subexpr", "@mut", [["get", "confirmRhevEngineAdminPassword", ["loc", [null, [19, 75], [19, 105]]]]], [], []], "cssId", "confirm-rhev-engine-pdmin-password", "isRequired", true, "disabled", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [20, 31], [20, 40]]]]], [], []], "validator", ["subexpr", "@mut", [["get", "confirmRhevEngineAdminPasswordValidator", ["loc", [null, [20, 51], [20, 90]]]]], [], []], "placeholder", "Must match engine admin password"], ["loc", [null, [19, 6], [21, 54]]]], ["inline", "text-f", [], ["label", "Data Center Name", "value", ["subexpr", "@mut", [["get", "rhevDataCenterName", ["loc", [null, [23, 46], [23, 64]]]]], [], []], "placeholder", "Leave blank for default", "cssId", "rhev-data-center-name", "disabled", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [24, 24], [24, 33]]]]], [], []], "validator", ["subexpr", "@mut", [["get", "dataCenterNameValidator", ["loc", [null, [24, 44], [24, 67]]]]], [], []], "showValidationError", true], ["loc", [null, [23, 6], [24, 94]]]], ["inline", "text-f", [], ["label", "Cluster Name", "value", ["subexpr", "@mut", [["get", "rhevClusterName", ["loc", [null, [26, 42], [26, 57]]]]], [], []], "placeholder", "Leave blank for default", "cssId", "rhev-cluster-name", "disabled", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [27, 24], [27, 33]]]]], [], []], "validator", ["subexpr", "@mut", [["get", "clusterNameValidator", ["loc", [null, [27, 44], [27, 64]]]]], [], []], "showValidationError", true], ["loc", [null, [26, 6], [27, 91]]]], ["inline", "select-simple-f", [], ["label", "CPU Type", "content", ["subexpr", "@mut", [["get", "cpuTypes", ["loc", [null, [31, 34], [31, 42]]]]], [], []], "value", ["subexpr", "@mut", [["get", "rhevCpuType", ["loc", [null, [32, 32], [32, 43]]]]], [], []], "prompt", "Intel Nehalem Family", "renderInPlace", true, "disabled", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [35, 35], [35, 44]]]]], [], []], "action", "setSelectValue", "fieldName", "rhevCpuType"], ["loc", [null, [30, 8], [37, 51]]]], ["inline", "cancel-back-next", [], ["backRouteName", ["subexpr", "@mut", [["get", "optionsBackRouteName", ["loc", [null, [43, 33], [43, 53]]]]], [], []], "disableBack", false, "nextRouteName", "storage", "disableNext", ["subexpr", "@mut", [["get", "disableNextRhevOptions", ["loc", [null, [46, 31], [46, 53]]]]], [], []], "disableCancel", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [47, 33], [47, 42]]]]], [], []], "deploymentName", ["subexpr", "@mut", [["get", "deploymentName", ["loc", [null, [48, 34], [48, 48]]]]], [], []]], ["loc", [null, [43, 0], [48, 50]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("fusor-ember-cli/templates/rhev-setup", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 8,
              "column": 6
            },
            "end": {
              "line": 10,
              "column": 6
            }
          },
          "moduleName": "fusor-ember-cli/templates/rhev-setup.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("          Self-hosted\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 14,
              "column": 6
            },
            "end": {
              "line": 18,
              "column": 6
            }
          },
          "moduleName": "fusor-ember-cli/templates/rhev-setup.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          var el2 = dom.createTextNode("\n        Hypervisor + engine\n      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(1);
          morphs[0] = dom.createAttrMorph(element0, 'class');
          return morphs;
        },
        statements: [["attribute", "class", ["concat", [["subexpr", "if", [["get", "isStarted", ["loc", [null, [15, 24], [15, 33]]]], "disabled"], [], ["loc", [null, [15, 19], [15, 46]]]]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 33,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/rhev-setup.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "col-md-9");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        var el4 = dom.createTextNode("\n      Select the setup type.\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "ident-radio");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "ident-radio");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element1 = dom.childAt(fragment, [0, 1]);
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(dom.childAt(element1, [3]), 1, 1);
        morphs[1] = dom.createMorphAt(dom.childAt(element1, [5]), 1, 1);
        morphs[2] = dom.createMorphAt(fragment, 4, 4, contextualElement);
        return morphs;
      },
      statements: [["block", "radio-button", [], ["value", "selfhost", "groupValue", ["subexpr", "@mut", [["get", "rhevSetup", ["loc", [null, [8, 50], [8, 59]]]]], [], []], "changed", "rhevSetupChanged", "id", "selfhost", "disabled", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [8, 110], [8, 119]]]]], [], []], "dataQci", "self-hosted"], 0, null, ["loc", [null, [8, 6], [10, 23]]]], ["block", "radio-button", [], ["value", "rhevhost", "groupValue", ["subexpr", "@mut", [["get", "rhevSetup", ["loc", [null, [14, 50], [14, 59]]]]], [], []], "changed", "rhevSetupChanged", "id", "rhevhost", "disabled", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [14, 110], [14, 119]]]]], [], []], "dataQci", "hypervisor_engine"], 1, null, ["loc", [null, [14, 6], [18, 23]]]], ["inline", "cancel-back-next", [], ["backRouteName", "satellite.access-insights", "disableBack", false, "nextRouteName", ["subexpr", "@mut", [["get", "setupNextRouteName", ["loc", [null, [28, 33], [28, 51]]]]], [], []], "disableNext", false, "disableCancel", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [30, 33], [30, 42]]]]], [], []], "deploymentName", ["subexpr", "@mut", [["get", "deploymentName", ["loc", [null, [31, 34], [31, 48]]]]], [], []]], ["loc", [null, [26, 0], [31, 50]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("fusor-ember-cli/templates/rhev", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 3,
                "column": 6
              },
              "end": {
                "line": 9,
                "column": 6
              }
            },
            "moduleName": "fusor-ember-cli/templates/rhev.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("a");
            dom.setAttribute(el1, "data-qci", "rhev-setup-type");
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("span");
            dom.setAttribute(el2, "class", "hanging-indent");
            var el3 = dom.createTextNode("\n            2A. Setup Type\n          ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 12,
                  "column": 6
                },
                "end": {
                  "line": 18,
                  "column": 6
                }
              },
              "moduleName": "fusor-ember-cli/templates/rhev.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("a");
              dom.setAttribute(el1, "data-qci", "rhev-engine");
              var el2 = dom.createTextNode("\n          ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("span");
              dom.setAttribute(el2, "class", "hanging-indent");
              var el3 = dom.createTextNode("\n            2B. ");
              dom.appendChild(el2, el3);
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n          ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1]), 1, 1);
              return morphs;
            },
            statements: [["content", "engineTabName", ["loc", [null, [15, 16], [15, 33]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 11,
                "column": 6
              },
              "end": {
                "line": 19,
                "column": 6
              }
            },
            "moduleName": "fusor-ember-cli/templates/rhev.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "link-to", ["engine.discovered-host"], ["tagName", "li", "disabled", ["subexpr", "@mut", [["get", "disableTabRhevEngine", ["loc", [null, [12, 64], [12, 84]]]]], [], []]], 0, null, ["loc", [null, [12, 6], [18, 18]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child2 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 21,
                "column": 6
              },
              "end": {
                "line": 27,
                "column": 6
              }
            },
            "moduleName": "fusor-ember-cli/templates/rhev.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("a");
            dom.setAttribute(el1, "data-qci", "rhev-hypervisor");
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("span");
            dom.setAttribute(el2, "class", "hanging-indent");
            var el3 = dom.createTextNode("\n            ");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode(". ");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n          ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1, 1]);
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(element0, 1, 1);
            morphs[1] = dom.createMorphAt(element0, 3, 3);
            return morphs;
          },
          statements: [["inline", "if", [["get", "isSelfHost", ["loc", [null, [24, 17], [24, 27]]]], "2B", "2C"], [], ["loc", [null, [24, 12], [24, 39]]]], ["content", "hypervisorTabName", ["loc", [null, [24, 41], [24, 63]]]]],
          locals: [],
          templates: []
        };
      })();
      var child3 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 29,
                "column": 6
              },
              "end": {
                "line": 35,
                "column": 6
              }
            },
            "moduleName": "fusor-ember-cli/templates/rhev.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("a");
            dom.setAttribute(el1, "data-qci", "rhev-configuration");
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("span");
            dom.setAttribute(el2, "class", "hanging-indent");
            var el3 = dom.createTextNode("\n            ");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode(". Configuration\n          ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1]), 1, 1);
            return morphs;
          },
          statements: [["inline", "if", [["get", "isSelfHost", ["loc", [null, [32, 17], [32, 27]]]], "2C", "2D"], [], ["loc", [null, [32, 12], [32, 39]]]]],
          locals: [],
          templates: []
        };
      })();
      var child4 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 37,
                "column": 6
              },
              "end": {
                "line": 43,
                "column": 6
              }
            },
            "moduleName": "fusor-ember-cli/templates/rhev.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("a");
            dom.setAttribute(el1, "data-qci", "rhev-storage");
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("span");
            dom.setAttribute(el2, "class", "hanging-indent");
            var el3 = dom.createTextNode("\n            ");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode(". Storage\n          ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1]), 1, 1);
            return morphs;
          },
          statements: [["inline", "if", [["get", "isSelfHost", ["loc", [null, [40, 17], [40, 27]]]], "2D", "2E"], [], ["loc", [null, [40, 12], [40, 39]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 45,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/rhev.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(5);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
          morphs[3] = dom.createMorphAt(fragment, 7, 7, contextualElement);
          morphs[4] = dom.createMorphAt(fragment, 9, 9, contextualElement);
          return morphs;
        },
        statements: [["block", "link-to", ["rhev-setup"], ["tagName", "li", "disabled", ["subexpr", "@mut", [["get", "disableTabRhevSetupType", ["loc", [null, [3, 52], [3, 75]]]]], [], []]], 0, null, ["loc", [null, [3, 6], [9, 18]]]], ["block", "unless", [["get", "isSelfHost", ["loc", [null, [11, 16], [11, 26]]]]], [], 1, null, ["loc", [null, [11, 6], [19, 17]]]], ["block", "link-to", ["hypervisor.discovered-host"], ["tagName", "li", "disabled", ["subexpr", "@mut", [["get", "disableTabRhevHypervisors", ["loc", [null, [21, 68], [21, 93]]]]], [], []]], 2, null, ["loc", [null, [21, 6], [27, 18]]]], ["block", "link-to", ["rhev-options"], ["tagName", "li", "disabled", ["subexpr", "@mut", [["get", "disableTabRhevConfiguration", ["loc", [null, [29, 54], [29, 81]]]]], [], []]], 3, null, ["loc", [null, [29, 6], [35, 18]]]], ["block", "link-to", ["storage"], ["tagName", "li", "disabled", ["subexpr", "@mut", [["get", "disableTabRhevStorage", ["loc", [null, [37, 49], [37, 70]]]]], [], []]], 4, null, ["loc", [null, [37, 6], [43, 18]]]]],
        locals: [],
        templates: [child0, child1, child2, child3, child4]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 46,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/rhev.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "wizard-step", [], ["outlet", ["subexpr", "@mut", [["get", "outlet", ["loc", [null, [1, 22], [1, 28]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [45, 16]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("fusor-ember-cli/templates/satellite/access-insights", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 24,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/satellite/access-insights.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "col-md-6");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("a");
        dom.setAttribute(el4, "href", "https://access.redhat.com/insights/");
        dom.setAttribute(el4, "target", "_blank");
        var el5 = dom.createTextNode("Red Hat Insights");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode(" empowers you to monitor and proactively resolve infrastructure configuration and security risks, enabling real time infrastructure health monitoring by Red Hat’s trusted software and security engineering teams. ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("a");
        dom.setAttribute(el4, "href", "https://access.redhat.com/insights/");
        dom.setAttribute(el4, "target", "_blank");
        var el5 = dom.createTextNode("Click here to learn more.");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        var el4 = dom.createTextNode("\n      Select whether to enable Red Hat Insights for this deployment.\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("span");
        var el4 = dom.createTextNode("\n      Enable Red Hat Insights\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0, 1]);
        var element1 = dom.childAt(element0, [7]);
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(element0, 5, 5);
        morphs[1] = dom.createAttrMorph(element1, 'class');
        morphs[2] = dom.createMorphAt(fragment, 4, 4, contextualElement);
        return morphs;
      },
      statements: [["inline", "input", [], ["type", "checkbox", "name", "enable_access_insights", "disabled", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [10, 67], [10, 76]]]]], [], []], "checked", ["subexpr", "@mut", [["get", "model.enable_access_insights", ["loc", [null, [10, 85], [10, 113]]]]], [], []], "data-qci", "enable_access_insights"], ["loc", [null, [10, 4], [10, 149]]]], ["attribute", "class", ["get", "analyticsColor", ["loc", [null, [11, 18], [11, 32]]]]], ["inline", "cancel-back-next", [], ["backRouteName", "configure-environment", "disableBack", false, "nextRouteName", ["subexpr", "@mut", [["get", "step2RouteName", ["loc", [null, [21, 33], [21, 47]]]]], [], []], "disableNext", false, "disableCancel", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [23, 33], [23, 42]]]]], [], []]], ["loc", [null, [19, 0], [23, 44]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("fusor-ember-cli/templates/satellite/index", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 14,
                "column": 12
              },
              "end": {
                "line": 16,
                "column": 12
              }
            },
            "moduleName": "fusor-ember-cli/templates/satellite/index.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("              ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("li");
            var el2 = dom.createTextNode("RHV root and engine");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 17,
                "column": 12
              },
              "end": {
                "line": 19,
                "column": 12
              }
            },
            "moduleName": "fusor-ember-cli/templates/satellite/index.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("              ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("li");
            var el2 = dom.createTextNode("RHELOSP overcloud admin");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      var child2 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 20,
                "column": 12
              },
              "end": {
                "line": 22,
                "column": 12
              }
            },
            "moduleName": "fusor-ember-cli/templates/satellite/index.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("              ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("li");
            var el2 = dom.createTextNode("OpenShift admin");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      var child3 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 23,
                "column": 12
              },
              "end": {
                "line": 25,
                "column": 12
              }
            },
            "moduleName": "fusor-ember-cli/templates/satellite/index.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("              ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("li");
            var el2 = dom.createTextNode("CloudForms root and admin and DB");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 10,
              "column": 6
            },
            "end": {
              "line": 28,
              "column": 6
            }
          },
          "moduleName": "fusor-ember-cli/templates/satellite/index.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("p");
          var el2 = dom.createTextNode("\n          Optionally enter a password that the installer will use to pre-populate values for:");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("br");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n          ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("ul");
          dom.setAttribute(el2, "class", "common-password");
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("          ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1, 3]);
          var morphs = new Array(4);
          morphs[0] = dom.createMorphAt(element0, 1, 1);
          morphs[1] = dom.createMorphAt(element0, 2, 2);
          morphs[2] = dom.createMorphAt(element0, 3, 3);
          morphs[3] = dom.createMorphAt(element0, 4, 4);
          return morphs;
        },
        statements: [["block", "if", [["get", "isRhev", ["loc", [null, [14, 18], [14, 24]]]]], [], 0, null, ["loc", [null, [14, 12], [16, 19]]]], ["block", "if", [["get", "isOpenStack", ["loc", [null, [17, 18], [17, 29]]]]], [], 1, null, ["loc", [null, [17, 12], [19, 19]]]], ["block", "if", [["get", "isOpenShift", ["loc", [null, [20, 18], [20, 29]]]]], [], 2, null, ["loc", [null, [20, 12], [22, 19]]]], ["block", "if", [["get", "isCloudForms", ["loc", [null, [23, 18], [23, 30]]]]], [], 3, null, ["loc", [null, [23, 12], [25, 19]]]]],
        locals: [],
        templates: [child0, child1, child2, child3]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 52,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/satellite/index.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "col-md-9");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("form");
        dom.setAttribute(el3, "class", "form-horizontal");
        dom.setAttribute(el3, "role", "form");
        var el4 = dom.createTextNode("\n\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element1 = dom.childAt(fragment, [0, 1, 1]);
        var morphs = new Array(6);
        morphs[0] = dom.createMorphAt(element1, 1, 1);
        morphs[1] = dom.createMorphAt(element1, 3, 3);
        morphs[2] = dom.createMorphAt(element1, 5, 5);
        morphs[3] = dom.createMorphAt(element1, 7, 7);
        morphs[4] = dom.createMorphAt(element1, 9, 9);
        morphs[5] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        return morphs;
      },
      statements: [["inline", "text-f", [], ["label", "Name", "value", ["subexpr", "@mut", [["get", "model.name", ["loc", [null, [5, 34], [5, 44]]]]], [], []], "errors", ["subexpr", "@mut", [["get", "errors", ["loc", [null, [5, 52], [5, 58]]]]], [], []], "cssId", ["subexpr", "@mut", [["get", "idSatName", ["loc", [null, [5, 65], [5, 74]]]]], [], []], "isRequired", true, "disabled", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [6, 40], [6, 49]]]]], [], []], "validator", ["subexpr", "@mut", [["get", "deploymentNameValidator", ["loc", [null, [6, 60], [6, 83]]]]], [], []]], ["loc", [null, [5, 6], [6, 85]]]], ["inline", "textarea-f", [], ["label", "Description (Optional)", "value", ["subexpr", "@mut", [["get", "model.description", ["loc", [null, [8, 56], [8, 73]]]]], [], []], "cssId", ["subexpr", "@mut", [["get", "idSatDesc", ["loc", [null, [8, 80], [8, 89]]]]], [], []], "disabled", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [8, 99], [8, 108]]]]], [], []]], ["loc", [null, [8, 6], [8, 111]]]], ["block", "base-f", [], ["label", "Universal Password"], 0, null, ["loc", [null, [10, 6], [28, 17]]]], ["inline", "text-f", [], ["label", "Password", "type", "password", "value", ["subexpr", "@mut", [["get", "commonPassword", ["loc", [null, [30, 54], [30, 68]]]]], [], []], "cssId", "common-password", "disabled", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [31, 15], [31, 24]]]]], [], []], "validator", ["subexpr", "@mut", [["get", "passwordValidator", ["loc", [null, [31, 35], [31, 52]]]]], [], []], "labelSize", "col-lg-offset-1 col-md-offset-2 col-lg-2 col-md-3 col-sm-5", "inputSize", "col-lg-4 col-md-4 col-sm-7", "placeholder", "Must be 8 or more characters"], ["loc", [null, [30, 6], [34, 50]]]], ["inline", "text-f", [], ["label", "Confirm Password", "type", "password", "value", ["subexpr", "@mut", [["get", "confirmCommonPassword", ["loc", [null, [36, 62], [36, 83]]]]], [], []], "cssId", "confirm-common-password", "disabled", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [37, 15], [37, 24]]]]], [], []], "validator", ["subexpr", "@mut", [["get", "confirmCommonPasswordValidator", ["loc", [null, [37, 35], [37, 65]]]]], [], []], "labelSize", "col-lg-offset-1 col-md-offset-2 col-lg-2 col-md-3 col-sm-5", "inputSize", "col-lg-4 col-md-4 col-sm-7", "placeholder", "Must match universal password"], ["loc", [null, [36, 6], [40, 51]]]], ["inline", "cancel-back-next", [], ["backRouteName", ["subexpr", "@mut", [["get", "backRouteNameOnSatIndex", ["loc", [null, [45, 33], [45, 56]]]]], [], []], "disableBack", false, "nextRouteName", ["subexpr", "@mut", [["get", "lifecycleEnvironmentTabRouteName", ["loc", [null, [47, 33], [47, 65]]]]], [], []], "disableNext", ["subexpr", "@mut", [["get", "disableNextOnDeploymentName", ["loc", [null, [48, 31], [48, 58]]]]], [], []], "disableCancel", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [49, 33], [49, 42]]]]], [], []], "deploymentName", ["subexpr", "@mut", [["get", "deploymentName", ["loc", [null, [50, 34], [50, 48]]]]], [], []], "isNew", ["subexpr", "@mut", [["get", "isNew", ["loc", [null, [51, 25], [51, 30]]]]], [], []]], ["loc", [null, [45, 0], [51, 32]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("fusor-ember-cli/templates/satellite/loading", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 3,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/satellite/loading.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "loading-spinner", [], ["show", true, "text", "Loading..."], ["loc", [null, [1, 0], [1, 47]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("fusor-ember-cli/templates/satellite", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 3,
                "column": 6
              },
              "end": {
                "line": 9,
                "column": 6
              }
            },
            "moduleName": "fusor-ember-cli/templates/satellite.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("a");
            dom.setAttribute(el1, "data-qci", "deployment-name");
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("span");
            dom.setAttribute(el2, "class", "hanging-indent");
            var el3 = dom.createTextNode("\n            1A. Deployment Name\n          ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 11,
                "column": 6
              },
              "end": {
                "line": 17,
                "column": 6
              }
            },
            "moduleName": "fusor-ember-cli/templates/satellite.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("a");
            dom.setAttribute(el1, "data-qci", "update-availability");
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("span");
            dom.setAttribute(el2, "class", "hanging-indent");
            var el3 = dom.createTextNode("\n            1B. Update Availability\n          ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      var child2 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 19,
                "column": 6
              },
              "end": {
                "line": 25,
                "column": 6
              }
            },
            "moduleName": "fusor-ember-cli/templates/satellite.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("a");
            dom.setAttribute(el1, "data-qci", "red-hat-insights");
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("span");
            dom.setAttribute(el2, "class", "hanging-indent");
            var el3 = dom.createTextNode("\n            1C. Red Hat Insights\n          ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 27,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/satellite.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
          return morphs;
        },
        statements: [["block", "link-to", [["get", "satelliteTabRouteName", ["loc", [null, [3, 17], [3, 38]]]]], ["tagName", "li", "disabled", ["subexpr", "@mut", [["get", "disableTabDeploymentName", ["loc", [null, [3, 61], [3, 85]]]]], [], []]], 0, null, ["loc", [null, [3, 6], [9, 18]]]], ["block", "link-to", [["get", "lifecycleEnvironmentTabRouteName", ["loc", [null, [11, 17], [11, 49]]]]], ["tagName", "li", "disabled", ["subexpr", "@mut", [["get", "disableTabLifecycleEnvironment", ["loc", [null, [11, 72], [11, 102]]]]], [], []]], 1, null, ["loc", [null, [11, 6], [17, 18]]]], ["block", "link-to", ["satellite.access-insights"], ["tagName", "li", "disabled", ["subexpr", "@mut", [["get", "disableTabAccessInsights", ["loc", [null, [19, 67], [19, 91]]]]], [], []]], 2, null, ["loc", [null, [19, 6], [25, 18]]]]],
        locals: [],
        templates: [child0, child1, child2]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 28,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/satellite.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "wizard-step", [], ["outlet", ["subexpr", "@mut", [["get", "outlet", ["loc", [null, [1, 22], [1, 28]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [27, 16]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("fusor-ember-cli/templates/storage", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 11,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/storage.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "row");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "col-md-9");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "alert alert-error rhci-alert");
          var el4 = dom.createTextNode("\n        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("i");
          dom.setAttribute(el4, "class", "fa fa-2x fa-exclamation-triangle errorForValidation");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n         \n        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1, 1]), 3, 3);
          return morphs;
        },
        statements: [["content", "errorMsg", ["loc", [null, [7, 8], [7, 20]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 11,
                "column": 0
              },
              "end": {
                "line": 16,
                "column": 0
              }
            },
            "moduleName": "fusor-ember-cli/templates/storage.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("  ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "spinner spinner-md spinner-inline");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n  ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            dom.setAttribute(el1, "class", "spinner-text");
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n  ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [3]), 1, 1);
            return morphs;
          },
          statements: [["content", "loadingSpinnerText", ["loc", [null, [14, 4], [14, 26]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 11,
              "column": 0
            },
            "end": {
              "line": 16,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/storage.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "showLoadingSpinner", ["loc", [null, [11, 10], [11, 28]]]]], [], 0, null, ["loc", [null, [11, 0], [16, 0]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 18,
              "column": 0
            },
            "end": {
              "line": 20,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/storage.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("h4");
          var el2 = dom.createTextNode(" Data Domain ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child3 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 26,
                "column": 4
              },
              "end": {
                "line": 31,
                "column": 4
              }
            },
            "moduleName": "fusor-ember-cli/templates/storage.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            var el2 = dom.createTextNode("\n        NFS\n      ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element1 = dom.childAt(fragment, [1]);
            var morphs = new Array(1);
            morphs[0] = dom.createAttrMorph(element1, 'class');
            return morphs;
          },
          statements: [["attribute", "class", ["concat", [["subexpr", "if", [["get", "isStarted", ["loc", [null, [28, 24], [28, 33]]]], "disabled"], [], ["loc", [null, [28, 19], [28, 46]]]]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 33,
                "column": 4
              },
              "end": {
                "line": 37,
                "column": 4
              }
            },
            "moduleName": "fusor-ember-cli/templates/storage.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            dom.setAttribute(el1, "class", "disabled");
            var el2 = dom.createTextNode("\n        Local\n      ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      var child2 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 39,
                "column": 4
              },
              "end": {
                "line": 43,
                "column": 4
              }
            },
            "moduleName": "fusor-ember-cli/templates/storage.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            var el2 = dom.createTextNode("\n        Gluster\n      ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(1);
            morphs[0] = dom.createAttrMorph(element0, 'class');
            return morphs;
          },
          statements: [["attribute", "class", ["concat", [["subexpr", "if", [["get", "deploymentController.isStarted", ["loc", [null, [40, 24], [40, 54]]]], "disabled"], [], ["loc", [null, [40, 19], [40, 67]]]]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 24,
              "column": 2
            },
            "end": {
              "line": 44,
              "column": 2
            }
          },
          "moduleName": "fusor-ember-cli/templates/storage.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("        \n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("        \n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "radio-button", [], ["value", "NFS", "groupValue", ["subexpr", "@mut", [["get", "model.rhev_storage_type", ["loc", [null, [26, 43], [26, 66]]]]], [], []], "id", "nfs", "disabled", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [27, 29], [27, 38]]]]], [], []]], 0, null, ["loc", [null, [26, 4], [31, 21]]]], ["block", "radio-button", [], ["value", "Local", "groupValue", ["subexpr", "@mut", [["get", "model.rhev_storage_type", ["loc", [null, [33, 45], [33, 68]]]]], [], []], "id", "local", "disabled", true], 1, null, ["loc", [null, [33, 4], [37, 21]]]], ["block", "radio-button", [], ["value", "glusterfs", "groupValue", ["subexpr", "@mut", [["get", "model.rhev_storage_type", ["loc", [null, [39, 49], [39, 72]]]]], [], []], "id", "gluster", "disabled", ["subexpr", "@mut", [["get", "deploymentController.isStarted", ["loc", [null, [39, 95], [39, 125]]]]], [], []]], 2, null, ["loc", [null, [39, 4], [43, 21]]]]],
        locals: [],
        templates: [child0, child1, child2]
      };
    })();
    var child4 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 46,
              "column": 2
            },
            "end": {
              "line": 48,
              "column": 2
            }
          },
          "moduleName": "fusor-ember-cli/templates/storage.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "text-f", [], ["label", "Storage Path", "value", ["subexpr", "@mut", [["get", "model.rhev_local_storage_path", ["loc", [null, [47, 40], [47, 69]]]]], [], []], "placeholder", "Ex. /rhev/data_storage", "isRequired", true, "cssId", "rhev_local_storage_path", "help-inline", "This path will be created and given appropriate permissions - chown 36:36; chmod 0755, etc", "disabled", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [47, 269], [47, 278]]]]], [], []]], ["loc", [null, [47, 4], [47, 280]]]]],
        locals: [],
        templates: []
      };
    })();
    var child5 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 53,
                "column": 4
              },
              "end": {
                "line": 58,
                "column": 4
              }
            },
            "moduleName": "fusor-ember-cli/templates/storage.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("h4");
            var el2 = dom.createTextNode(" Export Domain ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(3);
            morphs[0] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 5, 5, contextualElement);
            morphs[2] = dom.createMorphAt(fragment, 7, 7, contextualElement);
            return morphs;
          },
          statements: [["inline", "text-f", [], ["label", "Export Domain Name", "value", ["subexpr", "@mut", [["get", "model.rhev_export_domain_name", ["loc", [null, [55, 50], [55, 79]]]]], [], []], "cssId", "rhev_export_domain_name", "isRequired", true, "disabled", ["subexpr", "@mut", [["get", "deploymentController.isStarted", ["loc", [null, [55, 137], [55, 167]]]]], [], []], "validator", ["subexpr", "@mut", [["get", "computerNameValidator", ["loc", [null, [55, 178], [55, 199]]]]], [], []]], ["loc", [null, [55, 8], [55, 201]]]], ["inline", "text-f", [], ["label", "Storage Address", "value", ["subexpr", "@mut", [["get", "model.rhev_export_domain_address", ["loc", [null, [56, 47], [56, 79]]]]], [], []], "cssId", "rhev_export_domain_address", "isRequired", true, "disabled", ["subexpr", "@mut", [["get", "deploymentController.isStarted", ["loc", [null, [56, 140], [56, 170]]]]], [], []], "validator", ["subexpr", "@mut", [["get", "hostnameValidator", ["loc", [null, [56, 181], [56, 198]]]]], [], []]], ["loc", [null, [56, 8], [56, 200]]]], ["inline", "text-f", [], ["label", "Share Path", "value", ["subexpr", "@mut", [["get", "model.rhev_export_domain_path", ["loc", [null, [57, 42], [57, 71]]]]], [], []], "cssId", "rhev_export_domain_path", "isRequired", true, "disabled", ["subexpr", "@mut", [["get", "deploymentController.isStarted", ["loc", [null, [57, 129], [57, 159]]]]], [], []], "validator", ["subexpr", "@mut", [["get", "sharePathValidator", ["loc", [null, [57, 170], [57, 188]]]]], [], []]], ["loc", [null, [57, 8], [57, 190]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 60,
                "column": 4
              },
              "end": {
                "line": 65,
                "column": 4
              }
            },
            "moduleName": "fusor-ember-cli/templates/storage.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("h4");
            var el2 = dom.createTextNode(" Self-hosted RHEV Engine Storage Domain ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(3);
            morphs[0] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 5, 5, contextualElement);
            morphs[2] = dom.createMorphAt(fragment, 7, 7, contextualElement);
            return morphs;
          },
          statements: [["inline", "text-f", [], ["label", "Hosted Engine Storage Domain Name", "value", ["subexpr", "@mut", [["get", "model.hosted_storage_name", ["loc", [null, [62, 65], [62, 90]]]]], [], []], "cssId", "hosted_storage_name", "isRequired", true, "disabled", ["subexpr", "@mut", [["get", "deploymentController.isStarted", ["loc", [null, [62, 144], [62, 174]]]]], [], []], "validator", ["subexpr", "@mut", [["get", "computerNameValidator", ["loc", [null, [62, 185], [62, 206]]]]], [], []]], ["loc", [null, [62, 8], [62, 208]]]], ["inline", "text-f", [], ["label", "Storage Address", "value", ["subexpr", "@mut", [["get", "model.hosted_storage_address", ["loc", [null, [63, 47], [63, 75]]]]], [], []], "cssId", "hosted_storage_address", "isRequired", true, "disabled", ["subexpr", "@mut", [["get", "deploymentController.isStarted", ["loc", [null, [63, 132], [63, 162]]]]], [], []], "validator", ["subexpr", "@mut", [["get", "hostnameValidator", ["loc", [null, [63, 173], [63, 190]]]]], [], []]], ["loc", [null, [63, 8], [63, 192]]]], ["inline", "text-f", [], ["label", "Share Path", "value", ["subexpr", "@mut", [["get", "model.hosted_storage_path", ["loc", [null, [64, 42], [64, 67]]]]], [], []], "cssId", "hosted_storage_path", "isRequired", true, "disabled", ["subexpr", "@mut", [["get", "deploymentController.isStarted", ["loc", [null, [64, 121], [64, 151]]]]], [], []], "validator", ["subexpr", "@mut", [["get", "sharePathValidator", ["loc", [null, [64, 162], [64, 180]]]]], [], []]], ["loc", [null, [64, 8], [64, 182]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 48,
              "column": 2
            },
            "end": {
              "line": 66,
              "column": 2
            }
          },
          "moduleName": "fusor-ember-cli/templates/storage.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(5);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
          morphs[3] = dom.createMorphAt(fragment, 7, 7, contextualElement);
          morphs[4] = dom.createMorphAt(fragment, 9, 9, contextualElement);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["inline", "text-f", [], ["label", "Data Domain Name", "value", ["subexpr", "@mut", [["get", "model.rhev_storage_name", ["loc", [null, [49, 44], [49, 67]]]]], [], []], "isRequired", true, "cssId", "rhev_storage_name", "disabled", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [49, 119], [49, 128]]]]], [], []], "validator", ["subexpr", "@mut", [["get", "computerNameValidator", ["loc", [null, [49, 139], [49, 160]]]]], [], []]], ["loc", [null, [49, 4], [49, 162]]]], ["inline", "text-f", [], ["label", "Storage Address", "value", ["subexpr", "@mut", [["get", "model.rhev_storage_address", ["loc", [null, [50, 43], [50, 69]]]]], [], []], "isRequired", true, "cssId", "rhev_storage_address", "disabled", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [50, 124], [50, 133]]]]], [], []], "validator", ["subexpr", "@mut", [["get", "hostnameValidator", ["loc", [null, [50, 144], [50, 161]]]]], [], []]], ["loc", [null, [50, 4], [50, 163]]]], ["inline", "text-f", [], ["label", "Share Path", "value", ["subexpr", "@mut", [["get", "model.rhev_share_path", ["loc", [null, [51, 38], [51, 59]]]]], [], []], "isRequired", true, "cssId", "rhev_share_path", "disabled", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [51, 109], [51, 118]]]]], [], []], "validator", ["subexpr", "@mut", [["get", "sharePathValidator", ["loc", [null, [51, 129], [51, 147]]]]], [], []]], ["loc", [null, [51, 4], [51, 149]]]], ["block", "if", [["get", "isCloudForms", ["loc", [null, [53, 10], [53, 22]]]]], [], 0, null, ["loc", [null, [53, 4], [58, 11]]]], ["block", "if", [["get", "rhevIsSelfHosted", ["loc", [null, [60, 10], [60, 26]]]]], [], 1, null, ["loc", [null, [60, 4], [65, 11]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    var child6 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 75,
                "column": 3
              },
              "end": {
                "line": 77,
                "column": 3
              }
            },
            "moduleName": "fusor-ember-cli/templates/storage.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("       Next ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("i");
            dom.setAttribute(el1, "class", "fa fa-angle-right");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 71,
              "column": 0
            },
            "end": {
              "line": 78,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/storage.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "button-f", [], ["disabled", ["subexpr", "@mut", [["get", "disableNextStorage", ["loc", [null, [75, 24], [75, 42]]]]], [], []], "action", "testMountPoint"], 0, null, ["loc", [null, [75, 3], [77, 16]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 79,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/storage.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "form form-horizontal");
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element2 = dom.childAt(fragment, [4]);
        var morphs = new Array(5);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[2] = dom.createMorphAt(element2, 1, 1);
        morphs[3] = dom.createMorphAt(element2, 3, 3);
        morphs[4] = dom.createMorphAt(fragment, 6, 6, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "errorMsg", ["loc", [null, [1, 6], [1, 14]]]]], [], 0, 1, ["loc", [null, [1, 0], [16, 7]]]], ["block", "if", [["get", "isCloudForms", ["loc", [null, [18, 6], [18, 18]]]]], [], 2, null, ["loc", [null, [18, 0], [20, 7]]]], ["block", "base-f", [], ["label", "Storage Type", "isRequired", true], 3, null, ["loc", [null, [24, 2], [44, 13]]]], ["block", "if", [["get", "isLocal", ["loc", [null, [46, 8], [46, 15]]]]], [], 4, 5, ["loc", [null, [46, 2], [66, 9]]]], ["block", "cancel-back-next", [], ["backRouteName", "rhev-options", "disableBack", false, "disableCancel", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [73, 33], [73, 42]]]]], [], []], "deploymentName", ["subexpr", "@mut", [["get", "deploymentName", ["loc", [null, [74, 34], [74, 48]]]]], [], []]], 6, null, ["loc", [null, [71, 0], [78, 21]]]]],
      locals: [],
      templates: [child0, child1, child2, child3, child4, child5, child6]
    };
  })());
});
define("fusor-ember-cli/templates/subscriptions/credentials", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 11,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/subscriptions/credentials.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "row");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "col-md-9");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "alert alert-danger rhci-alert");
          var el4 = dom.createTextNode("\n          ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("i");
          dom.setAttribute(el4, "class", "fa fa-2x fa-exclamation-triangle errorForValidation");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n           \n          ");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1, 1]), 3, 3);
          return morphs;
        },
        statements: [["content", "errorMsg", ["loc", [null, [7, 10], [7, 22]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 19,
              "column": 6
            },
            "end": {
              "line": 28,
              "column": 6
            }
          },
          "moduleName": "fusor-ember-cli/templates/subscriptions/credentials.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          var el2 = dom.createTextNode("\n          Yes\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element6 = dom.childAt(fragment, [1]);
          var morphs = new Array(1);
          morphs[0] = dom.createAttrMorph(element6, 'class');
          return morphs;
        },
        statements: [["attribute", "class", ["concat", [["subexpr", "if", [["get", "isStarted", ["loc", [null, [25, 26], [25, 35]]]], "disabled"], [], ["loc", [null, [25, 21], [25, 48]]]]]]]],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 31,
                "column": 10
              },
              "end": {
                "line": 44,
                "column": 10
              }
            },
            "moduleName": "fusor-ember-cli/templates/subscriptions/credentials.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "row");
            var el2 = dom.createTextNode("\n              ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "col-md-9");
            var el3 = dom.createTextNode("\n                ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "alert alert-success rhci-alert");
            var el4 = dom.createTextNode("\n                    ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("i");
            dom.setAttribute(el4, "class", "fa fa-2x fa-check-circle-o green-circle");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n                     \n                    You are already successfully authenticated as ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("strong");
            var el5 = dom.createComment("");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode(" with the Red Hat Customer Portal.\n                    ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("p");
            dom.setAttribute(el4, "style", "margin-left:30px;");
            var el5 = dom.createTextNode("\n                      You may ");
            dom.appendChild(el4, el5);
            var el5 = dom.createElement("a");
            var el6 = dom.createTextNode("logout");
            dom.appendChild(el5, el6);
            dom.appendChild(el4, el5);
            var el5 = dom.createTextNode(" and then login as a different user.\n                    ");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n                ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n              ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n            ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element4 = dom.childAt(fragment, [1, 1, 1]);
            var element5 = dom.childAt(element4, [5, 1]);
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(dom.childAt(element4, [3]), 0, 0);
            morphs[1] = dom.createElementMorph(element5);
            return morphs;
          },
          statements: [["content", "model.identification", ["loc", [null, [37, 74], [37, 98]]]], ["element", "action", ["logoutPortal"], [], ["loc", [null, [39, 33], [39, 58]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 59,
                  "column": 18
                },
                "end": {
                  "line": 63,
                  "column": 18
                }
              },
              "moduleName": "fusor-ember-cli/templates/subscriptions/credentials.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                    ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("a");
              dom.setAttribute(el1, "href", "https://www.redhat.com/wapps/sso/lostPassword.html");
              dom.setAttribute(el1, "target", "_blank");
              var el2 = dom.createTextNode("\n                      Forgot your login or password?\n                    ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() {
              return [];
            },
            statements: [],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 44,
                "column": 10
              },
              "end": {
                "line": 67,
                "column": 10
              }
            },
            "moduleName": "fusor-ember-cli/templates/subscriptions/credentials.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("\n          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "row");
            var el2 = dom.createTextNode("\n            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "col-md-9");
            var el3 = dom.createTextNode("\n              ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("br");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n              Enter your Red Hat account information.\n              ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("br");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n              ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("br");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n              ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("form");
            dom.setAttribute(el3, "class", "form form-horizontal");
            var el4 = dom.createTextNode("\n                ");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment(" invisble input password is hack to remove chrome autocomplete ");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n                ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("input");
            dom.setAttribute(el4, "style", "display:none");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n                ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("input");
            dom.setAttribute(el4, "type", "password");
            dom.setAttribute(el4, "style", "display:none");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n                ");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n                ");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n\n");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("              ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n            ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element3 = dom.childAt(fragment, [1, 1, 7]);
            var morphs = new Array(3);
            morphs[0] = dom.createMorphAt(element3, 7, 7);
            morphs[1] = dom.createMorphAt(element3, 9, 9);
            morphs[2] = dom.createMorphAt(element3, 11, 11);
            return morphs;
          },
          statements: [["inline", "text-f", [], ["label", "Red Hat login", "value", ["subexpr", "@mut", [["get", "model.identification", ["loc", [null, [56, 53], [56, 73]]]]], [], []], "disabled", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [56, 83], [56, 92]]]]], [], []], "cssId", "red-hat-login"], ["loc", [null, [56, 16], [56, 116]]]], ["inline", "text-f", [], ["label", "Password", "value", ["subexpr", "@mut", [["get", "password", ["loc", [null, [57, 48], [57, 56]]]]], [], []], "type", "password", "disabled", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [57, 82], [57, 91]]]]], [], []], "cssId", "portal-password"], ["loc", [null, [57, 16], [57, 117]]]], ["block", "base-f", [], [], 0, null, ["loc", [null, [59, 18], [63, 29]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 30,
              "column": 6
            },
            "end": {
              "line": 68,
              "column": 6
            }
          },
          "moduleName": "fusor-ember-cli/templates/subscriptions/credentials.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "model.isAuthenticated", ["loc", [null, [31, 16], [31, 37]]]]], [], 0, 1, ["loc", [null, [31, 10], [67, 17]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    var child3 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 73,
              "column": 6
            },
            "end": {
              "line": 82,
              "column": 6
            }
          },
          "moduleName": "fusor-ember-cli/templates/subscriptions/credentials.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          var el2 = dom.createTextNode("\n        No, Satellite will have restricted network access.\n      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element2 = dom.childAt(fragment, [1]);
          var morphs = new Array(1);
          morphs[0] = dom.createAttrMorph(element2, 'class');
          return morphs;
        },
        statements: [["attribute", "class", ["concat", [["subexpr", "if", [["get", "isStarted", ["loc", [null, [79, 24], [79, 33]]]], "disabled"], [], ["loc", [null, [79, 19], [79, 46]]]]]]]],
        locals: [],
        templates: []
      };
    })();
    var child4 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 102,
                "column": 14
              },
              "end": {
                "line": 113,
                "column": 14
              }
            },
            "moduleName": "fusor-ember-cli/templates/subscriptions/credentials.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "alert alert-success");
            var el2 = dom.createTextNode("\n                            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("i");
            dom.setAttribute(el2, "class", "fa fa-2x fa-check-circle-o green-circle");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                             \n                            You successfully uploaded manifest\n                            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("strong");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n\n                            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("p");
            dom.setAttribute(el2, "style", "margin-left:30px;");
            var el3 = dom.createTextNode("\n                              You may ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("a");
            var el4 = dom.createTextNode("upload");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode(" a different manifest.\n                            ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                        ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var element1 = dom.childAt(element0, [5, 1]);
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(dom.childAt(element0, [3]), 0, 0);
            morphs[1] = dom.createElementMorph(element1);
            return morphs;
          },
          statements: [["content", "manifestFile", ["loc", [null, [107, 36], [107, 52]]]], ["element", "action", ["uploadDifferentManifest"], [], ["loc", [null, [110, 41], [110, 77]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 113,
                "column": 14
              },
              "end": {
                "line": 118,
                "column": 14
              }
            },
            "moduleName": "fusor-ember-cli/templates/subscriptions/credentials.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("\n                  ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("input");
            dom.setAttribute(el1, "type", "file");
            dom.setAttribute(el1, "id", "manifest-file-field");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n                  ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("br");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n                  ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 5, 5, contextualElement);
            return morphs;
          },
          statements: [["inline", "button-f", [], ["title", "Upload", "action", "uploadManifest"], ["loc", [null, [117, 18], [117, 69]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 84,
              "column": 6
            },
            "end": {
              "line": 120,
              "column": 6
            }
          },
          "moduleName": "fusor-ember-cli/templates/subscriptions/credentials.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("          ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("p");
          var el2 = dom.createTextNode("\n            Satellite needs a URL within the network from which it can access content.\n          ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n          ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n          ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("p");
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("br");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            Subscriptions that are managed by Satellite need to be added through a subscription management application manifest, which you create and obtain through Customer Portal. This manifest will be assigned to an organization, and any system that registers with that organization can use those subscriptions.\n          ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n          ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "style", "padding-left:25px");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("          ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          morphs[1] = dom.createMorphAt(dom.childAt(fragment, [7]), 1, 1);
          return morphs;
        },
        statements: [["inline", "content-mirror-f", [], ["cdnUrl", ["subexpr", "@mut", [["get", "cdnUrl", ["loc", [null, [90, 19], [90, 25]]]]], [], []], "deploymentId", ["subexpr", "@mut", [["get", "deploymentId", ["loc", [null, [91, 25], [91, 37]]]]], [], []], "MirrorStatus", ["subexpr", "@mut", [["get", "MirrorStatus", ["loc", [null, [92, 25], [92, 37]]]]], [], []], "mirrorStatusUpdate", "mirrorStatusUpdate"], ["loc", [null, [89, 10], [94, 12]]]], ["block", "if", [["get", "hasManifestFile", ["loc", [null, [102, 20], [102, 35]]]]], [], 0, 1, ["loc", [null, [102, 14], [118, 21]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    var child5 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 126,
              "column": 0
            },
            "end": {
              "line": 135,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/subscriptions/credentials.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "cancel-back-next", [], ["backRouteName", ["subexpr", "@mut", [["get", "backRouteFromCredentials", ["loc", [null, [128, 37], [128, 61]]]]], [], []], "disableBack", false, "nextRouteName", "subscriptions.review-subscriptions", "disableNext", ["subexpr", "@mut", [["get", "disableNextDisconnected", ["loc", [null, [131, 35], [131, 58]]]]], [], []], "disableCancel", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [132, 37], [132, 46]]]]], [], []], "deploymentName", ["subexpr", "@mut", [["get", "deploymentName", ["loc", [null, [133, 38], [133, 52]]]]], [], []]], ["loc", [null, [128, 4], [133, 54]]]]],
        locals: [],
        templates: []
      };
    })();
    var child6 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 141,
                  "column": 8
                },
                "end": {
                  "line": 143,
                  "column": 8
                }
              },
              "moduleName": "fusor-ember-cli/templates/subscriptions/credentials.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode(" ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("i");
              dom.setAttribute(el1, "class", "fa fa-angle-right");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["content", "nextButtonTitle", ["loc", [null, [142, 12], [142, 31]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 137,
                "column": 4
              },
              "end": {
                "line": 144,
                "column": 4
              }
            },
            "moduleName": "fusor-ember-cli/templates/subscriptions/credentials.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "button-f", [], ["disabled", ["subexpr", "@mut", [["get", "disableCredentialsNext", ["loc", [null, [141, 29], [141, 51]]]]], [], []], "action", ["subexpr", "@mut", [["get", "actionCredentialsNext", ["loc", [null, [141, 59], [141, 80]]]]], [], []]], 0, null, ["loc", [null, [141, 8], [143, 21]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 135,
              "column": 0
            },
            "end": {
              "line": 146,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/subscriptions/credentials.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["block", "cancel-back-next", [], ["backRouteName", ["subexpr", "@mut", [["get", "backRouteFromCredentials", ["loc", [null, [137, 38], [137, 62]]]]], [], []], "disableBack", false, "disableCancel", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [139, 38], [139, 47]]]]], [], []], "deploymentName", ["subexpr", "@mut", [["get", "deploymentName", ["loc", [null, [140, 39], [140, 53]]]]], [], []]], 0, null, ["loc", [null, [137, 4], [144, 25]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 147,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/subscriptions/credentials.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "col-md-9");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        var el4 = dom.createTextNode("\n      Satellite will have external network access and receive content directly from Red Hat Customer Portal.\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "ident-radio");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "ident-radio");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element7 = dom.childAt(fragment, [2, 1]);
        var element8 = dom.childAt(element7, [3]);
        var element9 = dom.childAt(element7, [5]);
        var morphs = new Array(6);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(element8, 1, 1);
        morphs[2] = dom.createMorphAt(element8, 3, 3);
        morphs[3] = dom.createMorphAt(element9, 1, 1);
        morphs[4] = dom.createMorphAt(element9, 3, 3);
        morphs[5] = dom.createMorphAt(fragment, 4, 4, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "showErrorMessage", ["loc", [null, [1, 6], [1, 22]]]]], [], 0, null, ["loc", [null, [1, 0], [11, 7]]]], ["block", "radio-button", [], ["value", "redhat_cdn", "groupValue", ["subexpr", "@mut", [["get", "contentProviderType", ["loc", [null, [20, 33], [20, 52]]]]], [], []], "changed", "providerTypeChanged", "id", "redhat_cdn", "dataQci", "redhat_cdn", "disabled", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [24, 31], [24, 40]]]]], [], []]], 1, null, ["loc", [null, [19, 6], [28, 23]]]], ["block", "unless", [["get", "isDisconnected", ["loc", [null, [30, 16], [30, 30]]]]], [], 2, null, ["loc", [null, [30, 6], [68, 17]]]], ["block", "radio-button", [], ["value", "disconnected", "groupValue", ["subexpr", "@mut", [["get", "contentProviderType", ["loc", [null, [74, 33], [74, 52]]]]], [], []], "changed", "providerTypeChanged", "id", "disconnected", "dataQci", "disconnected", "disabled", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [78, 31], [78, 40]]]]], [], []]], 3, null, ["loc", [null, [73, 6], [82, 23]]]], ["block", "if", [["get", "isDisconnected", ["loc", [null, [84, 12], [84, 26]]]]], [], 4, null, ["loc", [null, [84, 6], [120, 13]]]], ["block", "if", [["get", "isDisconnected", ["loc", [null, [126, 6], [126, 20]]]]], [], 5, 6, ["loc", [null, [126, 0], [146, 7]]]]],
      locals: [],
      templates: [child0, child1, child2, child3, child4, child5, child6]
    };
  })());
});
define("fusor-ember-cli/templates/subscriptions/index", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/subscriptions/index.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["content", "outlet", ["loc", [null, [1, 0], [1, 10]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("fusor-ember-cli/templates/subscriptions/loading", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/subscriptions/loading.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "loading-spinner", [], ["show", true, "text", "Loading from Red Hat Customer Portal ..."], ["loc", [null, [1, 0], [1, 77]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("fusor-ember-cli/templates/subscriptions/management-application", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 5,
                "column": 0
              },
              "end": {
                "line": 15,
                "column": 0
              }
            },
            "moduleName": "fusor-ember-cli/templates/subscriptions/management-application.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("  ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "row");
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "col-md-9");
            var el3 = dom.createTextNode("\n      ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "alert alert-success rhci-alert");
            var el4 = dom.createTextNode("\n          ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("i");
            dom.setAttribute(el4, "class", "fa fa-2x fa-check-circle-o green-circle");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n           \n          ");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode(" added successfully.\n      ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n    ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n  ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1, 1]), 3, 3);
            return morphs;
          },
          statements: [["content", "newSatelliteName", ["loc", [null, [11, 10], [11, 30]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 15,
                  "column": 0
                },
                "end": {
                  "line": 17,
                  "column": 0
                }
              },
              "moduleName": "fusor-ember-cli/templates/subscriptions/management-application.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "loading-spinner", [], ["show", true, "text", ["subexpr", "@mut", [["get", "msgWaiting", ["loc", [null, [16, 39], [16, 49]]]]], [], []]], ["loc", [null, [16, 6], [16, 51]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 15,
                "column": 0
              },
              "end": {
                "line": 17,
                "column": 0
              }
            },
            "moduleName": "fusor-ember-cli/templates/subscriptions/management-application.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["get", "showWaitingMessage", ["loc", [null, [15, 10], [15, 28]]]]], [], 0, null, ["loc", [null, [15, 0], [17, 0]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child2 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 19,
                "column": 0
              },
              "end": {
                "line": 29,
                "column": 0
              }
            },
            "moduleName": "fusor-ember-cli/templates/subscriptions/management-application.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("  ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "row");
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "col-md-9");
            var el3 = dom.createTextNode("\n      ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "alert alert-danger rhci-alert");
            var el4 = dom.createTextNode("\n          ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("i");
            dom.setAttribute(el4, "class", "fa fa-2x fa-exclamation-triangle errorForValidation");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n           \n          ");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n      ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n    ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n  ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1, 1]), 3, 3);
            return morphs;
          },
          statements: [["content", "errorMsg", ["loc", [null, [25, 10], [25, 22]]]]],
          locals: [],
          templates: []
        };
      })();
      var child3 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 54,
                "column": 8
              },
              "end": {
                "line": 59,
                "column": 8
              }
            },
            "moduleName": "fusor-ember-cli/templates/subscriptions/management-application.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "tr-management-app", [], ["managementApp", ["subexpr", "@mut", [["get", "managementApp", ["loc", [null, [55, 44], [55, 57]]]]], [], []], "consumerUUID", ["subexpr", "@mut", [["get", "sessionPortal.consumerUUID", ["loc", [null, [56, 43], [56, 69]]]]], [], []], "action", "selectManagementApp", "disabled", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [58, 39], [58, 48]]]]], [], []]], ["loc", [null, [55, 10], [58, 50]]]]],
          locals: ["managementApp"],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 0
            },
            "end": {
              "line": 74,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/subscriptions/management-application.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "row");
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "col-md-9");
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "pull-right");
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("button");
          dom.setAttribute(el4, "class", "btn btn-primary");
          dom.setAttribute(el4, "data-qci", "register-new-satellite");
          var el5 = dom.createTextNode("\n        New Subscription Management Application\n      ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n    ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n  ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("br");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "row");
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "col-md-9");
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("table");
          dom.setAttribute(el3, "class", "table table-bordered");
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("thead");
          var el5 = dom.createTextNode("\n        ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("th");
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n        ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("th");
          var el6 = dom.createTextNode("Name");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n        ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("th");
          var el6 = dom.createTextNode("Subscriptions Attached");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n        ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("th");
          var el6 = dom.createTextNode("UUID");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n      ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("tbody");
          var el5 = dom.createTextNode("\n");
          dom.appendChild(el4, el5);
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("      ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n    ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n  ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [5, 1, 1, 1]);
          var morphs = new Array(7);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          morphs[2] = dom.createAttrMorph(element0, 'disabled');
          morphs[3] = dom.createElementMorph(element0);
          morphs[4] = dom.createMorphAt(dom.childAt(fragment, [9, 1, 1, 3]), 1, 1);
          morphs[5] = dom.createMorphAt(fragment, 11, 11, contextualElement);
          morphs[6] = dom.createMorphAt(fragment, 13, 13, contextualElement);
          return morphs;
        },
        statements: [["block", "if", [["get", "showAlertMessage", ["loc", [null, [5, 6], [5, 22]]]]], [], 0, 1, ["loc", [null, [5, 0], [17, 7]]]], ["block", "if", [["get", "showErrorMessage", ["loc", [null, [19, 6], [19, 22]]]]], [], 2, null, ["loc", [null, [19, 0], [29, 7]]]], ["attribute", "disabled", ["get", "isStarted", ["loc", [null, [35, 83], [35, 92]]]]], ["element", "action", ["registerNewSatellite"], [], ["loc", [null, [35, 38], [35, 71]]]], ["block", "each", [["get", "model", ["loc", [null, [54, 16], [54, 21]]]]], [], 3, null, ["loc", [null, [54, 8], [59, 17]]]], ["inline", "new-satellite-modal", [], ["openModal", ["subexpr", "@mut", [["get", "openModal", ["loc", [null, [65, 32], [65, 41]]]]], [], []], "createSatellite", "createSatellite"], ["loc", [null, [65, 0], [66, 57]]]], ["inline", "cancel-back-next", [], ["backRouteName", "subscriptions.credentials", "disableBack", false, "nextRouteName", "subscriptions.select-subscriptions", "disableNext", ["subexpr", "@mut", [["get", "disableNextOnManagementApp", ["loc", [null, [71, 31], [71, 57]]]]], [], []], "disableCancel", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [72, 33], [72, 42]]]]], [], []], "deploymentName", ["subexpr", "@mut", [["get", "deploymentName", ["loc", [null, [73, 34], [73, 48]]]]], [], []]], ["loc", [null, [68, 0], [73, 50]]]]],
        locals: [],
        templates: [child0, child1, child2, child3]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 78,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/subscriptions/management-application.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["content", "outlet", ["loc", [null, [1, 0], [1, 10]]]], ["block", "if", [["get", "showManagementApplications", ["loc", [null, [3, 6], [3, 32]]]]], [], 0, null, ["loc", [null, [3, 0], [74, 7]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("fusor-ember-cli/templates/subscriptions/management-application.loading", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 40
          }
        },
        "moduleName": "fusor-ember-cli/templates/subscriptions/management-application.loading.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("Loading from Red Hat Customer Portal ...");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() {
        return [];
      },
      statements: [],
      locals: [],
      templates: []
    };
  })());
});
define("fusor-ember-cli/templates/subscriptions/review-subscriptions", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 9,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/subscriptions/review-subscriptions.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "row");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "col-md-9");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "alert alert-info rhci-alert");
          var el4 = dom.createTextNode("\n          This organization already has a subscription management application ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("strong");
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode(" assigned to it.\n      ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1, 1, 1]), 0, 0);
          return morphs;
        },
        statements: [["content", "upstreamConsumerName", ["loc", [null, [5, 86], [5, 110]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 11,
              "column": 0
            },
            "end": {
              "line": 23,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/subscriptions/review-subscriptions.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "row");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "col-md-9");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "alert alert-warning rhci-alert");
          var el4 = dom.createTextNode("\n          ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("i");
          dom.setAttribute(el4, "class", "fa fa-2x fa-exclamation-triangle warningForValidation validation-alert-icon");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n          ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("ul");
          dom.setAttribute(el4, "class", "validation-alert-message");
          var el5 = dom.createTextNode("\n            We've detected the subscription manifest supplied for this deployment may not have sufficient entitlements\n            to cover the requested products.\n          ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 36,
              "column": 10
            },
            "end": {
              "line": 38,
              "column": 10
            }
          },
          "moduleName": "fusor-ember-cli/templates/subscriptions/review-subscriptions.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("th");
          dom.setAttribute(el1, "class", "text-center");
          var el2 = dom.createTextNode(" Total Quantity ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child3 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 43,
              "column": 6
            },
            "end": {
              "line": 45,
              "column": 6
            }
          },
          "moduleName": "fusor-ember-cli/templates/subscriptions/review-subscriptions.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("          ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "tr-subscription-manifest", [], ["subscription", ["subexpr", "@mut", [["get", "subscription", ["loc", [null, [44, 50], [44, 62]]]]], [], []], "isDisconnected", ["subexpr", "@mut", [["get", "isDisconnected", ["loc", [null, [44, 78], [44, 92]]]]], [], []], "useExistingManifest", ["subexpr", "@mut", [["get", "useExistingManifest", ["loc", [null, [44, 113], [44, 132]]]]], [], []]], ["loc", [null, [44, 10], [44, 134]]]]],
        locals: ["subscription"],
        templates: []
      };
    })();
    var child4 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 45,
              "column": 6
            },
            "end": {
              "line": 53,
              "column": 6
            }
          },
          "moduleName": "fusor-ember-cli/templates/subscriptions/review-subscriptions.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("tr");
          var el2 = dom.createTextNode("\n          ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          dom.setAttribute(el2, "colspan", "8");
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("p");
          dom.setAttribute(el3, "class", "no_subscriptions");
          var el4 = dom.createTextNode("\n              ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("h3");
          var el5 = dom.createTextNode(" No subscriptions found ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n            ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n          ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 67,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/subscriptions/review-subscriptions.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "col-md-9");
        var el3 = dom.createTextNode("\n\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("table");
        dom.setAttribute(el3, "class", "table table-bordered small");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("thead");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("tr");
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("th");
        var el7 = dom.createTextNode(" Subscription Name ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("th");
        var el7 = dom.createTextNode(" Contract Number ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("th");
        dom.setAttribute(el6, "class", "text-center");
        var el7 = dom.createTextNode(" Start Date ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("th");
        dom.setAttribute(el6, "class", "text-center");
        var el7 = dom.createTextNode(" End Date ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("th");
        dom.setAttribute(el6, "class", "text-center");
        var el7 = dom.createTextNode(" Quantity Attached ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("tbody");
        var el5 = dom.createTextNode("\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [4, 1, 1]);
        var morphs = new Array(5);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[2] = dom.createMorphAt(dom.childAt(element0, [1, 1]), 11, 11);
        morphs[3] = dom.createMorphAt(dom.childAt(element0, [3]), 1, 1);
        morphs[4] = dom.createMorphAt(fragment, 6, 6, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["block", "if", [["get", "useExistingManifest", ["loc", [null, [1, 6], [1, 25]]]]], [], 0, null, ["loc", [null, [1, 0], [9, 7]]]], ["block", "unless", [["get", "sufficientEntitlements", ["loc", [null, [11, 10], [11, 32]]]]], [], 1, null, ["loc", [null, [11, 0], [23, 11]]]], ["block", "unless", [["get", "useExistingManifest", ["loc", [null, [36, 20], [36, 39]]]]], [], 2, null, ["loc", [null, [36, 10], [38, 21]]]], ["block", "each", [["get", "sortedModel", ["loc", [null, [43, 14], [43, 25]]]]], [], 3, 4, ["loc", [null, [43, 6], [53, 15]]]], ["inline", "cancel-back-next", [], ["backRouteName", ["subexpr", "@mut", [["get", "backRouteNameReviewSubs", ["loc", [null, [61, 33], [61, 56]]]]], [], []], "disableBack", false, "nextRouteName", "review", "disableNext", false, "disableCancel", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [65, 33], [65, 42]]]]], [], []], "deploymentName", ["subexpr", "@mut", [["get", "deploymentName", ["loc", [null, [66, 34], [66, 48]]]]], [], []]], ["loc", [null, [61, 0], [66, 50]]]]],
      locals: [],
      templates: [child0, child1, child2, child3, child4]
    };
  })());
});
define("fusor-ember-cli/templates/subscriptions/select-subscriptions", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 11,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/subscriptions/select-subscriptions.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "row");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "col-md-9");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "alert alert-danger rhci-alert");
          var el4 = dom.createTextNode("\n          ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("i");
          dom.setAttribute(el4, "class", "fa fa-2x fa-exclamation-triangle errorForValidation");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n           \n          ");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1, 1]), 3, 3);
          return morphs;
        },
        statements: [["content", "errorMsg", ["loc", [null, [7, 10], [7, 22]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 13,
              "column": 0
            },
            "end": {
              "line": 18,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/subscriptions/select-subscriptions.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "spinner spinner-md spinner-inline");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "class", "spinner-text");
          var el2 = dom.createTextNode("\n        Loading from Red Hat Customer Portal ...\n      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 30,
                  "column": 8
                },
                "end": {
                  "line": 38,
                  "column": 8
                }
              },
              "moduleName": "fusor-ember-cli/templates/subscriptions/select-subscriptions.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("          ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "row");
              var el2 = dom.createTextNode("\n            ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("div");
              dom.setAttribute(el2, "class", "col-md-9");
              var el3 = dom.createTextNode("\n              ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("div");
              dom.setAttribute(el3, "class", "alert alert-danger rhci-alert");
              var el4 = dom.createTextNode("\n                  You previously selected subscriptions (Contract Number ");
              dom.appendChild(el3, el4);
              var el4 = dom.createComment("");
              dom.appendChild(el3, el4);
              var el4 = dom.createTextNode(") that are no longer available to be selected in the pool.\n              ");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n            ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n          ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1, 1]), 1, 1);
              return morphs;
            },
            statements: [["content", "contractNumbersInModelNotInPool", ["loc", [null, [34, 73], [34, 108]]]]],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.10",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 57,
                    "column": 12
                  },
                  "end": {
                    "line": 62,
                    "column": 12
                  }
                },
                "moduleName": "fusor-ember-cli/templates/subscriptions/select-subscriptions.hbs"
              },
              arity: 1,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("              ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                return morphs;
              },
              statements: [["inline", "tr-subscription", [], ["subscription", ["subexpr", "@mut", [["get", "subscription", ["loc", [null, [58, 45], [58, 57]]]]], [], []], "numSubscriptionsRequired", ["subexpr", "@mut", [["get", "numSubscriptionsRequired", ["loc", [null, [59, 57], [59, 81]]]]], [], []], "model", ["subexpr", "@mut", [["get", "model", ["loc", [null, [60, 38], [60, 43]]]]], [], []], "saveSubscription", "saveSubscription"], ["loc", [null, [58, 14], [61, 69]]]]],
              locals: ["subscription"],
              templates: []
            };
          })();
          var child1 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.10",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 62,
                    "column": 12
                  },
                  "end": {
                    "line": 70,
                    "column": 12
                  }
                },
                "moduleName": "fusor-ember-cli/templates/subscriptions/select-subscriptions.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("              ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("tr");
                var el2 = dom.createTextNode("\n                ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("td");
                dom.setAttribute(el2, "colspan", "8");
                var el3 = dom.createTextNode("\n                  ");
                dom.appendChild(el2, el3);
                var el3 = dom.createElement("p");
                dom.setAttribute(el3, "class", "no_subscriptions");
                var el4 = dom.createTextNode("\n                    No subscriptions found. Check your account in in the ");
                dom.appendChild(el3, el4);
                var el4 = dom.createElement("a");
                dom.setAttribute(el4, "href", "https://idp.redhat.com/idp/");
                dom.setAttribute(el4, "target", "_blank");
                var el5 = dom.createTextNode("Red Hat Customer Portal");
                dom.appendChild(el4, el5);
                dom.appendChild(el3, el4);
                var el4 = dom.createTextNode(" to verify you have subscriptions available.\n                  ");
                dom.appendChild(el3, el4);
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("\n                ");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n              ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes() {
                return [];
              },
              statements: [],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 40,
                  "column": 8
                },
                "end": {
                  "line": 75,
                  "column": 8
                }
              },
              "moduleName": "fusor-ember-cli/templates/subscriptions/select-subscriptions.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("          ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("table");
              dom.setAttribute(el1, "class", "table table-bordered small");
              var el2 = dom.createTextNode("\n            ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("thead");
              var el3 = dom.createTextNode("\n              ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("tr");
              var el4 = dom.createTextNode("\n                ");
              dom.appendChild(el3, el4);
              var el4 = dom.createElement("th");
              var el5 = dom.createTextNode(" ");
              dom.appendChild(el4, el5);
              dom.appendChild(el3, el4);
              var el4 = dom.createTextNode("\n                ");
              dom.appendChild(el3, el4);
              var el4 = dom.createElement("th");
              var el5 = dom.createTextNode(" Subscription Name ");
              dom.appendChild(el4, el5);
              dom.appendChild(el3, el4);
              var el4 = dom.createTextNode("\n                ");
              dom.appendChild(el3, el4);
              var el4 = dom.createElement("th");
              var el5 = dom.createTextNode(" Contract Number ");
              dom.appendChild(el4, el5);
              dom.appendChild(el3, el4);
              var el4 = dom.createTextNode("\n                ");
              dom.appendChild(el3, el4);
              var el4 = dom.createElement("th");
              var el5 = dom.createTextNode(" System Type ");
              dom.appendChild(el4, el5);
              dom.appendChild(el3, el4);
              var el4 = dom.createTextNode("\n                ");
              dom.appendChild(el3, el4);
              var el4 = dom.createElement("th");
              var el5 = dom.createTextNode(" Start Date ");
              dom.appendChild(el4, el5);
              dom.appendChild(el3, el4);
              var el4 = dom.createTextNode("\n                ");
              dom.appendChild(el3, el4);
              var el4 = dom.createElement("th");
              var el5 = dom.createTextNode(" End Date ");
              dom.appendChild(el4, el5);
              dom.appendChild(el3, el4);
              var el4 = dom.createTextNode("\n                ");
              dom.appendChild(el3, el4);
              var el4 = dom.createElement("th");
              var el5 = dom.createTextNode(" Attached ");
              dom.appendChild(el4, el5);
              dom.appendChild(el3, el4);
              var el4 = dom.createTextNode("\n                ");
              dom.appendChild(el3, el4);
              var el4 = dom.createElement("th");
              var el5 = dom.createTextNode(" Available ");
              dom.appendChild(el4, el5);
              dom.appendChild(el3, el4);
              var el4 = dom.createTextNode("\n                ");
              dom.appendChild(el3, el4);
              var el4 = dom.createElement("th");
              var el5 = dom.createTextNode(" Quantity ");
              dom.appendChild(el4, el5);
              dom.appendChild(el3, el4);
              var el4 = dom.createTextNode("\n              ");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n              ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n\n            ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("tbody");
              var el3 = dom.createTextNode("\n");
              dom.appendChild(el2, el3);
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n            ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n          ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 3]), 1, 1);
              return morphs;
            },
            statements: [["block", "each", [["get", "subscriptionPools", ["loc", [null, [57, 20], [57, 37]]]]], [], 0, 1, ["loc", [null, [57, 12], [70, 21]]]]],
            locals: [],
            templates: [child0, child1]
          };
        })();
        var child2 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "revision": "Ember@1.13.10",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 100,
                      "column": 20
                    },
                    "end": {
                      "line": 102,
                      "column": 20
                    }
                  },
                  "moduleName": "fusor-ember-cli/templates/subscriptions/select-subscriptions.hbs"
                },
                arity: 1,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("                      ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                  return morphs;
                },
                statements: [["inline", "tr-subscription-saved", [], ["subscription", ["subexpr", "@mut", [["get", "sub", ["loc", [null, [101, 59], [101, 62]]]]], [], []]], ["loc", [null, [101, 22], [101, 64]]]]],
                locals: ["sub"],
                templates: []
              };
            })();
            return {
              meta: {
                "revision": "Ember@1.13.10",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 84,
                    "column": 12
                  },
                  "end": {
                    "line": 105,
                    "column": 12
                  }
                },
                "moduleName": "fusor-ember-cli/templates/subscriptions/select-subscriptions.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("div");
                dom.setAttribute(el1, "class", "alert alert-danger rhci-alert");
                var el2 = dom.createTextNode("\n                        Below are the subscriptions that you previously saved with the deployment.\n                ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n\n                ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("table");
                dom.setAttribute(el1, "class", "table table-bordered small");
                var el2 = dom.createTextNode("\n                  ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("thead");
                var el3 = dom.createTextNode("\n                    ");
                dom.appendChild(el2, el3);
                var el3 = dom.createElement("tr");
                var el4 = dom.createTextNode("\n                      ");
                dom.appendChild(el3, el4);
                var el4 = dom.createElement("th");
                var el5 = dom.createTextNode(" ");
                dom.appendChild(el4, el5);
                dom.appendChild(el3, el4);
                var el4 = dom.createTextNode("\n                      ");
                dom.appendChild(el3, el4);
                var el4 = dom.createElement("th");
                var el5 = dom.createTextNode(" Subscription Name ");
                dom.appendChild(el4, el5);
                dom.appendChild(el3, el4);
                var el4 = dom.createTextNode("\n                      ");
                dom.appendChild(el3, el4);
                var el4 = dom.createElement("th");
                var el5 = dom.createTextNode(" Contract Number ");
                dom.appendChild(el4, el5);
                dom.appendChild(el3, el4);
                var el4 = dom.createTextNode("\n                      ");
                dom.appendChild(el3, el4);
                var el4 = dom.createElement("th");
                var el5 = dom.createTextNode(" Quantity ");
                dom.appendChild(el4, el5);
                dom.appendChild(el3, el4);
                var el4 = dom.createTextNode("\n                    ");
                dom.appendChild(el3, el4);
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("\n                    ");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n\n                    ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("tbody");
                var el3 = dom.createTextNode("\n");
                dom.appendChild(el2, el3);
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("                    ");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n                ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(dom.childAt(fragment, [3, 3]), 1, 1);
                return morphs;
              },
              statements: [["block", "each", [["get", "model", ["loc", [null, [100, 28], [100, 33]]]]], [], 0, null, ["loc", [null, [100, 20], [102, 29]]]]],
              locals: [],
              templates: [child0]
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 75,
                  "column": 8
                },
                "end": {
                  "line": 107,
                  "column": 8
                }
              },
              "moduleName": "fusor-ember-cli/templates/subscriptions/select-subscriptions.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("\n          ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "col-md-9");
              var el2 = dom.createTextNode("\n\n            ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("div");
              dom.setAttribute(el2, "class", "alert alert-info rhci-alert");
              var el3 = dom.createTextNode("\n                    You have no additional subscriptions to add to this subscription management application. Please see the\n                    ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("a");
              dom.setAttribute(el3, "href", "https://idp.redhat.com/idp/");
              dom.setAttribute(el3, "target", "_blank");
              var el4 = dom.createTextNode("Red Hat Customer Portal");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode(" for more information.\n            ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n\n");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("          ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 3, 3);
              return morphs;
            },
            statements: [["block", "if", [["get", "hasSubscriptionSavedInModel", ["loc", [null, [84, 18], [84, 45]]]]], [], 0, null, ["loc", [null, [84, 12], [105, 19]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 28,
                "column": 4
              },
              "end": {
                "line": 109,
                "column": 4
              }
            },
            "moduleName": "fusor-ember-cli/templates/subscriptions/select-subscriptions.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            return morphs;
          },
          statements: [["block", "if", [["get", "hasContractNumbersInModelNotInPool", ["loc", [null, [30, 14], [30, 48]]]]], [], 0, null, ["loc", [null, [30, 8], [38, 15]]]], ["block", "if", [["get", "hasSubscriptionPools", ["loc", [null, [40, 14], [40, 34]]]]], [], 1, 2, ["loc", [null, [40, 8], [107, 15]]]]],
          locals: [],
          templates: [child0, child1, child2]
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 122,
                  "column": 14
                },
                "end": {
                  "line": 124,
                  "column": 14
                }
              },
              "moduleName": "fusor-ember-cli/templates/subscriptions/select-subscriptions.hbs"
            },
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "tr-subscription-saved", [], ["subscription", ["subexpr", "@mut", [["get", "sub", ["loc", [null, [123, 53], [123, 56]]]]], [], []]], ["loc", [null, [123, 16], [123, 58]]]]],
            locals: ["sub"],
            templates: []
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 124,
                  "column": 14
                },
                "end": {
                  "line": 130,
                  "column": 14
                }
              },
              "moduleName": "fusor-ember-cli/templates/subscriptions/select-subscriptions.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("tr");
              var el2 = dom.createTextNode("\n                  ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("td");
              dom.setAttribute(el2, "colspan", "4");
              var el3 = dom.createTextNode("\n                    No subscriptions were attached to deployment\n                  ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n                ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() {
              return [];
            },
            statements: [],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 109,
                "column": 4
              },
              "end": {
                "line": 134,
                "column": 4
              }
            },
            "moduleName": "fusor-ember-cli/templates/subscriptions/select-subscriptions.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("\n          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("table");
            dom.setAttribute(el1, "class", "table table-bordered small");
            var el2 = dom.createTextNode("\n            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("thead");
            var el3 = dom.createTextNode("\n              ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("tr");
            var el4 = dom.createTextNode("\n                ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("th");
            var el5 = dom.createTextNode(" ");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n                ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("th");
            var el5 = dom.createTextNode(" Subscription Name ");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n                ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("th");
            var el5 = dom.createTextNode(" Contract Number ");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n                ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("th");
            var el5 = dom.createTextNode(" Quantity ");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n              ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n              ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n\n              ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("tbody");
            var el3 = dom.createTextNode("\n");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("              ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 3]), 1, 1);
            return morphs;
          },
          statements: [["block", "each", [["get", "model", ["loc", [null, [122, 22], [122, 27]]]]], [], 0, 1, ["loc", [null, [122, 14], [130, 23]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 18,
              "column": 0
            },
            "end": {
              "line": 144,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/subscriptions/select-subscriptions.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "row");
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "col-md-9");
          var el3 = dom.createTextNode("\n\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("p");
          var el4 = dom.createTextNode("\n    ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("strong");
          var el5 = dom.createTextNode("Optional");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode(": If you need to ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("strong");
          var el5 = dom.createTextNode("attach more");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode(" subscriptions to ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("strong");
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode(" for the components of your QCI deployment, please do so before proceeding.\n    ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("br");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("  ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [0, 1]);
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(dom.childAt(element0, [1, 5]), 0, 0);
          morphs[1] = dom.createMorphAt(element0, 5, 5);
          morphs[2] = dom.createMorphAt(fragment, 2, 2, contextualElement);
          return morphs;
        },
        statements: [["content", "deploymentController.model.upstream_consumer_name", ["loc", [null, [23, 100], [23, 153]]]], ["block", "unless", [["get", "isStarted", ["loc", [null, [28, 14], [28, 23]]]]], [], 0, 1, ["loc", [null, [28, 4], [134, 15]]]], ["inline", "cancel-back-next", [], ["backRouteName", "subscriptions.management-application", "disableBack", false, "nextRouteName", "subscriptions.review-subscriptions", "disableNext", false, "disableCancel", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [142, 33], [142, 42]]]]], [], []]], ["loc", [null, [138, 0], [142, 44]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 145,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/subscriptions/select-subscriptions.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "showErrorMessage", ["loc", [null, [1, 6], [1, 22]]]]], [], 0, null, ["loc", [null, [1, 0], [11, 7]]]], ["block", "if", [["get", "isLoading", ["loc", [null, [13, 6], [13, 15]]]]], [], 1, 2, ["loc", [null, [13, 0], [144, 7]]]]],
      locals: [],
      templates: [child0, child1, child2]
    };
  })());
});
define("fusor-ember-cli/templates/subscriptions", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 4,
                  "column": 4
                },
                "end": {
                  "line": 10,
                  "column": 4
                }
              },
              "moduleName": "fusor-ember-cli/templates/subscriptions.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("a");
              dom.setAttribute(el1, "data-qci", "review-subscriptions");
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("span");
              dom.setAttribute(el2, "class", "hanging-indent");
              var el3 = dom.createTextNode("\n          ");
              dom.appendChild(el2, el3);
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("A. Review Subscriptions\n        ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n      ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1]), 1, 1);
              return morphs;
            },
            statements: [["content", "stepNumberSubscriptions", ["loc", [null, [7, 10], [7, 37]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 3,
                "column": 2
              },
              "end": {
                "line": 11,
                "column": 2
              }
            },
            "moduleName": "fusor-ember-cli/templates/subscriptions.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "link-to", ["subscriptions.review-subscriptions"], ["tagName", "li"], 0, null, ["loc", [null, [4, 4], [10, 16]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 12,
                  "column": 4
                },
                "end": {
                  "line": 18,
                  "column": 4
                }
              },
              "moduleName": "fusor-ember-cli/templates/subscriptions.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("a");
              dom.setAttribute(el1, "data-qci", "content-provider");
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("span");
              dom.setAttribute(el2, "class", "hanging-indent");
              var el3 = dom.createTextNode("\n          ");
              dom.appendChild(el2, el3);
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("A. Content Provider\n        ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n      ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1]), 1, 1);
              return morphs;
            },
            statements: [["content", "stepNumberSubscriptions", ["loc", [null, [15, 10], [15, 37]]]]],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.10",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 21,
                    "column": 8
                  },
                  "end": {
                    "line": 27,
                    "column": 8
                  }
                },
                "moduleName": "fusor-ember-cli/templates/subscriptions.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("          ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("a");
                dom.setAttribute(el1, "data-qci", "review-subscriptions");
                var el2 = dom.createTextNode("\n            ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("span");
                dom.setAttribute(el2, "class", "hanging-indent");
                var el3 = dom.createTextNode("\n              ");
                dom.appendChild(el2, el3);
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("B. Review Subscriptions\n            ");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n          ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1]), 1, 1);
                return morphs;
              },
              statements: [["content", "stepNumberSubscriptions", ["loc", [null, [24, 14], [24, 41]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 20,
                  "column": 4
                },
                "end": {
                  "line": 29,
                  "column": 4
                }
              },
              "moduleName": "fusor-ember-cli/templates/subscriptions.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              return morphs;
            },
            statements: [["block", "link-to", ["subscriptions.review-subscriptions"], ["tagName", "li", "disabled", ["subexpr", "@mut", [["get", "disableTabReviewSubsciptions", ["loc", [null, [21, 78], [21, 106]]]]], [], []]], 0, null, ["loc", [null, [21, 8], [27, 20]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        var child2 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.10",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 31,
                    "column": 8
                  },
                  "end": {
                    "line": 37,
                    "column": 8
                  }
                },
                "moduleName": "fusor-ember-cli/templates/subscriptions.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("          ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("a");
                dom.setAttribute(el1, "data-qci", "management-application");
                var el2 = dom.createTextNode("\n            ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("span");
                dom.setAttribute(el2, "class", "hanging-indent");
                var el3 = dom.createTextNode("\n              ");
                dom.appendChild(el2, el3);
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("B. Subscription Management Application\n            ");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n          ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1]), 1, 1);
                return morphs;
              },
              statements: [["content", "stepNumberSubscriptions", ["loc", [null, [34, 14], [34, 41]]]]],
              locals: [],
              templates: []
            };
          })();
          var child1 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.10",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 39,
                    "column": 8
                  },
                  "end": {
                    "line": 45,
                    "column": 8
                  }
                },
                "moduleName": "fusor-ember-cli/templates/subscriptions.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("          ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("a");
                dom.setAttribute(el1, "data-qci", "select-subscriptions");
                var el2 = dom.createTextNode("\n            ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("span");
                dom.setAttribute(el2, "class", "hanging-indent");
                var el3 = dom.createTextNode("\n              ");
                dom.appendChild(el2, el3);
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("C. Add Subscriptions\n            ");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n          ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1]), 1, 1);
                return morphs;
              },
              statements: [["content", "stepNumberSubscriptions", ["loc", [null, [42, 14], [42, 41]]]]],
              locals: [],
              templates: []
            };
          })();
          var child2 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.10",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 47,
                    "column": 8
                  },
                  "end": {
                    "line": 53,
                    "column": 8
                  }
                },
                "moduleName": "fusor-ember-cli/templates/subscriptions.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("          ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("a");
                dom.setAttribute(el1, "data-qci", "review-subscriptions");
                var el2 = dom.createTextNode("\n            ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("span");
                dom.setAttribute(el2, "class", "hanging-indent");
                var el3 = dom.createTextNode("\n              ");
                dom.appendChild(el2, el3);
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("D. Review Subscriptions\n            ");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n          ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1]), 1, 1);
                return morphs;
              },
              statements: [["content", "stepNumberSubscriptions", ["loc", [null, [50, 14], [50, 41]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.10",
              "loc": {
                "source": null,
                "start": {
                  "line": 29,
                  "column": 4
                },
                "end": {
                  "line": 54,
                  "column": 4
                }
              },
              "moduleName": "fusor-ember-cli/templates/subscriptions.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(3);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
              morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "link-to", ["subscriptions.management-application"], ["tagName", "li", "disabled", ["subexpr", "@mut", [["get", "disableTabManagementApplication", ["loc", [null, [31, 80], [31, 111]]]]], [], []]], 0, null, ["loc", [null, [31, 8], [37, 20]]]], ["block", "link-to", ["subscriptions.select-subscriptions"], ["tagName", "li", "disabled", ["subexpr", "@mut", [["get", "disableTabSelectSubsciptions", ["loc", [null, [39, 78], [39, 106]]]]], [], []]], 1, null, ["loc", [null, [39, 8], [45, 20]]]], ["block", "link-to", ["subscriptions.review-subscriptions"], ["tagName", "li", "disabled", ["subexpr", "@mut", [["get", "disableTabSelectSubsciptions", ["loc", [null, [47, 78], [47, 106]]]]], [], []]], 2, null, ["loc", [null, [47, 8], [53, 20]]]]],
            locals: [],
            templates: [child0, child1, child2]
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.10",
            "loc": {
              "source": null,
              "start": {
                "line": 11,
                "column": 2
              },
              "end": {
                "line": 55,
                "column": 2
              }
            },
            "moduleName": "fusor-ember-cli/templates/subscriptions.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "link-to", ["subscriptions.credentials"], ["tagName", "li", "disabled", ["subexpr", "@mut", [["get", "disableTabCredentials", ["loc", [null, [12, 65], [12, 86]]]]], [], []]], 0, null, ["loc", [null, [12, 4], [18, 16]]]], ["block", "if", [["get", "isDisconnected", ["loc", [null, [20, 10], [20, 24]]]]], [], 1, 2, ["loc", [null, [20, 4], [54, 11]]]]],
          locals: [],
          templates: [child0, child1, child2]
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 57,
              "column": 0
            }
          },
          "moduleName": "fusor-ember-cli/templates/subscriptions.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["block", "if", [["get", "useExistingManifest", ["loc", [null, [3, 8], [3, 27]]]]], [], 0, 1, ["loc", [null, [3, 2], [55, 9]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 58,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/subscriptions.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "wizard-step", [], ["outlet", ["subexpr", "@mut", [["get", "outlet", ["loc", [null, [1, 22], [1, 28]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [57, 16]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("fusor-ember-cli/templates/thead-discovered-hosts", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 5,
              "column": 6
            },
            "end": {
              "line": 7,
              "column": 6
            }
          },
          "moduleName": "fusor-ember-cli/templates/thead-discovered-hosts.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "column-name", [], ["name", "Host Name", "col_name", "name", "sort_by", ["subexpr", "@mut", [["get", "sort_by", ["loc", [null, [6, 63], [6, 70]]]]], [], []], "dir", ["subexpr", "@mut", [["get", "dir", ["loc", [null, [6, 75], [6, 78]]]]], [], []]], ["loc", [null, [6, 8], [6, 80]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 10,
              "column": 6
            },
            "end": {
              "line": 12,
              "column": 6
            }
          },
          "moduleName": "fusor-ember-cli/templates/thead-discovered-hosts.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "column-name", [], ["name", "MAC Address", "col_name", "mac", "sort_by", ["subexpr", "@mut", [["get", "sort_by", ["loc", [null, [11, 64], [11, 71]]]]], [], []], "dir", ["subexpr", "@mut", [["get", "dir", ["loc", [null, [11, 76], [11, 79]]]]], [], []]], ["loc", [null, [11, 8], [11, 81]]]]],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 15,
              "column": 6
            },
            "end": {
              "line": 17,
              "column": 6
            }
          },
          "moduleName": "fusor-ember-cli/templates/thead-discovered-hosts.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "column-name", [], ["name", "Host Type", "col_name", "is_virtual", "sort_by", ["subexpr", "@mut", [["get", "sort_by", ["loc", [null, [16, 69], [16, 76]]]]], [], []], "dir", ["subexpr", "@mut", [["get", "dir", ["loc", [null, [16, 81], [16, 84]]]]], [], []]], ["loc", [null, [16, 8], [16, 86]]]]],
        locals: [],
        templates: []
      };
    })();
    var child3 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 20,
              "column": 6
            },
            "end": {
              "line": 22,
              "column": 6
            }
          },
          "moduleName": "fusor-ember-cli/templates/thead-discovered-hosts.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "column-name", [], ["name", "CPU", "col_name", "cpus", "sort_by", ["subexpr", "@mut", [["get", "sort_by", ["loc", [null, [21, 57], [21, 64]]]]], [], []], "dir", ["subexpr", "@mut", [["get", "dir", ["loc", [null, [21, 69], [21, 72]]]]], [], []]], ["loc", [null, [21, 8], [21, 74]]]]],
        locals: [],
        templates: []
      };
    })();
    var child4 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 25,
              "column": 6
            },
            "end": {
              "line": 27,
              "column": 6
            }
          },
          "moduleName": "fusor-ember-cli/templates/thead-discovered-hosts.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "column-name", [], ["name", "Memory", "col_name", "memory_human_size", "sort_by", ["subexpr", "@mut", [["get", "sort_by", ["loc", [null, [26, 73], [26, 80]]]]], [], []], "dir", ["subexpr", "@mut", [["get", "dir", ["loc", [null, [26, 85], [26, 88]]]]], [], []]], ["loc", [null, [26, 8], [26, 90]]]]],
        locals: [],
        templates: []
      };
    })();
    var child5 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 30,
              "column": 6
            },
            "end": {
              "line": 32,
              "column": 6
            }
          },
          "moduleName": "fusor-ember-cli/templates/thead-discovered-hosts.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "column-name", [], ["name", "# Disks", "col_name", "disk_count", "sort_by", ["subexpr", "@mut", [["get", "sort_by", ["loc", [null, [31, 67], [31, 74]]]]], [], []], "dir", ["subexpr", "@mut", [["get", "dir", ["loc", [null, [31, 79], [31, 82]]]]], [], []]], ["loc", [null, [31, 8], [31, 84]]]]],
        locals: [],
        templates: []
      };
    })();
    var child6 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 35,
              "column": 6
            },
            "end": {
              "line": 37,
              "column": 6
            }
          },
          "moduleName": "fusor-ember-cli/templates/thead-discovered-hosts.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "column-name", [], ["name", "Disk Space", "col_name", "disks_human_size", "sort_by", ["subexpr", "@mut", [["get", "sort_by", ["loc", [null, [36, 76], [36, 83]]]]], [], []], "dir", ["subexpr", "@mut", [["get", "dir", ["loc", [null, [36, 88], [36, 91]]]]], [], []]], ["loc", [null, [36, 8], [36, 93]]]]],
        locals: [],
        templates: []
      };
    })();
    var child7 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 40,
              "column": 6
            },
            "end": {
              "line": 42,
              "column": 6
            }
          },
          "moduleName": "fusor-ember-cli/templates/thead-discovered-hosts.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "column-name", [], ["name", "Network", "col_name", "subnet_to_s", "sort_by", ["subexpr", "@mut", [["get", "sort_by", ["loc", [null, [41, 68], [41, 75]]]]], [], []], "dir", ["subexpr", "@mut", [["get", "dir", ["loc", [null, [41, 80], [41, 83]]]]], [], []]], ["loc", [null, [41, 8], [41, 85]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 46,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/thead-discovered-hosts.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("thead");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("tr");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("th");
        dom.setAttribute(el3, "class", "rhev-checkbox");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("th");
        dom.setAttribute(el3, "class", "rhev-hostname");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("th");
        dom.setAttribute(el3, "class", "rhev-mac-address");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("th");
        dom.setAttribute(el3, "class", "rhev-host-type text-center");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("th");
        dom.setAttribute(el3, "class", "rhev-cpu text-center");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("th");
        dom.setAttribute(el3, "class", "rhev-memory text-center");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("th");
        dom.setAttribute(el3, "class", "rhev-disks text-center");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("th");
        dom.setAttribute(el3, "class", "rhev-diskspace text-center");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("th");
        dom.setAttribute(el3, "class", "rhev-network");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0, 1]);
        var morphs = new Array(8);
        morphs[0] = dom.createMorphAt(dom.childAt(element0, [3]), 1, 1);
        morphs[1] = dom.createMorphAt(dom.childAt(element0, [5]), 1, 1);
        morphs[2] = dom.createMorphAt(dom.childAt(element0, [7]), 1, 1);
        morphs[3] = dom.createMorphAt(dom.childAt(element0, [9]), 1, 1);
        morphs[4] = dom.createMorphAt(dom.childAt(element0, [11]), 1, 1);
        morphs[5] = dom.createMorphAt(dom.childAt(element0, [13]), 1, 1);
        morphs[6] = dom.createMorphAt(dom.childAt(element0, [15]), 1, 1);
        morphs[7] = dom.createMorphAt(dom.childAt(element0, [17]), 1, 1);
        return morphs;
      },
      statements: [["block", "link-to", ["engine.discovered-host", ["subexpr", "query-params", [], ["sort_by", "name", "dir", ["get", "sortByDirection", ["loc", [null, [5, 75], [5, 90]]]]], ["loc", [null, [5, 42], [5, 91]]]]], [], 0, null, ["loc", [null, [5, 6], [7, 18]]]], ["block", "link-to", ["engine.discovered-host", ["subexpr", "query-params", [], ["sort_by", "mac", "dir", ["get", "sortByDirection", ["loc", [null, [10, 74], [10, 89]]]]], ["loc", [null, [10, 42], [10, 90]]]]], [], 1, null, ["loc", [null, [10, 6], [12, 18]]]], ["block", "link-to", ["engine.discovered-host", ["subexpr", "query-params", [], ["sort_by", "is_virtual", "dir", ["get", "sortByDirection", ["loc", [null, [15, 81], [15, 96]]]]], ["loc", [null, [15, 42], [15, 97]]]]], [], 2, null, ["loc", [null, [15, 6], [17, 18]]]], ["block", "link-to", ["engine.discovered-host", ["subexpr", "query-params", [], ["sort_by", "cpus", "dir", ["get", "sortByDirection", ["loc", [null, [20, 75], [20, 90]]]]], ["loc", [null, [20, 42], [20, 91]]]]], [], 3, null, ["loc", [null, [20, 6], [22, 18]]]], ["block", "link-to", ["engine.discovered-host", ["subexpr", "query-params", [], ["sort_by", "memory_human_size", "dir", ["get", "sortByDirection", ["loc", [null, [25, 88], [25, 103]]]]], ["loc", [null, [25, 42], [25, 104]]]]], [], 4, null, ["loc", [null, [25, 6], [27, 18]]]], ["block", "link-to", ["engine.discovered-host", ["subexpr", "query-params", [], ["sort_by", "disk_count", "dir", ["get", "sortByDirection", ["loc", [null, [30, 81], [30, 96]]]]], ["loc", [null, [30, 42], [30, 97]]]]], [], 5, null, ["loc", [null, [30, 6], [32, 18]]]], ["block", "link-to", ["engine.discovered-host", ["subexpr", "query-params", [], ["sort_by", "disks_human_size", "dir", ["get", "sortByDirection", ["loc", [null, [35, 87], [35, 102]]]]], ["loc", [null, [35, 42], [35, 103]]]]], [], 6, null, ["loc", [null, [35, 6], [37, 18]]]], ["block", "link-to", ["engine.discovered-host", ["subexpr", "query-params", [], ["sort_by", "subnet_to_s", "dir", ["get", "sortByDirection", ["loc", [null, [40, 82], [40, 97]]]]], ["loc", [null, [40, 42], [40, 98]]]]], [], 7, null, ["loc", [null, [40, 6], [42, 18]]]]],
      locals: [],
      templates: [child0, child1, child2, child3, child4, child5, child6, child7]
    };
  })());
});
define("fusor-ember-cli/templates/where-install", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 9,
              "column": 6
            },
            "end": {
              "line": 13,
              "column": 6
            }
          },
          "moduleName": "fusor-ember-cli/templates/where-install.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          var el2 = dom.createTextNode("\n          Install CloudForms on Red Hat Virtualization\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [1]);
          var morphs = new Array(1);
          morphs[0] = dom.createAttrMorph(element1, 'class');
          return morphs;
        },
        statements: [["attribute", "class", ["concat", [["subexpr", "if", [["get", "disableRHEV", ["loc", [null, [10, 26], [10, 37]]]], "disabled"], [], ["loc", [null, [10, 21], [10, 50]]]]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.10",
          "loc": {
            "source": null,
            "start": {
              "line": 17,
              "column": 6
            },
            "end": {
              "line": 24,
              "column": 6
            }
          },
          "moduleName": "fusor-ember-cli/templates/where-install.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          var el2 = dom.createTextNode("\n          Install CloudForms on ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n          ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("p");
          dom.setAttribute(el2, "style", "margin-left:16px;");
          dom.setAttribute(el2, "class", "explanatory-text");
          var el3 = dom.createTextNode("\n            Able to split virtualization workloads across multiple controller nodes\n          ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createAttrMorph(element0, 'class');
          morphs[1] = dom.createMorphAt(element0, 1, 1);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", ["inline-block ", ["subexpr", "if", [["get", "disableOpenStack", ["loc", [null, [18, 39], [18, 55]]]], "disabled"], [], ["loc", [null, [18, 34], [18, 68]]]]]]], ["content", "fullnameOpenStack", ["loc", [null, [19, 32], [19, 53]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.10",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 36,
            "column": 0
          }
        },
        "moduleName": "fusor-ember-cli/templates/where-install.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "col-md-9");
        var el3 = dom.createTextNode("\n\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        var el4 = dom.createTextNode("\n      Select a product to create and manage virtual machines.\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "ident-radio");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "ident-radio");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element2 = dom.childAt(fragment, [0, 1]);
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(dom.childAt(element2, [3]), 1, 1);
        morphs[1] = dom.createMorphAt(dom.childAt(element2, [5]), 1, 1);
        morphs[2] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        return morphs;
      },
      statements: [["block", "radio-button", [], ["value", "RHEV", "groupValue", ["subexpr", "@mut", [["get", "cfmeInstallLoc", ["loc", [null, [9, 46], [9, 60]]]]], [], []], "changed", "cfmeLocationChanged", "id", "install_on_rhev", "disabled", ["subexpr", "@mut", [["get", "disableRHEVradio", ["loc", [null, [9, 121], [9, 137]]]]], [], []], "dataQci", "rhevCfmeInstallLoc"], 0, null, ["loc", [null, [9, 6], [13, 23]]]], ["block", "radio-button", [], ["value", "OpenStack", "groupValue", ["subexpr", "@mut", [["get", "cfmeInstallLoc", ["loc", [null, [17, 51], [17, 65]]]]], [], []], "changed", "cfmeLocationChanged", "id", "install_on_openstack", "disabled", ["subexpr", "@mut", [["get", "disableOpenstackradio", ["loc", [null, [17, 131], [17, 152]]]]], [], []], "dataQci", "openstackCfmeInstallLoc"], 1, null, ["loc", [null, [17, 6], [24, 23]]]], ["inline", "cancel-back-next", [], ["backRouteName", ["subexpr", "@mut", [["get", "backRouteName", ["loc", [null, [30, 33], [30, 46]]]]], [], []], "disableBack", false, "nextRouteName", "cloudforms.cfme-configuration", "disableNext", ["subexpr", "@mut", [["get", "isInvalidCfmeInstallLocation", ["loc", [null, [33, 31], [33, 59]]]]], [], []], "disableCancel", ["subexpr", "@mut", [["get", "isStarted", ["loc", [null, [34, 33], [34, 42]]]]], [], []], "deploymentName", ["subexpr", "@mut", [["get", "deploymentName", ["loc", [null, [35, 34], [35, 48]]]]], [], []]], ["loc", [null, [30, 0], [35, 50]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define('fusor-ember-cli/utils/foreman-task-util', ['exports', 'ember', 'ic-ajax'], function (exports, _ember, _icAjax) {
  var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

  var Promise = _ember['default'].RSVP.Promise;

  var ForemanTaskUtil = (function () {
    function ForemanTaskUtil(csrfToken) {
      _classCallCheck(this, ForemanTaskUtil);

      this._csrfToken = csrfToken;
      this._uriRoot = window.location.protocol + '//' + window.location.host;
      this._foremanApiPath = '/foreman_tasks/api';
      this._foremanApiUri = '' + this._uriRoot + this._foremanApiPath;
      this._resumePath = '/tasks/bulk_resume';
      this._resumeUri = '' + this._foremanApiUri + this._resumePath;
    }

    _createClass(ForemanTaskUtil, [{
      key: 'resume',
      value: function resume(taskId) {
        return (0, _icAjax['default'])({
          url: this._resumeUri,
          type: 'POST',
          headers: {
            "Accept": "application/json",
            "Content-Type": "application/json",
            "X-CSRF-Token": this._csrfToken
          },
          data: JSON.stringify({ 'search': taskId })
        });
      }
    }]);

    return ForemanTaskUtil;
  })();

  exports['default'] = ForemanTaskUtil;
});
// ForemanTaskUtil: Wrappers around driving foreman tasks
define('fusor-ember-cli/utils/humanize', ['exports'], function (exports) {
  // Humanize -- helper module for humanizing data values
  // Delegates raw -> human to filesize vendor lib
  // Also offers limited human -> raw
  //
  // NOTE: Unfortuantely, filesize comes in from the global namespace via
  // app.import(bower_componets/...
  // TODO: Shim filesize so we don't pollute the global space.

  /* global filesize:false */

  exports['default'] = {
    rawToHuman: filesize,
    humanToRaw: humanToRaw
  };

  var labelMultiplier = { 'B': 0, 'KB': 1, 'MB': 2, 'GB': 3, 'TB': 4 };
  var labelRegex = /^(\d+|\d+\.\d+)\ (TB|GB|MB|KB|B)$/;

  function humanToRaw(inStr) {
    var trimmedStr = inStr.trim();
    var match = labelRegex.exec(trimmedStr);

    if (!match) {
      throw 'Invalid data string passed to Humanize.humanToRaw: ' + inStr;
    }

    var fval = parseFloat(match[1]);
    var multiplier = labelMultiplier[match[2]];

    for (var i = multiplier; i > 0; i--) {
      fval *= 1024;
    }

    return parseInt(fval, 10); // Explicit 10 radix
  }
});
define('fusor-ember-cli/utils/osp/osp-node-manager', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Object.extend({
    init: function init() {
      if (!this.get('nodes')) {
        this.set('nodes', []);
      }
    },

    driverMatchesNode: function driverMatchesNode(node) {
      var nodeDriver = this.get('driver');

      if (nodeDriver !== this.get('driver')) {
        return false;
      }

      if (nodeDriver === 'pxe_ipmitool') {
        return node.get('driver_info.ipmi_address') === this.get('address') && node.get('driver_info.ipmi_username') === this.get('username');
      }
      return node.get('driver_info.ssh_address') === this.get('address') && node.get('driver_info.ssh_username') === this.get('username');
    },

    setDriverInfoFromNode: function setDriverInfoFromNode(node) {
      var nodeDriver = node.get('driver');

      this.set('driver', nodeDriver);

      if (nodeDriver === 'pxe_ipmitool') {
        this.set('address', node.get('driver_info.ipmi_address'));
        this.set('username', node.get('driver_info.ipmi_username'));
      } else {
        this.set('address', node.get('driver_info.ssh_address'));
        this.set('username', node.get('driver_info.ssh_username'));
      }
    },

    putNode: function putNode(newNode) {
      var found = false;
      var nodes = this.get('nodes');

      for (var i = 0; i < nodes.length; i++) {
        var node = nodes[i];
        if (node.id === newNode.id) {
          nodes[i] = newNode;
          found = true;
        }
      }

      if (!found) {
        this.get('nodes').pushObject(newNode);
      }
    },

    removeNode: function removeNode(node) {
      var nodes = this.get('nodes');
      if (this.driverMatchesNode(node)) {
        this.set('nodes', nodes.without(node));
      }
    }
  });
});
define('fusor-ember-cli/utils/subscription-util', ['exports', 'ember', 'ic-ajax'], function (exports, _ember, _icAjax) {
  var Promise = _ember['default'].RSVP.Promise;

  var validationUrlRoot = '/fusor/api/v21/subscriptions/validate?deployment_id=';

  var SubscriptionUtil = {
    validate: function validate(deploymentId) {
      return (0, _icAjax['default'])({
        url: validationUrlRoot + deploymentId,
        type: 'GET',
        headers: {
          "Accept": "application/json",
          "Content-Type": "application/json"
        }
      }).then(function (body) {
        return body.valid;
      });
    }
  };

  exports['default'] = SubscriptionUtil;
});
define('fusor-ember-cli/utils/validation-util', ['exports'], function (exports) {
  // validation-util.js
  //============================================================
  // Create new regex from multiple line string, zipped up w/join
  // No regex flags: RegExp(string, flags)
  // NOTE: Regex backslashes must be escaped since this is not a literal regex!
  // No regex subgroupings js?
  var ipRangeRegex = new RegExp(['\\b(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)', '\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)', '\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)', '\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\b'].join(''), '');

  var CIDRFormatRegex = /\/(3[0-2]|[1-2]?[0-9])$/;

  var mgmtAppNameRegex = new RegExp(/^([a-zA-Z0-9\-\.\_]+)$/);

  var ValidationUtil = {
    validateIpRange: function validateIpRange(testString) {
      return !!testString && ipRangeRegex.test(testString.trim());
    },
    validateCIDRFormat: function validateCIDRFormat(testString) {
      return !!testString && CIDRFormatRegex.test(testString.trim());
    },
    validateIpRangeAndFormat: function validateIpRangeAndFormat(testString) {
      return this.validateIpRange(testString) && this.validateCIDRFormat(testString);
    },
    validateMgmtAppName: function validateMgmtAppName(testString) {
      return !!testString && mgmtAppNameRegex.test(testString.trim());
    }
  };

  exports['default'] = ValidationUtil;
});
define('fusor-ember-cli/utils/validators', ['exports', 'ember'], function (exports, _ember) {

  var Validator = _ember['default'].Object.extend({
    isValid: function isValid(value) {
      //override me
      return false;
    },

    isInvalid: function isInvalid(value) {
      return !this.isValid(value);
    },

    getMessages: function getMessages(value) {
      if (this.isValid(value)) {
        return [];
      }
      var message = this.get('message');
      if (message) {
        return [message];
      }
      var messages = this.get('messages');
      return messages ? messages : [value + ' is invalid'];
    }
  });

  var AllValidator = Validator.extend({
    isValid: function isValid(value) {
      var validators = this.get('validators');
      return validators ? validators.every(function (validator) {
        return validator.isValid(value);
      }) : true;
    },

    getMessages: function getMessages(value) {
      var message = this.get('message'),
          messages = [],
          validators = this.get('validators');

      if (message) {
        return this.isValid(value) ? [] : [message];
      }

      if (validators) {
        validators.forEach(function (validator) {
          return validator.getMessages(value).forEach(function (message) {
            return messages.push(message);
          });
        });
      }

      return messages;
    }
  });

  var AnyValidator = Validator.extend({
    isValid: function isValid(value) {
      var validators = this.get('validators');
      return validators ? validators.any(function (validator) {
        return validator.isValid(value);
      }) : true;
    }
  });

  var PresenceValidator = Validator.extend({
    message: 'This field cannot be blank.',

    isValid: function isValid(value) {
      return _ember['default'].isPresent(value);
    }
  });

  // expects values to be set during construction:
  // equals;
  var EqualityValidator = Validator.extend({
    message: 'This value does not match.',

    isValid: function isValid(value) {
      var equals = this.get('equals');
      var doesNotEqual = this.get('doesNotEqual');

      return (_ember['default'].isBlank(equals) || value === equals) && (_ember['default'].isBlank(doesNotEqual) || value !== doesNotEqual);
    },

    getMessages: function getMessages(value) {
      var equals = this.get('equals');
      var doesNotEqual = this.get('doesNotEqual');

      if (_ember['default'].isPresent(equals) && value !== equals) {
        return ['This value does not match.'];
      }

      if (_ember['default'].isPresent(doesNotEqual) && value === doesNotEqual) {
        return ['must not equal ' + doesNotEqual];
      }

      return [];
    }
  });

  var NumberValidator = Validator.extend({
    isValid: function isValid(value) {
      var min = this.get('min'),
          max = this.get('max');

      return (_ember['default'].isBlank(min) || value >= min) && (_ember['default'].isBlank(max) || value <= max);
    },

    getMessages: function getMessages(value) {
      var min = this.get('min'),
          max = this.get('max');

      if (_ember['default'].isPresent(min) && value < min) {
        return ['This field must be greater than or equal to ' + min + '.'];
      }

      if (_ember['default'].isPresent(max) && value > max) {
        return ['This field must be less than or equal to ' + max + '.'];
      }

      return [];
    }
  });

  var IntegerValidator = Validator.extend({
    message: 'This field must be an integer.',

    isValid: function isValid(value) {
      //http://stackoverflow.com/questions/14636536/how-to-check-if-a-variable-is-an-integer-in-javascript
      return !isNaN(value) && (function (x) {
        return (x | 0) === x;
      })(parseFloat(value));
    }
  });

  var LengthValidator = Validator.extend({
    isValid: function isValid(value) {
      var min = this.get('min'),
          max = this.get('max');

      // Allow blanks for optional fields, must use PresenceValidator
      if (_ember['default'].isBlank(value)) {
        return true;
      }

      return (_ember['default'].isBlank(min) || value.length >= min) && (_ember['default'].isBlank(max) || value.length <= max);
    },

    getMessages: function getMessages(value) {
      var min = this.get('min'),
          max = this.get('max');

      if (_ember['default'].isBlank(value)) {
        return [];
      }

      if (_ember['default'].isPresent(min) && value.length < min) {
        return ['This field must be ' + min + ' or more characters.'];
      }

      if (_ember['default'].isPresent(max) && value.length > max) {
        return ['This field must be ' + max + ' characters or less.'];
      }

      return [];
    }
  });

  var PasswordValidator = LengthValidator.extend({ min: 8 });

  var RequiredPasswordValidator = AllValidator.extend({
    validators: [PresenceValidator.create({}), PasswordValidator.create({})]
  });

  // expects values to be set during construction:
  // Array[String] values;
  var UniquenessValidator = Validator.extend({
    message: 'This name is already in use.',

    isValid: function isValid(value) {
      var existingValues = this.get('existingValues');
      if (!existingValues) {
        return true;
      }

      var cleanValue = _ember['default'].typeOf(value) === 'string' ? value.trim() : value;

      if (!this.get('selfIncluded')) {
        return !existingValues.contains(cleanValue);
      }

      var numFound = 0;
      for (var i = 0; i < existingValues.length; i++) {
        var existingValue = _ember['default'].typeOf(existingValues[i]) === 'string' ? existingValues[i].trim() : existingValues[i];
        if (existingValue === cleanValue) {
          numFound++;
        }
        if (numFound > 1) {
          return false;
        }
      }

      return true;
    }
  });

  // expects values to be set during construction:
  // RegExp regExp;
  // String message;
  var RegExpValidator = Validator.extend({
    trim: true,

    isValid: function isValid(value) {
      var trimmedValue = this.get('trim') && _ember['default'].typeOf(value) === 'string' ? value.trim() : value;
      return _ember['default'].isBlank(trimmedValue) || this.get('regExp').test(trimmedValue);
    }
  });

  var AlphaNumericDashUnderscoreValidator = RegExpValidator.extend({
    regExp: new RegExp(/^[A-Za-z0-9_-]*$/),
    message: "This field must contain only 'A-Z', 'a-z', '0-9', '_' or '-' characters."
  });

  var IpRangeValidator = RegExpValidator.extend({
    regExp: new RegExp(['\\b(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)', '\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)', '\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)', '\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\b'].join(''), ''),
    message: 'This is an invalid network range.'
  });

  var IpAddressValidator = RegExpValidator.extend({
    regExp: new RegExp(['^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)', '\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)', '\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)', '\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$'].join(''), ''),
    message: 'This is an invalid ip address.'
  });

  var CidrValidator = RegExpValidator.extend({
    regExp: new RegExp(['^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}', '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])', '(\/([0-9]|[1-2][0-9]|3[0-2]))$'].join(''), ''),
    message: 'This is an invalid CIDR notation.'
  });

  // expects values to be set during construction:
  // String subnet;
  var IpSubnetValidator = Validator.extend({
    ipAddressValidator: IpAddressValidator.create(),
    cidrValidator: CidrValidator.create(),

    isValidSubnet: function isValidSubnet() {
      var subnetStr = this.get('subnet');
      return _ember['default'].isPresent(subnetStr) && this.get('cidrValidator').isValid(subnetStr);
    },

    isValidIpAddress: function isValidIpAddress(ipAddress) {
      return _ember['default'].isPresent(ipAddress) && this.get('ipAddressValidator').isValid(ipAddress);
    },

    isValid: function isValid(value) {
      var ipAddress = undefined,
          subnet = undefined;
      var subnetStr = this.get('subnet');

      if (_ember['default'].isEmpty(value) || !this.isValidSubnet() || !this.isValidIpAddress(value)) {
        return false;
      }

      ipAddress = new Address4(value);
      subnet = new Address4(subnetStr);
      return ipAddress.isInSubnet(subnet);
    },

    getMessages: function getMessages(value) {
      var subnet = this.get('subnet');

      if (_ember['default'].isEmpty(value) || !this.isValidIpAddress(value)) {
        return ['This is an invalid ip address.'];
      }

      if (!this.isValidSubnet()) {
        return ['The associated subnet is invalid.'];
      }

      if (!this.isValid(value)) {
        return ['This must belong to subnet ' + subnet + '.'];
      }

      return [];
    }
  });

  var NoSpacesValidator = Validator.extend({
    message: 'This field must not have spaces.',
    isValid: function isValid(value) {
      var spaceRegex = /\s/;
      return !spaceRegex.test(value);
    }
  });

  var MacAddressValidator = RegExpValidator.extend({
    regExp: new RegExp(/^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$/),
    message: 'This is an invalid MAC address.'
  });

  var HostnameValidator = RegExpValidator.extend({
    regExp: new RegExp(/^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]*[A-Za-z0-9])$/),
    message: 'This is an invalid hostname.'
  });

  var HostAddressValidator = AnyValidator.extend({
    validators: [IpAddressValidator.create({}), HostnameValidator.create({})],
    message: 'This is an invalid host or ip address.'
  });

  var NoTrailingSlashValidator = Validator.extend({
    message: 'This field cannot have a trailing slash.',
    isValid: function isValid(value) {
      return value.slice(-1) !== '/';
    }
  });

  var LeadingSlashValidator = Validator.extend({
    message: 'This field must have a leading slash.',
    isValid: function isValid(value) {
      return value.charAt(0) === '/';
    }
  });

  var NoLeadingSlashValidator = Validator.extend({
    message: 'This field must not have a leading slash.',
    isValid: function isValid(value) {
      return value.charAt(0) !== '/';
    }
  });

  var NfsPathValidator = AllValidator.extend({
    validators: [LeadingSlashValidator.create({}), NoTrailingSlashValidator.create({}), NoSpacesValidator.create({})]
  });

  var GlusterPathValidator = AllValidator.extend({
    validators: [NoLeadingSlashValidator.create({}), NoTrailingSlashValidator.create({}), NoSpacesValidator.create({})]
  });

  function validateZipper(zipper) {
    return zipper.map(function (pair) {
      return pair[0].isValid(pair[1]);
    }).reduce(function (lhs, rhs) {
      return lhs && rhs;
    });
  }

  exports.Validator = Validator;
  exports.AllValidator = AllValidator;
  exports.AnyValidator = AnyValidator;
  exports.PresenceValidator = PresenceValidator;
  exports.EqualityValidator = EqualityValidator;
  exports.NumberValidator = NumberValidator;
  exports.IntegerValidator = IntegerValidator;
  exports.LengthValidator = LengthValidator;
  exports.PasswordValidator = PasswordValidator;
  exports.RequiredPasswordValidator = RequiredPasswordValidator;
  exports.UniquenessValidator = UniquenessValidator;
  exports.RegExpValidator = RegExpValidator;
  exports.AlphaNumericDashUnderscoreValidator = AlphaNumericDashUnderscoreValidator;
  exports.IpRangeValidator = IpRangeValidator;
  exports.IpAddressValidator = IpAddressValidator;
  exports.CidrValidator = CidrValidator;
  exports.IpSubnetValidator = IpSubnetValidator;
  exports.HostAddressValidator = HostAddressValidator;
  exports.MacAddressValidator = MacAddressValidator;
  exports.HostnameValidator = HostnameValidator;
  exports.NfsPathValidator = NfsPathValidator;
  exports.GlusterPathValidator = GlusterPathValidator;
  exports.validateZipper = validateZipper;
});
/* global Address4:false */
define('fusor-ember-cli/views/application', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].View.reopen({
    init: function init() {
      this._super();
      var self = this;

      // bind attributes beginning with 'data-'
      _ember['default'].keys(this).forEach(function (key) {
        if (key.substr(0, 5) === 'data-') {
          self.get('attributeBindings').pushObject(key);
        }
      });
    }
  });
});
/* jshint ignore:start */

/* jshint ignore:end */

/* jshint ignore:start */

define('fusor-ember-cli/config/environment', ['ember'], function(Ember) {
  return { 'default': {"modulePrefix":"fusor-ember-cli","environment":"development","baseURL":"/","locationType":"hash","EmberENV":{"FEATURES":{}},"contentSecurityPolicyHeader":"Disabled-Content-Security-Policy","emberDevTools":{"global":true},"APP":{"LOG_ACTIVE_GENERATION":true,"LOG_TRANSITIONS":true,"LOG_VIEW_LOOKUPS":true,"rootElement":"#ember-app","name":"fusor-ember-cli","version":"0.0.0+71b9fc22"},"ember-cli-mirage":{"enabled":false,"usingProxy":false},"contentSecurityPolicy":{"default-src":"'none'","script-src":"'self' 'unsafe-eval'","font-src":"'self'","connect-src":"'self'","img-src":"'self'","style-src":"'self'","media-src":"'self'"},"ember-devtools":{"enabled":true,"global":false},"exportApplicationGlobal":true}};
});

if (!runningTests) {
  require("fusor-ember-cli/app")["default"].create({"LOG_ACTIVE_GENERATION":true,"LOG_TRANSITIONS":true,"LOG_VIEW_LOOKUPS":true,"rootElement":"#ember-app","name":"fusor-ember-cli","version":"0.0.0+71b9fc22"});
}

/* jshint ignore:end */
//# sourceMappingURL=fusor-ember-cli.map